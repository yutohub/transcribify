[
  {
    "start": 640,
    "end": 8676,
    "text": "こんにちは、マーカス・ンです。今日はFlutterを使ってモバイルとウェブ用のNetflixのユーザーインターフェイスを構築する方法をお教えします。"
  },
  {
    "start": 8676,
    "end": 16316,
    "text": "現在の画面サイズに応じて外観やサイズを変更する、再利用可能なレスポンシブ・ウィジェットの作成方法を学びます。"
  },
  {
    "start": 16316,
    "end": 21920,
    "text": "ビデオプレーヤー・パッケージを使用して、ウェブ版アプリにビデオプレーヤーを統合する方法も学びます。"
  },
  {
    "start": 23120,
    "end": 25680,
    "text": "このプロジェクトの組み立て方をお見せするのがとても楽しみだ。"
  },
  {
    "start": 25680,
    "end": 32828,
    "text": "始める前に、私のウェブサイトmarcus-ng.comのFlutterコースをチェックしていただけるとありがたい。"
  },
  {
    "start": 32828,
    "end": 44865,
    "text": "ユーザーインターフェイスの構築、ローカルデバイスのストレージやAPIとのやり取りを教えるだけでなく、ノートアプリから複数のアプリを構築することで、Firebaseを使ってバックエンドを実装する方法も教えます、"
  },
  {
    "start": 44865,
    "end": 50128,
    "text": "からInstagramまで、リアルタイムのチャットでフルスタックのモバイルアプリの開発方法を学ぶことができる。"
  },
  {
    "start": 50128,
    "end": 61040,
    "text": "私のビデオを見ている人のうち、実際に購読している人はごく一部なので、私のコンテンツが気に入ったら、忘れずに購読して通知のベルを押してください。"
  },
  {
    "start": 61040,
    "end": 63113,
    "text": "本当にチャンネルを助けてくれる。"
  },
  {
    "start": 63113,
    "end": 65722,
    "text": "それでは、このビデオをお楽しみください。"
  },
  {
    "start": 65722,
    "end": 72253,
    "text": "フォローしたい場合は、説明にリンクされているGitHubのレポに行き、スターター・プロジェクトをダウンロードするかクローンしてほしい。"
  },
  {
    "start": 72253,
    "end": 75184,
    "text": "スタータープロジェクトブランチに切り替える。"
  },
  {
    "start": 75184,
    "end": 79039,
    "text": "このドロップダウンをクリックし、zipファイルをダウンロードしてください。"
  },
  {
    "start": 81280,
    "end": 84880,
    "text": "このプロジェクトには、このチュートリアルに従うために必要なモックアップ・データが含まれています。"
  },
  {
    "start": 86560,
    "end": 88399,
    "text": "その間にレポを開始することをお忘れなく。"
  },
  {
    "start": 91440,
    "end": 94320,
    "text": "スターター・プロジェクトをダウンロードしたら、ターミナルを開く。"
  },
  {
    "start": 95600,
    "end": 99039,
    "text": "この収録の時点では、Flutter webはベータチャンネルでサポートされている。"
  },
  {
    "start": 99760,
    "end": 103760,
    "text": "flutter channelと入力すると、現在どのチャンネルにいるかを確認できる。"
  },
  {
    "start": 104720,
    "end": 106852,
    "text": "今はベータ・チャンネルにいる。"
  },
  {
    "start": 106852,
    "end": 115840,
    "text": "ベータチャンネルに切り替える必要がある場合は、flutter channel betaと入力し、次にflutter upgradeと入力する。"
  },
  {
    "start": 120800,
    "end": 123284,
    "text": "スターター・プロジェクトを実行してみよう。"
  },
  {
    "start": 123284,
    "end": 125840,
    "text": "まず、pubspec.yamlファイルに入りましょう。"
  },
  {
    "start": 126800,
    "end": 129440,
    "text": "ここでは2つのパッケージを追加した。"
  },
  {
    "start": 129440,
    "end": 133971,
    "text": "まず、Videoplayerはウェブやモバイルでビデオを再生することができる。"
  },
  {
    "start": 133971,
    "end": 141840,
    "text": "つ目のパッケージはFlutterBlockで、このビデオの後半でアプリバーの状態を管理するために使う状態管理パッケージだ。"
  },
  {
    "start": 143040,
    "end": 146640,
    "text": "Videoplayerにはちょっとしたセットアップが必要だ。"
  },
  {
    "start": 147440,
    "end": 151760,
    "text": "info.plistの中に、ns app transport security keyを追加した。"
  },
  {
    "start": 152000,
    "end": 156239,
    "text": "メインのandroidmanifest.xmlの中に、インターネット接続許可を追加した。"
  },
  {
    "start": 158640,
    "end": 160239,
    "text": "data.dartファイルを見てみよう。"
  },
  {
    "start": 162640,
    "end": 166000,
    "text": "Data.dartには、アプリ内で使用するすべてのモックアップ・データが入っている。"
  },
  {
    "start": 166959,
    "end": 179280,
    "text": "これは、コンテンツヘッダー、プレビュー、マイリスト、Netflixオリジナル、トレンドなど、アプリ内のさまざまなコンテンツを表示するために使用しているデータです。"
  },
  {
    "start": 179680,
    "end": 188560,
    "text": "Sintelと呼ばれるオープンソースの動画にリンクしているので、ウェブ版のアプリでその動画を再生することもできる。"
  },
  {
    "start": 190960,
    "end": 196640,
    "text": "data.dartファイルを見てみると、コンテンツモデルとアセットがあることがわかる。"
  },
  {
    "start": 196640,
    "end": 198800,
    "text": "まずは内容を見てみよう。"
  },
  {
    "start": 200000,
    "end": 208399,
    "text": "これは、名前、画像URL、タイトル画像URL、動画URL、説明文、色を持つクラスだけです。"
  },
  {
    "start": 208399,
    "end": 217760,
    "text": "data.dartに戻ってassetsを見てみると、assetsは静的なconst文字列の束を含む単なるクラスであることがわかる、"
  },
  {
    "start": 218320,
    "end": 222720,
    "text": "これにより、アセット内の各画像を直接参照できるようになります。"
  },
  {
    "start": 224400,
    "end": 234240,
    "text": "main.dartに戻って、すでにクリーンアップしてデフォルトのカウンターアプリを削除し、タイトルをFlutter Netflix UIに置き換え、ホームをscaffoldに設定した。"
  },
  {
    "start": 235200,
    "end": 240640,
    "text": "debug show check modeバナーを追加し、それをfalseに設定することで、デバッグバナーを削除することができる。"
  },
  {
    "start": 243200,
    "end": 246080,
    "text": "足場の背景色を黒に変更してみましょう。"
  },
  {
    "start": 250640,
    "end": 256160,
    "text": "ホーム・ウィジェットでは、\"scaffold \"を指す代わりに \"home screen \"と書きましょう。"
  },
  {
    "start": 258400,
    "end": 263280,
    "text": "ホーム画面は、screensディレクトリ内に作成する新しいウィジェットになります。"
  },
  {
    "start": 264720,
    "end": 266960,
    "text": "さあ、新しいホーム画面を作りましょう。"
  },
  {
    "start": 272960,
    "end": 278480,
    "text": "ホーム画面はステートフル・ウィジェットであり、material.dartをインポートすることを忘れないこと。"
  },
  {
    "start": 280480,
    "end": 282880,
    "text": "とりあえず、コンテナを足場に置き換えてみよう。"
  },
  {
    "start": 286080,
    "end": 294240,
    "text": "複数の画面を作成する予定なので、screenディレクトリの中にバレル・ファイルを作成し、home screen.dartをエクスポートします。"
  },
  {
    "start": 295440,
    "end": 299440,
    "text": "main.dartに戻ると、ホーム画面のエラーが表示されているのがわかる。"
  },
  {
    "start": 300080,
    "end": 306720,
    "text": "ホーム画面.dartをインポートする代わりに、screens.dartをインポートすればいい。"
  },
  {
    "start": 307840,
    "end": 315680,
    "text": "これは、ファイル内の複数のスクリーンにアクセスしたいが、インポート文の束でファイルの先頭を詰まらせたくない場合にとても便利である。"
  },
  {
    "start": 317280,
    "end": 323120,
    "text": "最初に作成する2つのウィジェットは、カスタム・アプリ・バーと、ここにあるフローティング・アクション・ボタンです。"
  },
  {
    "start": 324720,
    "end": 335520,
    "text": "カスタムアプリバーでは、Netflixのロゴが左側にあり、アプリバーの残りの幅を占める拡張行ウィジェットがあることがわかる、"
  },
  {
    "start": 335520,
    "end": 337840,
    "text": "3つの異なるアプリバーボタンを含む。"
  },
  {
    "start": 338560,
    "end": 342080,
    "text": "フローティング・アクション・ボタンには、キャスト・アイコンを追加するだけでいい。"
  },
  {
    "start": 342080,
    "end": 349120,
    "text": "ホーム画面.dartに入り、まずフローティング・アクション・ボタン、フローティング・アクション・ボタンを作ろう。"
  },
  {
    "start": 350719,
    "end": 355520,
    "text": "背景色はcolors.gray, 850に設定される。"
  },
  {
    "start": 359120,
    "end": 369359,
    "text": "子はconst、icon、icons.cast、そして最後にunpressedが必要で、これはcastを表示する。"
  },
  {
    "start": 372560,
    "end": 375359,
    "text": "カスタム・アプリ・バーについては、少し下にスクロールしてみよう。"
  },
  {
    "start": 377359,
    "end": 391280,
    "text": "アプリ・バーは好みのサイズを取り込み、アプリ・バーの好みのサイズはscreenSize.widthとなり、高さは50.0となります。"
  },
  {
    "start": 393120,
    "end": 404320,
    "text": "finalSize、screenSizeというビルド関数の先頭でscreenSize変数を作成し、mediaQuery.ofContext.sizeにアクセスします。"
  },
  {
    "start": 407440,
    "end": 410240,
    "text": "これで現在の画面サイズがわかる。"
  },
  {
    "start": 412400,
    "end": 422928,
    "text": "screenSize.widthのサイズで優先サイズを宣言したので、これは画面の全幅であり、高さは50である。"
  },
  {
    "start": 422928,
    "end": 425600,
    "text": "その子はカスタム・アプリ・バーになる。"
  },
  {
    "start": 427760,
    "end": 432000,
    "text": "これは、widgetsというフォルダの中に書く新しいウィジェットです。"
  },
  {
    "start": 432480,
    "end": 441360,
    "text": "ここでまず、バレルファイルであるwidgets.dartを作成し、customAppBar.dartをエクスポートする。"
  },
  {
    "start": 443360,
    "end": 447678,
    "text": "カスタムAppBarファイルのcustomAppBar.dartです。"
  },
  {
    "start": 447678,
    "end": 456056,
    "text": "これはcustomAppBarと呼ばれるステートレス・ウィジェットで、マテリアルをインポートする必要がある。"
  },
  {
    "start": 456056,
    "end": 459840,
    "text": "ホーム画面では、widgets.dartをインポートする必要がある。"
  },
  {
    "start": 462400,
    "end": 464608,
    "text": "これで矢は消えた。"
  },
  {
    "start": 464608,
    "end": 468640,
    "text": "カスタムAppBarでは、まず色を定義しよう。"
  },
  {
    "start": 469920,
    "end": 473600,
    "text": "これは一時的な色になるので、画面上で作業している場所を確認することができる。"
  },
  {
    "start": 474480,
    "end": 476160,
    "text": "子は行ウィジェットになります。"
  },
  {
    "start": 479360,
    "end": 490160,
    "text": "最初のウィジェットはNetflixのロゴで、image.assetsを実行し、assets.dart.netflixlogo0をインポートすることで取得できます。"
  },
  {
    "start": 492000,
    "end": 495440,
    "text": "保存され、Netflixのロゴがかなり大きいことがわかる。"
  },
  {
    "start": 496640,
    "end": 506693,
    "text": "コンテナまで移動すれば、パディングを追加することができる。"
  },
  {
    "start": 506693,
    "end": 512320,
    "text": "ロゴのサイズがほんの少し小さくなった。"
  },
  {
    "start": 513280,
    "end": 519600,
    "text": "ステータスバーからNetflixのロゴを削除するには、行ウィジェットを安全な領域でラップすればよい。"
  },
  {
    "start": 520480,
    "end": 522394,
    "text": "今はいい場所にいる。"
  },
  {
    "start": 522394,
    "end": 525360,
    "text": "サイズボックスを追加して間隔をあけてみよう。"
  },
  {
    "start": 530160,
    "end": 533200,
    "text": "ここでは、子ウィジェットを持つ別の行ウィジェットを追加します。"
  },
  {
    "start": 536000,
    "end": 539382,
    "text": "これは単なるクリック可能なテキスト・ウィジェットになる。"
  },
  {
    "start": 539382,
    "end": 542320,
    "text": "ジェスチャー検出器、onTapがある。"
  },
  {
    "start": 542640,
    "end": 543440,
    "text": "オンタップ。"
  },
  {
    "start": 543440,
    "end": 550232,
    "text": "当面はテレビ番組を印刷するだけだ。"
  },
  {
    "start": 550232,
    "end": 559360,
    "text": "子供は、テキストウィジェット、テレビ番組、スタイルコンストテキストスタイルになります。"
  },
  {
    "start": 561280,
    "end": 566136,
    "text": "色はcolors.white、フォントサイズは16.0。"
  },
  {
    "start": 566136,
    "end": 571920,
    "text": "フォントの太さは、font-weight.w600とします。"
  },
  {
    "start": 573120,
    "end": 579280,
    "text": "残りのアプリ・バーのボタンについては、これをあと2回コピー・ペーストすればいい。"
  },
  {
    "start": 580560,
    "end": 584399,
    "text": "そんなことをしたら、3回繰り返すことになる。"
  },
  {
    "start": 584399,
    "end": 592766,
    "text": "これは、app bar buttonというプライベートなステートレス・ウィジェットになります。"
  },
  {
    "start": 592766,
    "end": 598790,
    "text": "privateにするのは、このファイル内でステートレス・ウィジェットにアクセスするためである。"
  },
  {
    "start": 598790,
    "end": 605040,
    "text": "アプリ・バー・ボタンでは、最後の文字列タイトルと最後の関数onTapを受け取ります。"
  },
  {
    "start": 606400,
    "end": 608055,
    "text": "コンストラクタを生成することができる。"
  },
  {
    "start": 608055,
    "end": 611199,
    "text": "ビルド関数の中に、上で書いたものを貼り付けることができる。"
  },
  {
    "start": 613520,
    "end": 615839,
    "text": "onTapをonTapに置き換える。"
  },
  {
    "start": 619760,
    "end": 622710,
    "text": "テキストをタイトルに置き換えることができる。"
  },
  {
    "start": 622710,
    "end": 633280,
    "text": "ここで上にスクロールすれば、ジェスチャー検出器を外し、アプリバーのボタンに「TV shows」とだけ入力できる。"
  },
  {
    "start": 634240,
    "end": 638403,
    "text": "onTapで、テレビ番組をプリントアウトさせるんだ。"
  },
  {
    "start": 638403,
    "end": 642320,
    "text": "これをもう2回コピーペーストしてみよう。"
  },
  {
    "start": 646560,
    "end": 648000,
    "text": "次のボタンは映画です。"
  },
  {
    "start": 648000,
    "end": 652000,
    "text": "最後のボタンが私のリストになる。"
  },
  {
    "start": 654640,
    "end": 657600,
    "text": "今、私たちはすべてのボタンが互いに非常に接近していることを確認している。"
  },
  {
    "start": 658480,
    "end": 662320,
    "text": "これを解決するには、行ウィジェットを拡張ウィジェットで囲みます。"
  },
  {
    "start": 664320,
    "end": 670560,
    "text": "次に、行の主軸アライメントを主軸アライメントのドットスペースに均等に設定する。"
  },
  {
    "start": 670560,
    "end": 674567,
    "text": "これで、一番上にいるとき、アプリ・バーの色は透明になった。"
  },
  {
    "start": 674567,
    "end": 677840,
    "text": "下にスクロールすると黒くなる。"
  },
  {
    "start": 677840,
    "end": 680640,
    "text": "だから、きれいなフェード効果を持たせたい。"
  },
  {
    "start": 682880,
    "end": 688080,
    "text": "カスタム・アプリ・バーに、最終的なダブル・スクロール・オフセットを取らせることで、これを行うことができる。"
  },
  {
    "start": 691600,
    "end": 693627,
    "text": "スクロールオフセットはオプションとする。"
  },
  {
    "start": 693627,
    "end": 695600,
    "text": "スクロールオフセットはオプションとする。"
  },
  {
    "start": 696000,
    "end": 700880,
    "text": "スクロールオフセットはオプションとし、入力されなければ0.0に設定する。"
  },
  {
    "start": 703040,
    "end": 712480,
    "text": "色については、colors dot orangeを返す代わりに、colors dot block dotに不透明度を付けて書くことにする。"
  },
  {
    "start": 714160,
    "end": 718361,
    "text": "スクロールオフセットをパーセントに変換する必要がある。"
  },
  {
    "start": 718361,
    "end": 726160,
    "text": "スクロールオフセットを350ピクセルで割る。"
  },
  {
    "start": 729280,
    "end": 736400,
    "text": "不透明度は0から1の間でしか設定できないからだ。"
  },
  {
    "start": 738560,
    "end": 740528,
    "text": "それをダブルにする。"
  },
  {
    "start": 740528,
    "end": 746315,
    "text": "ここでやっているのは、スクロール・オフセットを取ることだ。"
  },
  {
    "start": 746315,
    "end": 751167,
    "text": "ユーザーが画面を下にスクロールすると、スクロールオフセットが大きくなる。"
  },
  {
    "start": 751167,
    "end": 753241,
    "text": "それを350で割っている。"
  },
  {
    "start": 753241,
    "end": 758918,
    "text": "オフセットが350になったら、アプリのバーを真っ黒にしたいからだ。"
  },
  {
    "start": 758918,
    "end": 766252,
    "text": "スクロール・オフセットが350より大きく、ここで1より大きい数値が得られた場合、それを1にクランプする。"
  },
  {
    "start": 766252,
    "end": 770969,
    "text": "opacityに1以上の値を渡してもエラーにならない。"
  },
  {
    "start": 770969,
    "end": 778218,
    "text": "そして最後に、不透明度をdoubleで取ることで、350を好きなように変更できるからだ。"
  },
  {
    "start": 778218,
    "end": 784776,
    "text": "アプリを作っているうちに、アプリのバーが黒くフェードアウトするには350がちょうどいいことがわかったんだ。"
  },
  {
    "start": 784776,
    "end": 787914,
    "text": "ホーム画面に戻ろう。"
  },
  {
    "start": 787914,
    "end": 794550,
    "text": "プライベートのスクロールオフセットダブルを作成しよう。"
  },
  {
    "start": 794550,
    "end": 798800,
    "text": "カスタム・アプリ・バーはこの変数を取り込む。"
  },
  {
    "start": 799120,
    "end": 806806,
    "text": "ホーム画面の本体には、カスタムスクロールビューを用意します。"
  },
  {
    "start": 806806,
    "end": 810800,
    "text": "コントローラをインスタンス化して、スクロールオフセットにアクセスできるようにする必要があります。"
  },
  {
    "start": 814160,
    "end": 817200,
    "text": "ScrollController になります。"
  },
  {
    "start": 817680,
    "end": 824560,
    "text": "これで initState 内で scrollController と同じ scrollController を実装できるようになった。"
  },
  {
    "start": 826480,
    "end": 829493,
    "text": "scrollController にリスナーを追加します。"
  },
  {
    "start": 829493,
    "end": 843760,
    "text": "コントローラがスクロールされるたびに、scrollOffsetの状態をscrollController.listenerに等しく設定します。"
  },
  {
    "start": 843760,
    "end": 855803,
    "text": "こうしてスクロール・オフセットの最新値を取得し、アプリ・バーの色を変更します。"
  },
  {
    "start": 855803,
    "end": 861968,
    "text": "scrollController を破棄する dispose メソッドも忘れずに書いておこう。"
  },
  {
    "start": 861968,
    "end": 868000,
    "text": "アプリバーをテストするために、カスタムスクロールビューにスライバーを追加することができます。"
  },
  {
    "start": 868960,
    "end": 872381,
    "text": "最初に追加するのは sliverToBoxAdapter です。"
  },
  {
    "start": 872381,
    "end": 873920,
    "text": "コンテナを追加することができる。"
  },
  {
    "start": 876400,
    "end": 881360,
    "text": "高さを1000とし、色をcolors.blueとする。"
  },
  {
    "start": 884320,
    "end": 888080,
    "text": "今、スキャフォールドの背景が黒であっても、アプリ・バーは実際には透明です。"
  },
  {
    "start": 888960,
    "end": 896903,
    "text": "カスタム・アプリ・バーのcolors.blackをcolors.redのような別の色に設定することで、その違いを見ることができる。"
  },
  {
    "start": 896903,
    "end": 904788,
    "text": "アプリをホット再起動して下にスクロールすると、アプリバーが徐々に赤くなっていくのがわかる。"
  },
  {
    "start": 904788,
    "end": 909116,
    "text": "350ピクセルの制限に達すると、アプリのバーが真っ赤になる。"
  },
  {
    "start": 909116,
    "end": 913949,
    "text": "これを黒に戻そう。"
  },
  {
    "start": 913949,
    "end": 920400,
    "text": "コンテンツのヘッダーを作り始めよう。"
  },
  {
    "start": 921199,
    "end": 934862,
    "text": "これは画像付きのスタック・ウィジェットになり、その上にCintelのタイトルをレイヤーし、縦長のアイコン・ボタン、再生フラット・ボタン、そしてもう1つの縦長のアイコン・ボタンを含む行ウィジェットをレイヤーします。"
  },
  {
    "start": 934862,
    "end": 949840,
    "text": "containerをcontentHeaderに置き換えて、data.dartファイルからCintelのコンテンツであるfeaturedContentを渡します。"
  },
  {
    "start": 952080,
    "end": 961440,
    "text": "widgets.dartの内部で、contentHeader.dartをエクスポートし、contentHeader.dartファイルを作成します。"
  },
  {
    "start": 963840,
    "end": 974400,
    "text": "これはステートレス・ウィジェット、contentHeader、importMaterialで、featuredContentというコンテンツを取り込む。"
  },
  {
    "start": 979040,
    "end": 986354,
    "text": "コンストラクタを生成したら、まずコンテナを削除してスタック・ウィジェットに置き換える。"
  },
  {
    "start": 986354,
    "end": 993360,
    "text": "スタックの最初のアイテムは、高さ500.0のコンテナになります。"
  },
  {
    "start": 993920,
    "end": 1005742,
    "text": "Cintel画像を追加するには、decorationBoxDecorationを実行し、画像をdecorationImageに設定します。"
  },
  {
    "start": 1005742,
    "end": 1018022,
    "text": "画像はassetImageFeaturedContent.imageUrlとなり、フィットはboxFit.coverとなります。"
  },
  {
    "start": 1018022,
    "end": 1020588,
    "text": "これで画像が表示された。"
  },
  {
    "start": 1020588,
    "end": 1027223,
    "text": "UIをもう一度見てみると、画像がアプリバーの後ろにあることがわかる。"
  },
  {
    "start": 1027223,
    "end": 1041260,
    "text": "ホーム画面に戻り、extendBodyBehindAppBarという別のパラメータをscaffoldに追加し、これをtrueに設定することで簡単に修正できる。"
  },
  {
    "start": 1041260,
    "end": 1052879,
    "text": "contentHeaderも画像の上にグラデーションを重ねているので、下から上に向かって黒から透明になっているのがわかります。"
  },
  {
    "start": 1055919,
    "end": 1060941,
    "text": "このコンテナをコピーして、下に貼り付けよう。"
  },
  {
    "start": 1060941,
    "end": 1071136,
    "text": "高さは500のままにし、今回はボックスの装飾を一定にします。"
  },
  {
    "start": 1071136,
    "end": 1076000,
    "text": "画像の代わりに、linearGradientというグラデーションを設定する必要がある。"
  },
  {
    "start": 1076880,
    "end": 1080560,
    "text": "色はcolors.blackからcolors.transparentになる。"
  },
  {
    "start": 1082400,
    "end": 1091246,
    "text": "alignment.bottomCenterで始まり、alignment.topCenterで終わる。"
  },
  {
    "start": 1091246,
    "end": 1096018,
    "text": "保存をクリックすると、きれいなグラデーションができる。"
  },
  {
    "start": 1096018,
    "end": 1098880,
    "text": "タイトルをつけよう。"
  },
  {
    "start": 1099840,
    "end": 1104000,
    "text": "これは幅250ピクセルのボックスとなる。"
  },
  {
    "start": 1107440,
    "end": 1114180,
    "text": "子はimage.assetFeaturedContent.titleImageURLになります。"
  },
  {
    "start": 1114180,
    "end": 1126199,
    "text": "タイトルはシミュレータの左上にあることがわかるので、サイズを調整したボックスをpositionsウィジェットで囲み、bottomを110.0に設定します。"
  },
  {
    "start": 1126199,
    "end": 1133760,
    "text": "タイトルを中央に配置するには、stackAlignmentをalignment.centerに設定すればよい。"
  },
  {
    "start": 1136160,
    "end": 1142160,
    "text": "最後の行をコンテンツ・ヘッダーに追加するために、ここにあるサイズ・ボックスの下に追加します。"
  },
  {
    "start": 1143840,
    "end": 1151440,
    "text": "これは、left 0、right 0、bottom 40.0の位置ウィジェットを必要とする。"
  },
  {
    "start": 1154560,
    "end": 1162911,
    "text": "左右を定義する必要があるのは、行ウィジェットを扱うときに、左右にどこまで拡大するかを知る必要があるからです。"
  },
  {
    "start": 1162911,
    "end": 1166320,
    "text": "この値を0に設定すると、行ウィジェットは画面の幅全体に拡大されます。"
  },
  {
    "start": 1169120,
    "end": 1173920,
    "text": "childRow、mainAxisAlignmentで、均等なスペースに設定できます。"
  },
  {
    "start": 1176720,
    "end": 1194160,
    "text": "子ウィジェットには、verticalIconButtonというウィジェットを用意し、icon、icons.add、タイトル（文字列）、onTapを受け取ります。"
  },
  {
    "start": 1197200,
    "end": 1207440,
    "text": "もう1つverticalIconButtonが必要で、こちらはtitleInfoとprintOutInfoを持つ。"
  },
  {
    "start": 1211920,
    "end": 1215600,
    "text": "iconButtonはicons.infoのアンダースコア・アウトラインになる。"
  },
  {
    "start": 1218080,
    "end": 1225760,
    "text": "verticalIconButton.dartという新しいファイルにverticalIconButtonを作成しよう。"
  },
  {
    "start": 1227760,
    "end": 1230160,
    "text": "widgets.dartの中で、エクスポートしてみよう。"
  },
  {
    "start": 1234320,
    "end": 1237920,
    "text": "これでverticalIconButtonはステートレス・ウィジェットになった。"
  },
  {
    "start": 1241920,
    "end": 1249040,
    "text": "アイコンデータ、文字列タイトル、onTap関数を受け取る。"
  },
  {
    "start": 1254560,
    "end": 1260000,
    "text": "ビルド・メソッドの中で、コンテナをジェスチャー検出器に置き換える。"
  },
  {
    "start": 1261840,
    "end": 1264408,
    "text": "onTapは私たちのonTapコールになる。"
  },
  {
    "start": 1264408,
    "end": 1269760,
    "text": "子ウィジェットは、子、アイコン、アイコンを持つ列ウィジェットになります。"
  },
  {
    "start": 1270720,
    "end": 1272240,
    "text": "色はcolors.whiteとなる。"
  },
  {
    "start": 1274560,
    "end": 1276160,
    "text": "スペーシングのためのサイズボックスを用意します。"
  },
  {
    "start": 1278640,
    "end": 1280160,
    "text": "最後に、テキスト・ウィジェットだ。"
  },
  {
    "start": 1281920,
    "end": 1292960,
    "text": "titleStyle、const textStyle、colors.white、fontWeightはfontWeight.w600となる。"
  },
  {
    "start": 1293440,
    "end": 1297520,
    "text": "コンテンツに戻れば、widgets.dartをインポートできる。"
  },
  {
    "start": 1299040,
    "end": 1301120,
    "text": "これで2つのverticalIconButtonsが表示された。"
  },
  {
    "start": 1302080,
    "end": 1305760,
    "text": "playButtonは、verticalIconButtonの間に配置します。"
  },
  {
    "start": 1306960,
    "end": 1310000,
    "text": "これをplayButtonというウィジェットにします。"
  },
  {
    "start": 1311760,
    "end": 1318560,
    "text": "なぜここに書かないかというと、ウェブ版ではレスポンシブなplayButtonが必要になるからだ。"
  },
  {
    "start": 1319360,
    "end": 1320960,
    "text": "ウィジェットとして取り出すことができる。"
  },
  {
    "start": 1321520,
    "end": 1323200,
    "text": "今すぐウィジェットとして取り出すことができる。"
  },
  {
    "start": 1326000,
    "end": 1328080,
    "text": "playButtonというステートレスウィジェット。"
  },
  {
    "start": 1330480,
    "end": 1348720,
    "text": "onPressed、prints play、color、colors.white、iconはconst icon、icons.playArrowです。"
  },
  {
    "start": 1349680,
    "end": 1351680,
    "text": "サイズを30.0に設定する。"
  },
  {
    "start": 1354320,
    "end": 1358160,
    "text": "エラーが出るのは、labelパラメータが足りないからです。"
  },
  {
    "start": 1359200,
    "end": 1360080,
    "text": "それも加えよう。"
  },
  {
    "start": 1360800,
    "end": 1362240,
    "text": "ラベルの定数テキスト。"
  },
  {
    "start": 1364400,
    "end": 1375280,
    "text": "play、style、textStyle、fontSize 16.0、fontWeight、fontWeight.w600と表示されます。"
  },
  {
    "start": 1378960,
    "end": 1380480,
    "text": "パディングも少し加えよう。"
  },
  {
    "start": 1382400,
    "end": 1386320,
    "text": "const edgeInsets.from leftTopRightBottom."
  },
  {
    "start": 1387360,
    "end": 1394400,
    "text": "左が15.0、上が5.0、右が20.0、下が5.0となる。"
  },
  {
    "start": 1396080,
    "end": 1397840,
    "text": "これでコンテンツヘッダーはすべて完成だ。"
  },
  {
    "start": 1400480,
    "end": 1402800,
    "text": "次に、プレビュー・ウィジェットを作成しましょう。"
  },
  {
    "start": 1404000,
    "end": 1407200,
    "text": "これは、テキストプレビューを含む列になります。"
  },
  {
    "start": 1408160,
    "end": 1416320,
    "text": "ここでは、円形のコンテナと、各コンテンツのタイトルを含む横長のリスト・ビューを用意する。"
  },
  {
    "start": 1417760,
    "end": 1419440,
    "text": "homescreen.dartを見てみよう。"
  },
  {
    "start": 1420560,
    "end": 1425040,
    "text": "コンテンツ・ヘッダーの下に、スライバー・パディングを追加する。"
  },
  {
    "start": 1426240,
    "end": 1431520,
    "text": "パディングはedgeInsets.only、top 20.0となる。"
  },
  {
    "start": 1433520,
    "end": 1436800,
    "text": "スライバは sliverToBoxAdapter になります。"
  },
  {
    "start": 1438160,
    "end": 1440160,
    "text": "子供のプレビューで。"
  },
  {
    "start": 1441040,
    "end": 1452000,
    "text": "previewsは、タイトル、previews、コンテンツ・リストを取り込みます。"
  },
  {
    "start": 1453200,
    "end": 1455440,
    "text": "プレビューはdata.dartのものです。"
  },
  {
    "start": 1459040,
    "end": 1460480,
    "text": "widgets.dartを見てみよう。"
  },
  {
    "start": 1461360,
    "end": 1464240,
    "text": "previews.dartをエクスポートします。"
  },
  {
    "start": 1465520,
    "end": 1466480,
    "text": "その後、ファイルを作成する。"
  },
  {
    "start": 1467440,
    "end": 1479120,
    "text": "previewsはステートレスウィジェットで、最終的な文字列タイトルを受け取り、次にコンテンツのリストを受け取ります。"
  },
  {
    "start": 1487680,
    "end": 1492720,
    "text": "子供のいる列を返すつもりだ。"
  },
  {
    "start": 1493120,
    "end": 1498800,
    "text": "まず、text、title、style、const、textStyleがある。"
  },
  {
    "start": 1502160,
    "end": 1503440,
    "text": "色はcolors.whiteとなる。"
  },
  {
    "start": 1504560,
    "end": 1505920,
    "text": "フォントサイズは20.0になる。"
  },
  {
    "start": 1507760,
    "end": 1510960,
    "text": "フォントの太さはfontWeight.boldになります。"
  },
  {
    "start": 1513600,
    "end": 1518000,
    "text": "今気づいたのですが、homescreen.dartの中でプレビューが見つからないというエラーが出ています。"
  },
  {
    "start": 1519040,
    "end": 1521840,
    "text": "プレビューのスペルを間違えてSを忘れてしまったからだ。"
  },
  {
    "start": 1523040,
    "end": 1526480,
    "text": "これを追加すると、保存が可能になり、プレビューが表示される。"
  },
  {
    "start": 1527920,
    "end": 1535760,
    "text": "プレビューが左側から始まるようにするには、カラムの交差軸アライメントをcrossAxisAlignment.startに設定します。"
  },
  {
    "start": 1537920,
    "end": 1539360,
    "text": "テキストにパディングを加えることができる。"
  },
  {
    "start": 1542160,
    "end": 1548160,
    "text": "ここでは、水平24.0と対称になるようにする。"
  },
  {
    "start": 1548480,
    "end": 1556320,
    "text": "ListViewBuilderはコンテナ内にラップされるので、大きさを知ることができる。"
  },
  {
    "start": 1557440,
    "end": 1559280,
    "text": "高さは165に設定される。"
  },
  {
    "start": 1561600,
    "end": 1563840,
    "text": "子 ListViewBuilder。"
  },
  {
    "start": 1566000,
    "end": 1568880,
    "text": "ItemCountはcontentList.lengthになります。"
  },
  {
    "start": 1572720,
    "end": 1577520,
    "text": "scrollDirectionはaxis.horizontalになります。"
  },
  {
    "start": 1579120,
    "end": 1581120,
    "text": "ListViewBuilderにパディングを追加する。"
  },
  {
    "start": 1582880,
    "end": 1590320,
    "text": "const EdgeInsets.symmetric.vertical 12.0.horizontal 8.0."
  },
  {
    "start": 1593760,
    "end": 1598240,
    "text": "ItemBuilderの中で、まず各コンテンツを抽出する必要がある。"
  },
  {
    "start": 1599040,
    "end": 1605360,
    "text": "finalContent.contentがcontentList.subIndexと等しい。"
  },
  {
    "start": 1606320,
    "end": 1613600,
    "text": "まずジェスチャー検出器を返し、タップしたときにコンテンツの名前を表示する。"
  },
  {
    "start": 1617760,
    "end": 1623760,
    "text": "次にスタック・ウィジェットがあるので、タイトル画像の下に円形のコンテナを置くことができる。"
  },
  {
    "start": 1623840,
    "end": 1632320,
    "text": "Container.Marginsはconst EdgeInsets.symmetric.horizontalの16.0に設定される。"
  },
  {
    "start": 1634320,
    "end": 1637040,
    "text": "高さを130、幅を130に設定する。"
  },
  {
    "start": 1638160,
    "end": 1645360,
    "text": "今回は紫にする。"
  },
  {
    "start": 1647280,
    "end": 1650800,
    "text": "これでプレビューの初期骨格が完成した。"
  },
  {
    "start": 1651040,
    "end": 1654320,
    "text": "これでプレビューの初期スケルトンが表示された。"
  },
  {
    "start": 1657760,
    "end": 1665360,
    "text": "色を取り除き、boxDecoration.Image.DecorationImageで装飾を設定しよう。"
  },
  {
    "start": 1667120,
    "end": 1671760,
    "text": "画像はassetImage.content.imageUrlになります。"
  },
  {
    "start": 1675280,
    "end": 1677840,
    "text": "フィットはboxFit.coverとなる。"
  },
  {
    "start": 1678080,
    "end": 1685760,
    "text": "これらの画像を丸くするには、boxDecorationの形状をboxShape.Circleに設定します。"
  },
  {
    "start": 1688240,
    "end": 1698560,
    "text": "ボーダーを追加するには、border.hullに設定し、色はcontent.colorに設定し、幅は4.0に設定する。"
  },
  {
    "start": 1700560,
    "end": 1702320,
    "text": "これでカラフルなボーダーが完成した。"
  },
  {
    "start": 1702399,
    "end": 1704480,
    "text": "それぞれの番組にタイトル画像を追加してみよう。"
  },
  {
    "start": 1706080,
    "end": 1714320,
    "text": "位置は、左が0、右が0、下も0になる。"
  },
  {
    "start": 1717840,
    "end": 1726800,
    "text": "子は高さ60.0のボックスで、画像アセットになります。"
  },
  {
    "start": 1727600,
    "end": 1729120,
    "text": "コンテンツ.titleImageUrl."
  },
  {
    "start": 1730560,
    "end": 1732080,
    "text": "今、すべてのタイトルが表示されている。"
  },
  {
    "start": 1734879,
    "end": 1738720,
    "text": "タイトルが画像に溶け込んでいるため、少し奇妙に見える。"
  },
  {
    "start": 1739680,
    "end": 1744240,
    "text": "これを修正するには、下から上に向かってグラデーションを追加すればよい。"
  },
  {
    "start": 1745200,
    "end": 1749280,
    "text": "こうすることで、画像の下部が少し暗くなり、タイトルが読みやすくなる。"
  },
  {
    "start": 1750080,
    "end": 1753760,
    "text": "今書いたコンテナをコピーして、下に貼り付けよう。"
  },
  {
    "start": 1756639,
    "end": 1758240,
    "text": "今回はマージンを取り除くことができる。"
  },
  {
    "start": 1759920,
    "end": 1764800,
    "text": "高さは130のままで、幅も130のままで、ここではもう画像は必要ない。"
  },
  {
    "start": 1766240,
    "end": 1770160,
    "text": "その代わりにグラデーションをつけ、これは線形グラデーションにする。"
  },
  {
    "start": 1771840,
    "end": 1777920,
    "text": "これで画像の下部が少し暗くなり、タイトルが読みやすくなる。"
  },
  {
    "start": 1779280,
    "end": 1789840,
    "text": "colorsでは、colors.black87、colors.black45、そしてcolors.transparent。"
  },
  {
    "start": 1793360,
    "end": 1799120,
    "text": "リニアグラデーションにストップを追加し、グラデーションの最も暗い部分をコントロールできるようにします。"
  },
  {
    "start": 1800320,
    "end": 1804960,
    "text": "0、0.25、1の順にスタートさせる。"
  },
  {
    "start": 1805600,
    "end": 1812732,
    "text": "始点はalignment.bottomCenterとなり、終点はalignment.topCenterとなる。"
  },
  {
    "start": 1812732,
    "end": 1813600,
    "text": "セーブを打つ。"
  },
  {
    "start": 1815360,
    "end": 1823867,
    "text": "スタックのアライメントがalignment.centerである必要があるからだ。"
  },
  {
    "start": 1823867,
    "end": 1825760,
    "text": "今は自分で直した。"
  },
  {
    "start": 1827360,
    "end": 1829040,
    "text": "タイトルも読みやすくなった。"
  },
  {
    "start": 1829440,
    "end": 1840720,
    "text": "アプリの残りの水平リスト・ビューでは、ContentListというウィジェットを作成し、ヘッダー・テキストとコンテンツのリストを表示します。"
  },
  {
    "start": 1842240,
    "end": 1851561,
    "text": "Netflix Originalsも同じようなレイアウトをしていることがわかるので、同じContentListコンポーネントを使い、IsOriginalsというブール値を取り込めばいいわけだ、"
  },
  {
    "start": 1851561,
    "end": 1856627,
    "text": "このブーリアンに基づいて、それぞれの画像の高さと幅をレンダリングすることができる。"
  },
  {
    "start": 1856627,
    "end": 1859840,
    "text": "ここでトレンドダウンしているのもContentListである。"
  },
  {
    "start": 1862720,
    "end": 1869840,
    "text": "HomeScreenの内部で、sliverPaddingの下に別のsliverToBoxAdapterを追加することができます。"
  },
  {
    "start": 1873440,
    "end": 1879951,
    "text": "今回の子はContentListで、タイトルはMyListです。"
  },
  {
    "start": 1879951,
    "end": 1884769,
    "text": "ContentListはMyListFromData.dartになります。"
  },
  {
    "start": 1884769,
    "end": 1888159,
    "text": "これをもう2回コピーしよう。"
  },
  {
    "start": 1891679,
    "end": 1896247,
    "text": "2つ目のコンテンツリストは、ネットフリックス・オリジナルとなる。"
  },
  {
    "start": 1896247,
    "end": 1905120,
    "text": "ContentListはOriginalsとし、オプションのパラメータIsOriginalsをゼロに設定し、保存をクリックする。"
  },
  {
    "start": 1908960,
    "end": 1909759,
    "text": "本当だ。"
  },
  {
    "start": 1909759,
    "end": 1918399,
    "text": "最後のContentListの場合は、trendingと表示され、渡すContentListはtrendingと表示されます。"
  },
  {
    "start": 1921840,
    "end": 1927120,
    "text": "Widgets.dartの中に、ContentList.dartをエクスポートしましょう。"
  },
  {
    "start": 1927120,
    "end": 1930862,
    "text": "ContentList.dartを作成する。"
  },
  {
    "start": 1930862,
    "end": 1951200,
    "text": "これはステートレス・ウィジェットであるContentListの素材であり、タイトル、コンテンツのリスト、そしてブール値のIsOriginalsを受け取ることが分かっている。"
  },
  {
    "start": 1951920,
    "end": 1961774,
    "text": "コンストラクタを生成すれば、this.isOriginalsからatRequiredを取り除くことができる。"
  },
  {
    "start": 1961774,
    "end": 1965120,
    "text": "代わりにオプションで、デフォルトではfalseに設定する。"
  },
  {
    "start": 1966720,
    "end": 1972800,
    "text": "時間を節約するために、Previews.dartに戻って、この最初の部分をコピーしよう。"
  },
  {
    "start": 1972800,
    "end": 1979760,
    "text": "ColumnからPaddingに移動し、ContentListのコンテナを置き換えます。"
  },
  {
    "start": 1983200,
    "end": 1988240,
    "text": "シミュレーターでは、MyList、Netflix Originals、Trendingが表示されています。"
  },
  {
    "start": 1989600,
    "end": 1992639,
    "text": "Paddingウィジェットでカラムを囲み、スペースを追加してみましょう。"
  },
  {
    "start": 1993600,
    "end": 1996480,
    "text": "あとは画像を表示するだけだ。"
  },
  {
    "start": 1998240,
    "end": 2009280,
    "text": "Paddingの下に、高さを持つコンテナを作成し、ここでIsOriginalsがtrueかどうかをチェックします。"
  },
  {
    "start": 2010720,
    "end": 2014480,
    "text": "新しいコンテナを作成し、それをIsOriginalsと呼ぶことにする。"
  },
  {
    "start": 2015360,
    "end": 2028400,
    "text": "高さを指定してコンテナを作成し、ここでIsOriginalsがtrueかどうかをチェックする。もしtrueなら、コンテナは非常に大きくする必要があることがわかるので、500.0にする。"
  },
  {
    "start": 2029440,
    "end": 2032560,
    "text": "そうでなければ、小さい画像なら220.0かもしれない。"
  },
  {
    "start": 2034800,
    "end": 2039840,
    "text": "子プロセスはListViewBuilderとなり、アイテム数はContentList.lengthとなります。"
  },
  {
    "start": 2039920,
    "end": 2047920,
    "text": "パディングは、ContEdgeInsets.Symmetric、垂直12.0、水平16.0に設定する。"
  },
  {
    "start": 2052000,
    "end": 2055200,
    "text": "その場合、スクロール方向をAxis.Horizontalに設定することを忘れてはならない。"
  },
  {
    "start": 2058080,
    "end": 2061920,
    "text": "ItemBuilderの内部で、コンテンツの一部を取得する必要があります。"
  },
  {
    "start": 2062720,
    "end": 2064480,
    "text": "コンテンツを手に入れる必要がある。"
  },
  {
    "start": 2069040,
    "end": 2078159,
    "text": "ここでは、OnTap.PrintContent.Name.GestureDetectorを返します。"
  },
  {
    "start": 2082159,
    "end": 2089760,
    "text": "子は、マージンContEdgeInsets.Symmetric.Horizontal 8.0を持つContainerWidgetになります。"
  },
  {
    "start": 2093680,
    "end": 2100960,
    "text": "高さはIsOriginalsとなり、200.0に対して400.0となる。"
  },
  {
    "start": 2101680,
    "end": 2108640,
    "text": "次に幅は同じように200.0から130.0にする。"
  },
  {
    "start": 2108879,
    "end": 2121680,
    "text": "この場合、画像を表示するには、Decoration.BoxDecoration.ToImage.DecorationImage.Image.AssetImage.Content.ImageUrlを設定すればよい。"
  },
  {
    "start": 2123920,
    "end": 2127040,
    "text": "はBoxFit.Coverになります。"
  },
  {
    "start": 2129440,
    "end": 2145280,
    "text": "下にスクロールすると、MyList、Netflix Originals、そしてTrendingがあります。"
  },
  {
    "start": 2147600,
    "end": 2150240,
    "text": "実際にトレンディングの下部にパディングを追加してみよう。"
  },
  {
    "start": 2151360,
    "end": 2156400,
    "text": "SilverBoxAdapter を SilverPadding でラップすることができます。"
  },
  {
    "start": 2158240,
    "end": 2164080,
    "text": "パディング.ContEdgeInsets.Only.Bottom 20.0."
  },
  {
    "start": 2164560,
    "end": 2166080,
    "text": "チャイルドをスリヴァーに置き換える。"
  },
  {
    "start": 2168400,
    "end": 2170640,
    "text": "これで、アプリにコンテンツを入れる作業が終わった。"
  },
  {
    "start": 2175200,
    "end": 2177440,
    "text": "アプリにボトムナビゲーションバーを追加しよう。"
  },
  {
    "start": 2179760,
    "end": 2184720,
    "text": "Screensディレクトリの中に、NavScreen.Dartを追加します。"
  },
  {
    "start": 2186880,
    "end": 2188080,
    "text": "必ずエクスポートしてください。"
  },
  {
    "start": 2188640,
    "end": 2190640,
    "text": "NavScreenはStatefulWidgetです。"
  },
  {
    "start": 2196640,
    "end": 2201680,
    "text": "Main.Dartの中で、HomeScreenをNavScreenに設定しよう。"
  },
  {
    "start": 2205600,
    "end": 2208720,
    "text": "NavScreenにはウィジェットのリストがあります。"
  },
  {
    "start": 2209520,
    "end": 2210080,
    "text": "あるいはスクリーン。"
  },
  {
    "start": 2212080,
    "end": 2217280,
    "text": "HomeScreenがあり、ScaffoldWidgetsがあります。"
  },
  {
    "start": 2222880,
    "end": 2226480,
    "text": "一番下のナビゲーション・バーには、アイコンとタイトルが必要です。"
  },
  {
    "start": 2227760,
    "end": 2228640,
    "text": "それを作ろう"
  },
  {
    "start": 2229840,
    "end": 2230560,
    "text": "FinalMap。"
  },
  {
    "start": 2232400,
    "end": 2234560,
    "text": "NavScreenにタイトルを追加しましょう。"
  },
  {
    "start": 2235520,
    "end": 2236400,
    "text": "それを作ろう"
  },
  {
    "start": 2237759,
    "end": 2244720,
    "text": "FinalMap.String.IconData.Icons.EqualToConst."
  },
  {
    "start": 2246160,
    "end": 2247200,
    "text": "まずはホームが必要だ。"
  },
  {
    "start": 2248400,
    "end": 2249680,
    "text": "Icons.Homeとなる。"
  },
  {
    "start": 2251120,
    "end": 2252000,
    "text": "次に必要なのは検索だ。"
  },
  {
    "start": 2253520,
    "end": 2262799,
    "text": "Icons.Search.ComingSoon.Icons.Queue.UnderscorePlay.UnderscoreNext。"
  },
  {
    "start": 2264720,
    "end": 2267920,
    "text": "ダウンロード.アイコン.ファイルダウンロード."
  },
  {
    "start": 2269759,
    "end": 2272320,
    "text": "最後のアイコンはIcons.Menuになります。"
  },
  {
    "start": 2274880,
    "end": 2277040,
    "text": "最後に、currentIndex変数を用意する必要がある。"
  },
  {
    "start": 2277600,
    "end": 2280880,
    "text": "スクリーン・リストからどのスクリーンをレンダリングすべきかがわかる。"
  },
  {
    "start": 2282080,
    "end": 2285680,
    "text": "ビルド関数の中で、コンテナを雛形に置き換えてみよう。"
  },
  {
    "start": 2286560,
    "end": 2293040,
    "text": "本体はScreen.CurrentIndexに等しくなる。"
  },
  {
    "start": 2295600,
    "end": 2296960,
    "text": "今、ホームスクリーンをレンダリングしている。"
  },
  {
    "start": 2298000,
    "end": 2301440,
    "text": "一番下のナビゲーション・バーが BottomNavigationBar に設定されます。"
  },
  {
    "start": 2303600,
    "end": 2304960,
    "text": "アイテム付き。"
  },
  {
    "start": 2304960,
    "end": 2309359,
    "text": "アイテムを個別に渡す代わりに、上で作ったアイコンのマップをマッピングすればいい。"
  },
  {
    "start": 2311759,
    "end": 2312640,
    "text": "アイコン.マップ"
  },
  {
    "start": 2312879,
    "end": 2314799,
    "text": "タイトルを鍵としてお返しします。"
  },
  {
    "start": 2316799,
    "end": 2318400,
    "text": "値はアイコンになる。"
  },
  {
    "start": 2322160,
    "end": 2323440,
    "text": "地図エントリーを作成する必要がある。"
  },
  {
    "start": 2327040,
    "end": 2328000,
    "text": "タイトルを渡す"
  },
  {
    "start": 2329120,
    "end": 2332240,
    "text": "なら、BottomNavigationBar.Item."
  },
  {
    "start": 2334240,
    "end": 2337040,
    "text": "アイコン.アイコン.サイズ 30.0."
  },
  {
    "start": 2337360,
    "end": 2340400,
    "text": "アイコン.アイコン.サイズ 30.0."
  },
  {
    "start": 2342800,
    "end": 2346240,
    "text": "タイトルはText.Titleになります。"
  },
  {
    "start": 2348640,
    "end": 2355759,
    "text": "次に、このマップからBottomNavigationBarアイテムのリストを取得するには、.Values.ToListを実行します。"
  },
  {
    "start": 2358080,
    "end": 2361360,
    "text": "これで保存を押すと、BottomNavigationBarが表示される。"
  },
  {
    "start": 2362240,
    "end": 2366880,
    "text": "BottomNavigationBarのcurrentIndexをCurrentIndexに設定します。"
  },
  {
    "start": 2368560,
    "end": 2373120,
    "text": "selectedItemColorをColors.Whiteに設定する。"
  },
  {
    "start": 2374720,
    "end": 2378880,
    "text": "selectedFontSizeは11.0になる。"
  },
  {
    "start": 2380080,
    "end": 2385520,
    "text": "unselectedItemColorはColors.Grayになります。"
  },
  {
    "start": 2386640,
    "end": 2389360,
    "text": "unselectedFontSizeも11.0になる。"
  },
  {
    "start": 2390400,
    "end": 2394480,
    "text": "そうすると、OnTapはコールバックでインデックスを与えてくれる。"
  },
  {
    "start": 2395360,
    "end": 2401040,
    "text": "setState.CurrentIndexは、タップした新しいインデックスに等しい。"
  },
  {
    "start": 2403360,
    "end": 2408960,
    "text": "BottomNavigationBarをタップすると、新しいアイコンをクリックするたびにアニメーションが表示されるのがわかる。"
  },
  {
    "start": 2410720,
    "end": 2416240,
    "text": "BottomNavigationBarのタイプをBottomNavigationBarType.Fixedに設定しましょう。"
  },
  {
    "start": 2417440,
    "end": 2422320,
    "text": "クリックしてもアイコンがアニメーションしない。"
  },
  {
    "start": 2423280,
    "end": 2428880,
    "text": "最後に、BottomNavigationBarの背景色をColors.Blackに変更しましょう。"
  },
  {
    "start": 2431920,
    "end": 2436560,
    "text": "BottomNavigationBarをいじってみると、いくつかの問題が生じていることがわかる。"
  },
  {
    "start": 2437360,
    "end": 2448800,
    "text": "例えば、下にスクロールして別のタブに切り替えたり、ホームに戻ったりすると、最後のスクロール位置が維持されるのではなく、画面の一番上にリセットされるのがわかる。"
  },
  {
    "start": 2448880,
    "end": 2458720,
    "text": "スクロールダウンしてこれらを変更すれば、少なくともプレビューがずっと右側にあることがわかる。"
  },
  {
    "start": 2459760,
    "end": 2463680,
    "text": "検索を押してホームに戻ると、プレビューがリセットされる。"
  },
  {
    "start": 2463680,
    "end": 2466160,
    "text": "それは、現在ホーム画面を再レンダリングしているからです。"
  },
  {
    "start": 2467120,
    "end": 2472160,
    "text": "まず、ホーム、検索、そしてホームに戻るという切り替えができるように修正しよう。"
  },
  {
    "start": 2473600,
    "end": 2476240,
    "text": "ホーム画面にキーを追加する必要がある。"
  },
  {
    "start": 2476320,
    "end": 2484160,
    "text": "ホーム画面にキーを追加して、PageStorageKey HomeScreenというキーを渡そう。"
  },
  {
    "start": 2486080,
    "end": 2492000,
    "text": "PageStorageKeyを使用すると、タブを切り替えても現在のスクロール位置を維持できます。"
  },
  {
    "start": 2493040,
    "end": 2496160,
    "text": "ホーム画面に入り、コンストラクタを作成しよう。"
  },
  {
    "start": 2497440,
    "end": 2505520,
    "text": "HomeScreenはSuperKeyKeyキーを取り込む。"
  },
  {
    "start": 2506720,
    "end": 2507680,
    "text": "それを保存しておこう。"
  },
  {
    "start": 2508640,
    "end": 2510000,
    "text": "アプリをホット再起動してください。"
  },
  {
    "start": 2510000,
    "end": 2517360,
    "text": "下にスクロールし、検索に切り替え、ホームに戻っても、まだ同じ位置にいることがわかる。"
  },
  {
    "start": 2518480,
    "end": 2531440,
    "text": "ここでスクロールダウンしてプレビューを変更し、マイリスト、Netflixオリジナルを変更し、タブを切り替えると、状態が維持されていないことがわかる。"
  },
  {
    "start": 2532080,
    "end": 2539280,
    "text": "これを解決するには、ホーム画面に入って、各プレビューとコンテンツリストにキーを追加すればいい。"
  },
  {
    "start": 2540880,
    "end": 2544800,
    "text": "PageStorageKeyのPreviewsを作成します。"
  },
  {
    "start": 2546480,
    "end": 2556480,
    "text": "MyList、Originals、Trendingも同じようにします。"
  },
  {
    "start": 2557360,
    "end": 2558160,
    "text": "それは取っておこう。"
  },
  {
    "start": 2558800,
    "end": 2560000,
    "text": "ホットな再始動だ。"
  },
  {
    "start": 2560000,
    "end": 2564640,
    "text": "下にスクロールして、Coming Soonに行き、ホームに戻る。"
  },
  {
    "start": 2564640,
    "end": 2565760,
    "text": "私たちも同じ立場だ。"
  },
  {
    "start": 2566640,
    "end": 2567520,
    "text": "少しスクロールしてみよう。"
  },
  {
    "start": 2570720,
    "end": 2576000,
    "text": "タブを切り替えて戻ると、すべてのポジションが保存されているのがわかる。"
  },
  {
    "start": 2578240,
    "end": 2584000,
    "text": "お気づきの方もいらっしゃるかもしれませんが、もうひとつの問題は、一番上にいるとき、アプリバーが透明になっていることです。"
  },
  {
    "start": 2584400,
    "end": 2585760,
    "text": "私たちのアプリバーは透明です。"
  },
  {
    "start": 2586640,
    "end": 2589040,
    "text": "スクロールすると黒くなる。"
  },
  {
    "start": 2590000,
    "end": 2596400,
    "text": "これで、別の画面に切り替えて戻ってくると、移動するまでアプリバーが再び透明になる。"
  },
  {
    "start": 2597040,
    "end": 2598000,
    "text": "固まる。"
  },
  {
    "start": 2598880,
    "end": 2604240,
    "text": "その理由は、ホーム画面を再レンダリングするときに、スクロールオフセットがゼロに戻されるからだ。"
  },
  {
    "start": 2605120,
    "end": 2614560,
    "text": "これを解決するには、スクロール・オフセットの状態をナビ画面に持ち上げて保存するか、ブロックのような状態管理ツールを使うしかない。"
  },
  {
    "start": 2615200,
    "end": 2617520,
    "text": "このチュートリアルでは、ブロックを使います。"
  },
  {
    "start": 2618480,
    "end": 2626880,
    "text": "VS CodeでBlockを使う場合、Blockという拡張機能があると便利なので、ぜひインストールしておくことをお勧めする。"
  },
  {
    "start": 2627520,
    "end": 2633760,
    "text": "これができたら、libフォルダに戻ってQubitsという新しいフォルダを作成する。"
  },
  {
    "start": 2636240,
    "end": 2638880,
    "text": "Qubitsの中で、バレルファイルを作成します。"
  },
  {
    "start": 2639840,
    "end": 2646400,
    "text": "ここではappbarqubit.dartというqubitをエクスポートします。"
  },
  {
    "start": 2648400,
    "end": 2659040,
    "text": "Blockエクステンションをインストールしたら、Qubitsを右クリックしてNew Qubitを選択し、app underscore barと入力してEnterを押す。"
  },
  {
    "start": 2660000,
    "end": 2666080,
    "text": "これでQubitというフォルダが生成され、appbar qubitとappbar stateが生成される。"
  },
  {
    "start": 2666640,
    "end": 2668319,
    "text": "Qubitをappbarに改名しよう。"
  },
  {
    "start": 2671120,
    "end": 2675600,
    "text": "Qubits.dartの内部では、ここにフォルダパスも追加する必要があります。"
  },
  {
    "start": 2676480,
    "end": 2678560,
    "text": "appbar appbarqubit.dart."
  },
  {
    "start": 2680880,
    "end": 2685279,
    "text": "ブロックに詳しい方なら、ブロックは通常、あるイベントに参加することはご存知だろう。"
  },
  {
    "start": 2686799,
    "end": 2693680,
    "text": "そのイベントはブロックに送られ、ブロックはそのイベントをステートに変換する。"
  },
  {
    "start": 2694000,
    "end": 2694799,
    "text": "州の中へ。"
  },
  {
    "start": 2695520,
    "end": 2698560,
    "text": "その状態に基づいて、異なるUIをレンダリングすることができる。"
  },
  {
    "start": 2699600,
    "end": 2707120,
    "text": "一方、Qubitではイベントをスキップし、ブロックに書いた関数を叩くことでブロックと直接会話する。"
  },
  {
    "start": 2708080,
    "end": 2712960,
    "text": "呼び出した関数が新しいステートを生成し、それを使ってUIをレンダリングする。"
  },
  {
    "start": 2713839,
    "end": 2717120,
    "text": "キュービットは基本的にブロックの簡易版だ。"
  },
  {
    "start": 2718640,
    "end": 2725316,
    "text": "Qubitを使ってappbarのスクロールオフセットを保存する理由は、イベントが1つしかないからです、"
  },
  {
    "start": 2725316,
    "end": 2730320,
    "text": "これは、スクロールオフセットが変化するときであり、イベントの記録を保持する必要はない。"
  },
  {
    "start": 2731600,
    "end": 2735120,
    "text": "ホーム画面に戻って、今やっていることを分解してみよう。"
  },
  {
    "start": 2736000,
    "end": 2740080,
    "text": "まず、スクロールオフセットを削除する。"
  },
  {
    "start": 2740720,
    "end": 2744080,
    "text": "スクロールオフセットをappbar qubitに移動します。"
  },
  {
    "start": 2745280,
    "end": 2746240,
    "text": "これを削除しよう。"
  },
  {
    "start": 2747440,
    "end": 2751600,
    "text": "今、アプリバー・クビットでは、アプリバーの状態も持っている。"
  },
  {
    "start": 2752160,
    "end": 2757120,
    "text": "appbarの量子ビットはダブルを保存するだけなので、ステートはまったく必要ない。"
  },
  {
    "start": 2758319,
    "end": 2762319,
    "text": "これを削除して、appbarの状態を削除しよう。"
  },
  {
    "start": 2763200,
    "end": 2768080,
    "text": "量子ビットはダブルの量子ビットを拡張している。"
  },
  {
    "start": 2768080,
    "end": 2773360,
    "text": "今、私たちのアプリバー量子ビットは、ダブルの最初の値をゼロにしようとしている。"
  },
  {
    "start": 2775759,
    "end": 2780480,
    "text": "量子ビットの新しいオフセットを設定する関数を書く必要がある。"
  },
  {
    "start": 2781120,
    "end": 2789040,
    "text": "set offsetは、double offsetを取り込み、そのオフセットを出力する。"
  },
  {
    "start": 2791120,
    "end": 2798960,
    "text": "したがって、新しいオフセットがappbar qubitを通じて発信されるたびに、その変更をリスニングし、それに応じてappbarの不透明度を更新することになる。"
  },
  {
    "start": 2801600,
    "end": 2805200,
    "text": "homescreen.dartの中で、スクロール・オフセットを取り除いた。"
  },
  {
    "start": 2806080,
    "end": 2810320,
    "text": "今度は状態を設定する代わりに、量子ビットにアクセスする。"
  },
  {
    "start": 2811040,
    "end": 2817200,
    "text": "そのためには、context.block appbar qubitと書けばいい。"
  },
  {
    "start": 2820000,
    "end": 2839360,
    "text": "qubits.dartをインポートし、flutterブロックもインポートする必要がある場合、dot set offsetを実行し、スクロールコントローラのdot offsetを渡すことで、dot set offset関数にアクセスできる。"
  },
  {
    "start": 2841040,
    "end": 2842240,
    "text": "このセット状態を削除してみよう。"
  },
  {
    "start": 2844240,
    "end": 2845201,
    "text": "クリックし、「保存」をクリックする。"
  },
  {
    "start": 2845201,
    "end": 2859212,
    "text": "スクロールオフセットを渡すところまでスクロールすると、appbar qubitの値にアクセスするために、カスタムappbarをブロックビルダーでラップする必要があります。"
  },
  {
    "start": 2859212,
    "end": 2864665,
    "text": "このブロック・ビルダーにはアプバー量子ビットがある。"
  },
  {
    "start": 2864665,
    "end": 2872177,
    "text": "我々の量子ビットは量子ビットの2倍を拡張しているからだ。"
  },
  {
    "start": 2872177,
    "end": 2879926,
    "text": "ビルダーの内部には、ビルド・コンテキストであるコンテキストと、ダブルであるステートがある。"
  },
  {
    "start": 2879926,
    "end": 2884885,
    "text": "わかりやすいように、stateをscroll offsetに改名しよう。"
  },
  {
    "start": 2884885,
    "end": 2888577,
    "text": "ここでは、スクロールオフセットを渡す。"
  },
  {
    "start": 2888577,
    "end": 2894018,
    "text": "保存をクリックし、アプリを再起動すると、エラーが発生していることがわかる。"
  },
  {
    "start": 2894018,
    "end": 2898999,
    "text": "に渡されたコンテキストから始まる祖先が見つからないというエラーである。"
  },
  {
    "start": 2898999,
    "end": 2906080,
    "text": "それは、appbar qubitにアクセスしようとしているが、実際にはappbar qubitをウィジェットツリーに提供していないからだ。"
  },
  {
    "start": 2907120,
    "end": 2921200,
    "text": "ナビ画面のドット・ダートの内部で、画面の現在のインデックスを、ブロック・プロバイダーappbar qubitという新しいウィジェットでラップする必要があります。"
  },
  {
    "start": 2921200,
    "end": 2928205,
    "text": "flutterブロックとqubits dot dartファイルをインポートできる。"
  },
  {
    "start": 2928205,
    "end": 2933298,
    "text": "私たちのブロック・プロバイダーはcreate関数を必要とする。"
  },
  {
    "start": 2933298,
    "end": 2938880,
    "text": "ここでは、コンテキストをアンダースコアに設定する。"
  },
  {
    "start": 2940560,
    "end": 2944240,
    "text": "それをインスタンス化するためにappbar qubitを返すだけでいい。"
  },
  {
    "start": 2945200,
    "end": 2953600,
    "text": "保存」をクリックし、アプリを再起動すると、スクロールが可能になり、アプリバーが機能し、真っ黒になる。"
  },
  {
    "start": 2953600,
    "end": 2958305,
    "text": "画面を変えて戻ってきても、アプリバーは黒いままだ。"
  },
  {
    "start": 2958305,
    "end": 2964337,
    "text": "これは、appbar qubitを使ってホーム画面の外側にスクロールオフセットを保存しているからだ。"
  },
  {
    "start": 2964337,
    "end": 2971200,
    "text": "もし、appbar qubitを画面内に提供し、ホーム画面をブロック・プロバイダーで包むとしたら、"
  },
  {
    "start": 2971600,
    "end": 2979839,
    "text": "その場合、以前と同じ問題が発生する。スクロールダウンして画面を変更し、元に戻ると、アプリバーがゼロにリセットされてしまうのだ。"
  },
  {
    "start": 2979839,
    "end": 2986960,
    "text": "なぜなら、このアプリバー量子ビットがインスタンス化されるとき、量子ビットの状態をゼロにするスーパーゼロがあるからだ。"
  },
  {
    "start": 2989520,
    "end": 2993600,
    "text": "ブロックについてもっと知りたいと思ったら、私のウェブサイトにあるコースをぜひチェックしてほしい。"
  },
  {
    "start": 2996160,
    "end": 3000000,
    "text": "モバイル版アプリが完成したので、次はウェブ版に取りかかろう。"
  },
  {
    "start": 3002000,
    "end": 3009264,
    "text": "ウェブバージョンを実行するには、ターミナルに flutter run-d chrome と入力してエンターキーを押すだけだ。"
  },
  {
    "start": 3009264,
    "end": 3012645,
    "text": "少し時間がかかるかもしれないが、クローム版が実行される。"
  },
  {
    "start": 3012645,
    "end": 3023124,
    "text": "VS Codeを使用しているので、右下をクリックしてChromeを選択し、F5をタップすれば、デバイスとしてChromeを選択することができる。"
  },
  {
    "start": 3023124,
    "end": 3032960,
    "text": "ブラウザが起動すると、アップロードが表示され、下にスクロールでき、アプリバーは透明から黒にフェードアウトする。"
  },
  {
    "start": 3034080,
    "end": 3037040,
    "text": "先ほど作成したUIエレメントがすべて揃う。"
  },
  {
    "start": 3041840,
    "end": 3047205,
    "text": "UIを見てみると、画面サイズによってウィジェットが異なっていることがわかる。"
  },
  {
    "start": 3047205,
    "end": 3052917,
    "text": "ウェブ・モードでは、異なるロゴのアプリバーがあり、アプリバーのボタンも増えている。"
  },
  {
    "start": 3052917,
    "end": 3057305,
    "text": "ウェブモードでは静止画だけでなく動画も表示します。"
  },
  {
    "start": 3057305,
    "end": 3064894,
    "text": "モバイルでは下のナビゲーションバーがありますが、デスクトップでは下のナビゲーションバーはありません。"
  },
  {
    "start": 3064894,
    "end": 3074644,
    "text": "これらの変更をすべて行うには、アプリにブレークポイントを設定し、画面のサイズに応じて異なるUIをレンダリングできるようにする別のウィジェットを作成する必要がある。"
  },
  {
    "start": 3074644,
    "end": 3079104,
    "text": "ウィジェットに入って、responsive.dartをエクスポートしよう。"
  },
  {
    "start": 3079104,
    "end": 3083200,
    "text": "responsiveという新しいウィジェットを作ります。"
  },
  {
    "start": 3086000,
    "end": 3087520,
    "text": "これはステートレスウィジェットになります。"
  },
  {
    "start": 3091840,
    "end": 3098193,
    "text": "前回のFacebookのチュートリアルですでにレスポンシブ対応について書いたので、ここにコピーしておこう。"
  },
  {
    "start": 3098193,
    "end": 3100640,
    "text": "それなら、一緒に行こう"
  },
  {
    "start": 3101600,
    "end": 3107104,
    "text": "レスポンシブは、モバイル、タブレット、デスクトップの3種類のウィジェットに対応。"
  },
  {
    "start": 3107104,
    "end": 3111882,
    "text": "モバイル版は必須、デスクトップ版は必須。"
  },
  {
    "start": 3111882,
    "end": 3118310,
    "text": "なぜなら、タブレットUIをレンダリングするのであれば、モバイルやデスクトップUIをレンダリングしたいだけかもしれないからだ。"
  },
  {
    "start": 3118310,
    "end": 3121680,
    "text": "次に、3つの異なるスタティック・ファンクションがある。"
  },
  {
    "start": 3122400,
    "end": 3127686,
    "text": "これは、現在のコンテキストをチェックして、画面のサイズを確認しているだけである。"
  },
  {
    "start": 3127686,
    "end": 3132006,
    "text": "画面がモバイル、タブレット、デスクトップのいずれであるかを確認する。"
  },
  {
    "start": 3132006,
    "end": 3135550,
    "text": "モバイルでは、800ピクセル以下と定義しています。"
  },
  {
    "start": 3135550,
    "end": 3140048,
    "text": "タブレットでは、800から1200未満と定義している。"
  },
  {
    "start": 3140048,
    "end": 3145422,
    "text": "デスクトップの場合は、1200ピクセル以上と定義する。"
  },
  {
    "start": 3145422,
    "end": 3152474,
    "text": "レスポンシブ・ウィジェットのビルドの内部で、制約にアクセスするためにレイアウト・ビルダーを使用します。"
  },
  {
    "start": 3152474,
    "end": 3157708,
    "text": "制約の最大幅を使用して、現在の画面サイズを確認します。"
  },
  {
    "start": 3157708,
    "end": 3162983,
    "text": "1200以上であれば、渡されたデスクトップ・ウィジェットをレンダリングする。"
  },
  {
    "start": 3162983,
    "end": 3167479,
    "text": "800以上であれば、タブレットUIをレンダリングする。"
  },
  {
    "start": 3167479,
    "end": 3170944,
    "text": "タブレットUIがNULLの場合、モバイルUIをレンダリングする。"
  },
  {
    "start": 3170944,
    "end": 3173520,
    "text": "そして最後に、モバイルUIをレンダリングする。"
  },
  {
    "start": 3175040,
    "end": 3177088,
    "text": "ちょっと時間をあげるから、これを全部コピーしてくれ。"
  },
  {
    "start": 3177088,
    "end": 3178480,
    "text": "ビデオを一時停止することができます。"
  },
  {
    "start": 3179440,
    "end": 3182960,
    "text": "レスポンシブにする最初のウィジェットは、一番下のナビゲーションバーです。"
  },
  {
    "start": 3183760,
    "end": 3187760,
    "text": "ウェブモードでは、下のナビゲーションバーを表示させたくない。"
  },
  {
    "start": 3188880,
    "end": 3193840,
    "text": "タブレットやモバイルの場合は、下のナビゲーションバーを表示したい。"
  },
  {
    "start": 3195600,
    "end": 3199640,
    "text": "これを行うには、navscreen.dartに入りましょう。"
  },
  {
    "start": 3199640,
    "end": 3203280,
    "text": "レスポンシブ・ウィジェットにラップすることができる。"
  },
  {
    "start": 3203360,
    "end": 3205953,
    "text": "レスポンシブ・ウィジェットにラップすることができる。"
  },
  {
    "start": 3205953,
    "end": 3210826,
    "text": "この場合、デスクトップ・モードではnullを返すことになる。"
  },
  {
    "start": 3210826,
    "end": 3216880,
    "text": "レスポンシブビルダーが持っているレイアウトビルダーでnullを返すとエラーになります。"
  },
  {
    "start": 3218400,
    "end": 3226800,
    "text": "navscreenの内部では、responsive.isDesktopをチェックしてコンテキストを渡す必要があります。"
  },
  {
    "start": 3227760,
    "end": 3230187,
    "text": "widgets.dartを忘れずにインポートしてください。"
  },
  {
    "start": 3230187,
    "end": 3234880,
    "text": "ここでのアイデアは、responsive.isNotEqualToDesktopかどうかをチェックすることです。"
  },
  {
    "start": 3235760,
    "end": 3238678,
    "text": "一番下のナビゲーション・バーを戻したい。"
  },
  {
    "start": 3238678,
    "end": 3240320,
    "text": "そうでない場合はnullを返す。"
  },
  {
    "start": 3242240,
    "end": 3246977,
    "text": "responsive.isNotDesktopをチェックすることで、モバイルとタブレットをカバーしている。"
  },
  {
    "start": 3246977,
    "end": 3248172,
    "text": "クロームをチェックしよう。"
  },
  {
    "start": 3248172,
    "end": 3249714,
    "text": "リロードされたのを見ることができる。"
  },
  {
    "start": 3249714,
    "end": 3252320,
    "text": "下のナビゲーションバーが消えた。"
  },
  {
    "start": 3253280,
    "end": 3256764,
    "text": "これを小さくすると、下のナビゲーション・バーが表示される。"
  },
  {
    "start": 3256764,
    "end": 3257840,
    "text": "それをクリックすればいい。"
  },
  {
    "start": 3264560,
    "end": 3268322,
    "text": "それでは、アプリ・バーをレスポンシブにする作業に取りかかろう。"
  },
  {
    "start": 3268322,
    "end": 3274732,
    "text": "モバイルでは、Netflixのロゴと3つのアプリバーボタンしかありません。"
  },
  {
    "start": 3274732,
    "end": 3284400,
    "text": "ウェブ上では、異なるNetflixのロゴ、5つのアプリバーボタン、そしていくつかのアイコンボタンといくつかのアプリバーボタンが混在している。"
  },
  {
    "start": 3287040,
    "end": 3291738,
    "text": "カスタム・アプリ・バーの中で、ビルド機能まで行ってみよう。"
  },
  {
    "start": 3291738,
    "end": 3294000,
    "text": "コンテナはここに置いておける。"
  },
  {
    "start": 3294880,
    "end": 3299760,
    "text": "安全な列から下は、すべてモバイル版とみなすことができる。"
  },
  {
    "start": 3301040,
    "end": 3304074,
    "text": "レスポンシブ・ウィジェットを作ってみよう。"
  },
  {
    "start": 3304074,
    "end": 3306751,
    "text": "モバイルをインスタンス化する。"
  },
  {
    "start": 3306751,
    "end": 3311146,
    "text": "これがcustomAppBarMobileとなる。"
  },
  {
    "start": 3311146,
    "end": 3317600,
    "text": "次にデスクトップ、customAppBarDesktopが必要だ。"
  },
  {
    "start": 3321040,
    "end": 3326000,
    "text": "モバイル用には、ステートレス・ウィジェットのcustomAppBarMobileを作成する。"
  },
  {
    "start": 3327600,
    "end": 3329920,
    "text": "その後、安全な場所に戻る。"
  },
  {
    "start": 3332800,
    "end": 3336400,
    "text": "デスクトップ版については、モバイル版をコピーすることから始めよう。"
  },
  {
    "start": 3337920,
    "end": 3340464,
    "text": "それを下に貼り付ける。"
  },
  {
    "start": 3340464,
    "end": 3343520,
    "text": "モバイルをデスクトップに名称変更。"
  },
  {
    "start": 3345680,
    "end": 3353654,
    "text": "Netflixのロゴには、NetflixLogo1を使います。"
  },
  {
    "start": 3353654,
    "end": 3356016,
    "text": "定型サイズのボックスはここに残しておくことができる。"
  },
  {
    "start": 3356016,
    "end": 3362099,
    "text": "前半に必要な他のアプリ・バー・ボタンを追加することができる。"
  },
  {
    "start": 3362099,
    "end": 3365965,
    "text": "それをコピーして、もう2つ貼り付けよう。"
  },
  {
    "start": 3365965,
    "end": 3369469,
    "text": "これはホームに変更しよう。"
  },
  {
    "start": 3369469,
    "end": 3374414,
    "text": "このmyListを最新に設定することができる。"
  },
  {
    "start": 3374414,
    "end": 3379315,
    "text": "私たちは、子供たちの一番上に家を移すことができる。"
  },
  {
    "start": 3379315,
    "end": 3388888,
    "text": "保存を押してUIを見ると、Netflixのロゴ、ホーム、テレビ番組、映画、最新、マイリストが表示されている。"
  },
  {
    "start": 3388888,
    "end": 3393358,
    "text": "縮小すると、もうひとつのNetflixのロゴに変わるのがわかる。"
  },
  {
    "start": 3393358,
    "end": 3395840,
    "text": "テレビ番組、映画、マイリストがある。"
  },
  {
    "start": 3397920,
    "end": 3400663,
    "text": "次のパートでは、もう1行追加する必要がある。"
  },
  {
    "start": 3400663,
    "end": 3403920,
    "text": "展開されたウィジェットを下にコピーペーストしてみよう。"
  },
  {
    "start": 3406400,
    "end": 3409120,
    "text": "今回はアイコンボタンを用意する。"
  },
  {
    "start": 3410960,
    "end": 3414389,
    "text": "パディング付き edgeInsets.0."
  },
  {
    "start": 3414389,
    "end": 3417680,
    "text": "アイコンはicons.searchとなる。"
  },
  {
    "start": 3418320,
    "end": 3420249,
    "text": "アイコンのサイズは28.0となる。"
  },
  {
    "start": 3420249,
    "end": 3422687,
    "text": "色はcolors.whiteとなる。"
  },
  {
    "start": 3422687,
    "end": 3425840,
    "text": "onPressedは検索結果をプリントアウトする。"
  },
  {
    "start": 3429040,
    "end": 3432538,
    "text": "次に、アプリ・バー・ボタンを全角でキッズにする。"
  },
  {
    "start": 3432538,
    "end": 3436377,
    "text": "次のアプリバーボタンは全角でDVDとなる。"
  },
  {
    "start": 3436377,
    "end": 3443520,
    "text": "最後に、2つのアプリバーボタンの代わりに、もう2つのアイコンボタンが必要だ。"
  },
  {
    "start": 3443759,
    "end": 3446880,
    "text": "アイコンはカード、ギフトカードになります。"
  },
  {
    "start": 3449440,
    "end": 3451120,
    "text": "プレゼントを印刷します。"
  },
  {
    "start": 3451120,
    "end": 3453920,
    "text": "もう一方のアイコンは通知となる。"
  },
  {
    "start": 3457520,
    "end": 3459920,
    "text": "通知を印刷する"
  },
  {
    "start": 3464160,
    "end": 3470158,
    "text": "これでNetflixのロゴがアプリバーの最初の部分と一緒に表示され、次にアプリバーの2番目の部分が表示されました。"
  },
  {
    "start": 3470158,
    "end": 3473744,
    "text": "そして2行目。"
  },
  {
    "start": 3473744,
    "end": 3476800,
    "text": "この2列の間にもう少し間隔を空ける必要がある。"
  },
  {
    "start": 3478160,
    "end": 3483360,
    "text": "各拡張行ウィジェットの間にconstスペーサー・ウィジェットを入れよう。"
  },
  {
    "start": 3486640,
    "end": 3489406,
    "text": "これで、きれいに間隔が空いているのがわかる。"
  },
  {
    "start": 3489406,
    "end": 3496160,
    "text": "縮小すると古いアプリバーになり、大きくすると新しいアプリバーになる。"
  },
  {
    "start": 3497840,
    "end": 3501040,
    "text": "レスポンシブにする最後のウィジェットはカスタムヘッダーです。"
  },
  {
    "start": 3502240,
    "end": 3504352,
    "text": "これをこう変える必要がある。"
  },
  {
    "start": 3504352,
    "end": 3511208,
    "text": "静止画像ではなく、ビデオプレーヤー・パッケージを使ってビデオを再生したい。"
  },
  {
    "start": 3511208,
    "end": 3516992,
    "text": "ミュートボタンも追加します。このボタンをタップすると、オーディオのミュートとミュート解除ができます。"
  },
  {
    "start": 3516992,
    "end": 3520116,
    "text": "その場合、説明文も追加する必要がある。"
  },
  {
    "start": 3520116,
    "end": 3522760,
    "text": "コンテンツヘッダーに入ってみよう。"
  },
  {
    "start": 3522760,
    "end": 3528298,
    "text": "まず最初にすることは、スタックを切り取ることだ。"
  },
  {
    "start": 3528298,
    "end": 3541868,
    "text": "代わりに、コンテンツ・ヘッダー・モバイルとしてモバイルを定義するレスポンシブ・ウィジェットを用意する。"
  },
  {
    "start": 3541868,
    "end": 3549120,
    "text": "デスクトップ用には、コンテンツのヘッダーをデスクトップにレンダリングします。"
  },
  {
    "start": 3550799,
    "end": 3553655,
    "text": "いずれも注目コンテンツを取り込む必要がある。"
  },
  {
    "start": 3553655,
    "end": 3554880,
    "text": "入れよう。"
  },
  {
    "start": 3555680,
    "end": 3574160,
    "text": "モバイル向けには、コンテンツ・ヘッダー・モバイルのすぐ下に配置し、ビルド機能でスタックを貼り付け、フィーチャー・コンテンツも取り込むことができる。"
  },
  {
    "start": 3579279,
    "end": 3583360,
    "text": "コンテンツのヘッダーをコピーして、下に貼り付けよう。"
  },
  {
    "start": 3585600,
    "end": 3587759,
    "text": "今回はモバイルをデスクトップに変更する。"
  },
  {
    "start": 3591040,
    "end": 3595440,
    "text": "ウェブ・バージョンをチェックしてみると、すべてが正しくレンダリングされていることがわかる。"
  },
  {
    "start": 3596960,
    "end": 3598328,
    "text": "さあ、始めよう。"
  },
  {
    "start": 3598328,
    "end": 3606480,
    "text": "最初にすべきことは、コンテンツ・ヘッダー・デスクトップをステートレス・ウィジェットからステートフル・ウィジェットに変換することです。"
  },
  {
    "start": 3606480,
    "end": 3615793,
    "text": "ステートフルである必要があるのは、ビデオを再生するためのビデオ・プレーヤー・コントローラーを管理する必要があるからであり、ミュート・ボタンのブール値を管理する必要もあるからだ。"
  },
  {
    "start": 3615793,
    "end": 3617868,
    "text": "今すぐその両方を加えよう。"
  },
  {
    "start": 3617868,
    "end": 3629120,
    "text": "ビデオ・プレーヤー・コントローラーをインスタンス化する必要がある。"
  },
  {
    "start": 3630160,
    "end": 3637929,
    "text": "init stateの内部で、video controllerをvideo player controller dot networkに等しく設定する。"
  },
  {
    "start": 3637929,
    "end": 3642011,
    "text": "ここではSyntelのURLを渡す。"
  },
  {
    "start": 3642011,
    "end": 3647994,
    "text": "ウィジェット・ドット・フィーチャー・コンテンツ・ドット・ビデオURL。"
  },
  {
    "start": 3647994,
    "end": 3655839,
    "text": "これが初期化されたら、ドット・ドット初期化ドットを実行する必要がある。"
  },
  {
    "start": 3657759,
    "end": 3660720,
    "text": "ここではthenの値を使わないので、アンダースコアを入れることができる。"
  },
  {
    "start": 3661360,
    "end": 3662960,
    "text": "あとは状態を設定するだけだ。"
  },
  {
    "start": 3665920,
    "end": 3668824,
    "text": "ページが読み込まれたらすぐにビデオを自動再生したい。"
  },
  {
    "start": 3668824,
    "end": 3673096,
    "text": "ドット・ドットで別のチェーン演算子を使えば、ビデオを再生することができる。"
  },
  {
    "start": 3673096,
    "end": 3679953,
    "text": "video controller dot disposeでビデオを廃棄するのを忘れないようにしよう。"
  },
  {
    "start": 3679953,
    "end": 3682990,
    "text": "これでUIの編集を始めることができる。"
  },
  {
    "start": 3682990,
    "end": 3688737,
    "text": "スタックにジェスチャー検出器を挿入する。"
  },
  {
    "start": 3688737,
    "end": 3695520,
    "text": "動画が再生中か否かに応じて、オンタップで一時停止や再生ができるようにしたい。"
  },
  {
    "start": 3696960,
    "end": 3700960,
    "text": "ビデオコントローラdotの値dotが再生されているかどうかをチェックするために行う。"
  },
  {
    "start": 3702880,
    "end": 3705600,
    "text": "その後、ビデオを一時停止するか、適宜再生する。"
  },
  {
    "start": 3710320,
    "end": 3720380,
    "text": "次に、スタックのアライメントを左下に設定します。タイトル、説明、ボタンがスタックの左下に来るからです。"
  },
  {
    "start": 3720380,
    "end": 3722384,
    "text": "まずはそれを片付けよう。"
  },
  {
    "start": 3722384,
    "end": 3725200,
    "text": "とりあえず、両方のポジション・ウィジェットを消してみよう。"
  },
  {
    "start": 3727759,
    "end": 3733360,
    "text": "ここでは、左が60になるように新しいものを作ることができる。"
  },
  {
    "start": 3735839,
    "end": 3738383,
    "text": "右は60になる。"
  },
  {
    "start": 3738383,
    "end": 3741680,
    "text": "ボトムは150になる。"
  },
  {
    "start": 3746560,
    "end": 3753440,
    "text": "子は、クロス軸アライメント、クロス軸アライメント・ドットスタートの子を持つ列となる。"
  },
  {
    "start": 3756000,
    "end": 3758560,
    "text": "まず、タイトルを表示する必要がある。"
  },
  {
    "start": 3758560,
    "end": 3760080,
    "text": "サイズのボックスを250.0."
  },
  {
    "start": 3762880,
    "end": 3769520,
    "text": "子は画像ドットアセットウィジェットドットフィーチャーコンテンツドットタイトル画像URLです。"
  },
  {
    "start": 3770400,
    "end": 3773139,
    "text": "サイズボックスで間隔を空ける。"
  },
  {
    "start": 3773139,
    "end": 3774178,
    "text": "身長15.0。"
  },
  {
    "start": 3774178,
    "end": 3776640,
    "text": "次はテキスト・ウィジェットだ。"
  },
  {
    "start": 3778640,
    "end": 3782163,
    "text": "ウィジェット・ドット・フィーチャー・コンテンツ・ドット・ディスクリプション"
  },
  {
    "start": 3782163,
    "end": 3785600,
    "text": "このテキストの下に影をつけたい。"
  },
  {
    "start": 3786160,
    "end": 3791440,
    "text": "スタイルの内部では、まずテキスト・スタイルの色をカラー・ドット・ホワイトに設定する。"
  },
  {
    "start": 3794640,
    "end": 3796480,
    "text": "次に、フォントサイズを18.0に設定する。"
  },
  {
    "start": 3799600,
    "end": 3802932,
    "text": "フォントウェイト、フォントウェイト500。"
  },
  {
    "start": 3802932,
    "end": 3816746,
    "text": "次にシャドウを作ると、カラー、カラー・ドット・ブラック、オフセット、オフセット2.0、4.0でシャドウを作ることができる。"
  },
  {
    "start": 3816746,
    "end": 3821680,
    "text": "ぼかし半径は6.0になる。"
  },
  {
    "start": 3823920,
    "end": 3826350,
    "text": "UIを見てみよう。"
  },
  {
    "start": 3826350,
    "end": 3829440,
    "text": "シンテルとその説明がある。"
  },
  {
    "start": 3830480,
    "end": 3836880,
    "text": "positionウィジェットに続いて、高さ20.0のサイズボックスでさらに間隔を空けてみましょう。"
  },
  {
    "start": 3839040,
    "end": 3842480,
    "text": "ここでは、子ウィジェットを持つ行ウィジェットを作成する。"
  },
  {
    "start": 3846400,
    "end": 3848069,
    "text": "まずは再生ボタンだ。"
  },
  {
    "start": 3848069,
    "end": 3850880,
    "text": "次に、間隔を広げるために、もう1つサイズのボックスを追加する。"
  },
  {
    "start": 3854800,
    "end": 3857339,
    "text": "フラットなボタンアイコンが必要になる。"
  },
  {
    "start": 3857339,
    "end": 3858800,
    "text": "フラットボタンドットアイコン"
  },
  {
    "start": 3859600,
    "end": 3865292,
    "text": "プレスの際には、さらに詳しい情報を掲載する予定だ。"
  },
  {
    "start": 3865292,
    "end": 3872320,
    "text": "アイコンはアイコン・ドット・インフォ・アウトラインとなる。"
  },
  {
    "start": 3874160,
    "end": 3879759,
    "text": "ラベルはテキスト詳細情報に設定される。"
  },
  {
    "start": 3879760,
    "end": 3886917,
    "text": "スタイルはテキストスタイルのフォントサイズ16.0になります。"
  },
  {
    "start": 3886917,
    "end": 3892800,
    "text": "フォントウェイト、フォントウェイトドットw600。"
  },
  {
    "start": 3894400,
    "end": 3896997,
    "text": "最後に、ボタンの色を決めよう。"
  },
  {
    "start": 3896997,
    "end": 3898400,
    "text": "カラー、カラー・ドット・ホワイト。"
  },
  {
    "start": 3900400,
    "end": 3904000,
    "text": "これで、フラット・ボタンがconstになることはなくなった。"
  },
  {
    "start": 3904960,
    "end": 3910080,
    "text": "アイコンとラベルを一定にすることで、再レンダリングしないようにできる。"
  },
  {
    "start": 3911520,
    "end": 3914716,
    "text": "行の最後に、ミュートボタンを追加しよう。"
  },
  {
    "start": 3914716,
    "end": 3916560,
    "text": "ここにもう一つサイズボックスを追加しよう。"
  },
  {
    "start": 3918720,
    "end": 3920825,
    "text": "今回の幅は20.0。"
  },
  {
    "start": 3920825,
    "end": 3928265,
    "text": "ここでは、ビデオコントローラーのドット値が初期化されているかどうかをチェックする。"
  },
  {
    "start": 3928265,
    "end": 3931920,
    "text": "これは、ビデオがロードされたかどうかをチェックするためのものです。"
  },
  {
    "start": 3932480,
    "end": 3936160,
    "text": "ビデオが読み込まれたなら、アイコンボタンを返したい。"
  },
  {
    "start": 3937840,
    "end": 3945760,
    "text": "がミュートされている場合、アイコンのドット・ボリュームをオフ、またはアイコンのドット・ボリュームをアップに戻す。"
  },
  {
    "start": 3949200,
    "end": 3950800,
    "text": "ここで中括弧を削除することができる。"
  },
  {
    "start": 3953360,
    "end": 3956320,
    "text": "次に、アイコンの色をcolors dot whiteに設定する。"
  },
  {
    "start": 3956480,
    "end": 3958766,
    "text": "ドットホワイトの色へ。"
  },
  {
    "start": 3958766,
    "end": 3961725,
    "text": "アイコンのサイズは30.0になる。"
  },
  {
    "start": 3961725,
    "end": 3964960,
    "text": "押されていない状態がセットされる。"
  },
  {
    "start": 3968400,
    "end": 3973545,
    "text": "set stateの中で、is mutedがtrueかどうかをチェックする。"
  },
  {
    "start": 3973545,
    "end": 3978580,
    "text": "もしそうなら、ビデオコントローラーのドットボリュームを100に設定する。"
  },
  {
    "start": 3978580,
    "end": 3985280,
    "text": "もしtrueでなければ、ビデオ・コントローラーのドット・セット・ボリュームをゼロにしたいことを意味する。"
  },
  {
    "start": 3987760,
    "end": 3997520,
    "text": "is mutedの値をvideo controller dot value dot volumeと等しく設定し、それがゼロかどうかをチェックすることで設定できる。"
  },
  {
    "start": 3998800,
    "end": 4003120,
    "text": "ユーザーがこのアイコンを押すと、まずミュートされているかどうかがチェックされる。"
  },
  {
    "start": 4003120,
    "end": 4005563,
    "text": "もしそうなら、ボリュームを再生したい。"
  },
  {
    "start": 4005563,
    "end": 4007200,
    "text": "ボリュームを100に設定する。"
  },
  {
    "start": 4007200,
    "end": 4012240,
    "text": "もしfalseなら、音量をゼロに設定し、それに応じてミュートが割り当てられる。"
  },
  {
    "start": 4013600,
    "end": 4016160,
    "text": "クロームをもう一度見てみよう。"
  },
  {
    "start": 4016160,
    "end": 4020080,
    "text": "プレイ・モア・インフォメーションとミュート・ボタンがあるのがわかる。"
  },
  {
    "start": 4020880,
    "end": 4022683,
    "text": "これをカラムの下に置く必要がある。"
  },
  {
    "start": 4022683,
    "end": 4027319,
    "text": "何が起こったかというと、この一本を外に出しすぎたことだと思う。"
  },
  {
    "start": 4027319,
    "end": 4035693,
    "text": "行ウィジェットとサイズボックスをコピーして、カラムの中に入れましょう。"
  },
  {
    "start": 4035693,
    "end": 4037680,
    "text": "子供たちの中に。"
  },
  {
    "start": 4039920,
    "end": 4044080,
    "text": "保存を押してもう一度UIを確認すると、このように見えるはずだ。"
  },
  {
    "start": 4045360,
    "end": 4047600,
    "text": "最後に、ビデオを実際に表示させる必要がある。"
  },
  {
    "start": 4050240,
    "end": 4054642,
    "text": "最初のコンテナをインスタンス化してみよう。"
  },
  {
    "start": 4054642,
    "end": 4056320,
    "text": "これを消してしまおう。"
  },
  {
    "start": 4057280,
    "end": 4060351,
    "text": "代わりにアスペクト比を使う。"
  },
  {
    "start": 4060351,
    "end": 4066797,
    "text": "アスペクト比は、まずコントローラのドット値が初期化されているかどうかをチェックする。"
  },
  {
    "start": 4066797,
    "end": 4072187,
    "text": "これが初期化されれば、ビデオのアスペクト比が得られる。"
  },
  {
    "start": 4072187,
    "end": 4076579,
    "text": "そうでなければ、2.344という任意の値を返すことになる。"
  },
  {
    "start": 4076579,
    "end": 4081622,
    "text": "この値をいじくりまわして、どれが自分に合うか試してみるといい。"
  },
  {
    "start": 4081622,
    "end": 4088484,
    "text": "子は、ドット値が初期化されているかどうかをチェックするビデオコントローラになる。"
  },
  {
    "start": 4088484,
    "end": 4095487,
    "text": "もし初期化されたら、ビデオ・コントローラーを渡すビデオ・プレーヤーを返したい。"
  },
  {
    "start": 4095487,
    "end": 4103360,
    "text": "そうでなければ、ウィジェットのフィーチャー・コンテンツの画像URLを持つ画像アセットを返したい。"
  },
  {
    "start": 4107279,
    "end": 4112141,
    "text": "ここでやっているのは、ビデオが初期化されているかどうかをチェックすることだ。"
  },
  {
    "start": 4112141,
    "end": 4116682,
    "text": "もし初期化されていなければ、静止画像を返したい。"
  },
  {
    "start": 4116682,
    "end": 4121727,
    "text": "ビデオが初期化されないのは、リンクが機能していない場合だけだ。"
  },
  {
    "start": 4121727,
    "end": 4128180,
    "text": "リンクが機能すれば、ビデオを表示するビデオ・プレーヤー・ウィジェットを返す。"
  },
  {
    "start": 4128180,
    "end": 4133808,
    "text": "最初にインスタンス化するときに、ビデオのボリュームをゼロに設定しよう。"
  },
  {
    "start": 4133808,
    "end": 4143268,
    "text": "もう一度initの状態に入り、鎖演算子を追加して体積をゼロに設定すればいい。"
  },
  {
    "start": 4143268,
    "end": 4146012,
    "text": "UIをもう一度見てみよう。"
  },
  {
    "start": 4146012,
    "end": 4149051,
    "text": "ビデオが再生されないのがわかる。"
  },
  {
    "start": 4149051,
    "end": 4153856,
    "text": "ここにドット・ドット・プレーを加える必要があるからだ。"
  },
  {
    "start": 4153856,
    "end": 4157036,
    "text": "保存してアプリをホットリスタートしよう。"
  },
  {
    "start": 4157036,
    "end": 4160621,
    "text": "ビデオが表示され、再生が始まります。"
  },
  {
    "start": 4160621,
    "end": 4169040,
    "text": "タップすれば一時停止、終了を押せば再生、ここをクリックすればミュート解除、クリックすればミュートです。"
  },
  {
    "start": 4170719,
    "end": 4173806,
    "text": "最後にグラデーション・コンテナについて説明する。"
  },
  {
    "start": 4173806,
    "end": 4179613,
    "text": "グラデーションはビデオコントローラのアスペクト比と同じサイズにしたい。"
  },
  {
    "start": 4179613,
    "end": 4184587,
    "text": "これをコピーして下に貼り付け、コンテナをコピーしよう。"
  },
  {
    "start": 4184587,
    "end": 4187359,
    "text": "子にはコンテナを貼り付ける。"
  },
  {
    "start": 4190160,
    "end": 4194240,
    "text": "高さを削除しよう。これでコンテナは縦横比に合わせて拡大する。"
  },
  {
    "start": 4195280,
    "end": 4196668,
    "text": "ホットリスタート"
  },
  {
    "start": 4196668,
    "end": 4201040,
    "text": "UIに戻ると、グラデーションはかなりいい感じだ。"
  },
  {
    "start": 4202639,
    "end": 4211400,
    "text": "もう少し大きくしてみると、ビデオプレーヤーの一番下に、スクリーンを横切る線が点滅しているのが一瞬見える。"
  },
  {
    "start": 4211400,
    "end": 4217801,
    "text": "グラデーションとビデオプレーヤーの間に1ピクセルのギャップがあるように見える。"
  },
  {
    "start": 4217801,
    "end": 4220070,
    "text": "なぜこうなるのかはわからない。"
  },
  {
    "start": 4220070,
    "end": 4233840,
    "text": "私が修正した方法は、アスペクト比をpositionedウィジェットで囲み、bottomをマイナス1.0、leftを0、rightを0に設定することだった。"
  },
  {
    "start": 4233840,
    "end": 4245600,
    "text": "保存をクリックし、Chromeに移動してUIのサイズを変更すると、ビデオプレーヤーの下部に表示される線に問題は見られなくなりました。"
  },
  {
    "start": 4245920,
    "end": 4251750,
    "text": "コンテンツヘッダーを完成させるために最後にしなければならないことは、再生ボタンのパディングを修正することです。"
  },
  {
    "start": 4251750,
    "end": 4255520,
    "text": "ここでは、responsive.isDesktopをチェックする。"
  },
  {
    "start": 4256960,
    "end": 4259515,
    "text": "レスポンシブがデスクトップでないことを確認する。"
  },
  {
    "start": 4259515,
    "end": 4263304,
    "text": "前に書いたパディングを返したい。"
  },
  {
    "start": 4263304,
    "end": 4268764,
    "text": "そうでなければ、新しいパディングを返したい。"
  },
  {
    "start": 4268764,
    "end": 4273920,
    "text": "これは25.0、10.0、30.0、10.0となる。"
  },
  {
    "start": 4275680,
    "end": 4283717,
    "text": "次に、デスクトップ版のエッジ・インセットをここにコピーする。"
  },
  {
    "start": 4283717,
    "end": 4290336,
    "text": "上にスクロールしてフラット・ボタンに移動したら、パディングも追加しよう。"
  },
  {
    "start": 4290336,
    "end": 4291900,
    "text": "それを貼り付けるだけだ。"
  },
  {
    "start": 4291900,
    "end": 4295411,
    "text": "アイコンのサイズを30.0に設定しよう。"
  },
  {
    "start": 4295411,
    "end": 4303489,
    "text": "保存をクリックしてUIを確認すると、ボタンが同じサイズになり、動画が再生されていることがわかります。"
  },
  {
    "start": 4303489,
    "end": 4306240,
    "text": "これでNetflixアプリはすべて終了だ。"
  },
  {
    "start": 4308639,
    "end": 4310895,
    "text": "私たちはレスポンシブなUIを作ることができる。"
  },
  {
    "start": 4310895,
    "end": 4312480,
    "text": "モバイルモードに移行する。"
  },
  {
    "start": 4314000,
    "end": 4318285,
    "text": "私たちは、スクロールダウンするとフェードアウトするカスタム・アプリ・バーを作りました。"
  },
  {
    "start": 4318285,
    "end": 4326936,
    "text": "コンテンツ・ヘッダーには、タイトル、縦長のアイコンボタン、再生ボタンとともに、フィーチャー画像を配置している。"
  },
  {
    "start": 4326936,
    "end": 4337059,
    "text": "プレビューを作成し、ブーリアン値によってNetflixオリジナルにも使える再利用可能なコンテンツリストウィジェットを作成した。"
  },
  {
    "start": 4337059,
    "end": 4344179,
    "text": "下のナビゲーションバーを追加し、ホームに戻ると状態が保存されるようにしました。"
  },
  {
    "start": 4344179,
    "end": 4350587,
    "text": "ウェブ・モードに入ると、ビデオの再生が始まるのがわかる。"
  },
  {
    "start": 4350587,
    "end": 4356272,
    "text": "ミュートボタンがあり、タップするとミュート、タップするとミュートが解除される。"
  },
  {
    "start": 4356272,
    "end": 4364880,
    "text": "ビデオをタップして一時停止し、もう一度タップして再生することができます。また、カスタム・アプリ・バーを画面のサイズに応じて反応するようにしました。"
  },
  {
    "start": 4366080,
    "end": 4368133,
    "text": "このビデオは以上だ。"
  },
  {
    "start": 4368133,
    "end": 4378041,
    "text": "いいね！」「購読する」「このビデオをシェアする」「GitHubのレポにスターをつける」を忘れずに。"
  },
  {
    "start": 4378041,
    "end": 4389760,
    "text": "見てくれてありがとう。"
  }
]