[
  {
    "start": 250,
    "end": 2698,
    "text": "Pythonのyieldキーワードの意味は？"
  },
  {
    "start": 2794,
    "end": 8750,
    "text": "ここにzenofpython txtというテキストファイルがあって、その中にZen of Pythonの詩が書いてある。"
  },
  {
    "start": 8900,
    "end": 11530,
    "text": "私がやりたいのは、このファイルから各行を取り出すことだ。"
  },
  {
    "start": 11610,
    "end": 16426,
    "text": "ファイル名を入力とするfetch linesという関数を作ろうと思う。"
  },
  {
    "start": 16538,
    "end": 24346,
    "text": "次に、ファイル名を開いて、読み込み中なので、rをファイルとしてここに書くことにする。"
  },
  {
    "start": 24458,
    "end": 27954,
    "text": "では、ここでlinesという空のリストを作成する。"
  },
  {
    "start": 28082,
    "end": 30978,
    "text": "次に、ファイル内の行について言う。"
  },
  {
    "start": 31074,
    "end": 35494,
    "text": "このループを繰り返すたびに、その行を行リストに追加していく。"
  },
  {
    "start": 35612,
    "end": 39514,
    "text": "ループの後、この下にある行のリストを返す。"
  },
  {
    "start": 39552,
    "end": 46806,
    "text": "ここでは、Zenがpythonのtxtを入力として行をフェッチするのと等しいとします。"
  },
  {
    "start": 46918,
    "end": 53690,
    "text": "そしてZenをプリントして、これを実行すると、ここにすべての行がリストとしてプリントされているのがわかるだろう。"
  },
  {
    "start": 53840,
    "end": 63230,
    "text": "要するに、関数fetch linesを呼び出して、「このファイルから各行を取り出して、全部リストに入れて、そのリストをちょうだい」と言っているのだ。"
  },
  {
    "start": 63380,
    "end": 64494,
    "text": "これでいい。"
  },
  {
    "start": 64532,
    "end": 69538,
    "text": "この例では、リストの数行がメモリに保存され、それをプリントアウトできる。"
  },
  {
    "start": 69624,
    "end": 75250,
    "text": "このテキストファイルが巨大で、何百万行ものデータが入っているというシナリオを想像してほしい。"
  },
  {
    "start": 75320,
    "end": 76306,
    "text": "するとどうなるか？"
  },
  {
    "start": 76408,
    "end": 80390,
    "text": "さて、もしあなたのコンピューターにそのデータをすべて保存できるだけの十分なメモリーがあれば、準備は万端だ。"
  },
  {
    "start": 80460,
    "end": 81346,
    "text": "そうでなかったら？"
  },
  {
    "start": 81378,
    "end": 83250,
    "text": "メモリーエラーに直面することになる。"
  },
  {
    "start": 83410,
    "end": 94998,
    "text": "では、全行分の膨大なデータリストを取得する代わりに、一度に1行ずつ取得し、それを必要な用途に使用し、メモリから消去して次の行に進むのはどうだろう、と思うかもしれない。"
  },
  {
    "start": 95084,
    "end": 98466,
    "text": "そうすれば、メモリには一度に1行しか保存する必要がなくなる。"
  },
  {
    "start": 98578,
    "end": 101230,
    "text": "その質問はまさにあなたが考えていたことでしょう？"
  },
  {
    "start": 101380,
    "end": 101742,
    "text": "素晴らしい。"
  },
  {
    "start": 101796,
    "end": 103962,
    "text": "質問に答えるなら、それは素晴らしい解決策だ。"
  },
  {
    "start": 104026,
    "end": 106110,
    "text": "Pythonはまさにその答えを持っている。"
  },
  {
    "start": 106180,
    "end": 108030,
    "text": "これはyieldキーワードと呼ばれる。"
  },
  {
    "start": 108370,
    "end": 115310,
    "text": "ここでは、行のリスト全体を返す代わりに、リストを完全に削除して、このreturn文を削除してみよう。"
  },
  {
    "start": 115390,
    "end": 119300,
    "text": "その代わりに、このforループの中で、例えばyield行としよう。"
  },
  {
    "start": 119830,
    "end": 124606,
    "text": "ここではまだZenに関数呼び出しが割り当てられていて、Zenをプリントしている。"
  },
  {
    "start": 124718,
    "end": 126834,
    "text": "試してみよう。"
  },
  {
    "start": 126872,
    "end": 129622,
    "text": "今、リストの代わりにジェネレーター・オブジェクトがある。"
  },
  {
    "start": 129756,
    "end": 135122,
    "text": "それは、このyieldキーワードを追加したことで、この関数がいわゆるジェネレーターとみなされるようになったからだ。"
  },
  {
    "start": 135266,
    "end": 138246,
    "text": "Zenはジェネレーター・オブジェクトに等しくなった。"
  },
  {
    "start": 138428,
    "end": 140290,
    "text": "どうやってラインをプリントアウトするのか？"
  },
  {
    "start": 140370,
    "end": 146214,
    "text": "本質的に起こっていることは、ジェネレーターがファイルを開き、このforループの最初の反復を開始したことだ。"
  },
  {
    "start": 146262,
    "end": 150170,
    "text": "はすでにファイルから最初の行を取得しており、それを私たちに渡す準備ができている。"
  },
  {
    "start": 150240,
    "end": 153194,
    "text": "こちらが要求するまで、ここで降伏する。"
  },
  {
    "start": 153312,
    "end": 169870,
    "text": "それを得るには、Zenを入力としてnextと言わなければならない。それをプリントアウトすれば、2行目を得るために1行目がプリントアウトされたことがわかるだろう。次の値を得るためには、Zenを入力としてこのnextを呼び出し続けなければならない。"
  },
  {
    "start": 170020,
    "end": 178050,
    "text": "さて、ひとつ注意しなければならないのは、ある行が与えられて次の行に移ると、最後の行は記憶から消去され、どこにも保存されないということだ。"
  },
  {
    "start": 178130,
    "end": 182920,
    "text": "前の行に戻りたい場合は、もう一度fetch lineを呼び出す必要がある。"
  },
  {
    "start": 183290,
    "end": 189090,
    "text": "イールド・キーワードやジェネレーターがどのようなもので、どのように役立つのか、ご理解いただけただろうか。"
  },
  {
    "start": 189170,
    "end": 191654,
    "text": "このビデオから何かを学んだなら、必ず「いいね！」を残してください。"
  },
  {
    "start": 191692,
    "end": 194518,
    "text": "このようなコンテンツをもっとお望みなら、購読ボタンを押してください。"
  },
  {
    "start": 194604,
    "end": 197094,
    "text": "見てくれてありがとう、また次のビデオで会おう。"
  },
  {
    "start": 197212,
    "end": 197410,
    "text": "さようなら。"
  }
]