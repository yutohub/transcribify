[
  {
    "start": 200,
    "end": 11078,
    "text": "みなさん、こんにちは！本日、ついにexpressとtypescriptを使った次のjsコースをリリースしました。"
  },
  {
    "start": 11134,
    "end": 21398,
    "text": "これらの技術を使えば、course@codinginflow.com、次のjsを見つけることができる。このリンクは、以下のビデオの説明にも載せておく。"
  },
  {
    "start": 21534,
    "end": 30910,
    "text": "これから、このコースのプレビューと、私たちがそこで作った素晴らしいプロジェクトをお見せし、コースの内容についてよくある質問にお答えします。"
  },
  {
    "start": 30990,
    "end": 39838,
    "text": "ビデオの最後に、今週末まで受講料が20％割引になる割引コードがあります。"
  },
  {
    "start": 39974,
    "end": 43206,
    "text": "4月9日までは通常通り。"
  },
  {
    "start": 43278,
    "end": 52966,
    "text": "また、返金制度も設けていますので、万が一コースがお気に召さなかった場合は、コース購入後2週間まではコース料金全額を返金いたします。"
  },
  {
    "start": 53078,
    "end": 55174,
    "text": "またコースをチェックするように。"
  },
  {
    "start": 55222,
    "end": 61030,
    "text": "リンクはcodinginflow.com next jsdevで、ここにコースのプレビューがある。"
  },
  {
    "start": 63730,
    "end": 73402,
    "text": "皆さん、expressとtypescriptを使用した私のBig Next jsコースへようこそ！このコースでは、これらのテクノロジーを使用してフルスタックのWebアプリケーションを構築する方法を学びます。"
  },
  {
    "start": 73506,
    "end": 83146,
    "text": "その前に、next JSについて、そしてこのフレームワークを学ぶ価値があるほどnext JSの何が特別なのかについてお話ししましょう。"
  },
  {
    "start": 83258,
    "end": 87426,
    "text": "next JSは、最近最も人気のあるリアクト・フレームワークのひとつである。"
  },
  {
    "start": 87538,
    "end": 95602,
    "text": "これはリアクトの上に別のフレームワークを載せたもので、リアクト・コンポーネントや私たちが大好きなリアクトのコードを書くことができる。"
  },
  {
    "start": 95666,
    "end": 105962,
    "text": "例えば、画像を適切なサイズにリサイズする自動画像最適化機能などだ。"
  },
  {
    "start": 106066,
    "end": 114002,
    "text": "これは小さいが重要な機能であり、統合されたルーティング・システムでもある。"
  },
  {
    "start": 114106,
    "end": 121602,
    "text": "また、次のJ'sコーチで直接APIエンドポイントを構築することも可能で、その場合、別のバックエンドサーバーが不要になることもある。"
  },
  {
    "start": 121706,
    "end": 122818,
    "text": "プロジェクトによる"
  },
  {
    "start": 122954,
    "end": 141946,
    "text": "最も重要な機能であり、多くの人が通常のリアクトからネクストJSに乗り換える理由は、ページごとに、通常のリアクトのようにクライアントでレンダリングするか、サーバーサイドレンダリングでサーバーでレンダリングするかを個別に決められることである。"
  },
  {
    "start": 142058,
    "end": 145906,
    "text": "クライアント・サイド・レンダリングは、古典的なリアクト・アプリでデータを取得する方法である。"
  },
  {
    "start": 145978,
    "end": 159190,
    "text": "リアクトを使ったことがある人なら、リアクトのウェブサイトは基本的に空のHTMLページであり、例えば異なるブログ記事のような表示したい実際のデータは、今のところこのHTMLページにはないことを知っているかもしれない。"
  },
  {
    "start": 159230,
    "end": 164302,
    "text": "ブラウザにロードする際、代わりにすべてのデータはJavaScriptを使って後でロードされる。"
  },
  {
    "start": 164406,
    "end": 175606,
    "text": "リアクトでは通常、ウェブページを開き、ウェブサイトがバックエンドサーバーにAPIリクエストを行い、そこからデータを取得している間、何らかの進捗インジケーターや進捗スピナーが表示される。"
  },
  {
    "start": 175638,
    "end": 179454,
    "text": "その後、半秒かそこらで画面にこのデータが表示される。"
  },
  {
    "start": 179542,
    "end": 187590,
    "text": "このため、これらの反応ウェブサイトは、本物のモバイルアプリのように非常にモダンで高速に感じられるが、SEOに関しては非常に不利である。"
  },
  {
    "start": 187670,
    "end": 198062,
    "text": "検索エンジン最適化 通常、ウェブサイトを構築する場合、Google検索で上位に表示されるようにします。"
  },
  {
    "start": 198166,
    "end": 203886,
    "text": "問題は、検索エンジンのクローラーは、私が話したような空のHTMLページしか見ないということだ。"
  },
  {
    "start": 204038,
    "end": 208150,
    "text": "JavaScriptがサーバーから残りのデータを読み込む前に、彼らはこのページを見る。"
  },
  {
    "start": 208190,
    "end": 213218,
    "text": "まず空のシェルがあり、それからバックエンドからデータをロードする。"
  },
  {
    "start": 213354,
    "end": 217074,
    "text": "これは、検索エンジンのクローラーが最適化されているものではない。"
  },
  {
    "start": 217202,
    "end": 223650,
    "text": "彼らは、ページを読み込んだときに、すでにすべてのデータがHTMLの中にあることを期待しており、これがインデックスにもなっている。"
  },
  {
    "start": 223770,
    "end": 232122,
    "text": "つまり、最悪の場合、これらのクローラーは、JavaScriptが残りのデータを読み込む前に空のシェルを見てしまうため、あなたのウェブサイトのコンテンツを見ることができない。"
  },
  {
    "start": 232226,
    "end": 240560,
    "text": "ネクストJSを使えば、ページをレンダリングする前にサーバーからデータをフェッチすることができる。"
  },
  {
    "start": 240690,
    "end": 248652,
    "text": "例えば、実際にウェブサイトをデプロイする前に、プロジェクトをコンパイルするときに必要なデータをすべてフェッチするように設定できる。"
  },
  {
    "start": 248796,
    "end": 259588,
    "text": "つまり、コンパイル時に次のJ'sアプリをコンパイルするときに、データソース、例えばこの場合はブログ記事が保存されているMongoDBデータベースに対してフェッチリクエストを出せるということだ。"
  },
  {
    "start": 259684,
    "end": 270260,
    "text": "そして、このデータをすべてページにロードし、ユーザーがウェブサイトにアクセスしたときにこの形式で提供できるように、準備の整った完成したHTMLページを構築する。"
  },
  {
    "start": 270380,
    "end": 276632,
    "text": "ユーザーがあなたのウェブサイトを訪れ、ブログ記事を開いた瞬間に、バックエンドにこのリクエストをする必要がなくなるのです。"
  },
  {
    "start": 276696,
    "end": 283128,
    "text": "これはすべてコンパイル時に行われ、これによってウェブサイトは超高速になる。"
  },
  {
    "start": 283224,
    "end": 290600,
    "text": "Next jsで利用できるサーバーサイド・レンダリング戦略はこれだけではありません。"
  },
  {
    "start": 290720,
    "end": 294256,
    "text": "最近は、練習試合以外はそう言っている。"
  },
  {
    "start": 294328,
    "end": 297696,
    "text": "バニラリアクトのアプリは、プロダクションではもう使われていない。"
  },
  {
    "start": 297768,
    "end": 311572,
    "text": "このURLの下にあるnext JSのショーケースを見ると、next JSをプロダクションで使っているのは小さなスタートアップだけでなく、実際には巨大企業であることがわかる。"
  },
  {
    "start": 311716,
    "end": 314732,
    "text": "TikTok、Twitch、Netflixを見ることができる。"
  },
  {
    "start": 314916,
    "end": 318172,
    "text": "これらの企業はネクストJSをプロダクションで使用している。"
  },
  {
    "start": 318276,
    "end": 320228,
    "text": "本当に素晴らしいフレームワークだ。"
  },
  {
    "start": 320364,
    "end": 324332,
    "text": "私の大好きな言葉だし、本当にパワフルで学ぶ価値のある言葉だと思う。"
  },
  {
    "start": 324436,
    "end": 328460,
    "text": "ここで使う残りのスタックは、典型的なMyrnスタックと同じである。"
  },
  {
    "start": 328540,
    "end": 338904,
    "text": "バックエンドはnode JSとExpressで構築します。Expressはバックエンドサーバーを構築するのに非常によく使われるJavaScriptフレームワークで、データはMongoDBデータベースに保存します。"
  },
  {
    "start": 338992,
    "end": 345464,
    "text": "次のJSS APIルートを使う代わりに別のバックエンドを構築した理由については、このビデオの後半でお話しします。"
  },
  {
    "start": 345552,
    "end": 357176,
    "text": "もちろん、通常のJavaScriptの代わりにtypescriptを使う。typescriptはJavaScriptのタイプセーフな代替手段であり、より大規模なプロジェクトを構築するのに適しているからだ。"
  },
  {
    "start": 357248,
    "end": 361208,
    "text": "さて、それではいよいよ、ここで作るプロジェクトを見てみよう。"
  },
  {
    "start": 361304,
    "end": 377080,
    "text": "私たちは、medium.comに少し似たこの小さなブログサイトを構築しました。そして、たくさんの機能を実装し、サイトが動いているのを見たときにはすぐには見えないけれど、フードの下で起こっていて本当に重要な、重要なコンセプトをたくさん学びます。"
  },
  {
    "start": 377240,
    "end": 380336,
    "text": "今やブログは一例のプロジェクトに過ぎない。"
  },
  {
    "start": 380488,
    "end": 384720,
    "text": "このコースのポイントは、誰もがこの知識でブロックを作るということではない。"
  },
  {
    "start": 384800,
    "end": 387216,
    "text": "これでどんな種類のウェブサイトでも作ることができる。"
  },
  {
    "start": 387288,
    "end": 389856,
    "text": "ブロックはちょうどいい例のプロジェクトだ。"
  },
  {
    "start": 390008,
    "end": 396220,
    "text": "私たちのウェブサイトでは、ユーザーがサインアップしてアカウントを作成し、ブログ記事を書くことができます。"
  },
  {
    "start": 396700,
    "end": 399320,
    "text": "ご覧の通り、本物のマークダウンをサポートしている。"
  },
  {
    "start": 399900,
    "end": 401684,
    "text": "これらのブログ記事はフォーマットされている。"
  },
  {
    "start": 401732,
    "end": 408996,
    "text": "私たちは自分たちのサーバーに画像をアップロードし、それを記事に表示することができ、これらのブログ記事は静的にレンダリングされる。"
  },
  {
    "start": 409068,
    "end": 410756,
    "text": "これが先ほど説明したことだ。"
  },
  {
    "start": 410868,
    "end": 417708,
    "text": "プロジェクトをコンパイルするとすぐに、これらのデータはすべてデータベースから取得され、HTMLページに入れられる。"
  },
  {
    "start": 417844,
    "end": 422960,
    "text": "これらの記事をクリックすると、ほとんど瞬時に読み込まれることにお気づきだろう。"
  },
  {
    "start": 423100,
    "end": 423872,
    "text": "ブームだ。"
  },
  {
    "start": 424056,
    "end": 427784,
    "text": "今はlocalhostを使っているので、もちろん少し速くなった。"
  },
  {
    "start": 427872,
    "end": 432320,
    "text": "の場合、データはlocalhost上で動作していないMongoDBデータベースから取得されます。"
  },
  {
    "start": 432400,
    "end": 436424,
    "text": "それでも、データが必要なときはいつでも、このリクエストをデータベースにしなければならない。"
  },
  {
    "start": 436512,
    "end": 444728,
    "text": "このブログ記事の内容はコンパイル時にフェッチされるので、ブログ記事を開く瞬間にこのリクエストをする必要はない。"
  },
  {
    "start": 444904,
    "end": 446600,
    "text": "だからこんなに速いんだ。"
  },
  {
    "start": 446760,
    "end": 448288,
    "text": "クリックするとブームになるのがわかる。"
  },
  {
    "start": 448344,
    "end": 452224,
    "text": "ほとんど瞬時にロードされ、これこそまさにnext jsの力だ。"
  },
  {
    "start": 452272,
    "end": 464034,
    "text": "というのも、ページスピードは検索エンジン最適化において非常に重要な要素であり、Googleがあなたのページが非常に速く開いていることに気づけば、ランキングに貢献するからだ。"
  },
  {
    "start": 464122,
    "end": 481082,
    "text": "私たちは独自の認証システムを構築し、例えばfirebaseのような高価なサードパーティ・サービスに依存することなく、ユーザー名とメールアドレスとパスワードで通常の方法でサインインするか、GoogleやGitHubのようなソーシャル・プロバイダーを利用することができます。"
  },
  {
    "start": 481146,
    "end": 485508,
    "text": "また、例えばフェイスブックのようなソーシャル・プロバイダーを追加する方法についても学ぶことができる。"
  },
  {
    "start": 485594,
    "end": 493544,
    "text": "GoogleやGitHubのようなソーシャルログインボタンをクリックすると、ログインフローにリダイレクトされる。"
  },
  {
    "start": 493672,
    "end": 499464,
    "text": "また、例えばGoogleにログインできるポップアップを開くだけのソリューションもある。"
  },
  {
    "start": 499552,
    "end": 510040,
    "text": "サードパーティのクッキーがブロックされている場合、このポップアップは機能しません。例えば、デフォルトではシークレット・タブを開くと、このポップアップを使ったログイン・フローは機能しなくなります。"
  },
  {
    "start": 510120,
    "end": 514928,
    "text": "アップルのサファリブラウザもデフォルトでサードパーティのクッキーをブロックしていると思う。"
  },
  {
    "start": 514984,
    "end": 517048,
    "text": "これはプロダクション向きではない。"
  },
  {
    "start": 517104,
    "end": 523964,
    "text": "代わりに、Googleや他のソーシャル・プロバイダーのログイン・フローにリダイレクトされるフローを使うべきだ。"
  },
  {
    "start": 524052,
    "end": 535028,
    "text": "グーグルアカウントを選択してログインすると、以前と同じウェブページにリダイレクトされ、このグーグルアカウントでログインしている。"
  },
  {
    "start": 535164,
    "end": 540520,
    "text": "また、ユーザープロフィールもあり、ここでプロフィール写真をアップロードすることができる。"
  },
  {
    "start": 541060,
    "end": 544324,
    "text": "先に用意したものをアップします。"
  },
  {
    "start": 544412,
    "end": 551540,
    "text": "ジョン・ボスがユーザー名とは異なる表示名を設定することができる。"
  },
  {
    "start": 552120,
    "end": 557040,
    "text": "僕はギターを弾くのが好きなんだ。"
  },
  {
    "start": 557080,
    "end": 562312,
    "text": "例えば、私たちはプロフィールを更新することができ、そのすべてがサーバーにアップロードされ、ここで更新される。"
  },
  {
    "start": 562416,
    "end": 568704,
    "text": "ログアウトすると、このプロフィール更新の部分は消えてしまう。"
  },
  {
    "start": 568792,
    "end": 574060,
    "text": "もしユーザーが以前にブログ記事を書いたことがあれば、その記事もプロフィールに表示される。"
  },
  {
    "start": 574440,
    "end": 577912,
    "text": "もちろん、すべてのユーザーが自分のブログ記事を更新できる。"
  },
  {
    "start": 578016,
    "end": 583456,
    "text": "このブログ記事を書いたユーザーと同じユーザーとしてログインすれば、編集できる。"
  },
  {
    "start": 583568,
    "end": 586832,
    "text": "タイトル、スラッグ、投稿の概要を変更することができます。"
  },
  {
    "start": 586896,
    "end": 589100,
    "text": "投稿用の画像をアップロードすることができます。"
  },
  {
    "start": 589800,
    "end": 596480,
    "text": "また、この下にあるスラッグ・フィールドが空の場合は、タイトルから自動的に生成される。"
  },
  {
    "start": 596600,
    "end": 599368,
    "text": "スラッグは投稿が持つ相対URLです。"
  },
  {
    "start": 599424,
    "end": 601552,
    "text": "戻ってみると、ここにある。"
  },
  {
    "start": 601576,
    "end": 607004,
    "text": "スラッグが見えるので、例えばここでidを表示するよりも、SEO対策になる。"
  },
  {
    "start": 607052,
    "end": 610396,
    "text": "ちなみに、投稿に使用する画像をアップロードすることもできる。"
  },
  {
    "start": 610468,
    "end": 617240,
    "text": "この下にあるのは本格的なマークダウン・エディターで、このテキストを打ち込んで、たとえばこのように変更することができる。"
  },
  {
    "start": 617860,
    "end": 624724,
    "text": "コードのブロックを追加したり、引用符を追加したり、さまざまな見出しを追加したりすることができる。"
  },
  {
    "start": 624852,
    "end": 627196,
    "text": "投稿内に画像をアップロードすることもできる。"
  },
  {
    "start": 627268,
    "end": 632588,
    "text": "このボタンをクリックすれば、例えば、フロー・ロゴにある私の小さなコーディングをクリックすることができる。"
  },
  {
    "start": 632684,
    "end": 636488,
    "text": "私たちのサーバーにアップロードされ、記事の中に表示されます。"
  },
  {
    "start": 636664,
    "end": 640768,
    "text": "また、安全でない変更の警告など、クールな小さな機能も追加しています。"
  },
  {
    "start": 640824,
    "end": 645856,
    "text": "ページを変更した後に更新しようとすると、このような警告が表示される。"
  },
  {
    "start": 645968,
    "end": 655344,
    "text": "あなたが行った変更は保存されていないかもしれない。私たちは、独自のカスタム・フックを使ってreactで実にイディオム的な方法でこれを実装する方法を学ぶだろうが、それについては後で詳しく説明する。"
  },
  {
    "start": 655512,
    "end": 666226,
    "text": "この投稿を保存すると、リダイレクトされ、更新されたマークダウンがそのまま表示される。"
  },
  {
    "start": 666378,
    "end": 673698,
    "text": "さて、これらのページはコンパイル時に生成され、すべてのデータはコンパイル時にフェッチされると申し上げませんでしたか？"
  },
  {
    "start": 673754,
    "end": 674970,
    "text": "どうすれば更新できるのか？"
  },
  {
    "start": 675090,
    "end": 680786,
    "text": "両者の長所を併せ持つ、より高度なフェッチ戦略を導入したからだ。"
  },
  {
    "start": 680818,
    "end": 691002,
    "text": "コンパイル時に静的に生成されたHTMLページが送られてくるが、変更を加えるとすぐに更新される。"
  },
  {
    "start": 691106,
    "end": 693866,
    "text": "このコースを通じて、これらすべてを学ぶことになる。"
  },
  {
    "start": 694058,
    "end": 700190,
    "text": "今ログアウトすると、もちろんここの編集ボタンは消えてしまい、この投稿に変更を加えることができなくなってしまう。"
  },
  {
    "start": 700810,
    "end": 712820,
    "text": "フェルディナンドのような別の人間としてログインした場合、フローリアンのブログ記事に変更を加えることはできないが、コメントを残すことはできる。"
  },
  {
    "start": 713400,
    "end": 716664,
    "text": "また、このコメントシステム全体をゼロから構築する。"
  },
  {
    "start": 716712,
    "end": 721180,
    "text": "ここではページネーションを実装しているからだ。"
  },
  {
    "start": 721520,
    "end": 723220,
    "text": "もう少しコメントを加えよう。"
  },
  {
    "start": 723880,
    "end": 727096,
    "text": "どの順番で出てくるかわかるように、番号をつけるだけでいい。"
  },
  {
    "start": 727248,
    "end": 729944,
    "text": "見ての通り、常に新しいものが一番上にある。"
  },
  {
    "start": 730072,
    "end": 735040,
    "text": "ページを更新すると、すべてのコメントが白い配列で表示されなくなった。"
  },
  {
    "start": 735160,
    "end": 738912,
    "text": "その代わり、最初の3つが表示されるが、これは私が設定したページサイズだからだ。"
  },
  {
    "start": 739016,
    "end": 740800,
    "text": "もちろん、これらのページを大きくすることもできる。"
  },
  {
    "start": 740840,
    "end": 745576,
    "text": "ただ、ご覧のように、これをもっと簡単に見ることができるように小さくしただけです。"
  },
  {
    "start": 745608,
    "end": 749528,
    "text": "これで、次のコメントページをロードする「show more comments」ボタンができました。"
  },
  {
    "start": 749664,
    "end": 758744,
    "text": "ページネーションは、本番アプリでも本当に重要だ。なぜなら、ここに100や数百のコメントがある場合、一度にすべてのデータをロードしたくないからだ。"
  },
  {
    "start": 758832,
    "end": 770438,
    "text": "第一に、画面上の情報量が多すぎるし、クライアントが一度に読み込まなければならないデータ量も多い。"
  },
  {
    "start": 770534,
    "end": 772678,
    "text": "ページネーションは本当に不可欠だ。"
  },
  {
    "start": 772814,
    "end": 776110,
    "text": "最後のページをロードした後、このボタンはもう表示されない。"
  },
  {
    "start": 776190,
    "end": 778214,
    "text": "というのが最初のコメントだった。"
  },
  {
    "start": 778302,
    "end": 780206,
    "text": "コメントを編集することもできる。"
  },
  {
    "start": 780398,
    "end": 782030,
    "text": "これを1つに変えよう。"
  },
  {
    "start": 782190,
    "end": 784450,
    "text": "編集済みと表示されているのがわかるだろう。"
  },
  {
    "start": 784750,
    "end": 787450,
    "text": "ここにはクールな相対タイムスタンプがある。"
  },
  {
    "start": 787830,
    "end": 790022,
    "text": "コメントを削除することもできます。"
  },
  {
    "start": 790166,
    "end": 791610,
    "text": "ボヤキを書こう。"
  },
  {
    "start": 792160,
    "end": 795056,
    "text": "削除すればまた消える。"
  },
  {
    "start": 795168,
    "end": 798700,
    "text": "ネストされた返信システムも追加した。"
  },
  {
    "start": 799000,
    "end": 809208,
    "text": "このコメントに返信する場合、この返信がどのコメントに属するかを確認するために7つ書こうとすると、このコメントはこのコメントの下にネストして表示される。"
  },
  {
    "start": 809344,
    "end": 811440,
    "text": "こちらもページ付き。"
  },
  {
    "start": 811520,
    "end": 821350,
    "text": "もう少し足せば、7374と75で十分だろう。"
  },
  {
    "start": 822370,
    "end": 823906,
    "text": "もう一度ページを更新してください。"
  },
  {
    "start": 824058,
    "end": 826230,
    "text": "私たちは最初のページに戻る。"
  },
  {
    "start": 826770,
    "end": 829242,
    "text": "そして、5つの返信が表示されるようになった。"
  },
  {
    "start": 829386,
    "end": 834194,
    "text": "これはYouTubeのコメントシステムにインスパイアされたもので、そこでもまったく同じ仕組みになっているからだ。"
  },
  {
    "start": 834322,
    "end": 837282,
    "text": "これらの返答は逆の順序で並べられている。"
  },
  {
    "start": 837386,
    "end": 840898,
    "text": "トップレベルのコメントでは、最新のコメントが一番上に表示されます。"
  },
  {
    "start": 840994,
    "end": 844356,
    "text": "ネストされた返信では、最初の返信が一番上に表示される。"
  },
  {
    "start": 844428,
    "end": 848140,
    "text": "これはちょっと厄介で、別の返信を追加したらどうなるのか？"
  },
  {
    "start": 848300,
    "end": 850340,
    "text": "前回は7月5日だったよね？"
  },
  {
    "start": 850420,
    "end": 854732,
    "text": "この場合、新しい返信を一番下に追加します。"
  },
  {
    "start": 854836,
    "end": 856572,
    "text": "これがロード・モア・ボタンだ。"
  },
  {
    "start": 856716,
    "end": 860460,
    "text": "これを読み込むと、これは単に消えて、次のページを再読み込みする。"
  },
  {
    "start": 860620,
    "end": 862252,
    "text": "これはYouTubeも同様だ。"
  },
  {
    "start": 862276,
    "end": 864964,
    "text": "ここからインスピレーションを得たんだ。"
  },
  {
    "start": 865092,
    "end": 866516,
    "text": "返信をもっと表示する"
  },
  {
    "start": 866668,
    "end": 872450,
    "text": "7374がロードされ、7576が表示され、ページネーションが終わる。"
  },
  {
    "start": 872790,
    "end": 876170,
    "text": "ここにトップレベルのコメントのページネーションがある。"
  },
  {
    "start": 876510,
    "end": 878410,
    "text": "これは本当にうまく機能している。"
  },
  {
    "start": 879310,
    "end": 883966,
    "text": "コメントシステムは、YouTubeのように1レベルのネストもサポートしている。"
  },
  {
    "start": 883998,
    "end": 894398,
    "text": "例えば、このコメントに返信すると、自動的に返信先のユーザー名がseven sevenと入力される。"
  },
  {
    "start": 894534,
    "end": 897910,
    "text": "これは、YouTubeがそうであるように、ネストの1レベルである。"
  },
  {
    "start": 898070,
    "end": 901278,
    "text": "これは本当にクールな設定方法だと思う。"
  },
  {
    "start": 901374,
    "end": 910518,
    "text": "すでにご覧になったかもしれないが、ブログ記事ページもページ分割されているが、こちらはこの無限読み込みボタンでページ分割されていない。"
  },
  {
    "start": 910654,
    "end": 912622,
    "text": "その代わりにページ番号がある。"
  },
  {
    "start": 912766,
    "end": 922888,
    "text": "この2つの異なる重要なページネーションの処理方法を学び、ユーザー・プロフィールのブログ記事セクションもページネーションされます。"
  },
  {
    "start": 923014,
    "end": 931880,
    "text": "というのも、これらのブログ記事はサーバーから取得され、新しいページをクリックするとURLに変更が表示されるからだ。"
  },
  {
    "start": 933220,
    "end": 937532,
    "text": "一方、プロフィールのブログ記事はクライアントサイドで読み込まれる。"
  },
  {
    "start": 937636,
    "end": 941660,
    "text": "ページを更新すると、少しの間、ローディングスピナーが表示されます。"
  },
  {
    "start": 941780,
    "end": 953532,
    "text": "というのも、このページではサーバーサイド・レンダリングとクライアントサイド・レンダリングを組み合わせており、Googleにデータを表示させたいか、何も表示させたくないかによってこの決定を下すからだ。"
  },
  {
    "start": 953586,
    "end": 960808,
    "text": "この場合、私はこれらのプロフィールとメタデータをグーグルに表示させたいのだ。"
  },
  {
    "start": 960904,
    "end": 962928,
    "text": "このデータはサーバーサイドでロードされる。"
  },
  {
    "start": 962984,
    "end": 967296,
    "text": "ページが読み込まれると、データはすぐにそこにあることがわかる。"
  },
  {
    "start": 967408,
    "end": 971968,
    "text": "一方、この一番下のブログ記事には、このローディング・スピナーが一瞬だけ表示される。"
  },
  {
    "start": 972104,
    "end": 978672,
    "text": "これらは、古典的なリアクト・アプリのように、すでに空のページをブラウザにロードした後にクライアントサイドでロードされる。"
  },
  {
    "start": 978776,
    "end": 985332,
    "text": "これは、このデータがサーバーからフェッチされるまで待つ必要がなく、このページのロードが速くなるという利点がある。"
  },
  {
    "start": 985496,
    "end": 992820,
    "text": "と同時に、この投稿がグーグルに表示されるかどうかはどうでもいい。"
  },
  {
    "start": 992860,
    "end": 1019250,
    "text": "しかし、クライアント・サイド・レンダリングをするときにすべきことのひとつは、適切なフェッチ・ライブラリを使うことだ。なぜなら、クライアント・サイドでのデータ・フェッチが適切に機能するように、適切なライブラリが配慮してくれるからだ。"
  },
  {
    "start": 1019370,
    "end": 1027202,
    "text": "SWRというものを使います。これはreactとnext js用のとてもクールなフェッチ・ライブラリで、実際に動作しているところをご覧いただけます。"
  },
  {
    "start": 1027266,
    "end": 1033586,
    "text": "2ページ目をロードすると、ロード中のスピナーが一瞬表示されます。"
  },
  {
    "start": 1033698,
    "end": 1049602,
    "text": "なぜなら、SWRはデータをキャッシュし、キャッシュデータを即座に表示し、バックグラウンドで新しいデータをフェッチする。"
  },
  {
    "start": 1049706,
    "end": 1055750,
    "text": "また、リクエストの重複を防いだり、レースコンディションを防いだりといった他のことにも気を配っている。"
  },
  {
    "start": 1056050,
    "end": 1059282,
    "text": "もうひとつクールなのは、データを自動的にリフェッチすることだ。"
  },
  {
    "start": 1059346,
    "end": 1061890,
    "text": "例えば、タブにフォーカスを当てたとき。"
  },
  {
    "start": 1062050,
    "end": 1069566,
    "text": "左のこのタブをアクティブにして、ここでログアウトすると、ログインしているユーザーもクライアント・サイドにフェッチされる。"
  },
  {
    "start": 1069678,
    "end": 1076366,
    "text": "これで再び右のタブにフォーカスを当てると、SWRは先に進んで自動的にユーザーを再検証する。"
  },
  {
    "start": 1076518,
    "end": 1081014,
    "text": "ログアウトしたことに気づき、ユーザーの状態もここで更新される。"
  },
  {
    "start": 1081142,
    "end": 1083970,
    "text": "もちろん、ログインするときも同じだ。"
  },
  {
    "start": 1085230,
    "end": 1091380,
    "text": "左側でログインし、右側のウィンドウにフォーカスを合わせると、ここでもログインできる。"
  },
  {
    "start": 1091510,
    "end": 1105176,
    "text": "新しいタブでプロフィール画像を開くと、ここに表示されているサイズとほぼ同じ、200ピクセル程度の画像が表示されるが、画像自体はもっと大きなサイズでサーバーに保存されていることがわかる。"
  },
  {
    "start": 1105248,
    "end": 1111940,
    "text": "次のJSは、先ほど説明したように、画面に表示する前に自動的にサイズを変更する。"
  },
  {
    "start": 1112240,
    "end": 1115740,
    "text": "ブログ記事の画像も同様です。"
  },
  {
    "start": 1116360,
    "end": 1118604,
    "text": "もう一度、記事タブに行ってみよう。"
  },
  {
    "start": 1118752,
    "end": 1124440,
    "text": "この画像を新しいタブで開くと、ここに表示されているサイズとほぼ同じであることがわかる。"
  },
  {
    "start": 1125380,
    "end": 1133932,
    "text": "このページで開くと、サーバーに保存されている1つの画像ファイルであるにもかかわらず、サイズが大きくなっています。"
  },
  {
    "start": 1134036,
    "end": 1143040,
    "text": "すでにお気づきのように、私たちのページは完全なモバイル・レスポンシブにも対応しているので、ウィンドウを小さくするとすべてが小さくなります。"
  },
  {
    "start": 1143420,
    "end": 1150920,
    "text": "私たちの記事自体には、画面サイズによって表示される項目数が変わるグリッドがあります。"
  },
  {
    "start": 1151080,
    "end": 1156380,
    "text": "上のメニューは画面が小さくなると折りたたまれ、ドロップダウンになる。"
  },
  {
    "start": 1156760,
    "end": 1162416,
    "text": "レスポンスの良さは重要だし、それ以外にもすぐには見えない機能がたくさんある。"
  },
  {
    "start": 1162488,
    "end": 1168808,
    "text": "このコースでは、私は本当に余分なマイルを借りて、実際の生産ウェブサイトで必要な機能を実装します。"
  },
  {
    "start": 1168904,
    "end": 1170952,
    "text": "例えば、適切な入力検証。"
  },
  {
    "start": 1171056,
    "end": 1174216,
    "text": "私たちのフォームは、入力が適切かどうかをチェックします。"
  },
  {
    "start": 1174288,
    "end": 1185820,
    "text": "もしこれが有効な電子メールアドレスではなく、有効なユーザー名でもなく、パスワードの単語が弱すぎる場合、入力フォームでこれらのエラーを見ることができ、入力した内容によってリアルタイムで変化する。"
  },
  {
    "start": 1185980,
    "end": 1191940,
    "text": "このデータは、フロントエンドのフォームで検証されるだけでなく、サーバーでも検証されます。"
  },
  {
    "start": 1191980,
    "end": 1194892,
    "text": "なぜなら、フロントエンドの検証を信頼することはできないからだ。"
  },
  {
    "start": 1194956,
    "end": 1197100,
    "text": "私たちのサーバーでは、いつもこれを繰り返さなければならない。"
  },
  {
    "start": 1197180,
    "end": 1219584,
    "text": "例えば、ブログ記事のように画像をアップロードする場合でも、それが有効な画像ファイルであるかどうかをサーバー上でチェックします。"
  },
  {
    "start": 1219712,
    "end": 1233000,
    "text": "この仕組みは、有効な電子メールアドレス、たとえば私の録音用電子メールアドレスを入力し、送信コードをクリックすると、この電子メールアドレスに実際の検証コードが送信されるというものだ。"
  },
  {
    "start": 1233120,
    "end": 1235432,
    "text": "このメールはこう見える。"
  },
  {
    "start": 1235616,
    "end": 1245176,
    "text": "noreplayloblog.comという私が定義したアドレスから取得し、10分後に有効期限が切れる認証コードを取得します。"
  },
  {
    "start": 1245248,
    "end": 1249768,
    "text": "私たちは、firebaseのようなサードパーティのサービスに頼ることなく、これを構築しています。"
  },
  {
    "start": 1249864,
    "end": 1253020,
    "text": "私たちは独自のエクスプレス・サーバーを使って、このようなことをしています。"
  },
  {
    "start": 1253840,
    "end": 1258638,
    "text": "ここに貼り付けるが、まず7ではなく8で間違えよう。"
  },
  {
    "start": 1258784,
    "end": 1272354,
    "text": "また、パスワードの強度を修正し、この認証コードが正しくないか有効期限が切れている状態でサインアップしようとすると、正しい認証コードを使用した場合、先に進み、新しいアカウントにサインアップします。"
  },
  {
    "start": 1272522,
    "end": 1273770,
    "text": "クールだろ？"
  },
  {
    "start": 1273930,
    "end": 1278178,
    "text": "では、すでに使用したEメールアドレスでこのプロセスを繰り返してみよう。"
  },
  {
    "start": 1278314,
    "end": 1287876,
    "text": "もう一度同じ名前、codinginflow dot recordingmail.comとパスワードを追加して、コードを送信してみよう。"
  },
  {
    "start": 1288028,
    "end": 1291404,
    "text": "今回は、「このメールアドレスを持つユーザーはすでに存在します。"
  },
  {
    "start": 1291532,
    "end": 1295596,
    "text": "ここでパスワードを忘れたボタンをクリックしても同じことが起こる。"
  },
  {
    "start": 1295708,
    "end": 1301300,
    "text": "その後、メールアドレスに認証コードを送信し、新しいパスワードを定義する必要がある。"
  },
  {
    "start": 1301420,
    "end": 1306500,
    "text": "を実行すると、このユーザーの既存のログイン・セッションがすべて無効になります。"
  },
  {
    "start": 1306540,
    "end": 1311860,
    "text": "の場合、パスワードをリセットしたこの1つのウィンドウ以外では、ユーザーはログアウトされる。"
  },
  {
    "start": 1311940,
    "end": 1321544,
    "text": "これも重要なセキュリティ機能であり、私がセッション管理にJWTSではなくログイン・セッションを使うことを好む理由のひとつでもある。"
  },
  {
    "start": 1321712,
    "end": 1335656,
    "text": "JWTが通常のウェブサイトでのユーザーログインにあまり適していない理由をすべて知りたい場合は、ログインにJWTを使用しないでくださいでググれば、より詳しく説明している投稿をたくさん見ることができます。"
  },
  {
    "start": 1335728,
    "end": 1339592,
    "text": "最も重要な点は、JWTは無効にできないということだ。"
  },
  {
    "start": 1339696,
    "end": 1348540,
    "text": "先ほど説明したように、パスワードを変更した後に既存のユーザー・セッションをすべて無効にすることは、JWTではデフォルトでは不可能です。"
  },
  {
    "start": 1348660,
    "end": 1362676,
    "text": "複雑なリフレッシュ・トークンのメカニズムを設定することで、この問題を回避することは可能だが、そうなると、本当に複雑になり始めるし、JWTをウェブ・ブラウザに安全に保存するのも厄介だ。"
  },
  {
    "start": 1362748,
    "end": 1369596,
    "text": "YouTubeのチュートリアルの多くは、ログインにJWTを使用しているが、これらの複雑な問題は、単に敷物の下に包まれていることが多い。"
  },
  {
    "start": 1369668,
    "end": 1371508,
    "text": "これは、彼らが存在しないという意味ではない。"
  },
  {
    "start": 1371604,
    "end": 1373884,
    "text": "ここでは、制作準備の整ったウェブサイトを作りたい。"
  },
  {
    "start": 1373972,
    "end": 1375868,
    "text": "我々はこれをきちんとやらなければならない。"
  },
  {
    "start": 1376044,
    "end": 1388516,
    "text": "セッションの仕組みは、ログイン時にウェブブラウザにクッキーが保存され、その中にいくつかのキーが含まれています。そしてサーバーでは、セッションの後半部分がデータベースに保存され、その両方が必要です。"
  },
  {
    "start": 1388588,
    "end": 1395084,
    "text": "ユーザーを適切に認証するためには、クッキーが設定され、セッションがデータベースに存在する必要があります。"
  },
  {
    "start": 1395172,
    "end": 1401892,
    "text": "ユーザーを強制的にログアウトさせたい場合、データベースからセッションを削除すればよい。"
  },
  {
    "start": 1401956,
    "end": 1406184,
    "text": "jwtsでこの無効化が不可能な理由もここにある。"
  },
  {
    "start": 1406332,
    "end": 1419568,
    "text": "セッションに反対する論拠のひとつで、JWTSが超人気になっている理由は、サーバー上のリソースにアクセスするたびに、このユーザーのセッションが存在するかどうかデータベースをチェックしなければならないからでしょう？"
  },
  {
    "start": 1419664,
    "end": 1427544,
    "text": "多くの人が、これはサーバーを遅くすると考えていますが、セッションのストレージとしてredisデータベースを使うことで、これを軽減します。"
  },
  {
    "start": 1427632,
    "end": 1435666,
    "text": "ご存じないかもしれないが、Redisは非常に高速なインメモリー・データベースであり、セッションへのアクセスは数ミリ秒の問題である。"
  },
  {
    "start": 1435768,
    "end": 1453486,
    "text": "JWTの利点は、はるかに高速であることです。セッションも非常に高速になるため、もはやカウントされませんが、同時に、例えばアカウントがハッキングされた場合、ユーザーを強制的にログアウトさせることができ、JWTの有効期限が切れるまで待つ必要がないため、はるかに安全です。"
  },
  {
    "start": 1453598,
    "end": 1458334,
    "text": "このトピックについて詳しく知りたい方は、ログインにJWTを使わないでくださいでググってみてください。"
  },
  {
    "start": 1458382,
    "end": 1461054,
    "text": "ここにはたくさんの良い説明がある。"
  },
  {
    "start": 1461182,
    "end": 1466226,
    "text": "私は古き良きセッションのファンだ。"
  },
  {
    "start": 1466358,
    "end": 1477538,
    "text": "もしユーザーが私たちのサーバーにあまりにも多くのリクエストをした場合、私たちはそのユーザーをブロックします。"
  },
  {
    "start": 1477674,
    "end": 1479746,
    "text": "無効な認証情報を入力してみよう。"
  },
  {
    "start": 1479778,
    "end": 1489162,
    "text": "ここでは無効な認証情報を見ているが、何度も何度もユーザーのパスワードを推測しようとするブルートフォース攻撃をされたくない。"
  },
  {
    "start": 1489346,
    "end": 1494070,
    "text": "このボタンを押し続けると、10という数字になると思う。"
  },
  {
    "start": 1494640,
    "end": 1497980,
    "text": "最終的には、無効な認証情報は表示されなくなる。"
  },
  {
    "start": 1498760,
    "end": 1506580,
    "text": "代わりに、このメッセージが表示されます。あなたは頻繁にログインを試みており、正しい認証情報を入力してもログインできなくなりました。"
  },
  {
    "start": 1506880,
    "end": 1513424,
    "text": "これは、例えば30分、半日など、あなたが設定した一定の時間枠でアクティブになる。"
  },
  {
    "start": 1513512,
    "end": 1517360,
    "text": "そうすれば、このIPアドレスで再試行できる。"
  },
  {
    "start": 1517520,
    "end": 1523542,
    "text": "このコースを準備する際も、このウェブサイトを本番に耐えうる、本当に堅牢なものにすることに重点を置いていた。"
  },
  {
    "start": 1523656,
    "end": 1525298,
    "text": "バラバラにはしたくない。"
  },
  {
    "start": 1525394,
    "end": 1529634,
    "text": "これを本番環境にデプロイすれば、実際に正しく機能し続けるはずだ。"
  },
  {
    "start": 1529762,
    "end": 1535322,
    "text": "繰り返しになるが、この下にあるページネーション・バーに至るまで、すべてがモバイルに対応している。"
  },
  {
    "start": 1535506,
    "end": 1539346,
    "text": "ご覧の通り、画面サイズによって形が変わる。"
  },
  {
    "start": 1539498,
    "end": 1546514,
    "text": "グーグルからヒントを得たこのようなモバイル・ビューワーは、次のボタンと現在のページ番号しかない。"
  },
  {
    "start": 1546642,
    "end": 1551396,
    "text": "これを大きくすると、すべてのページが表示される。"
  },
  {
    "start": 1551548,
    "end": 1556204,
    "text": "また、数字が大きすぎると全ページが表示されないようにデザインした。"
  },
  {
    "start": 1556252,
    "end": 1567840,
    "text": "ご覧の通り、4ページ目から13ページ目までしか表示されませんが、10ページ目をクリックすると5ページ目から14ページ目まで表示されます。"
  },
  {
    "start": 1568220,
    "end": 1576032,
    "text": "他のページもモバイル・レスポンシブに対応しており、例えばこのトップページのロゴは画面サイズによって変化する。"
  },
  {
    "start": 1576196,
    "end": 1581864,
    "text": "このレスポンシブ性とクールなデザインを実現するために、私たちはBootstrapライブラリを使用しています。"
  },
  {
    "start": 1581992,
    "end": 1598072,
    "text": "最近、Tailwind CSSが流行っているのは知っているが、私はブートストラップにこだわりたい。なぜなら、ブートストラップには、このようなモデルやボタンなど、すぐに使えるコンポーネントが用意されているし、レスポンスやアクセシビリティにも配慮されているからだ。"
  },
  {
    "start": 1598256,
    "end": 1603180,
    "text": "また、完全に無料で使用でき、ウェブサイトを簡単に構築できる。"
  },
  {
    "start": 1603640,
    "end": 1606120,
    "text": "だから私はBootstrapのファンなのだ。"
  },
  {
    "start": 1606240,
    "end": 1610032,
    "text": "また、このポップアップのようなクールな機能もある。"
  },
  {
    "start": 1610136,
    "end": 1612824,
    "text": "ああ、だからここで使うんだ。"
  },
  {
    "start": 1612992,
    "end": 1623696,
    "text": "このコースでは、コンテキストやカスタムフックの構築などの高度なリアクト機能や、オンデマンド再バリデーションなどの高度なネクストJS機能についても学びます。"
  },
  {
    "start": 1623768,
    "end": 1626216,
    "text": "これらは、ここで学ぶ本当に重要なトピックだ。"
  },
  {
    "start": 1626288,
    "end": 1634526,
    "text": "また、コーディングのベストプラクティスにも気を配り、コードをクリーンにし、適切なエラー処理などを実装するようにしている。"
  },
  {
    "start": 1634608,
    "end": 1639882,
    "text": "コース全体は論理的でわかりやすく構成されているので、圧倒されることはありません。"
  },
  {
    "start": 1639986,
    "end": 1642762,
    "text": "このコースの最後には、すべてを配備することになる。"
  },
  {
    "start": 1642866,
    "end": 1648170,
    "text": "簡単にハッキングされないように、サーバーを適切に保護する方法をお教えします。"
  },
  {
    "start": 1648250,
    "end": 1658074,
    "text": "また、ソーシャルメディアにウェブサイトへのリンクを投稿する際、適切なプレビュー画像と適切なメタデータが表示されるようにします。"
  },
  {
    "start": 1658162,
    "end": 1661160,
    "text": "私はこのような小さなディテールにも気を配った。"
  },
  {
    "start": 1661250,
    "end": 1663980,
    "text": "では、このコースの前提条件について話そう。"
  },
  {
    "start": 1664060,
    "end": 1666188,
    "text": "これは初心者向けのコースではないからだ。"
  },
  {
    "start": 1666284,
    "end": 1677068,
    "text": "例えば、JavaScriptの基本は説明しませんし、async awaitも使いますが、これがどのように機能するかは詳しく説明しませんので、JavaScriptをすでに扱ったことがあることが理想です。"
  },
  {
    "start": 1677204,
    "end": 1684660,
    "text": "このコースを通して、より具体的なタイプスクリプトについて説明するので、タイプスクリプトの経験がなくても大丈夫だと思う。"
  },
  {
    "start": 1684740,
    "end": 1686812,
    "text": "JavaScriptの知識は役に立つ。"
  },
  {
    "start": 1686916,
    "end": 1693540,
    "text": "JavaScriptやtypescriptに似た別のプログラミング言語を使ったことがあるのなら、それで十分かもしれない。"
  },
  {
    "start": 1693620,
    "end": 1703180,
    "text": "例えば、Kotlinはタイプスクリプトに非常に似ていると私は考えているので、HTMLとCSSに関してはタイプスクリプトの経験すら必要ないかもしれない。"
  },
  {
    "start": 1703340,
    "end": 1705332,
    "text": "ついていくだけで十分だと思う。"
  },
  {
    "start": 1705396,
    "end": 1706828,
    "text": "複雑なものではない。"
  },
  {
    "start": 1706884,
    "end": 1711932,
    "text": "レイアウトの作り方を理解するために、世の中のあらゆる技術を知る必要はない。"
  },
  {
    "start": 1711996,
    "end": 1717358,
    "text": "僕と同じようにすればいいし、もっと詳しく知りたければ、いつでもググればいい。"
  },
  {
    "start": 1717374,
    "end": 1721158,
    "text": "もちろん、myrnスタックの基本も説明しない。"
  },
  {
    "start": 1721254,
    "end": 1723950,
    "text": "例えば、なぜサーバーが必要なのかは説明しない。"
  },
  {
    "start": 1724030,
    "end": 1729454,
    "text": "また、reactが使っている宣言的UIの概念については説明しない。"
  },
  {
    "start": 1729542,
    "end": 1738270,
    "text": "このチュートリアルでは多くのことをカバーし、多くの機能を実装するため、セットアップはもう少し速いペースになり、それほど初心者にやさしくすることはできません。"
  },
  {
    "start": 1738350,
    "end": 1742950,
    "text": "これまで宣言型UIフレームワークを使ったことがあるなら、その必要はない。"
  },
  {
    "start": 1742990,
    "end": 1746330,
    "text": "ReactはAndroidのjetpack composeのようなものにもなる。"
  },
  {
    "start": 1746430,
    "end": 1754490,
    "text": "Swiftuiは宣言的なUIフレームワークだと思うし、flutterならコンセプトが似ているから、きっとついていけるだろう。"
  },
  {
    "start": 1754610,
    "end": 1763474,
    "text": "これらのフレームワークの経験がない場合は、YouTubeで私の無料myrnコースを見ることができます。"
  },
  {
    "start": 1763642,
    "end": 1769178,
    "text": "YouTubeで \"coding in flow mern \"と入力してください。"
  },
  {
    "start": 1769354,
    "end": 1770706,
    "text": "それなら見つかるはずだ。"
  },
  {
    "start": 1770778,
    "end": 1772190,
    "text": "これだよ、これ。"
  },
  {
    "start": 1772680,
    "end": 1780672,
    "text": "これは、myrnスタックの基本、リアクトの基本、ステートやリアクトで宣言的UIがどのように機能するか、そういったことをすべて教えてくれる。"
  },
  {
    "start": 1780736,
    "end": 1787096,
    "text": "これを見てからこのコースに戻ってくれば、おそらく準備はできているはずだ。"
  },
  {
    "start": 1787168,
    "end": 1791728,
    "text": "しかし、足りない部分を補いたいのであれば、このビギナーコースを後から見ることもできる。"
  },
  {
    "start": 1791784,
    "end": 1792984,
    "text": "それはあなた次第だ。"
  },
  {
    "start": 1793072,
    "end": 1798720,
    "text": "JSの予備知識は必要ありません。"
  },
  {
    "start": 1798800,
    "end": 1801296,
    "text": "これらの異なる機能がどのように機能するのか、お教えしましょう。"
  },
  {
    "start": 1801368,
    "end": 1808308,
    "text": "また、必要なソフトウエアをすべてインストールした状態でお見せしますので、恐れずにコースに沿って進み、後で足りない部分を補ってください。"
  },
  {
    "start": 1808404,
    "end": 1815268,
    "text": "このコースを購入すると、プライベート・ディスコード・グループにアクセスすることができ、そこでコースを購入した他の人たちに質問することができます。"
  },
  {
    "start": 1815324,
    "end": 1818156,
    "text": "そこでも定期的に質問に答えるつもりだ。"
  },
  {
    "start": 1818228,
    "end": 1822156,
    "text": "もし何か問題が起きたら、遠慮なくそこで質問してほしい。"
  },
  {
    "start": 1822228,
    "end": 1822532,
    "text": "いいかい？"
  },
  {
    "start": 1822556,
    "end": 1826876,
    "text": "最後に、このコースのために私が選択した技術についてお話ししたいと思います。"
  },
  {
    "start": 1826988,
    "end": 1831248,
    "text": "なぜ私が他の技術ではなく、ある技術を選んだのか、不思議に思われるかもしれない。"
  },
  {
    "start": 1831324,
    "end": 1838392,
    "text": "ひとつは、next JSのAPIルートを使ってバックエンド・サーバーを構築するのではなく、Expressを使ってバックエンド・サーバーを構築することだ。"
  },
  {
    "start": 1838536,
    "end": 1841904,
    "text": "ネクストJSのAPIルートは、実は本当のサーバーではない。"
  },
  {
    "start": 1841952,
    "end": 1852104,
    "text": "サーバーレス関数は、例えば接続を維持する必要があるときはいつでもエクスプレスするなど、実際のサーバーができることをすべてできるわけではない。"
  },
  {
    "start": 1852192,
    "end": 1860216,
    "text": "サーバーレス関数は実行後にシャットダウンし、実行時間も決まっているため、このようなことはできない。"
  },
  {
    "start": 1860288,
    "end": 1873240,
    "text": "私がExpressを選んだ主な理由は、次のJSS APIルートに良い代替手段を見つけることができなかったところ、Expressには非常に大規模で成熟したエコシステムがあり、ツールやパッケージが利用可能で、ただ動くからです。"
  },
  {
    "start": 1873360,
    "end": 1885506,
    "text": "また、多くの開発者は、フロントエンドとバックエンドのコードベースを分けて、適切な懸念事項の分離を行うことを好む。特に、異なるチームがバックエンドとフロントエンドを担当するような大規模プロジェクトではそうだ。"
  },
  {
    "start": 1885608,
    "end": 1890278,
    "text": "JSの隣にサーバーを置くことの問題点は、すべてが1つのコードベースになってしまうことだ。"
  },
  {
    "start": 1890374,
    "end": 1895702,
    "text": "基本的に一つのモノリスなので、作業やテストが難しくなる。"
  },
  {
    "start": 1895806,
    "end": 1909182,
    "text": "また、私の主な選択は、expressのエコシステムであり、next jsを学んでいる人の多くはおそらくMyrnスタックの経験があるため、expressやmongooseが通常どのように動作するかをすでに知っているからである。"
  },
  {
    "start": 1909246,
    "end": 1913462,
    "text": "だから、次のJSDevを学び始めるには最高の選択だと思う。"
  },
  {
    "start": 1913516,
    "end": 1917730,
    "text": "とはいえ、このコースの後半ではAPIルートも実装します。"
  },
  {
    "start": 1917810,
    "end": 1921938,
    "text": "このAPIルートがどのように機能するのか、どのようにAPIルートをセットアップするのかを学ぶことになる。"
  },
  {
    "start": 1922034,
    "end": 1926218,
    "text": "また、次のJS 13では、新しいアプリディレクトリは使用しません。"
  },
  {
    "start": 1926354,
    "end": 1928786,
    "text": "その代わりに、pagesディレクトリを使う。"
  },
  {
    "start": 1928898,
    "end": 1929266,
    "text": "なぜですか？"
  },
  {
    "start": 1929338,
    "end": 1933514,
    "text": "アプリのディレクトリはまだベータ版であるため、本番環境にはまだない。"
  },
  {
    "start": 1933602,
    "end": 1935690,
    "text": "まだ足りない機能がたくさんある。"
  },
  {
    "start": 1935770,
    "end": 1943594,
    "text": "このコースのポイントは、制作準備の整ったウェブサイトを構築する方法を学ぶことです。"
  },
  {
    "start": 1943722,
    "end": 1948850,
    "text": "また、今現在安定しているページ・ディレクトリは、これからもずっと使われ続けるだろう。"
  },
  {
    "start": 1948890,
    "end": 1955874,
    "text": "もちろん、企業にはこのページ・ディレクトリーを使って作られた、現在生産中のコードがまだたくさんある。"
  },
  {
    "start": 1955962,
    "end": 1962266,
    "text": "とはいえ、アプリのディレクトリが安定してきたら、このコースのアップデートを作成するかもしれない。"
  },
  {
    "start": 1962298,
    "end": 1964426,
    "text": "このアップデートは保証されるものではない。"
  },
  {
    "start": 1964498,
    "end": 1968930,
    "text": "人生には何が起こるかわからないし、1年やそこらでアップデートをする時間があるかどうかもわからない。"
  },
  {
    "start": 1969010,
    "end": 1969238,
    "text": "でもね。"
  },
  {
    "start": 1969274,
    "end": 1973974,
    "text": "もし私がこのアップデートをすれば、すでにコースを購入した人は誰でも無料になる。"
  },
  {
    "start": 1974062,
    "end": 1979726,
    "text": "今回のアップデートでは、既存のアプリをappディレクトリにリファクタリングするかもしれない。"
  },
  {
    "start": 1979798,
    "end": 1986174,
    "text": "あるいは、実際にどの程度変更しなければならないかにもよるが、新しいアプリのディレクトリでコース全体を作り直すかもしれない。"
  },
  {
    "start": 1986262,
    "end": 1988486,
    "text": "繰り返しますが、このアップデートは保証されたものではありません。"
  },
  {
    "start": 1988558,
    "end": 1992110,
    "text": "このアップデートを受けることを前提に、このコースを購入しないでください。"
  },
  {
    "start": 1992150,
    "end": 1993750,
    "text": "ボーナスの可能性もある。"
  },
  {
    "start": 1993830,
    "end": 1998382,
    "text": "また、このコースではreduxのような状態管理ライブラリは使いません。"
  },
  {
    "start": 1998486,
    "end": 2001266,
    "text": "私は、これらのライブラリーを使うのは早すぎると思う。"
  },
  {
    "start": 2001358,
    "end": 2007010,
    "text": "中小規模のプロジェクトでは通常必要ない。"
  },
  {
    "start": 2007090,
    "end": 2014330,
    "text": "例えばコンテキストのように、リアクトで利用できるツールをきちんと学ぶ方がずっと役に立つと思う。"
  },
  {
    "start": 2014410,
    "end": 2030988,
    "text": "というのも、SWRはすでに内部でサーバーからフェッチしたデータの状態を管理しており、reduxが行う作業の多くを不要にしてくれるからだ。"
  },
  {
    "start": 2031044,
    "end": 2032340,
    "text": "もっとシンプルだ。"
  },
  {
    "start": 2032420,
    "end": 2034732,
    "text": "それでは、このコースで多くのことを楽しんでください。"
  },
  {
    "start": 2034836,
    "end": 2036836,
    "text": "大きなコースで、たくさんの特徴がある。"
  },
  {
    "start": 2036868,
    "end": 2037884,
    "text": "とても誇りに思っている。"
  },
  {
    "start": 2037932,
    "end": 2040804,
    "text": "今すぐにでも取り掛かってもらえてとても嬉しい。"
  },
  {
    "start": 2040852,
    "end": 2043540,
    "text": "また次のビデオでお会いしましょう。"
  }
]