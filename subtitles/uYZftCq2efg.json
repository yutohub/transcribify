[
  {
    "start": 3800,
    "end": 6812,
    "text": "AIいつでもチャンネルへようこそ。"
  },
  {
    "start": 6946,
    "end": 14476,
    "text": "このビデオでは、より良いラグ・システムを導入するためのテクニックをいくつか紹介する。"
  },
  {
    "start": 14658,
    "end": 24364,
    "text": "ragは検索拡張世代を意味し、一般に生成AIやLLMの最も顕著な応用例の一つである。"
  },
  {
    "start": 24562,
    "end": 29952,
    "text": "誰もが自分たちの知識ベースのためにラグ・システムを構築したがる。"
  },
  {
    "start": 30096,
    "end": 42632,
    "text": "Ragは、特定のモデルを微調整する必要はないが、ナレッジ・ベースから何らかの洞察を得たい場合に非常に役立つ。"
  },
  {
    "start": 42686,
    "end": 54184,
    "text": "さて、文書、画像、音声、動画が多数ある場合を想像してほしい。これらの文書から何らかの情報を取り出すのに役立つメカニズムをどのように使えばいいのだろうか？"
  },
  {
    "start": 54312,
    "end": 58284,
    "text": "クエリに基づいて答えを生成することもできますよね？"
  },
  {
    "start": 58322,
    "end": 60552,
    "text": "オーグメンテッド世代だ。"
  },
  {
    "start": 60616,
    "end": 65240,
    "text": "私たちはこれを検索拡張世代と呼んでいて、いくつかのモデルを組み合わせている。"
  },
  {
    "start": 65320,
    "end": 69276,
    "text": "最初の部分は検索で、2番目の部分は生成である。"
  },
  {
    "start": 69388,
    "end": 72848,
    "text": "検索には、セマンティック検索のような技術を使います。"
  },
  {
    "start": 72934,
    "end": 83280,
    "text": "生成には、大規模な言語モデルや言語モデルを使用して、検索されたチャンクや検索された文書を見て、人間のような応答を形成する。"
  },
  {
    "start": 83360,
    "end": 87472,
    "text": "ラグが基本的に意味するのはそういうことで、それほど専門的なことではない。"
  },
  {
    "start": 87616,
    "end": 99080,
    "text": "ラグは、微調整はしたくないが、データから何らかの反応を生み出したい企業にとって、非常に重要だと言える。"
  },
  {
    "start": 99150,
    "end": 109340,
    "text": "さて、効率的で正確なボロ布のワークフローを構築するのはそう簡単ではないだろう？"
  },
  {
    "start": 109490,
    "end": 110812,
    "text": "そこが見ものだ。"
  },
  {
    "start": 110866,
    "end": 119292,
    "text": "このビデオで取り上げるテクニックはいくつかあるが、このビデオで焦点を当てるのはレトリーバーまでだ。"
  },
  {
    "start": 119356,
    "end": 121984,
    "text": "世代交代については、次のビデオで取り上げる。"
  },
  {
    "start": 122102,
    "end": 130772,
    "text": "まず私のノートブックを始めましょう。それからコードを書き始め、このビデオを通して説明します。"
  },
  {
    "start": 130906,
    "end": 133460,
    "text": "ここでターミナルを開いてみる。"
  },
  {
    "start": 133530,
    "end": 136656,
    "text": "というか、アナコンダでこれを開いてみよう。"
  },
  {
    "start": 136688,
    "end": 142916,
    "text": "アナコンダ・プロンプトを開きます。"
  },
  {
    "start": 142948,
    "end": 147044,
    "text": "このビデオでは、ノートブックにコードを書くためにanacondaを使おうと思う。"
  },
  {
    "start": 147172,
    "end": 150660,
    "text": "今、私はベース環境にいる。"
  },
  {
    "start": 150740,
    "end": 160476,
    "text": "envの数を調べたいのであれば、Conda env listを実行して、あなたのシステムのanacondaにいくつのenvがあるか調べることができます。"
  },
  {
    "start": 160578,
    "end": 169410,
    "text": "ベースは1つしかないので、このディレクトリの中に入ってJupyterノートブックを作ってみよう。"
  },
  {
    "start": 170180,
    "end": 177344,
    "text": "Jupyterノートブックを作れば、ブラウザでノートブックを開くことができるんだ。"
  },
  {
    "start": 177382,
    "end": 178656,
    "text": "見ることができる。"
  },
  {
    "start": 178678,
    "end": 179936,
    "text": "私はデータというものを持っている。"
  },
  {
    "start": 180038,
    "end": 181860,
    "text": "まず、そのデータをお見せしよう。"
  },
  {
    "start": 181930,
    "end": 185684,
    "text": "このビデオで検討するデータは何ですか？"
  },
  {
    "start": 185722,
    "end": 188950,
    "text": "ここに2つのデータ、2つのPDFがあるのがわかるだろう。"
  },
  {
    "start": 189580,
    "end": 192952,
    "text": "ちょっとモニターを見せてくれ。"
  },
  {
    "start": 193086,
    "end": 200292,
    "text": "このデータを見ると、一方はパリ協定、もう一方はHDGゴールと呼ばれている。"
  },
  {
    "start": 200356,
    "end": 206888,
    "text": "さて、このビデオでは、持続可能性に関連した、あるいは気候変動に関連した資料を見ていこうと思う。"
  },
  {
    "start": 206984,
    "end": 212076,
    "text": "このドキュメント、UNHDGを開いたら、これを最小化しよう。"
  },
  {
    "start": 212178,
    "end": 217724,
    "text": "持続可能な開発のための2030アジェンダと呼ばれるものを見てほしい。"
  },
  {
    "start": 217772,
    "end": 222400,
    "text": "SDGsの目標に関する国連の文書だ。"
  },
  {
    "start": 222980,
    "end": 227376,
    "text": "SDGsには17の目標があります。"
  },
  {
    "start": 227488,
    "end": 239316,
    "text": "さて、もうひとつの文書はパリ協定と呼ばれるもので、持続可能性や気候変動など、さまざまなことが書かれている。"
  },
  {
    "start": 239338,
    "end": 245764,
    "text": "発展途上国や先進国、そして異なる国家間で結ばれた多くの合意など、他にも多くのことがある。"
  },
  {
    "start": 245892,
    "end": 248804,
    "text": "この2つの文書をソース文書と見なします。"
  },
  {
    "start": 248852,
    "end": 250356,
    "text": "すべてのタブを閉じさせてください。"
  },
  {
    "start": 250468,
    "end": 255790,
    "text": "さて、ここにn個の文書があるとしよう。"
  },
  {
    "start": 256720,
    "end": 263868,
    "text": "例えば、生命保険用の書類と自動車保険用の書類がある。"
  },
  {
    "start": 264034,
    "end": 268816,
    "text": "ベクターデータベースやベクターストアを1つだけ作ることはないでしょう。"
  },
  {
    "start": 268918,
    "end": 275948,
    "text": "このビデオで取り上げるのは、より良いボロ布を作るためのさまざまなテクニックだ。"
  },
  {
    "start": 276044,
    "end": 287232,
    "text": "異なる種類の文書に対して単一の知識ベースを作成することはできない。そうなると、セマンティック検索を行うような検索モデルでは、適切な文書セットを検索することが非常に難しくなる。"
  },
  {
    "start": 287376,
    "end": 289156,
    "text": "それが最初に話すことだ。"
  },
  {
    "start": 289258,
    "end": 292552,
    "text": "次にお話しするのは、ロスト・イン・ミドルというものです。"
  },
  {
    "start": 292686,
    "end": 303624,
    "text": "LlMが苦労するのは、検索された文書の途中にある文脈を見たりスキャンしたりすることだ。"
  },
  {
    "start": 303672,
    "end": 311260,
    "text": "ここで、セマンティック検索を行ったときに検索された文書が10件あったとしよう。"
  },
  {
    "start": 311410,
    "end": 314152,
    "text": "LLMは基本的に中間の文脈を無視している。"
  },
  {
    "start": 314216,
    "end": 320160,
    "text": "最初のコンテキストと最後のコンテキスト、あるいは最初のドキュメント、最後のドキュメント、呼び方は何でもいい。"
  },
  {
    "start": 320230,
    "end": 325904,
    "text": "これはスタンフォード大学の研究だと思う。"
  },
  {
    "start": 326022,
    "end": 328224,
    "text": "とても有名な論文なので、読んでみてください。"
  },
  {
    "start": 328262,
    "end": 332516,
    "text": "説明文にリンクを貼っておくので、このビデオでもそれを見てみよう。"
  },
  {
    "start": 332618,
    "end": 337428,
    "text": "まず、異なるベクターストアを作成し、それをマージする。"
  },
  {
    "start": 337514,
    "end": 339104,
    "text": "それはマージ・レトリーバーと呼ばれるものだ。"
  },
  {
    "start": 339232,
    "end": 346212,
    "text": "そう、私たちは、マージ・レトリーバーと呼ばれるこの機能を提供するラインチェーンによるレトリーバーの多くをLOTRを使うつもりだ。"
  },
  {
    "start": 346356,
    "end": 350536,
    "text": "では、ロスト・イン・ミドルも見てみよう。"
  },
  {
    "start": 350638,
    "end": 357224,
    "text": "Langchainにはもう一つ、長いコンテキストの並べ替えという機能がある。"
  },
  {
    "start": 357352,
    "end": 365560,
    "text": "文脈をランク付けし、文書をランク付けし、チャンクをランク付けする。"
  },
  {
    "start": 365640,
    "end": 369376,
    "text": "セマンティック検索をするとき、このビデオでは2つのことを見ていく。"
  },
  {
    "start": 369478,
    "end": 371360,
    "text": "このビデオはあまり長くならないだろう。"
  },
  {
    "start": 371430,
    "end": 382128,
    "text": "これからのビデオでは、アンサンブル・リトリーバーも見ていきます。これはハイブリッド検索で、スパース・ベクトルと密なベクトルの両方を調べます。"
  },
  {
    "start": 382144,
    "end": 385252,
    "text": "埋め込み検索とキーワード検索の両方が可能です。"
  },
  {
    "start": 385386,
    "end": 391060,
    "text": "アンサンブルは、相互ランク融合アルゴリズムに近い。"
  },
  {
    "start": 391640,
    "end": 393672,
    "text": "マージ・レトリバーは少し違う。"
  },
  {
    "start": 393726,
    "end": 395268,
    "text": "ラウンドロビン方式だ。"
  },
  {
    "start": 395364,
    "end": 397032,
    "text": "そのすべてについて話そう。"
  },
  {
    "start": 397086,
    "end": 403824,
    "text": "このコード・ベースで実行し、実際の例と、検索がどのように機能し、どのように検索をランク付けし直すことができるかをお見せしましょう。"
  },
  {
    "start": 403892,
    "end": 415424,
    "text": "次のビデオでは、より良いラックを作るためのこのビデオシリーズの第2部で、アンサンブル検索について見ていき、今作っているような複合チェーンについても見ていく。"
  },
  {
    "start": 415462,
    "end": 416832,
    "text": "さあ、飛び込もう。"
  },
  {
    "start": 416886,
    "end": 423756,
    "text": "ここにはすでにJupyterノートブックがあり、データフォルダがある。"
  },
  {
    "start": 423788,
    "end": 427596,
    "text": "ここでは、Python3ポイント10版のノートブックを作ることにする。"
  },
  {
    "start": 427708,
    "end": 431716,
    "text": "ノートブックを開いて、コードを書いてみよう。"
  },
  {
    "start": 431818,
    "end": 437568,
    "text": "さて、まず最初にすることは、必要であれば、いくつかの書類を入手するのに役立つOSをインポートすることだ。"
  },
  {
    "start": 437664,
    "end": 444884,
    "text": "今回はクロマDbを使うつもりだ。波状エイトQの松ぼっくりのビデオがいくつかある。"
  },
  {
    "start": 444932,
    "end": 446724,
    "text": "これらのビデオはLLMのプレイリストでご覧ください。"
  },
  {
    "start": 446772,
    "end": 451336,
    "text": "どのベクターデータベースやベクターストアを使用しているかは、Chromadbによります。"
  },
  {
    "start": 451368,
    "end": 460536,
    "text": "次はラングチェーンから、あるいはこれはラングチェーンから直接使うことになるだろう。"
  },
  {
    "start": 460568,
    "end": 469520,
    "text": "ラングチェーンのベクターストアから、クロマをインポートします。"
  },
  {
    "start": 471540,
    "end": 477360,
    "text": "なぜアダプターなのかわからない。申し訳ないが、ラングチェーンのベクターショップはクロマをインポートしている。"
  },
  {
    "start": 477440,
    "end": 478244,
    "text": "これが次のことだ。"
  },
  {
    "start": 478282,
    "end": 493044,
    "text": "ラングヘンのドキュメント・トランスフォームも必要なので、ロング・コンテキスト・リオーダーというものを使ってみよう。"
  },
  {
    "start": 493092,
    "end": 494250,
    "text": "そうしよう"
  },
  {
    "start": 495580,
    "end": 501328,
    "text": "だから、ロング・コンテクスト、ロング・コンテクストの並び替え。"
  },
  {
    "start": 501364,
    "end": 534766,
    "text": "これはLangchainのLangchain dotからインポートするものです。"
  },
  {
    "start": 534948,
    "end": 537326,
    "text": "さて、私たちに必要なものは何だろう？"
  },
  {
    "start": 537348,
    "end": 538234,
    "text": "PDFがあります。"
  },
  {
    "start": 538282,
    "end": 540354,
    "text": "ここにはPIのPDFが必要だ。"
  },
  {
    "start": 540392,
    "end": 545330,
    "text": "Lanchainのドキュメント・ローダーを使ってみよう。"
  },
  {
    "start": 546390,
    "end": 549278,
    "text": "これは本当にひどいドキュメントローダーだ。"
  },
  {
    "start": 549374,
    "end": 555586,
    "text": "pdfのpipedfローダーをインポートします。"
  },
  {
    "start": 555618,
    "end": 557218,
    "text": "pip loaderを使ってみよう。"
  },
  {
    "start": 557234,
    "end": 569734,
    "text": "BGEは、MPnetやmini Lmよりも優れた性能を持つ埋め込みモデルのひとつで、文型変換器によって、MPnetやmini Lmよりも優れた性能を発揮します。"
  },
  {
    "start": 569782,
    "end": 574442,
    "text": "これは北京AIアカデミーによるもので、現在最も優れたエンベッディング・モデルのひとつである。"
  },
  {
    "start": 574496,
    "end": 576074,
    "text": "ここではそのモデルを使うだけだ。"
  },
  {
    "start": 576112,
    "end": 587802,
    "text": "ラングチェーンのエンベッディングから、ハグする顔のエンベッディングをインポートする。"
  },
  {
    "start": 587866,
    "end": 591806,
    "text": "抱擁顔BGEエンベッディングもインポートしよう。"
  },
  {
    "start": 591838,
    "end": 593010,
    "text": "それはBGEのためだ。"
  },
  {
    "start": 593430,
    "end": 597762,
    "text": "さて、他に何が必要だろうか？"
  },
  {
    "start": 597816,
    "end": 603906,
    "text": "パイプPDFが完成し、マージ検索が必要です。"
  },
  {
    "start": 603938,
    "end": 616266,
    "text": "ラングチェーン・レトリーバーがレトリーバーを合併した、が正しい。"
  },
  {
    "start": 616448,
    "end": 619130,
    "text": "レトリーバーを輸入するつもりだ。"
  },
  {
    "start": 621870,
    "end": 625082,
    "text": "今のところ、この輸入で大丈夫だと思う。"
  },
  {
    "start": 625216,
    "end": 627722,
    "text": "長い。"
  },
  {
    "start": 627776,
    "end": 629626,
    "text": "コンテキストの並び替えも行われる。"
  },
  {
    "start": 629808,
    "end": 630974,
    "text": "マージ・リトリーブも完了。"
  },
  {
    "start": 631012,
    "end": 633374,
    "text": "さて、まずはエンベッディングモデルを手に入れよう。"
  },
  {
    "start": 633412,
    "end": 644834,
    "text": "そのために、ここではマークダウンして、エンベッディング・モデルを取得します。"
  },
  {
    "start": 645032,
    "end": 650930,
    "text": "この埋め込みモデルを取得し、そのためにモデル名を定義しよう。"
  },
  {
    "start": 651000,
    "end": 652866,
    "text": "このモデルが利用できる。"
  },
  {
    "start": 652968,
    "end": 655620,
    "text": "ここでお見せしましょう。"
  },
  {
    "start": 656230,
    "end": 660680,
    "text": "PGEのエンベッディングを見ることができる。"
  },
  {
    "start": 661210,
    "end": 663894,
    "text": "ここにある説明文にリンクを貼っておく。"
  },
  {
    "start": 663932,
    "end": 666050,
    "text": "北京AIアカデミーによるものだ。"
  },
  {
    "start": 666130,
    "end": 667434,
    "text": "それが私が使おうとしているモデルだ。"
  },
  {
    "start": 667472,
    "end": 668998,
    "text": "BGEラージイングリッシュ。"
  },
  {
    "start": 669094,
    "end": 672426,
    "text": "これが、このビデオで使う埋め込みモデルだ。"
  },
  {
    "start": 672528,
    "end": 675740,
    "text": "モデル名をコピーしよう。"
  },
  {
    "start": 676110,
    "end": 678800,
    "text": "すみません、ここにコピーしておきます。"
  },
  {
    "start": 679650,
    "end": 680474,
    "text": "コピーした。"
  },
  {
    "start": 680602,
    "end": 682062,
    "text": "貼り付けておくよ。"
  },
  {
    "start": 682116,
    "end": 683230,
    "text": "これはモデル名である。"
  },
  {
    "start": 683300,
    "end": 686046,
    "text": "ここで、いくつかのモデルクォークを定義してみよう。"
  },
  {
    "start": 686148,
    "end": 692850,
    "text": "クオークのモデルで、ここではCPUを使う。"
  },
  {
    "start": 692920,
    "end": 696146,
    "text": "GPUマシンをお持ちの方は、CuDaをご自由にお使いください。"
  },
  {
    "start": 696248,
    "end": 699250,
    "text": "今度はCPUだ。"
  },
  {
    "start": 700310,
    "end": 704370,
    "text": "今は、エンコーディング・クォークも持っている。"
  },
  {
    "start": 704450,
    "end": 706466,
    "text": "エンコードではなく、クォークをエンコードするんだ。"
  },
  {
    "start": 706498,
    "end": 710546,
    "text": "ところで、RDSはクォークを符号化する。"
  },
  {
    "start": 710578,
    "end": 716262,
    "text": "埋め込みを正規化したい場合は、normalize embeddingというものを使います。"
  },
  {
    "start": 716326,
    "end": 718954,
    "text": "私の場合は、今のところ偽のままにしておく。"
  },
  {
    "start": 719072,
    "end": 723062,
    "text": "エンベッディングを正規化する。"
  },
  {
    "start": 723206,
    "end": 726246,
    "text": "ここでHfという変数を持ってみよう。"
  },
  {
    "start": 726358,
    "end": 730154,
    "text": "ここでは、抱きつき顔のBGEエンベッディングを使うことにする。"
  },
  {
    "start": 730282,
    "end": 733454,
    "text": "この中ではモデル名を使う。"
  },
  {
    "start": 733572,
    "end": 742126,
    "text": "私のモデル名はそのモデル名以外の何物でもないので、モデル名を使い、その後にクォークをモデル化しよう。"
  },
  {
    "start": 742318,
    "end": 747438,
    "text": "私のモデルクォークはモデルクォークで、それからエンコードクォークがある。"
  },
  {
    "start": 747454,
    "end": 750930,
    "text": "encodeはencode quarksである。"
  },
  {
    "start": 752010,
    "end": 757362,
    "text": "ここでは、プリントの埋め込みモデルをロードしてみます。"
  },
  {
    "start": 757426,
    "end": 760600,
    "text": "他の埋め込みモデルも同様に使うことができる。"
  },
  {
    "start": 772930,
    "end": 779282,
    "text": "初めてこのコードを実行する場合、モデルのロードに少し時間がかかる。"
  },
  {
    "start": 779336,
    "end": 782034,
    "text": "をダウンロードし、キャッシュに保存しますよね？"
  },
  {
    "start": 782072,
    "end": 789094,
    "text": "ハグフェイスからモデルウェイトを取得し、それをキャッシュメモリに保存する。"
  },
  {
    "start": 789212,
    "end": 793874,
    "text": "エンベッディング・モデルがロードされました。"
  },
  {
    "start": 793922,
    "end": 796402,
    "text": "私の場合、モデルは正常にロードされた。"
  },
  {
    "start": 796466,
    "end": 801114,
    "text": "では、データの前処理に入ろう。"
  },
  {
    "start": 801152,
    "end": 809850,
    "text": "マークダウン・データの前処理だ。"
  },
  {
    "start": 811470,
    "end": 818586,
    "text": "pdfを読み込んでから、テキストを取り出し、再帰的文字列を使って分割する必要があります。"
  },
  {
    "start": 818618,
    "end": 822574,
    "text": "テキスト・スプリッターは基本的なチャンキング戦略を持っているが、それも重要だ。"
  },
  {
    "start": 822692,
    "end": 834754,
    "text": "loader un sdg variable loader unhdgと呼ぶことにしよう。pypdf loaderを使い、この中でファイル名を渡すだけだ。"
  },
  {
    "start": 834792,
    "end": 835698,
    "text": "それはデータである。"
  },
  {
    "start": 835784,
    "end": 839286,
    "text": "これが私の持っているファイルです。"
  },
  {
    "start": 839308,
    "end": 850486,
    "text": "まず最初に、unhdg pdfで、このpdfの読み込みと分割を行ってから、コピー・ペーストしましょう。"
  },
  {
    "start": 850518,
    "end": 863898,
    "text": "それではdocuments unhdgを実行して、loader unhdg loadを使いましょう。"
  },
  {
    "start": 863994,
    "end": 867294,
    "text": "さて、ファイルを読み込んだら、ここでテキストを分割しようと思う。"
  },
  {
    "start": 867332,
    "end": 880034,
    "text": "text splitter unhg now text splitter unhdg and let's use recursive, I think I forgot to import that."
  },
  {
    "start": 880072,
    "end": 886574,
    "text": "from langchain text splitter import これは何？"
  },
  {
    "start": 886632,
    "end": 888258,
    "text": "再帰的文字テキスト分割ツール。"
  },
  {
    "start": 888354,
    "end": 890390,
    "text": "今は再帰的に使うだけだ。"
  },
  {
    "start": 890970,
    "end": 899826,
    "text": "表示されないのは、テキスト・スプリッター、再帰的文字列テキスト・スプリッターをインポートしたからだ。"
  },
  {
    "start": 899868,
    "end": 906086,
    "text": "チャンクサイズ、チャンクのサイズ、チャンクサイズを定義しているのか？"
  },
  {
    "start": 906118,
    "end": 906314,
    "text": "そうだね。"
  },
  {
    "start": 906352,
    "end": 908860,
    "text": "私は1000と呼ぶつもりだ。"
  },
  {
    "start": 909390,
    "end": 924334,
    "text": "pdfに大きな段落がある場合、チャンクサイズを大きくし、チャンクの量をカバーしたい場合は、チャンクサイズを大きくする必要があります。"
  },
  {
    "start": 924452,
    "end": 927614,
    "text": "チャンクサイズは1000で、チャンクの重なりを維持するつもりだ。"
  },
  {
    "start": 927662,
    "end": 934670,
    "text": "ここではチャンクのオーバーラップを100と呼ぶことにしよう。"
  },
  {
    "start": 934830,
    "end": 936438,
    "text": "これで完了だ。"
  },
  {
    "start": 936524,
    "end": 942006,
    "text": "では、それを分割する変数、テキストUnhDGを用意しよう。"
  },
  {
    "start": 942108,
    "end": 946002,
    "text": "それでは、テキスト分割ツールUNhDGで文書を分割してみましょう。"
  },
  {
    "start": 946146,
    "end": 957894,
    "text": "ドキュメントを分割して、ドキュメントを分割して、ここではドキュメント un HTGを使います。"
  },
  {
    "start": 958022,
    "end": 966122,
    "text": "さて、ここで我々が想定しているのは、Pdfファイルを分割することだ。"
  },
  {
    "start": 966176,
    "end": 974962,
    "text": "作成したすべてのチャンクを1000チャンク・サイズで表示し、基本的にリストにしているので、最初のリストに何があるかがわかる。"
  },
  {
    "start": 975016,
    "end": 992630,
    "text": "UNHDGのPDFにはかなりのページ数があり、再帰文字textplitterが定義されていないと表示されます。"
  },
  {
    "start": 994890,
    "end": 1002680,
    "text": "オーケー、私たちは何をしなかったんだろう？"
  },
  {
    "start": 1004250,
    "end": 1006078,
    "text": "再帰的文字テキストプリンタ。"
  },
  {
    "start": 1006114,
    "end": 1008410,
    "text": "なぜ定義されていないと書かれているのか分からない。"
  },
  {
    "start": 1008750,
    "end": 1010298,
    "text": "タイプミスか何かですか？"
  },
  {
    "start": 1010384,
    "end": 1011340,
    "text": "分からないよ。"
  },
  {
    "start": 1013310,
    "end": 1015550,
    "text": "再帰的文字テキスト分割ツール。"
  },
  {
    "start": 1017890,
    "end": 1022080,
    "text": "とにかく見てみよう。"
  },
  {
    "start": 1023490,
    "end": 1026950,
    "text": "さて、これでエラーが出なかったことがわかっただろう。"
  },
  {
    "start": 1026970,
    "end": 1033380,
    "text": "では、まずテキストUnnhDGを行い、リストの最初を見てみよう。"
  },
  {
    "start": 1034790,
    "end": 1044646,
    "text": "オーケー、また誤字がある、みんなやってみよう。"
  },
  {
    "start": 1044668,
    "end": 1054218,
    "text": "リストの4番目、10番目を見てみると、どのように分割されているか、あるいはチャンキング戦略が本当に重要であることがわかるだろう。"
  },
  {
    "start": 1054304,
    "end": 1055930,
    "text": "より良いチャンクを作らなければならない。"
  },
  {
    "start": 1056350,
    "end": 1058570,
    "text": "チャンキング戦略には様々なものがある。"
  },
  {
    "start": 1060590,
    "end": 1067114,
    "text": "ヘッダーやサブヘッダーで分割することもできるし、JSoNで読み込むこともできる。"
  },
  {
    "start": 1067162,
    "end": 1069166,
    "text": "これは非常に直感的にできる。"
  },
  {
    "start": 1069188,
    "end": 1072878,
    "text": "ラグ・システムを構築するときは、試行錯誤の実験だ。"
  },
  {
    "start": 1073044,
    "end": 1076162,
    "text": "さて、ここで全部コピーしよう。"
  },
  {
    "start": 1076216,
    "end": 1085518,
    "text": "これをパリ協定のためにコピーしよう。"
  },
  {
    "start": 1085614,
    "end": 1091430,
    "text": "私はパリ協定と呼ぶことにする。"
  },
  {
    "start": 1092250,
    "end": 1093766,
    "text": "これはここで変更されるだろう。"
  },
  {
    "start": 1093788,
    "end": 1097154,
    "text": "これを削除して、データ・スラッシュと呼ぶことにしよう。"
  },
  {
    "start": 1097202,
    "end": 1101050,
    "text": "見てみると、PDFがあることがわかる。"
  },
  {
    "start": 1101200,
    "end": 1103194,
    "text": "ここも変更されるだろう。"
  },
  {
    "start": 1103232,
    "end": 1107110,
    "text": "ローダー・パリ協定となる。"
  },
  {
    "start": 1107270,
    "end": 1112910,
    "text": "これもパリ協定と呼ぼう。"
  },
  {
    "start": 1113650,
    "end": 1119920,
    "text": "今、これはパリ協定にもなる。"
  },
  {
    "start": 1120290,
    "end": 1122446,
    "text": "これはいい感じだ。"
  },
  {
    "start": 1122548,
    "end": 1123520,
    "text": "いい感じだ。"
  },
  {
    "start": 1124550,
    "end": 1128530,
    "text": "本文 パリ協定。"
  },
  {
    "start": 1129110,
    "end": 1130354,
    "text": "そうしよう"
  },
  {
    "start": 1130472,
    "end": 1136894,
    "text": "こちらもパリ協定のスプリッターに変更される。"
  },
  {
    "start": 1136942,
    "end": 1137774,
    "text": "ドキュメントを分割した。"
  },
  {
    "start": 1137822,
    "end": 1140626,
    "text": "これはUNHDGの文書となる。"
  },
  {
    "start": 1140738,
    "end": 1143538,
    "text": "これがパリ協定の文書となる。"
  },
  {
    "start": 1143714,
    "end": 1145480,
    "text": "ちょっと見せてくれ。"
  },
  {
    "start": 1146650,
    "end": 1147938,
    "text": "パリ協定"
  },
  {
    "start": 1148114,
    "end": 1148934,
    "text": "パリ協定"
  },
  {
    "start": 1148982,
    "end": 1149580,
    "text": "素晴らしい。"
  },
  {
    "start": 1150990,
    "end": 1151894,
    "text": "テキストの分割。"
  },
  {
    "start": 1151942,
    "end": 1153050,
    "text": "パリ協定文書。"
  },
  {
    "start": 1153120,
    "end": 1154010,
    "text": "ファンタスティックだ。"
  },
  {
    "start": 1154350,
    "end": 1156234,
    "text": "では、それを実行してみよう。"
  },
  {
    "start": 1156352,
    "end": 1158310,
    "text": "ページ数が少ない。"
  },
  {
    "start": 1158390,
    "end": 1161870,
    "text": "パリ協定"
  },
  {
    "start": 1163170,
    "end": 1165294,
    "text": "この中身を見てください。"
  },
  {
    "start": 1165332,
    "end": 1168638,
    "text": "これでチャンクができたことがわかるだろう。"
  },
  {
    "start": 1168804,
    "end": 1173354,
    "text": "では、ベクターストアを作ってみよう。"
  },
  {
    "start": 1173412,
    "end": 1175970,
    "text": "さて、埋め込みモデルはすでに初期化されている。"
  },
  {
    "start": 1177590,
    "end": 1180238,
    "text": "積み込みと分割は済ませた。"
  },
  {
    "start": 1180334,
    "end": 1184786,
    "text": "ここでベクターストアを作ることができる。"
  },
  {
    "start": 1184888,
    "end": 1186946,
    "text": "ベクターを作成して保存しよう。"
  },
  {
    "start": 1187058,
    "end": 1194870,
    "text": "ベクターを作成し、保存する。"
  },
  {
    "start": 1195690,
    "end": 1201754,
    "text": "ここでChroma DBを使っていることはご存知の通りです。"
  },
  {
    "start": 1201792,
    "end": 1202554,
    "text": "そうしよう"
  },
  {
    "start": 1202592,
    "end": 1206438,
    "text": "まずはUNHDGについてだ。"
  },
  {
    "start": 1206534,
    "end": 1212854,
    "text": "最初のpdfでは、2つの異なるベクターストアを作成します。"
  },
  {
    "start": 1212902,
    "end": 1216042,
    "text": "ひとつはSDGSのため、もうひとつはパリ協定のためだ。"
  },
  {
    "start": 1216106,
    "end": 1217422,
    "text": "我々は2種類のPDFを持っている。"
  },
  {
    "start": 1217476,
    "end": 1222430,
    "text": "2つの異なるベクターストアを作成し、MERSレトリーバーを使ってすべてを統合します。"
  },
  {
    "start": 1222580,
    "end": 1225162,
    "text": "であれば、ラウンドロビンアルゴリズムを使う。"
  },
  {
    "start": 1225226,
    "end": 1227338,
    "text": "それで十分だ。"
  },
  {
    "start": 1227364,
    "end": 1237954,
    "text": "バックエンドのアルゴリズムは、ラウンドロビン方式で上位のドキュメントを見て、それをMERSベクトルから返すというものです。"
  },
  {
    "start": 1238082,
    "end": 1240674,
    "text": "いくつか例を挙げて説明しよう。"
  },
  {
    "start": 1240802,
    "end": 1243542,
    "text": "さて、アンSDGストア。"
  },
  {
    "start": 1243676,
    "end": 1253018,
    "text": "ここでは、ドキュメントからクロマを作成する。"
  },
  {
    "start": 1253104,
    "end": 1254470,
    "text": "それはクロマだけだろう。"
  },
  {
    "start": 1254550,
    "end": 1269806,
    "text": "次にテキストUnhDGです。これは本当に重要なことです。"
  },
  {
    "start": 1269908,
    "end": 1273514,
    "text": "なぜこんなことをするのか？"
  },
  {
    "start": 1273572,
    "end": 1276420,
    "text": "さっそく画面を表示させてみよう。"
  },
  {
    "start": 1279510,
    "end": 1280260,
    "text": "オーケー。"
  },
  {
    "start": 1283990,
    "end": 1292678,
    "text": "ここで、ベクターストアを作成する際に、どのようにいくつかの設定を定義できるかを説明しよう。"
  },
  {
    "start": 1292844,
    "end": 1299702,
    "text": "まず第一に、異なるアルゴリズムで異なる検索を実行する方法があるということだ。"
  },
  {
    "start": 1299766,
    "end": 1304342,
    "text": "コサイン類似度を使えば、ベクトル間の類似性を見つけることができる。"
  },
  {
    "start": 1304406,
    "end": 1309594,
    "text": "ユークリッドを使ってもいいし、違うものを使ってもいい。"
  },
  {
    "start": 1309632,
    "end": 1316286,
    "text": "IPコサイン、ユークリッドL2ドット、その他、その他、その他をサポートしていますね。"
  },
  {
    "start": 1316388,
    "end": 1319482,
    "text": "これらの用語はすべて、クロマのドキュメントを見なければならない。"
  },
  {
    "start": 1319546,
    "end": 1327250,
    "text": "類似検索のアルゴリズムは3種類あるようだ。"
  },
  {
    "start": 1327320,
    "end": 1329262,
    "text": "その詳細はドキュメントを参照されたい。"
  },
  {
    "start": 1329326,
    "end": 1342386,
    "text": "HTGでないテキストが見えるように、もう少し大きくしてみよう。"
  },
  {
    "start": 1342498,
    "end": 1347298,
    "text": "さて、次にすることは、HFにエンベッディングを埋め込むことだ。"
  },
  {
    "start": 1347474,
    "end": 1349318,
    "text": "そこにあなたのHFモデルがある。"
  },
  {
    "start": 1349404,
    "end": 1352038,
    "text": "ここではコレクションのメタデータを定義する。"
  },
  {
    "start": 1352134,
    "end": 1365690,
    "text": "このコレクション・メタデータでは、コサインを使うか、ドットを表すipを使うか、あるいは他の何かを使うかを明示的に設定できる。"
  },
  {
    "start": 1365770,
    "end": 1370042,
    "text": "これはキーと値のペアを受け入れ、hnHwのように呼ばれる。"
  },
  {
    "start": 1370186,
    "end": 1383698,
    "text": "hnhwを定義しよう。このhnhwにはスペースを入れ、どのアルゴリズムを使おうとしているかをここに書く。"
  },
  {
    "start": 1383784,
    "end": 1385550,
    "text": "コサインを残すつもりだ。"
  },
  {
    "start": 1385710,
    "end": 1390818,
    "text": "コサインを使い、このベクトルをディスクに保存することができる。"
  },
  {
    "start": 1390914,
    "end": 1393446,
    "text": "イン・メモリーと呼ぶことにするよ。"
  },
  {
    "start": 1393548,
    "end": 1398450,
    "text": "ここではpersistディレクトリを使用し、storeとstoreを使用する。"
  },
  {
    "start": 1398540,
    "end": 1406250,
    "text": "そうすれば、アンベクター・コサインのようなものを作ることができる。"
  },
  {
    "start": 1407870,
    "end": 1426962,
    "text": "さて、ここでやっていることを見てみると、IPを使いたいならChromadbのコサイン機能を使えばいいという設定になっている。"
  },
  {
    "start": 1427016,
    "end": 1434130,
    "text": "説明コレクションのメタデータ・クロマDbにリンクが張れるかどうか確認させてください。"
  },
  {
    "start": 1435990,
    "end": 1437694,
    "text": "UJSのガイドを見ればわかる。"
  },
  {
    "start": 1437742,
    "end": 1442514,
    "text": "早速、彼らのドキュメントを紹介しよう。"
  },
  {
    "start": 1442642,
    "end": 1446454,
    "text": "もしどこかへお越しになれば、ここでコレクションを見ることができる。"
  },
  {
    "start": 1446572,
    "end": 1447942,
    "text": "今度は埋め込み機能だ。"
  },
  {
    "start": 1447996,
    "end": 1448534,
    "text": "これでいい。"
  },
  {
    "start": 1448572,
    "end": 1450134,
    "text": "これはそこからロードしているだけだ。"
  },
  {
    "start": 1450172,
    "end": 1451320,
    "text": "それじゃない。"
  },
  {
    "start": 1452330,
    "end": 1454234,
    "text": "そう、これが私が見せようとしているものだ。"
  },
  {
    "start": 1454272,
    "end": 1473194,
    "text": "このコードを見ると、オプションのメタデータ引数も取ることができ、それを使って、埋め込み空間、n次元空間、類似性、または距離アルゴリズムの遠隔法をカスタマイズすることができる。"
  },
  {
    "start": 1473242,
    "end": 1474986,
    "text": "その方法を使うべきだ。"
  },
  {
    "start": 1475178,
    "end": 1476322,
    "text": "ここを見てほしい。"
  },
  {
    "start": 1476376,
    "end": 1477218,
    "text": "これがそのサポートだ。"
  },
  {
    "start": 1477304,
    "end": 1482210,
    "text": "ip、l2、コサイン・ユークリッドに対応。"
  },
  {
    "start": 1482790,
    "end": 1484626,
    "text": "ちなみにデフォルトはL2だ。"
  },
  {
    "start": 1484648,
    "end": 1487366,
    "text": "デフォルトで使用しない場合は、L2になる。"
  },
  {
    "start": 1487388,
    "end": 1489842,
    "text": "コサインでもipでもない。"
  },
  {
    "start": 1489906,
    "end": 1495398,
    "text": "じゃあ、コサインを使おう。"
  },
  {
    "start": 1495484,
    "end": 1497400,
    "text": "走らせて見よう。"
  },
  {
    "start": 1500790,
    "end": 1509250,
    "text": "この部分を実行すると、このドキュメントのベクターストアの作成に少し時間がかかることがわかるだろう。"
  },
  {
    "start": 1509330,
    "end": 1518326,
    "text": "これは、知識ベース、つまり埋め込みモデルがクエリに基づいて検索できるn次元空間を作成しているに過ぎない。"
  },
  {
    "start": 1518358,
    "end": 1519898,
    "text": "セマンティック検索もできる。"
  },
  {
    "start": 1519984,
    "end": 1521866,
    "text": "それが、今回の課題だ。"
  },
  {
    "start": 1521968,
    "end": 1527854,
    "text": "では、パリのコードもコピーしてみよう。"
  },
  {
    "start": 1527972,
    "end": 1530458,
    "text": "だからパリと呼ぶことにする。"
  },
  {
    "start": 1530554,
    "end": 1531566,
    "text": "そうしよう。"
  },
  {
    "start": 1531668,
    "end": 1540210,
    "text": "パリ、ああ、これは本当に驚きだ。"
  },
  {
    "start": 1541590,
    "end": 1548900,
    "text": "パリとパリ協定店。"
  },
  {
    "start": 1549750,
    "end": 1551094,
    "text": "これをここに呼ぶことにする。"
  },
  {
    "start": 1551132,
    "end": 1566282,
    "text": "このテキストUnHDGはテキストパリ協定に置き換えられ、あなたのHFはHFのままである。"
  },
  {
    "start": 1566336,
    "end": 1574166,
    "text": "マージ・リトリーバを使う目的は、おそらくそれだからだ。"
  },
  {
    "start": 1574278,
    "end": 1580874,
    "text": "なぜなら、2つの異なる知識ベースに対して2つの異なる埋め込みモデルを使えば、バイアスの可能性が少なくなるからです。"
  },
  {
    "start": 1581002,
    "end": 1589406,
    "text": "両方の知識ベースに対する単一の埋め込みモデルは、少し偏る可能性があるため、ある種のバイアスを軽減することができます。"
  },
  {
    "start": 1589428,
    "end": 1592306,
    "text": "異なるエンベッディング・モデルを使用する場合は、それを使用することができる。"
  },
  {
    "start": 1592328,
    "end": 1599170,
    "text": "MPnetやmini LM、OpenAIエンベッディング、頂点AI gekkoエンベッディングなど、どんなものでも文章変換モデルを使うことができる。"
  },
  {
    "start": 1599240,
    "end": 1600510,
    "text": "それは場合によるね。"
  },
  {
    "start": 1600590,
    "end": 1603190,
    "text": "もしかしたら、試してみてコメント欄で教えてくれるかもしれない。"
  },
  {
    "start": 1603260,
    "end": 1607730,
    "text": "さて、ここにHfコレクションのメタデータ・パーシスト・ディレクトリがある。"
  },
  {
    "start": 1607810,
    "end": 1611670,
    "text": "さて、この場合、ここでは名前をunからParisに変えてみよう。"
  },
  {
    "start": 1614170,
    "end": 1617466,
    "text": "じゃあ、パリーパーストア。"
  },
  {
    "start": 1617648,
    "end": 1623686,
    "text": "現在、pdfがn個あるので時間がかかっているのがわかるだろう。"
  },
  {
    "start": 1623718,
    "end": 1628122,
    "text": "我々が持っているPDFの数は70か80くらいだと思う。"
  },
  {
    "start": 1628256,
    "end": 1634254,
    "text": "それを待ってから、次のマークダウンを書くことにしよう。"
  },
  {
    "start": 1634372,
    "end": 1636910,
    "text": "これはマークダウンではなく、コードだ。"
  },
  {
    "start": 1636980,
    "end": 1639682,
    "text": "ところで、ここで新しいセールを追加しておこう。"
  },
  {
    "start": 1639816,
    "end": 1645534,
    "text": "ここではマークダウンと呼ぼう。"
  },
  {
    "start": 1645582,
    "end": 1650180,
    "text": "このマークダウンでは、ベクターストアのロードと呼ぶことにする。"
  },
  {
    "start": 1651690,
    "end": 1653880,
    "text": "ベクターストアをロードする。"
  },
  {
    "start": 1655050,
    "end": 1659234,
    "text": "マークダウンなので、あなたのコードが邪魔されることはありません。"
  },
  {
    "start": 1659362,
    "end": 1662242,
    "text": "では、まず最初に永続化を行う。"
  },
  {
    "start": 1662306,
    "end": 1680026,
    "text": "インメモリーであっても、永続化したほうがいい。意味検索を実行するときに、ランタイムで毎回実行する必要はないのだから、いくつかのフォルダーを持つほうがいい。"
  },
  {
    "start": 1680058,
    "end": 1682734,
    "text": "レイテンシーも問題にはならないだろう。"
  },
  {
    "start": 1682852,
    "end": 1685920,
    "text": "今は少し時間がかかっている。"
  },
  {
    "start": 1687410,
    "end": 1690062,
    "text": "エンベデッドにはお金がかかるんだ。"
  },
  {
    "start": 1690116,
    "end": 1698658,
    "text": "マッチング・エンジンやオープン・ソース・サービス、クラウド・ハイパースケーラのようなものを使う場合も、正直言って苦痛だ。"
  },
  {
    "start": 1698744,
    "end": 1699618,
    "text": "では、ロードしてみよう。"
  },
  {
    "start": 1699624,
    "end": 1703762,
    "text": "ところで、作成が完了したらコードを書いてみよう。"
  },
  {
    "start": 1703906,
    "end": 1707080,
    "text": "現在、SDGストアはオープンしていない。"
  },
  {
    "start": 1708010,
    "end": 1709526,
    "text": "どうやって積むんだ？"
  },
  {
    "start": 1709548,
    "end": 1710706,
    "text": "クロマからロードするだけだ。"
  },
  {
    "start": 1710738,
    "end": 1713958,
    "text": "埋め込みを作成するためだけなので、ドキュメントからは行いません。"
  },
  {
    "start": 1714054,
    "end": 1717462,
    "text": "さて、ここでChroma、そして私はこれをpersist directoryと呼ぶことにする。"
  },
  {
    "start": 1717526,
    "end": 1730430,
    "text": "ここでも、保存したディレクトリを使い、アンベクターとコサインを保存する。"
  },
  {
    "start": 1731810,
    "end": 1735022,
    "text": "アンベクトル・コサイン、オーケー。"
  },
  {
    "start": 1735076,
    "end": 1747006,
    "text": "ここで、埋め込み関数、つまり埋め込みモデルを関数、埋め込み関数に渡すことになります。埋め込み関数は、クエリのためのベクトル作成の計算をすべて引き受けてくれます。"
  },
  {
    "start": 1747118,
    "end": 1751726,
    "text": "今、クエリーを尋ねたら、そのクエリーのためのベクトルも作らなければならない。"
  },
  {
    "start": 1751918,
    "end": 1758866,
    "text": "そして、既存のn次元のベクトル空間から、関連するベクトルを探し出すだけである。"
  },
  {
    "start": 1758978,
    "end": 1761522,
    "text": "ベクトルは数値表現にすぎない。"
  },
  {
    "start": 1761586,
    "end": 1769290,
    "text": "物理学の用語で言うなら、大きさと方向の両方を持っている。"
  },
  {
    "start": 1770270,
    "end": 1774170,
    "text": "さて、イベントストア、SDGストアをロードします。"
  },
  {
    "start": 1774240,
    "end": 1778138,
    "text": "パリのシンジにも同じものを積んでみよう。"
  },
  {
    "start": 1778234,
    "end": 1781440,
    "text": "パリ協定店。"
  },
  {
    "start": 1783170,
    "end": 1789170,
    "text": "ここではChroma persist directoryと呼ぶことにする。"
  },
  {
    "start": 1790790,
    "end": 1792286,
    "text": "誤字がある。"
  },
  {
    "start": 1792478,
    "end": 1795620,
    "text": "ディレクトリストアを永続化する。"
  },
  {
    "start": 1796230,
    "end": 1797620,
    "text": "あれは何？"
  },
  {
    "start": 1798870,
    "end": 1801218,
    "text": "それはパリのベクトル・コサインだった。"
  },
  {
    "start": 1801314,
    "end": 1802710,
    "text": "そうしよう"
  },
  {
    "start": 1802860,
    "end": 1815434,
    "text": "パリのベクトル余弦と、ここでは埋め込み関数を書きたい。"
  },
  {
    "start": 1815552,
    "end": 1824540,
    "text": "ここで、すでに作成されているベクターストアをロードし、さらにいくつかの売上を追加してみよう。"
  },
  {
    "start": 1825330,
    "end": 1834510,
    "text": "ここではもうひとつマークダウンを使い、initをmersretriverと呼ぶことにする。"
  },
  {
    "start": 1835730,
    "end": 1844820,
    "text": "mersretriverを起動し、セマンティック検索を実行する。"
  },
  {
    "start": 1847750,
    "end": 1848500,
    "text": "オーケー。"
  },
  {
    "start": 1852010,
    "end": 1867526,
    "text": "ちょっと時間がかかるので、ここでビデオを一時停止して、完成したらまた戻ってくることにしよう。"
  },
  {
    "start": 1867558,
    "end": 1868346,
    "text": "そうさせてください"
  },
  {
    "start": 1868368,
    "end": 1873900,
    "text": "ここでビデオを一時停止して、両方のベクターが作成されたらまた戻ってきます。"
  },
  {
    "start": 1874270,
    "end": 1878650,
    "text": "をクリックすると、正常に作成されたことがわかります。"
  },
  {
    "start": 1878810,
    "end": 1888762,
    "text": "どちらのベクトル・ストアも、パリ・ベクトル・ストア、パリ・ベクトル・コサイン、アンベクトル・コサインと呼ばれるものだ。"
  },
  {
    "start": 1888826,
    "end": 1891966,
    "text": "ベクターストアの作成は成功した。"
  },
  {
    "start": 1892078,
    "end": 1897246,
    "text": "その中に入ってみると、クロマはduckdb parquetからsqliteに移行している。"
  },
  {
    "start": 1897278,
    "end": 1899714,
    "text": "彼らはここ数カ月で移動してきた。"
  },
  {
    "start": 1899832,
    "end": 1906066,
    "text": "もしChromadbの旧バージョンを使っている場合は、エラーが出るかもしれません。"
  },
  {
    "start": 1906098,
    "end": 1918300,
    "text": "参考までに、ベクター・コサインの中に入ってみると、すべてのベクターのスキーマを持つsqliteと呼ばれるものを見つけることができる。"
  },
  {
    "start": 1918830,
    "end": 1925610,
    "text": "繰り返しになるが、ベクターストアを扱う場合、シリアライズされたメカニズムでもデシリアライズされたメカニズムでも機能する。"
  },
  {
    "start": 1925760,
    "end": 1928694,
    "text": "さて、ここでパリベクトル余弦と呼ばれるものがある。"
  },
  {
    "start": 1928822,
    "end": 1931054,
    "text": "これで2つの異なるベクターストアができたことになる。"
  },
  {
    "start": 1931172,
    "end": 1933466,
    "text": "この2つの異なるベクターストアを統合してみよう。"
  },
  {
    "start": 1933498,
    "end": 1935246,
    "text": "ここでn個のベクターストアをマージすることができる。"
  },
  {
    "start": 1935268,
    "end": 1936398,
    "text": "どうやるか見てみよう。"
  },
  {
    "start": 1936484,
    "end": 1940706,
    "text": "すでにロードしてあります。"
  },
  {
    "start": 1940808,
    "end": 1946322,
    "text": "このすでに作成されたベクターストアをロードし、これからレトリーバーをマージしてセマンティック検索を実行する。"
  },
  {
    "start": 1946456,
    "end": 1952310,
    "text": "では、レトリーバーUnhDと呼ぼう。"
  },
  {
    "start": 1952890,
    "end": 1960040,
    "text": "ここでは \"load Unhd store \"と呼ぶことにする。"
  },
  {
    "start": 1962510,
    "end": 1968790,
    "text": "レトリーバーとして、そう、レトリーバーとして。"
  },
  {
    "start": 1968870,
    "end": 1972042,
    "text": "この中で、いくつかパスすることがある。"
  },
  {
    "start": 1972096,
    "end": 1976880,
    "text": "まず第一に、検索タイプだ。"
  },
  {
    "start": 1978210,
    "end": 1982510,
    "text": "また、検索タイプにもさまざまなオプションが用意されている。"
  },
  {
    "start": 1982580,
    "end": 1985210,
    "text": "あなたは類似性というものを見ている。"
  },
  {
    "start": 1985370,
    "end": 1990542,
    "text": "これはMMRと呼ばれるもので、最大限の関連性を意味する。"
  },
  {
    "start": 1990606,
    "end": 1999826,
    "text": "もちろん、最も類似した回答やチャンク、どんなクエリであれ、それを調べます。"
  },
  {
    "start": 1999928,
    "end": 2003214,
    "text": "MMRに関する多様性に注目している。"
  },
  {
    "start": 2003262,
    "end": 2006322,
    "text": "MMRがあり、単純化のために類似性がある。"
  },
  {
    "start": 2006386,
    "end": 2010358,
    "text": "このビデオでは、私は似たようなことを進めるだけだが、君なんだ、やってみるんだ。"
  },
  {
    "start": 2010444,
    "end": 2014902,
    "text": "この異なるタイプの検索タイプで遊ぶことができる。"
  },
  {
    "start": 2014956,
    "end": 2018026,
    "text": "私は似たようなプレーを続けるつもりだが、MMRでもまたプレーできる。"
  },
  {
    "start": 2018048,
    "end": 2019194,
    "text": "簡単なことだ。"
  },
  {
    "start": 2019232,
    "end": 2028842,
    "text": "MMRとは、Maximal marginal relevancy（最大限界関連性）の頭文字をとったもので、検索された文書やベクターストアの中にある多様性の候補を調べるものです。"
  },
  {
    "start": 2028986,
    "end": 2031594,
    "text": "このようなタイプの類似性。"
  },
  {
    "start": 2031642,
    "end": 2037438,
    "text": "また、ここでいくつかの論拠を示すこともできる。"
  },
  {
    "start": 2037524,
    "end": 2040026,
    "text": "しきい値を設定することもできる。"
  },
  {
    "start": 2040138,
    "end": 2046082,
    "text": "正しい結果が得られない場合は、例えば70のようなしきい値を設定することもできる。"
  },
  {
    "start": 2046216,
    "end": 2054374,
    "text": "70点とか0.7点とかではなく、それ以上のものがあれば、それを見なければならない。"
  },
  {
    "start": 2054412,
    "end": 2058642,
    "text": "もし70％なら、関連するチャンクだけを取り出すことになる。"
  },
  {
    "start": 2058706,
    "end": 2061254,
    "text": "また、これらの引数を弄ることもできる。"
  },
  {
    "start": 2061292,
    "end": 2063586,
    "text": "ここではサーチクォークと呼ぶことにする。"
  },
  {
    "start": 2063618,
    "end": 2065270,
    "text": "サーチクォークをやろう"
  },
  {
    "start": 2065350,
    "end": 2069734,
    "text": "この検索クオークの内部では、まず、どれだけの文書を検索したいかということだ。"
  },
  {
    "start": 2069782,
    "end": 2071254,
    "text": "3つのドキュメントを取得したい。"
  },
  {
    "start": 2071302,
    "end": 2077280,
    "text": "kの数を3としよう。"
  },
  {
    "start": 2078450,
    "end": 2082778,
    "text": "ここでもクォークを探す。"
  },
  {
    "start": 2082874,
    "end": 2086202,
    "text": "サーチクォークは基本的にキーと値のペアである。"
  },
  {
    "start": 2086266,
    "end": 2086880,
    "text": "オーケー。"
  },
  {
    "start": 2089890,
    "end": 2090786,
    "text": "それを見ているとね。"
  },
  {
    "start": 2090808,
    "end": 2094846,
    "text": "この後、メタデータも入れるつもりだ。"
  },
  {
    "start": 2094878,
    "end": 2103750,
    "text": "これはブール値だ。"
  },
  {
    "start": 2103820,
    "end": 2105986,
    "text": "これを真のインクルード・メタデータと呼ぼう。"
  },
  {
    "start": 2106018,
    "end": 2112866,
    "text": "では、この部分を丸ごとコピーして、cをコントロールし、vをコントロールする。"
  },
  {
    "start": 2112988,
    "end": 2117894,
    "text": "これはUNHDGの最初のものだ。"
  },
  {
    "start": 2117942,
    "end": 2119594,
    "text": "今度はパリでもやろう。"
  },
  {
    "start": 2119632,
    "end": 2125722,
    "text": "パリ協定を結び、パリ協定を撤回しよう。"
  },
  {
    "start": 2125786,
    "end": 2127226,
    "text": "これも変更されるだろう。"
  },
  {
    "start": 2127258,
    "end": 2132346,
    "text": "これはレトリーバーとしてパリ協定店にロードされる。"
  },
  {
    "start": 2132458,
    "end": 2138410,
    "text": "検索タイプの類似性は、メタデータを含む類似性検索クォークkイコールとしておこう。"
  },
  {
    "start": 2138490,
    "end": 2147998,
    "text": "ここでやっていることは、2つの異なるリトリーバーのインスタンスを作成し、それらのリトリーバーをマージすることだ。"
  },
  {
    "start": 2148014,
    "end": 2153282,
    "text": "それを統合すると、全部で6つの文書が検索されることになる。"
  },
  {
    "start": 2153416,
    "end": 2156982,
    "text": "ベクターストアから取得する6つの関連文書。"
  },
  {
    "start": 2157036,
    "end": 2158520,
    "text": "それが私がここでやりたいことだ。"
  },
  {
    "start": 2159210,
    "end": 2162914,
    "text": "実行すれば、正常に開始されたことがわかるだろう。"
  },
  {
    "start": 2162962,
    "end": 2164738,
    "text": "では、ROTRという変数を持ってみよう。"
  },
  {
    "start": 2164834,
    "end": 2167286,
    "text": "ここでは合併レトリーバーを使うことにする。"
  },
  {
    "start": 2167398,
    "end": 2170918,
    "text": "ラング・チェーンのクラス、マージャー・リトリーバーを使ってみよう。"
  },
  {
    "start": 2171014,
    "end": 2175366,
    "text": "レトリーバーのリストを渡す。"
  },
  {
    "start": 2175398,
    "end": 2178480,
    "text": "リストが必要で、n個のリストを指定できる。"
  },
  {
    "start": 2178850,
    "end": 2179902,
    "text": "これは本当に重要なことだ。"
  },
  {
    "start": 2179956,
    "end": 2182218,
    "text": "さっきも言ったように、なぜこの練習をするのか？"
  },
  {
    "start": 2182394,
    "end": 2188650,
    "text": "企業内にあるさまざまな種類の文書に対して、単一のベクターストアを作成することはおそらくないだろう。"
  },
  {
    "start": 2188730,
    "end": 2197118,
    "text": "マーケティング関連の文書、営業関連の文書、健康関連の文書、政策関連の文書があるとする。"
  },
  {
    "start": 2197214,
    "end": 2198978,
    "text": "なぜ単一のベクターストアを作るのですか？"
  },
  {
    "start": 2199064,
    "end": 2205302,
    "text": "異なるベクトルストアを作成し、それをマージして、異なるタイプのアルゴリズムを使ってセマンティック検索を実行する。"
  },
  {
    "start": 2205356,
    "end": 2209778,
    "text": "検索に引っかかったらいつでも、LLMに渡して反応を探ってもらってください。"
  },
  {
    "start": 2209874,
    "end": 2214290,
    "text": "もちろん、レトリバーを上達させるためのさまざまなテクニックもある。"
  },
  {
    "start": 2214370,
    "end": 2220998,
    "text": "私たちがやっていることのひとつは、長いコンテキストの並べ替えで、検索されたドキュメントのランキングを変更する方法です。"
  },
  {
    "start": 2221094,
    "end": 2225026,
    "text": "今、レトリーバーではリストが必要で、そのリストをレトリーバーに渡すだけだ。"
  },
  {
    "start": 2225078,
    "end": 2231150,
    "text": "1つ目はレトリーバー・アンスツグ、2つ目はレトリーバー・パリ協定である。"
  },
  {
    "start": 2231730,
    "end": 2232334,
    "text": "オーケー。"
  },
  {
    "start": 2232452,
    "end": 2234160,
    "text": "合併させてくれ。"
  },
  {
    "start": 2234610,
    "end": 2242618,
    "text": "LOTRを実行すると、マージ・リトリーバー・テキスト、メタデータ、ブラブラ、ブラブラ、ブラブラといった冗長なものがすべて表示される。"
  },
  {
    "start": 2242634,
    "end": 2243066,
    "text": "そうだね。"
  },
  {
    "start": 2243188,
    "end": 2244418,
    "text": "簡単なことだ。"
  },
  {
    "start": 2244504,
    "end": 2248674,
    "text": "来年はどうしようかな。"
  },
  {
    "start": 2248712,
    "end": 2250514,
    "text": "では、ここでクエリーを定義してみよう。"
  },
  {
    "start": 2250552,
    "end": 2254162,
    "text": "クエリーでセマンティック検索をしてみよう。"
  },
  {
    "start": 2254216,
    "end": 2261494,
    "text": "このビデオでやろうとしていることは、おそらく次のビデオでは、私たちがここに住んでいるところから始めて、そこから始めることになるだろう。"
  },
  {
    "start": 2261532,
    "end": 2270682,
    "text": "検索QAチェーン、詰めドキュメントチェーン、リフレーズクエリー、検索チェーンなど、何でもいい。"
  },
  {
    "start": 2270816,
    "end": 2272006,
    "text": "さて、このクエリである。"
  },
  {
    "start": 2272118,
    "end": 2273660,
    "text": "では、質問をしよう。"
  },
  {
    "start": 2274350,
    "end": 2279034,
    "text": "みんなにどんな質問ができるか、それも今話題になっている。"
  },
  {
    "start": 2279162,
    "end": 2311960,
    "text": "ちょっと見てみようか、うーん、見てみようか、何か見てみようか、ルールで決められていないこと、ゴール16は何について話しているのか聞いてみようか。"
  },
  {
    "start": 2314410,
    "end": 2315394,
    "text": "これはあなたの問い合わせだ。"
  },
  {
    "start": 2315442,
    "end": 2322118,
    "text": "では、docsを用意しよう。docsではget relevant documentメソッドを使おう。"
  },
  {
    "start": 2322214,
    "end": 2326054,
    "text": "ロトル・ゲット・ローターと呼ぶことにする。"
  },
  {
    "start": 2326102,
    "end": 2331670,
    "text": "メノウではないことがお分かりいただけると思います。"
  },
  {
    "start": 2331750,
    "end": 2333562,
    "text": "これでクエリーをパスするつもりだ。"
  },
  {
    "start": 2333626,
    "end": 2336990,
    "text": "クエリーをパスして、プリント・ドキュメントを作成しよう。"
  },
  {
    "start": 2338610,
    "end": 2343380,
    "text": "コントロール・プラスが見えるように大きくしてみよう。"
  },
  {
    "start": 2345030,
    "end": 2358518,
    "text": "さて、リトリーブ・レスポンスを見てみよう。まずページの内容を数え、その出力をより良い方法で解析するための後処理関数、出力パーサーを書こう。"
  },
  {
    "start": 2358604,
    "end": 2363478,
    "text": "文書ページの内容を見ると、1、2、3、これで合計6ページとなる。"
  },
  {
    "start": 2363564,
    "end": 2371162,
    "text": "1つ、2つ、3つ、4つ、5つ、そして6つ。"
  },
  {
    "start": 2371296,
    "end": 2374310,
    "text": "検索された文書は全部で6つある。"
  },
  {
    "start": 2374390,
    "end": 2377062,
    "text": "ページの内容を最初に見ると、ゴール16について書かれている。"
  },
  {
    "start": 2377126,
    "end": 2380442,
    "text": "持続可能な開発のために、平和的で包摂的な社会を促進する。"
  },
  {
    "start": 2380506,
    "end": 2386362,
    "text": "すべての人に司法へのアクセスを提供し、あらゆるレベルにおいて、効果的で説明責任を果たし、包摂的な制度を構築する。"
  },
  {
    "start": 2386426,
    "end": 2391238,
    "text": "さて、ドキュメントに戻って、このゴール16を見てほしい。"
  },
  {
    "start": 2391274,
    "end": 2393746,
    "text": "それは、正しい情報のセットを検索する。"
  },
  {
    "start": 2393928,
    "end": 2395454,
    "text": "それが検索結果だ。"
  },
  {
    "start": 2395502,
    "end": 2396338,
    "text": "これがそうだ。"
  },
  {
    "start": 2396424,
    "end": 2402450,
    "text": "では、他のものを見てみよう。"
  },
  {
    "start": 2405590,
    "end": 2406340,
    "text": "オーケー。"
  },
  {
    "start": 2409210,
    "end": 2411270,
    "text": "細かいことまで書いてあるよ。"
  },
  {
    "start": 2411340,
    "end": 2430508,
    "text": "では、世界の持続可能な開発報告書について聞いてみよう。"
  },
  {
    "start": 2430674,
    "end": 2443648,
    "text": "ここでもうひとつ、世界持続可能開発報告書とは何かについて質問してみよう。"
  },
  {
    "start": 2443814,
    "end": 2446592,
    "text": "その役割とは何なのか。"
  },
  {
    "start": 2446656,
    "end": 2457670,
    "text": "世界の持続可能な開発報告書の役割とは？"
  },
  {
    "start": 2465640,
    "end": 2466612,
    "text": "見てみよう。"
  },
  {
    "start": 2466666,
    "end": 2467270,
    "text": "オーケー。"
  },
  {
    "start": 2469420,
    "end": 2479068,
    "text": "もし、正しい文書セットが検索されたなら、そのデータを見てみよう。"
  },
  {
    "start": 2479154,
    "end": 2480990,
    "text": "アンSDG、これでいい。"
  },
  {
    "start": 2481520,
    "end": 2495732,
    "text": "SDGsは3つの側面を持つ。"
  },
  {
    "start": 2495876,
    "end": 2504490,
    "text": "みんな、最初の段階で正しい文書を検索できているとは思わないよ。"
  },
  {
    "start": 2505100,
    "end": 2508316,
    "text": "今、なぜロスト・イン・ミドルの話をしているのか。"
  },
  {
    "start": 2508418,
    "end": 2510492,
    "text": "さて、中途半端とはどういうことか？"
  },
  {
    "start": 2510546,
    "end": 2514440,
    "text": "あるいは、LLMが苦戦するリアム、中間で迷うとはどういうことか。"
  },
  {
    "start": 2514520,
    "end": 2518640,
    "text": "最初の文書をご覧ください。"
  },
  {
    "start": 2518710,
    "end": 2519916,
    "text": "これが一番上の文書だ。"
  },
  {
    "start": 2519948,
    "end": 2522204,
    "text": "降りてくれば、下の書類がある。"
  },
  {
    "start": 2522252,
    "end": 2530560,
    "text": "今、ここを見ると、LLMは真ん中にあるコンテクストに苦戦している。"
  },
  {
    "start": 2530630,
    "end": 2532036,
    "text": "これらの文脈を見ればわかるだろう？"
  },
  {
    "start": 2532058,
    "end": 2535088,
    "text": "LLMはこの文脈の一部と格闘している。"
  },
  {
    "start": 2535184,
    "end": 2539584,
    "text": "コンテキストがn個あるような場合、例えば5個以上のコンテキストがある場合。"
  },
  {
    "start": 2539712,
    "end": 2549928,
    "text": "コンテキストがある場合、パフォーマンスの低下、パフォーマンスの低下、あるいは効率的なパフォーマンス、それによって検索性が低下することは間違いない。"
  },
  {
    "start": 2550014,
    "end": 2553652,
    "text": "そこで、私たちは基本的にこのコンテクストの順位をつけ直さなければならない。"
  },
  {
    "start": 2553716,
    "end": 2556872,
    "text": "そこで、ロングコンテキストのリオーダーの助けを借りる。"
  },
  {
    "start": 2556936,
    "end": 2560232,
    "text": "長いコンテキストの並べ替えとはどういう意味か、説明しよう。"
  },
  {
    "start": 2560296,
    "end": 2564364,
    "text": "さて、この男の長いコンテキストの並べ替えをどうするか。"
  },
  {
    "start": 2564402,
    "end": 2570292,
    "text": "ロング・コンテキストの並べ替えクラスをラングチェインで使う方法を見てみよう。"
  },
  {
    "start": 2570376,
    "end": 2580404,
    "text": "もしlangchainを使いたくない場合、独自のコードを使いたい場合、あるいは独自の関数を作りたい場合は、クロスエンコーダー・モデルというものを使うことができる。"
  },
  {
    "start": 2580442,
    "end": 2590660,
    "text": "あなたには、この問題に基本的に対処するのに役立つバート・モデルがたくさんある。"
  },
  {
    "start": 2590730,
    "end": 2596852,
    "text": "では、ここに2つのコード・マークダウンというものを作ってみよう。"
  },
  {
    "start": 2596916,
    "end": 2604520,
    "text": "このマークダウンで、このビデオの最後の部分になりますが、長いコンテキストの並べ替えを行います。"
  },
  {
    "start": 2604680,
    "end": 2614350,
    "text": "長いコンテキストの並べ替え、中盤での迷子問題の修正。"
  },
  {
    "start": 2615520,
    "end": 2617756,
    "text": "さて、どうやる？"
  },
  {
    "start": 2617778,
    "end": 2619824,
    "text": "まず、私が持っているかどうか確認させてください。"
  },
  {
    "start": 2619862,
    "end": 2621324,
    "text": "並べ替えと呼ぼう。"
  },
  {
    "start": 2621372,
    "end": 2623676,
    "text": "では、reorderingという変数を持ってみよう。"
  },
  {
    "start": 2623708,
    "end": 2632028,
    "text": "この変数では、ランジンによってすでに与えられているロングコンテキストのリオーダークラスを使うつもりだ。"
  },
  {
    "start": 2632044,
    "end": 2636052,
    "text": "であれば、Langchainが提供する非常に高度な抽象クラスについて心配する必要はない。"
  },
  {
    "start": 2636106,
    "end": 2638292,
    "text": "自分でやろうと思えばできる。"
  },
  {
    "start": 2638346,
    "end": 2643104,
    "text": "ベクトルデータベースの中には、wavy eightのように、再ランキング機能を提供するものもある。"
  },
  {
    "start": 2643152,
    "end": 2645364,
    "text": "ローカルでセットアップすれば、内蔵されている。"
  },
  {
    "start": 2645412,
    "end": 2647160,
    "text": "そのようなオプションも使用できる。"
  },
  {
    "start": 2647230,
    "end": 2650600,
    "text": "さて、シンプルにするために、まずこれを始めよう。"
  },
  {
    "start": 2650670,
    "end": 2652596,
    "text": "今、私は長いコンテキストの再オーダーを開始した。"
  },
  {
    "start": 2652628,
    "end": 2656984,
    "text": "私がすることは、みんな、我々が持っているエボックの文書を渡すことだ。"
  },
  {
    "start": 2657032,
    "end": 2659564,
    "text": "これをreorder docと呼び、ここに渡してみよう。"
  },
  {
    "start": 2659602,
    "end": 2662760,
    "text": "ドットの並び替え。"
  },
  {
    "start": 2662840,
    "end": 2665710,
    "text": "トランスフォーム・ドキュメント機能を使ってみる。"
  },
  {
    "start": 2667680,
    "end": 2669516,
    "text": "ここではドキュメントを渡すだけだ。"
  },
  {
    "start": 2669548,
    "end": 2671410,
    "text": "前の文書はパスするつもりだ。"
  },
  {
    "start": 2671940,
    "end": 2674764,
    "text": "では、並べ替えたドキュメントを印刷してみよう。"
  },
  {
    "start": 2674892,
    "end": 2678530,
    "text": "さて、並び替えたドキュメントを渡したら、お見せしよう。"
  },
  {
    "start": 2680600,
    "end": 2690560,
    "text": "前の文脈での反応を見ると、これは2番目で、イノベーションを加速させ、増加させ、可能にすることが重要である。"
  },
  {
    "start": 2690640,
    "end": 2698644,
    "text": "イノベーションを加速させ、増大させ、可能にすることが、最初の文脈、文脈の最初の部分になる。"
  },
  {
    "start": 2698772,
    "end": 2700984,
    "text": "今は手動でチェックしていない。"
  },
  {
    "start": 2701022,
    "end": 2706984,
    "text": "必ずしも、長いコンテキストの並べ替えをすれば、順位を上げれば改善されるとは限らない。"
  },
  {
    "start": 2707032,
    "end": 2727392,
    "text": "ほとんどのシナリオで、相互ランク融合RLFアルゴリズムに基づく再ランク付けは、このアルゴリズムを使用すると、検索されたドキュメントの関連するチャンクを再ランク付けすることによって、パフォーマンスを向上させる傾向があることに気づきました。"
  },
  {
    "start": 2727446,
    "end": 2736320,
    "text": "なぜなら、もしあなたがここで気づいたら、LLMの真ん中で迷っているところをお見せすることになるからだ。"
  },
  {
    "start": 2736400,
    "end": 2745800,
    "text": "スタンフォード大学か誰かが書いたものだと思いますが、こちらを見てください。"
  },
  {
    "start": 2746620,
    "end": 2749448,
    "text": "彼らは混乱するか、ほとんどの場合無視する。"
  },
  {
    "start": 2749534,
    "end": 2756330,
    "text": "ダウンロード・PDFをクリックして、このPDFをダウンロードしてください。"
  },
  {
    "start": 2758300,
    "end": 2759372,
    "text": "本当にいい論文だ。"
  },
  {
    "start": 2759426,
    "end": 2760632,
    "text": "説明文にリンクを貼っておく。"
  },
  {
    "start": 2760696,
    "end": 2764268,
    "text": "この論文を読んで、スタンフォードの論文を書いてみてください。"
  },
  {
    "start": 2764354,
    "end": 2770556,
    "text": "この長いコンテクストを使う場合、何が問題なのか？"
  },
  {
    "start": 2770668,
    "end": 2782416,
    "text": "コンテキストの数については、次回のビデオで説明する予定です。"
  },
  {
    "start": 2782608,
    "end": 2790688,
    "text": "また、バイアスを軽減し、冗長なチャンクや冗長なドキュメントを削除するのにも役立つ。"
  },
  {
    "start": 2790784,
    "end": 2793864,
    "text": "そこで、ハイブリッド検索に近いアンサンブル検索に注目する。"
  },
  {
    "start": 2793902,
    "end": 2801896,
    "text": "そして、ラグ・チェーンのパフォーマンスを向上させ、より良いラグ・システムを構築するための、その他のテクニックを紹介しよう。"
  },
  {
    "start": 2802078,
    "end": 2809912,
    "text": "この中で私はLOTRを取り上げた。LOTRとは合併レトリーバーのことで、ラングチェーンが提供するロット・オブ・レトリーバーの頭文字をとったものだ。"
  },
  {
    "start": 2810056,
    "end": 2812456,
    "text": "そして、ロングコンテキストのリオーダーに注目した。"
  },
  {
    "start": 2812488,
    "end": 2816924,
    "text": "次のビデオでアルゴリズムを再順位付けするのに役立つ。"
  },
  {
    "start": 2816962,
    "end": 2824240,
    "text": "また、クロスエンコーダー・モデルやクロスエンコーディング・バート・モデルなどを通じて、手動でそれを行う方法も取り上げるかもしれない。"
  },
  {
    "start": 2824390,
    "end": 2826176,
    "text": "それがこのビデオのすべてだ。"
  },
  {
    "start": 2826198,
    "end": 2828240,
    "text": "今はLLMは考えていない。"
  },
  {
    "start": 2828310,
    "end": 2834004,
    "text": "この関連するチャンクや検索された文書をLLMに渡し、次のビデオでその出力を比較してみよう。"
  },
  {
    "start": 2834042,
    "end": 2836036,
    "text": "そうしないと、本当に長くなる。"
  },
  {
    "start": 2836218,
    "end": 2840592,
    "text": "このノートブックは私のGitHubリポジトリで公開される。"
  },
  {
    "start": 2840656,
    "end": 2845412,
    "text": "みんな、何か質問、考え、フィードバックがあったら、コメント欄で教えてね。"
  },
  {
    "start": 2845466,
    "end": 2848864,
    "text": "何か質問があれば、私のソーシャルメディア・チャンネルを通じて連絡してほしい。"
  },
  {
    "start": 2848912,
    "end": 2852844,
    "text": "YouTubeのバナーとチャンネルでご覧ください。"
  },
  {
    "start": 2853002,
    "end": 2856140,
    "text": "チャンネル登録がまだの方は、ぜひ登録してください。"
  },
  {
    "start": 2856640,
    "end": 2861740,
    "text": "LLMに関する私の過去のビデオや、さまざまな生成AI関連のビデオをご覧ください。"
  },
  {
    "start": 2861890,
    "end": 2866780,
    "text": "このビデオとチャンネルをお友達とシェアしてください。"
  },
  {
    "start": 2866850,
    "end": 2867690,
    "text": "また次の試合で会おう。"
  }
]