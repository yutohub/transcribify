[
  {
    "start": 170,
    "end": 2314,
    "text": "nextjsの認証について話しましょう。"
  },
  {
    "start": 2362,
    "end": 5390,
    "text": "これは幅広いトピックで、いろいろな話ができる。"
  },
  {
    "start": 5460,
    "end": 13450,
    "text": "このビデオでは、追加ライブラリなしでnextjsで基本的なセッション認証を行う方法を説明します。"
  },
  {
    "start": 13530,
    "end": 18158,
    "text": "自分で巻くのが面倒なら、他のオプションも紹介しよう。"
  },
  {
    "start": 18244,
    "end": 19214,
    "text": "さあ、本題に入ろう。"
  },
  {
    "start": 19252,
    "end": 25090,
    "text": "このビデオのコードは説明文にあります。また、ページとアプリ・ルーター両方の新しいドキュメントも公開しました。"
  },
  {
    "start": 25130,
    "end": 26438,
    "text": "見てきてくれ"
  },
  {
    "start": 26524,
    "end": 29026,
    "text": "このアプリケーションをローカルにクローンした。"
  },
  {
    "start": 29058,
    "end": 32470,
    "text": "エディターにアップしてあるので、ここでいくつか話をしよう。"
  },
  {
    "start": 32540,
    "end": 37510,
    "text": "ルート・レイアウトは、hello world next Jsアプリのセットアップから変わっていない。"
  },
  {
    "start": 37580,
    "end": 40038,
    "text": "これはHTMLとアプリケーションの本体だけだ。"
  },
  {
    "start": 40204,
    "end": 44566,
    "text": "そして、インデックス・ルートがあるので、そのルートを示すページ・ファイルがある。"
  },
  {
    "start": 44678,
    "end": 51514,
    "text": "これはサーバー・コンポーネントなので、非同期とマークし、アプリケーションのセッションを取得するのを待っている。"
  },
  {
    "start": 51712,
    "end": 55278,
    "text": "もしユーザーがいれば、そのユーザーの情報をここに出力する。"
  },
  {
    "start": 55364,
    "end": 57722,
    "text": "そうでなければ、無効と言うしかない。"
  },
  {
    "start": 57866,
    "end": 59742,
    "text": "となると、ここには2つの異なる形がある。"
  },
  {
    "start": 59796,
    "end": 63850,
    "text": "ユーザーがログインするためのフォームが1つあり、サーバーアクションを呼び出します。"
  },
  {
    "start": 63930,
    "end": 66714,
    "text": "このログイン関数を呼び出し、リダイレクトして戻る。"
  },
  {
    "start": 66852,
    "end": 70098,
    "text": "それから、ログアウトも基本的に同じです。"
  },
  {
    "start": 70184,
    "end": 73570,
    "text": "これは、ログイン、ログアウトの基本的な足場に過ぎない。"
  },
  {
    "start": 73640,
    "end": 75714,
    "text": "もちろん、ここでできることはまだまだたくさんある。"
  },
  {
    "start": 75752,
    "end": 83074,
    "text": "認証の基本を理解するための真髄は、ログインとログアウトの機能にある。"
  },
  {
    "start": 83122,
    "end": 90998,
    "text": "認証に関連するすべてのライブラリを、この1つのlib tsファイルに移動した。"
  },
  {
    "start": 91174,
    "end": 92822,
    "text": "ログインから始めよう。"
  },
  {
    "start": 92966,
    "end": 105086,
    "text": "lee@roselle.com と入力してエンターキーを押すと、フォームが送信され、右側にログアウトされた情報が表示されます。"
  },
  {
    "start": 105188,
    "end": 109760,
    "text": "このログイン関数が呼び出されると、フォームデータが取り込まれる。"
  },
  {
    "start": 110130,
    "end": 113230,
    "text": "フォームから情報を読み取ることができる。"
  },
  {
    "start": 113300,
    "end": 117778,
    "text": "あなたのアプリケーションのユーザー・オブジェクトについて、他の追加情報をここに書くことができます。"
  },
  {
    "start": 117864,
    "end": 122062,
    "text": "これは、おそらくデータベースと会話し、ユーザーに関する情報を検索する場所である。"
  },
  {
    "start": 122206,
    "end": 127326,
    "text": "その情報が戻ってきたら、セッションを作成する。"
  },
  {
    "start": 127438,
    "end": 131606,
    "text": "新しい日付で有効期限を定義する。"
  },
  {
    "start": 131788,
    "end": 139870,
    "text": "このセッション・オプションまたはセッション・オブジェクトは暗号化され、ユーザーと有効期限が切れるまでの時間が表示されます。"
  },
  {
    "start": 139970,
    "end": 142470,
    "text": "そして、これをクッキーとして設定する。"
  },
  {
    "start": 142550,
    "end": 147542,
    "text": "nextjsは、クッキーの設定と削除を可能にするこのクッキー機能を備えています。"
  },
  {
    "start": 147686,
    "end": 153506,
    "text": "これをセッション名で設定し、セッションを渡し、それがいつ期限切れになるかを言う。"
  },
  {
    "start": 153558,
    "end": 159626,
    "text": "批判的に言えば、これはHTTPのみのクッキーなので、サーバー上でしか読むことができません。"
  },
  {
    "start": 159738,
    "end": 162958,
    "text": "さて、この暗号化の部分は飛ばしたが、これは本当に重要だ。"
  },
  {
    "start": 163124,
    "end": 168740,
    "text": "暗号化まで行くと、ここでいくつかのことをやっているのがわかるだろう。"
  },
  {
    "start": 169110,
    "end": 170706,
    "text": "これは非同期関数である。"
  },
  {
    "start": 170808,
    "end": 175986,
    "text": "JWTまたはJSONウェブトークンのペイロードを受け取ります。"
  },
  {
    "start": 176098,
    "end": 180262,
    "text": "このライブラリからこの関数を呼び出す。"
  },
  {
    "start": 180316,
    "end": 193594,
    "text": "Jose、誰がペイロードとアルゴリズムに基づいてJWTに署名することを許可してくれるのでしょうか。"
  },
  {
    "start": 193632,
    "end": 200506,
    "text": "暗号化に使う秘密鍵は、アプリケーションの一番上に定義してあります。"
  },
  {
    "start": 200608,
    "end": 205134,
    "text": "おそらく、環境変数か、人がアクセスできないようなものにしたいのだろう。"
  },
  {
    "start": 205252,
    "end": 208666,
    "text": "この値が露呈することは絶対に避けたい。"
  },
  {
    "start": 208778,
    "end": 212602,
    "text": "JWTを暗号化するのはこれだ。"
  },
  {
    "start": 212666,
    "end": 215558,
    "text": "ブラウザで見てみよう。"
  },
  {
    "start": 215594,
    "end": 219282,
    "text": "devtoolsを開き、ページをリロードしてみる。"
  },
  {
    "start": 219416,
    "end": 222654,
    "text": "今はセッションがない。"
  },
  {
    "start": 222782,
    "end": 228886,
    "text": "lee@rosel.com ログインを押して、ここにセッションキーを設定します。"
  },
  {
    "start": 228988,
    "end": 235442,
    "text": "この暗号化されたJWTの値を持って、JWT IOに飛び移ろう。"
  },
  {
    "start": 235506,
    "end": 240406,
    "text": "これをここに貼り付けると、右のようにアルゴリズムが決定される。"
  },
  {
    "start": 240508,
    "end": 242166,
    "text": "データのペイロードを示す。"
  },
  {
    "start": 242268,
    "end": 246250,
    "text": "そして、署名を検証したいなら、秘密のビットを入れる必要がある、と言う。"
  },
  {
    "start": 246320,
    "end": 250250,
    "text": "これは、そのデータを視覚化できる素晴らしい方法だ。"
  },
  {
    "start": 250320,
    "end": 251286,
    "text": "ちょっとしたヒントだ。"
  },
  {
    "start": 251318,
    "end": 253790,
    "text": "セッションはここにクッキーとして保存されます。"
  },
  {
    "start": 253860,
    "end": 256138,
    "text": "私たちは10秒で期限切れになると言った。"
  },
  {
    "start": 256234,
    "end": 259082,
    "text": "ページを再読み込みすると、有効期限が切れている。"
  },
  {
    "start": 259146,
    "end": 261440,
    "text": "そのクッキーはもうそこにはない。"
  },
  {
    "start": 262130,
    "end": 274754,
    "text": "leapbracell.comに再ログインしてリロードすると、expiresの値が毎回更新されていることに気づくだろう。"
  },
  {
    "start": 274872,
    "end": 280402,
    "text": "保存しているJWTの復号化された値にも反映されていることがわかるだろう。"
  },
  {
    "start": 280466,
    "end": 282502,
    "text": "なぜこのようなことが起きているのか？"
  },
  {
    "start": 282556,
    "end": 299478,
    "text": "アプリケーションのコードに戻ってミドルウェアのファイルを見てみると、このファイルはアプリケーションのすべてのリクエストの前で実行され、この関数を呼び出し、ウェブリクエストを受け取り、そのウェブリクエストで更新セッションを呼び出します。"
  },
  {
    "start": 299574,
    "end": 308202,
    "text": "認証ファイルに戻って、独自の認証ライブラリを作り、セッションを更新してみよう。"
  },
  {
    "start": 308266,
    "end": 309914,
    "text": "そのリクエストに応える。"
  },
  {
    "start": 310042,
    "end": 314566,
    "text": "次のリクエストはウェブ・リクエストの拡張に過ぎず、そのリクエストを取り込む。"
  },
  {
    "start": 314618,
    "end": 320354,
    "text": "もしセッション・クッキーが提供されていなければ、そのまま戻ることができる。"
  },
  {
    "start": 320472,
    "end": 324206,
    "text": "そうでなければ、そのセッションが失効しないようにリフレッシュする。"
  },
  {
    "start": 324318,
    "end": 330006,
    "text": "セッションから値を復号化し、新しい有効期限を設定する。"
  },
  {
    "start": 330188,
    "end": 335334,
    "text": "次のレスポンスには、このレスポンスからウェブ・レスポンスを生成することを伝える。"
  },
  {
    "start": 335452,
    "end": 339058,
    "text": "そして、そのレスポンスに対して新しいクッキーを設定します。"
  },
  {
    "start": 339234,
    "end": 343178,
    "text": "さて、ここで読み飛ばしたのは復号化機能だ。"
  },
  {
    "start": 343264,
    "end": 347926,
    "text": "では、この入力で復号化する方法を見てみよう。"
  },
  {
    "start": 348038,
    "end": 355710,
    "text": "ホセも同様に、入力に基づき、キーに基づき、暗号化したアルゴリズムに基づいて検証する。"
  },
  {
    "start": 355860,
    "end": 360266,
    "text": "もしこれが正当なものであれば、解読してペイロードを返す。"
  },
  {
    "start": 360378,
    "end": 367614,
    "text": "ここでは、復号化から値を取り戻し、クッキーを更新することができました。"
  },
  {
    "start": 367742,
    "end": 371918,
    "text": "認証の実装を完成させるために、リクエストの情報を読み取る必要がある。"
  },
  {
    "start": 372014,
    "end": 375986,
    "text": "このセッション取得関数については、最初にこのページを見たときに説明した。"
  },
  {
    "start": 376088,
    "end": 377906,
    "text": "これはいったい何をしていたのか？"
  },
  {
    "start": 378008,
    "end": 380562,
    "text": "まあ、実際はクッキーを読むだけなんだけどね。"
  },
  {
    "start": 380626,
    "end": 385010,
    "text": "JWTをセッションのクッキーとして設定する方法をすでに示した。"
  },
  {
    "start": 385090,
    "end": 391458,
    "text": "この関数がやっていることは、単にクッキーから読み込んでセッション値を探し、その値を復号化するだけです。"
  },
  {
    "start": 391564,
    "end": 399146,
    "text": "ブラウザに戻ると、do@bracell.com、データベースか何かを見ることができる。"
  },
  {
    "start": 399248,
    "end": 400234,
    "text": "そういうことだ。"
  },
  {
    "start": 400272,
    "end": 404298,
    "text": "セッション関数は、セッションに関する情報を取り戻すことができる。"
  },
  {
    "start": 404394,
    "end": 408190,
    "text": "では、サーバーアクションでログアウトをクリックすると、何が起こるのだろう？"
  },
  {
    "start": 408260,
    "end": 417694,
    "text": "右側にある私のコンソールを見ると、クッキーが削除されているのがわかる。"
  },
  {
    "start": 417822,
    "end": 426818,
    "text": "ログアウト関数をクリックすると、nextjsのクッキー関数が呼び出され、本質的にセッションが破壊されます。"
  },
  {
    "start": 426914,
    "end": 436390,
    "text": "このファイルだけで、次のjsアプリケーションでセッション・ベースの認証を行うことができます。"
  },
  {
    "start": 436540,
    "end": 442890,
    "text": "あなたはページ内で値を読み、ミドルウェアを使ってその情報を更新している。"
  },
  {
    "start": 443040,
    "end": 446074,
    "text": "もちろん、これよりもっと細かいこともできる。"
  },
  {
    "start": 446112,
    "end": 452346,
    "text": "本当に基本的な例からステップを踏んで、そこから複雑さを加えていけばいいと思う。"
  },
  {
    "start": 452448,
    "end": 455934,
    "text": "では、このモデルの抽象化がどのようなものかを示したい。"
  },
  {
    "start": 455972,
    "end": 464602,
    "text": "私が示した基本モデルは、next Authまたはauth JSの非常に軽いバージョンである。"
  },
  {
    "start": 464746,
    "end": 470386,
    "text": "同じセットアップを使い、次のAuthを使う別の例を説明したい。"
  },
  {
    "start": 470488,
    "end": 475362,
    "text": "左側でこの例を開き、右側でブラウザーを起動している。"
  },
  {
    "start": 475496,
    "end": 480454,
    "text": "同じようなものがたくさん出てくるだろうが、抽象度が1つ高いだけだ。"
  },
  {
    "start": 480572,
    "end": 482962,
    "text": "私はこの認証ファイルを持っている。"
  },
  {
    "start": 483106,
    "end": 490938,
    "text": "サインイン、サインアウトの認証メソッドと、アプリケーションのルート・ハンドラを設定する。"
  },
  {
    "start": 491104,
    "end": 494598,
    "text": "を実行すると、Oauth に GitHub プロバイダを使用していると表示されます。"
  },
  {
    "start": 494694,
    "end": 499642,
    "text": "これらのルートハンドラはAPI Authの下にある。"
  },
  {
    "start": 499696,
    "end": 505886,
    "text": "このキャッチオールルートは、私たちやライブラリが使うルートハンドラの束を足場にしてくれる。"
  },
  {
    "start": 505988,
    "end": 518750,
    "text": "Auth の中央で git と post を取得し、そのルートを scaffold して Auth に戻せば、あとは何もしなくても GitHub と連携できるようになります。"
  },
  {
    "start": 518830,
    "end": 523998,
    "text": "これもまた抽象化されたレイヤーであるため、さまざまな認証プロバイダーと連携することができる。"
  },
  {
    "start": 524014,
    "end": 528598,
    "text": "GitHubでもGoogle discordでも、どんなプロバイダーでもいい。"
  },
  {
    "start": 528684,
    "end": 531446,
    "text": "インデックス・ルートとページを見てみよう。"
  },
  {
    "start": 531548,
    "end": 538258,
    "text": "このページではawait Authを呼び出しているが、これは基本的にセッションの取得と似ている。"
  },
  {
    "start": 538354,
    "end": 541238,
    "text": "これはAuthファイルからエクスポートされた値である。"
  },
  {
    "start": 541334,
    "end": 546650,
    "text": "セッションからユーザーとEメールを取得し、この情報を以下にレンダリングする。"
  },
  {
    "start": 546720,
    "end": 552346,
    "text": "GitHubでサインインをクリックすると、すでにGitHubを認証するように設定されています。"
  },
  {
    "start": 552378,
    "end": 558126,
    "text": "モーダルがスキップされた。"
  },
  {
    "start": 558308,
    "end": 562926,
    "text": "他のコンポーネントを見ると、とてもよく似ている。"
  },
  {
    "start": 563028,
    "end": 568418,
    "text": "サインイン機能やサインアウト機能と呼ばれるサーバーアクションを持つフォームだ。"
  },
  {
    "start": 568504,
    "end": 577266,
    "text": "サインインは文字列を受け取ります。この例ではGitHubを使用しているプロバイダーです。サインアウトは基本的にセッションを削除するだけです。"
  },
  {
    "start": 577368,
    "end": 585222,
    "text": "例えば、クッキーを開くと、3001 localhostが別のポートで動いている。"
  },
  {
    "start": 585356,
    "end": 588194,
    "text": "これをもう少し大きくすると、3つのクッキーが作られたことがわかります。"
  },
  {
    "start": 588242,
    "end": 596266,
    "text": "暗号化されたJWTであるセッショントークンがあり、コールバックURLがあり、さらにセキュリティを高めるためにCSRFトークンがある。"
  },
  {
    "start": 596368,
    "end": 598394,
    "text": "これはすべて私たちのために抽象化されている。"
  },
  {
    "start": 598432,
    "end": 599818,
    "text": "ここでは何もする必要はない。"
  },
  {
    "start": 599904,
    "end": 605086,
    "text": "前の例と同じように、ページをリロードしたときにセッションが更新されるように、ミドルウェアが用意されている。"
  },
  {
    "start": 605268,
    "end": 610542,
    "text": "このオプションには、どのルートで実行させるかの正規表現も含まれている。"
  },
  {
    "start": 610596,
    "end": 618530,
    "text": "静的ファイルや次の画像、ファビコン上でミドルウェアを実行するつもりはないので、それも含めた方がいいだろう。"
  },
  {
    "start": 618600,
    "end": 623262,
    "text": "あなたがこのビデオを見ている時間によっては、これらの変更はすでに安定しているかもしれない。"
  },
  {
    "start": 623326,
    "end": 630674,
    "text": "僕は次の認証パッケージの最新ベータ版を使っているんだけど、これはアプリ・ルーター用に全面的にリファクタリングされているんだ。"
  },
  {
    "start": 630792,
    "end": 634402,
    "text": "もしこのバージョンに着手したいのであれば、このコードは下にある。"
  },
  {
    "start": 634466,
    "end": 636614,
    "text": "ご覧になる頃にはもう安定しているかもしれませんが。"
  },
  {
    "start": 636652,
    "end": 638630,
    "text": "そのことも言っておきたかったんだ。"
  },
  {
    "start": 638700,
    "end": 641254,
    "text": "認証の話題は超深遠だ。"
  },
  {
    "start": 641302,
    "end": 644406,
    "text": "認証だけでなく認可もある。"
  },
  {
    "start": 644518,
    "end": 646646,
    "text": "これについては、新しいドキュメントでいくつか取り上げている。"
  },
  {
    "start": 646678,
    "end": 652490,
    "text": "認可とサーバーアクションの保護、ルートハンドラの保護について少し話す。"
  },
  {
    "start": 653410,
    "end": 660334,
    "text": "このビデオではクッキー・ベースのセッションについて話しましたが、データベース・セッションもあり、ここには本当にたくさんのものがあります。"
  },
  {
    "start": 660372,
    "end": 671502,
    "text": "また、clerkやluciaauth、superbaseなど、他の一般的な認証ライブラリを使った例もたくさんあるので、チェックしてみてほしい。"
  },
  {
    "start": 671636,
    "end": 679302,
    "text": "もし私たちが認証についてもっと話すのを見たいなら、nextjsとauth nまたはAuth Cで何を見たいか、ぜひコメントで教えてください。"
  },
  {
    "start": 679356,
    "end": 688342,
    "text": "ここでもっと深い文脈に入ることもできますが、非常に基本的なCookieベースのセッションの例についての良い紹介になったことを願っています。"
  },
  {
    "start": 688476,
    "end": 689926,
    "text": "感想を聞かせてくれ。"
  },
  {
    "start": 690028,
    "end": 690210,
    "text": "平和だ。"
  }
]