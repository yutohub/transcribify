[
  {
    "start": 410,
    "end": 4874,
    "text": "さて、このビデオではラグ・フュージョンを見てみたい。"
  },
  {
    "start": 5002,
    "end": 7594,
    "text": "これは本当に面白いテクニックだと思う。"
  },
  {
    "start": 7722,
    "end": 10014,
    "text": "私の知る限り、それに関する学術論文はない。"
  },
  {
    "start": 10052,
    "end": 14826,
    "text": "エイドリアン・ラダースクールという、このブログを作ったと思われる人物のブログ記事がある。"
  },
  {
    "start": 14858,
    "end": 17982,
    "text": "このテクニックはいろいろな意味で本当に面白いと思う。"
  },
  {
    "start": 18036,
    "end": 20714,
    "text": "ラグを改善するための重要な方法がいくつかある。"
  },
  {
    "start": 20762,
    "end": 32182,
    "text": "先日行ったボロ雑巾ツアーみたいな講演でも話したけど、ここでは基本的に、クエリを書き換えたり、検索方法を変えたり、データをよりよく保存したり、そんなことができるんだ。"
  },
  {
    "start": 32236,
    "end": 39398,
    "text": "順位をつけたり、フィルターにかけたり、LLMを変更したり、ここで使っているプロンプトを変更することもできる。"
  },
  {
    "start": 39484,
    "end": 47818,
    "text": "ランク・フュージョンが行うことの多くは、クエリを書き換えて、より良い方法でフィルタリングし、ランク付けすることだ。"
  },
  {
    "start": 47904,
    "end": 51130,
    "text": "では、実際にどのようにしているのか見てみよう。"
  },
  {
    "start": 51200,
    "end": 52682,
    "text": "これはブログの記事から。"
  },
  {
    "start": 52736,
    "end": 54334,
    "text": "彼がそのことについて話すのが好きなんだ。"
  },
  {
    "start": 54372,
    "end": 61246,
    "text": "Ragfusionは、ユーザーが明示的に尋ねることと、彼らが意図することのギャップを埋めることを目指している。"
  },
  {
    "start": 61348,
    "end": 71230,
    "text": "これはラグでよく見られる問題のひとつで、あるトピックについて本当にいろいろなことを知りたいのに、そのトピックをただ入力してしまうというものだ。"
  },
  {
    "start": 71310,
    "end": 76194,
    "text": "それは、検索エンジンがそのようなさまざまな異なるものに対して持っているのと同じ問題だ。"
  },
  {
    "start": 76312,
    "end": 79766,
    "text": "このアイデアは、いくつかの重要なことを実行するということだ。"
  },
  {
    "start": 79868,
    "end": 84034,
    "text": "まず、クエリーの複製に一工夫する。"
  },
  {
    "start": 84082,
    "end": 94438,
    "text": "基本的には、ユーザーからの1つのクエリを複数のクエリに書き換え、それぞれのクエリをベクトル検索のルックアップのために送信する。"
  },
  {
    "start": 94534,
    "end": 108030,
    "text": "このアイデアは、ユーザーがクエリを入力すると、これと似たようなクエリが複数生成され、それぞれのクエリが独自のベクトル検索を行い、さまざまなものを返すというものだ。"
  },
  {
    "start": 108100,
    "end": 116190,
    "text": "この場合、1つのクエリが5つの異なるクエリに変換され、それぞれが異なる結果を返すことがわかります。"
  },
  {
    "start": 116350,
    "end": 120574,
    "text": "その後、これらの結果は相互ランク融合を使ってランク付けされる。"
  },
  {
    "start": 120622,
    "end": 122994,
    "text": "ここで、ある種の融合の部分が登場する。"
  },
  {
    "start": 123112,
    "end": 129734,
    "text": "だから、そのアルゴリズムを使って、基本的に複数の出力を再ランク付けする。"
  },
  {
    "start": 129772,
    "end": 133094,
    "text": "おそらく別のビデオで、さまざまなタイプの再ランキングを見ることができるだろう。"
  },
  {
    "start": 133212,
    "end": 139974,
    "text": "つまり、ベクター検索データベースから様々なクエリの中から最適なものをここに取り込むということだ。"
  },
  {
    "start": 140092,
    "end": 154746,
    "text": "そして基本的には、これらの再ランク付けされた出力を、あたかも一般的な文脈であるかのように扱い、生成出力に渡す。"
  },
  {
    "start": 154848,
    "end": 167874,
    "text": "ブログ記事で紹介されている素敵な例のひとつで、あなた自身の特定のボロ布のためにこのアイデアで本当に遊べると思うことのひとつは、ユーザーの入力を受けて、それをさまざまなバージョンに書き換えることができるということだ。"
  },
  {
    "start": 167912,
    "end": 184614,
    "text": "この場合、誰かが何か質問してきたら、それを直接受け止めることもできるが、その場合は、経済的な観点からの質問と公衆衛生的な観点からの質問とに言い換えることができる。"
  },
  {
    "start": 184732,
    "end": 191722,
    "text": "ここで実際に検索してみると、同じトピックを違う角度から見ているようなものだ。"
  },
  {
    "start": 191776,
    "end": 207438,
    "text": "これは、ある種のボロ雑巾に対処する上で本当に重要なことだと思う。人々はあまり具体的な質問をせず、おそらく漠然とした質問をしているが、返ってくる回答には多様なデータを求めている。"
  },
  {
    "start": 207524,
    "end": 212494,
    "text": "ではコードに飛び込んで、langchainでこれがどのようにできるかを見てみよう。"
  },
  {
    "start": 212612,
    "end": 219170,
    "text": "さて、このノートではラグ・フュージョンを再現し、ラングチェーンを使って遊んでみることにしよう。"
  },
  {
    "start": 219240,
    "end": 222050,
    "text": "このために標準的な入力をたくさん用意してある。"
  },
  {
    "start": 222120,
    "end": 225838,
    "text": "実際にはOpenAIを使うつもりはないし、ticktokenを使うつもりもない。"
  },
  {
    "start": 225934,
    "end": 229062,
    "text": "実はこれにはパーム2モデルを使うつもりなんだ。"
  },
  {
    "start": 229116,
    "end": 233670,
    "text": "また、パーム2モデルが実際にどのように機能するかを見るための例としても使える。"
  },
  {
    "start": 233740,
    "end": 240358,
    "text": "シンガポールの観光スポットに関する記事をスクラップして、データセットを作りました。"
  },
  {
    "start": 240444,
    "end": 245354,
    "text": "クロマDBも作成済みでここに保存してある。"
  },
  {
    "start": 245472,
    "end": 251030,
    "text": "あなたの特定のタスクに使えるように、前処理を行う方法を説明します。"
  },
  {
    "start": 251110,
    "end": 257774,
    "text": "実際にChroma DBをダウンロードして、このcolabに入れ、このように使う。"
  },
  {
    "start": 257892,
    "end": 261786,
    "text": "ここでは新しいGoogle Colab secretsを使っている。"
  },
  {
    "start": 261898,
    "end": 279058,
    "text": "最近のColabのサイドにあるキーを見ると、基本的に環境変数をあらかじめインストールしておいて、このように持ってくることができる。"
  },
  {
    "start": 279144,
    "end": 285250,
    "text": "このような場合、Palm 2 makersuiteのキーを作成する必要があります。"
  },
  {
    "start": 285330,
    "end": 288646,
    "text": "Makersuiteのサイトでは、APIキーを無料で取得することができます。"
  },
  {
    "start": 288748,
    "end": 295434,
    "text": "現在、グーグルはパーム2モデルを誰でも無料で使えるようにしている。"
  },
  {
    "start": 295552,
    "end": 300074,
    "text": "オーケー、では、ここに僕の輸入したものをいくつか持ってきた。"
  },
  {
    "start": 300112,
    "end": 308734,
    "text": "Google Palmのチャットモデルを使いながら進めていくが、基本的には、インジェスト・プロセスを実行している場合のみ取り込むことにする。"
  },
  {
    "start": 308852,
    "end": 313294,
    "text": "さっきも言ったように、後でChromodBを直接ロードすることもできる。"
  },
  {
    "start": 313332,
    "end": 325934,
    "text": "自分で前処理をする場合は、基本的にテキストファイルのフォルダを取り込み、それを実行して読み込み、それらのドキュメントをテキストチャンクに分割するだけだ。"
  },
  {
    "start": 325982,
    "end": 329042,
    "text": "ここのチャンクの大きさとか、あまりチェックしたことがないんだ。"
  },
  {
    "start": 329096,
    "end": 333686,
    "text": "もし、私が実際にこれをプロダクションで使うつもりなら、チャンクのサイズを正しくすることにもっと力を入れるだろう。"
  },
  {
    "start": 333788,
    "end": 336374,
    "text": "基本的なことはできている。"
  },
  {
    "start": 336492,
    "end": 340118,
    "text": "ここでは、僕のお気に入りのエンベッディングのひとつ、BGEエンベッディングを使っている。"
  },
  {
    "start": 340204,
    "end": 344218,
    "text": "これは小さな埋め込みだが、実は本当に素晴らしい埋め込みを返してくれる。"
  },
  {
    "start": 344384,
    "end": 349002,
    "text": "実際にChromaデータベースを作成するのであれば、この部分のコメントを解除して、この部分をまとめてください。"
  },
  {
    "start": 349136,
    "end": 356830,
    "text": "そうでなければ、Chromaのデータベースを読み込むだけでいい。このデータベースには、テキストとテキストに対する埋め込みやすべての計算がすでに用意されている。"
  },
  {
    "start": 356900,
    "end": 363342,
    "text": "エンベッディング関数を渡すだけで、僕が作ったときと同じVGEエンベッディングが使えるようになるんだ。"
  },
  {
    "start": 363396,
    "end": 367346,
    "text": "もしあなたがChromaのデータベースを保存していたのなら、そのためのコードを残しておいたよ。"
  },
  {
    "start": 367448,
    "end": 376226,
    "text": "データベースを使った簡単なクエリーを実行すると、ここでやりたいことに関連した情報が返ってくるのがわかるだろう。"
  },
  {
    "start": 376328,
    "end": 378590,
    "text": "次はレトリバーをセットアップする。"
  },
  {
    "start": 378750,
    "end": 383874,
    "text": "MMRを加えるなら、このようにレトリーバーをセットアップするのが最もシンプルな方法だ。"
  },
  {
    "start": 383922,
    "end": 388070,
    "text": "将来的には、MMRについて手短にまとめたビデオを作るつもりだ。"
  },
  {
    "start": 388220,
    "end": 395754,
    "text": "この結果を改善するために、このようなことを追加することもできるが、ここではシンプルなチャットチェーンのようなものをすぐに作ることができる。"
  },
  {
    "start": 395872,
    "end": 399370,
    "text": "ここでは、チャットのGoogle Palmモデルを使っていることがわかる。"
  },
  {
    "start": 399520,
    "end": 402358,
    "text": "チャットプロンプトのテンプレートを持ち込みます。"
  },
  {
    "start": 402534,
    "end": 409322,
    "text": "基本的には、ラングチェーン式言語を使うためにいろいろなものを持ち込んでいるんだけど、ここではプロンプトを設定している。"
  },
  {
    "start": 409386,
    "end": 413322,
    "text": "ここでは非常にシンプルなプロンプトを表示し、チェーンを作っている。"
  },
  {
    "start": 413386,
    "end": 418002,
    "text": "覚えておいてほしいのは、基本的に連鎖を作るためにこれらを通過させているだけだということだ。"
  },
  {
    "start": 418136,
    "end": 423678,
    "text": "リトリーバーがコンテキストを取得し、プロンプトに質問を渡す。"
  },
  {
    "start": 423774,
    "end": 428662,
    "text": "そして基本的にそれをモデルに渡し、文字列出力パッサーがこれをまとめる。"
  },
  {
    "start": 428796,
    "end": 439014,
    "text": "確かに、ユニバーサル・スタジオ・シンガポールについて教えてくださいというようなことをすると、sが抜けていたり、スペルが間違っていたりしても、かなりうまく理解できているのがわかる。"
  },
  {
    "start": 439132,
    "end": 443462,
    "text": "現段階では、かなりの手応えを感じている。"
  },
  {
    "start": 443606,
    "end": 461662,
    "text": "この場合、おそらくランクフュージョンは大きな助けにはならないだろうし、そもそも私の質問がかなり広範なものだったからかもしれないが、もしユニバーサル・スタジオ・シンガポールなどと入力すれば、ランクフュージョンが大いに助けになることは想像できるだろう。"
  },
  {
    "start": 461796,
    "end": 464722,
    "text": "ランクフュージョンでは、同じものをたくさん持ち込んでいる。"
  },
  {
    "start": 464856,
    "end": 468338,
    "text": "ここにチャットプロンプトのテンプレートがあります。"
  },
  {
    "start": 468504,
    "end": 477482,
    "text": "私たちは基本的に、システム・テンプレート、あるいはシステム・プロンプトを持っている。"
  },
  {
    "start": 477566,
    "end": 481526,
    "text": "次に、実際に渡すヒューマンプロンプトのテンプレートを用意した。"
  },
  {
    "start": 481628,
    "end": 490042,
    "text": "ここでこのクエリを渡しているのは、質問に関連する複数の検索クエリを生成するためであることに気づくだろう。"
  },
  {
    "start": 490176,
    "end": 495114,
    "text": "これから4つのクエリーを出力する。"
  },
  {
    "start": 495232,
    "end": 503166,
    "text": "これはラグ・フュージョンの最初の部分で、これから説明するように、同様のクエリを生成する必要がある。"
  },
  {
    "start": 503268,
    "end": 506014,
    "text": "このプロンプトで遊ぶことができるのは確かだ。"
  },
  {
    "start": 506132,
    "end": 513354,
    "text": "ある角度からのクエリと、別の角度からのクエリを用意するのもいいだろう。"
  },
  {
    "start": 513402,
    "end": 519266,
    "text": "もし、何かを持ちたいとか、他の方法からアプローチしたいとか、そういうことがあれば、このプロンプトを正しく理解することに翻弄されるだろう。"
  },
  {
    "start": 519368,
    "end": 523858,
    "text": "クエリ・チェーンを生成する。"
  },
  {
    "start": 523944,
    "end": 532306,
    "text": "このクエリチェーンは基本的にプロンプトを受け取り、それをLLMに渡しているだけです。"
  },
  {
    "start": 532418,
    "end": 536722,
    "text": "Googleからmakersuite用のキーを無料で入手できることをお忘れなく。"
  },
  {
    "start": 536786,
    "end": 543226,
    "text": "そして、基本的にはここで出力を渡すことになる。これらのクエリーを分割して、これらを渡すことができるようにする。"
  },
  {
    "start": 543328,
    "end": 548166,
    "text": "ユニバーサル・スタジオ・シンガポールだけという当初の問い合わせをパスすれば、ここで見ることができる。"
  },
  {
    "start": 548278,
    "end": 552010,
    "text": "まず第一に、基本的にこれをスルーして分割する。"
  },
  {
    "start": 552160,
    "end": 555018,
    "text": "その後はランキングに入る。"
  },
  {
    "start": 555194,
    "end": 558762,
    "text": "この場合、ランキングのための関数がここにある。"
  },
  {
    "start": 558826,
    "end": 563262,
    "text": "これは、さまざまな異なる方法でランキングを行うように変更できるものだ。"
  },
  {
    "start": 563396,
    "end": 571982,
    "text": "ということは、基本的にこのラグ・フュージョン・チェーンは、まず生成クエリー・チェーンを外すことになる。"
  },
  {
    "start": 572046,
    "end": 581302,
    "text": "その後、基本的にレトリーバーにマッピングされ、実行した各クエリーの結果が返される。"
  },
  {
    "start": 581436,
    "end": 586070,
    "text": "そして最後に、ここで相互ランク融合にかける。"
  },
  {
    "start": 586140,
    "end": 590374,
    "text": "ラングチェーン・デバッグをオンにすれば、ここで何が起こっているかを実際に見ることができる。"
  },
  {
    "start": 590492,
    "end": 591146,
    "text": "それはわかる。"
  },
  {
    "start": 591168,
    "end": 593302,
    "text": "さて、まずはこのクエリから始めよう。"
  },
  {
    "start": 593446,
    "end": 599578,
    "text": "プロンプトが表示され、複数の答えが返されます。"
  },
  {
    "start": 599664,
    "end": 603298,
    "text": "ラングスミスは、このような痕跡を得るために大いに役立つ。"
  },
  {
    "start": 603414,
    "end": 610346,
    "text": "とにかく、この出力を見てみると、ユニバーサル・スタジオ・シンガポールに関連する検索クエリが4つあることがわかる。"
  },
  {
    "start": 610458,
    "end": 613498,
    "text": "さて、ユニバーサル・スタジオ・シンガポールの乗り物は？"
  },
  {
    "start": 613594,
    "end": 615214,
    "text": "そこに行くにはいくらかかるのですか？"
  },
  {
    "start": 615252,
    "end": 619278,
    "text": "また、どの時期に訪れるのがベストなのでしょうか？"
  },
  {
    "start": 619374,
    "end": 621614,
    "text": "以上が4つのクエリーである。"
  },
  {
    "start": 621662,
    "end": 630662,
    "text": "時間に関するクエリ、価格に関するクエリ、入団に関するクエリ、そういったクエリを1つだけ欲しいと言って、これらのクエリを誘導することもできた。"
  },
  {
    "start": 630716,
    "end": 637174,
    "text": "テーマパークとか観光地とか、そういうことをやるだけだったらね。"
  },
  {
    "start": 637292,
    "end": 645114,
    "text": "私たちは今、基本的にこれらを通過することができ、通過して、これらのために見つけたさまざまなコンテキストを取り出すことができる。"
  },
  {
    "start": 645152,
    "end": 649798,
    "text": "そのうちのいくつかは、ユニバーサル・スタジオ・シンガポールに大きく関係していることがわかる。"
  },
  {
    "start": 649894,
    "end": 654442,
    "text": "そのうちのいくつかは、この件とは関係ないか、あるいは関係ないだろう。"
  },
  {
    "start": 654496,
    "end": 659582,
    "text": "検索は、基本的にそのすべてを調べて、それを持ち帰る。"
  },
  {
    "start": 659716,
    "end": 665278,
    "text": "しかし、次にやりたいことは、基本的にこれを最終チェーンに渡すことだ。"
  },
  {
    "start": 665374,
    "end": 675278,
    "text": "この時点で、取得したレスポンスがフィルタリングされ、最終的なチェーンに入る準備が整いました。"
  },
  {
    "start": 675374,
    "end": 676814,
    "text": "最後のチェーンを作ろう"
  },
  {
    "start": 676862,
    "end": 682402,
    "text": "私たちは、次のような文脈に基づいて質問に答えるという、先に述べたことをそのまま使うことができる。"
  },
  {
    "start": 682466,
    "end": 693914,
    "text": "ただし、ここでフィルターにかけたリターンを渡していることを除いては、基本的にここから得たスコアを使い、それをここのコンテキストに入力している。"
  },
  {
    "start": 693952,
    "end": 697546,
    "text": "そうすれば、元の質問もそこに入れることになる。"
  },
  {
    "start": 697648,
    "end": 715418,
    "text": "これを全体を通して、つまりラグ・フュージョン・チェーンとしてまとめると、基本的に、文脈を取得し、質問を取得するためのチェーンが、このプロンプトからモデル、そして文字列出力パサーへとつながっていきます。"
  },
  {
    "start": 715514,
    "end": 717202,
    "text": "今、私たちはそのすべてに目を通した。"
  },
  {
    "start": 717256,
    "end": 722146,
    "text": "さまざまなクエリが届いているのがわかるだろう。"
  },
  {
    "start": 722328,
    "end": 732982,
    "text": "そして、基本的に検索をフィルタリングし、いろいろなことを行って、最終的にここにある最終的な回答が戻ってくる。"
  },
  {
    "start": 733116,
    "end": 743850,
    "text": "これは、さまざまな検索からベストなものを見つけ、それを元のクエリと組み合わせるという、ある種の統合になる。"
  },
  {
    "start": 743920,
    "end": 746042,
    "text": "これは基本的にラグフュージョンがやっていることだ。"
  },
  {
    "start": 746096,
    "end": 760366,
    "text": "確かに、チェーン可能なラング・チェーン表現言語がまとめられているのを見るのは少し混乱するかもしれないが、これに慣れれば、実際にこれに代わるさまざまなものを書くことができる。"
  },
  {
    "start": 760468,
    "end": 765566,
    "text": "ユーザー・クエリの書き換えは、さまざまな方法で行うことができる。"
  },
  {
    "start": 765668,
    "end": 774560,
    "text": "もし興味があれば、ラングチェーン表現言語やラグについて、将来的に遊んでみるのもいいかもしれない。"
  },
  {
    "start": 774890,
    "end": 778582,
    "text": "とにかく、いつも通り、質問があれば下のコメントに書いてください。"
  },
  {
    "start": 778716,
    "end": 783782,
    "text": "このビデオが役に立ったと思ったら、「いいね！」と「購読」をクリックしてください。"
  },
  {
    "start": 783916,
    "end": 784500,
    "text": "とりあえず、さようなら。"
  }
]