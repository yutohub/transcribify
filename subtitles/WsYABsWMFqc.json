[
  {
    "start": 170,
    "end": 4522,
    "text": "今週、GPT4がリリースされ、多くの新しいチャンスが解き放たれた。"
  },
  {
    "start": 4586,
    "end": 14990,
    "text": "GPT 4はマルチモーダルであり、テキスト、画像、音声、ビデオなど複数のモダリティを処理し、出力を生成することができる。"
  },
  {
    "start": 15140,
    "end": 20960,
    "text": "自然言語処理のみに主眼を置いていた以前の言語モデルとは異なる。"
  },
  {
    "start": 21490,
    "end": 28646,
    "text": "サイドプロジェクト・ビジネスを構築しようとしているのかどうか、ネットで見つけたプロジェクトの例をいくつかスクリーンに載せておく。"
  },
  {
    "start": 28748,
    "end": 32930,
    "text": "既存のプロジェクトに統合するもよし、ただ探求するもよし。"
  },
  {
    "start": 33010,
    "end": 37010,
    "text": "このチュートリアルでは、チャットJPT APIを統合する方法を説明します。"
  },
  {
    "start": 37090,
    "end": 42458,
    "text": "また、Chat GPTと同様のチャットUIを構築し、デプロイします。"
  },
  {
    "start": 42624,
    "end": 49290,
    "text": "その前に、このAPIがこれほど強力で、誰もが話題にしている理由をちょっと覗いてみよう。"
  },
  {
    "start": 49360,
    "end": 56030,
    "text": "APIを動かすGPTは、利用可能な最も高度な自然言語処理ツールの1つである。"
  },
  {
    "start": 56180,
    "end": 68814,
    "text": "OpenAIによって開発され、175,000,000,000のパラメータからなるディープニューラルネットワークアーキテクチャを使用している。"
  },
  {
    "start": 68942,
    "end": 74740,
    "text": "それが強力な理由のひとつは、膨大なコーパスのデータで訓練されているからだ。"
  },
  {
    "start": 75110,
    "end": 84598,
    "text": "まず、OpenAIにサインアップし、彼らのページでアカウントを作成する必要がある。そうすれば、platformopenai.comに移動できる。"
  },
  {
    "start": 84684,
    "end": 90086,
    "text": "アカウント内でAPIキーを押し、新しいシークレットキーを作成することができます。"
  },
  {
    "start": 90188,
    "end": 91882,
    "text": "必ず安全な場所に保管してください。"
  },
  {
    "start": 91936,
    "end": 94662,
    "text": "チュートリアルで使うつもりだ。"
  },
  {
    "start": 94806,
    "end": 102806,
    "text": "どのようなAPIがあるのか見てみると、この回答生成に使えるAPIは2種類ある。"
  },
  {
    "start": 102918,
    "end": 116034,
    "text": "プロンプトを渡すと、それに基づいて回答が生成されます。"
  },
  {
    "start": 116072,
    "end": 117886,
    "text": "ここにモデルのリストがある。"
  },
  {
    "start": 117918,
    "end": 124770,
    "text": "このリストには、新しい、言ってみればモデルの概要がある。"
  },
  {
    "start": 125450,
    "end": 145846,
    "text": "GPTの4つはこの中に含まれているが、チャットやより自然な会話のためのより良いスーツケースであり、以前のメッセージを渡すことができ、それは文脈を読み取り、この作成チェック完了であろう文脈に基づいて将来のメッセージを生成します。"
  },
  {
    "start": 145878,
    "end": 150482,
    "text": "まだベータ版なので、意味のあるテスト段階だ。"
  },
  {
    "start": 150566,
    "end": 158800,
    "text": "ここにはGPT-3という2つのモデルしかない。"
  },
  {
    "start": 160130,
    "end": 163502,
    "text": "ああ、GpTの4人が追加されたんだ。"
  },
  {
    "start": 163636,
    "end": 167442,
    "text": "APIキーをテストするには、このcurlコマンドをここにコピーすればいい。"
  },
  {
    "start": 167496,
    "end": 172466,
    "text": "ターミナルで実行するか、今回はpostmanのファイルインポートを使っている。"
  },
  {
    "start": 172648,
    "end": 176002,
    "text": "そして、生のテキストを選択して貼り付ける。"
  },
  {
    "start": 176136,
    "end": 186040,
    "text": "これでpostmanコマンドが作成され、インポートされたら、必ずheadersに行ってAPIキーを貼り付けてください。"
  },
  {
    "start": 187050,
    "end": 205450,
    "text": "これが置き換わったら、リクエストを送信し、返ってくるデータには選択肢の配列と、メッセージのロール・アシスタントがあり、メッセージの内容には終了理由がある。"
  },
  {
    "start": 205530,
    "end": 209310,
    "text": "もっとパラメータを調べたいなら、彼らのドキュメントに書いてある。"
  },
  {
    "start": 209730,
    "end": 211358,
    "text": "リストはこちら"
  },
  {
    "start": 211524,
    "end": 215774,
    "text": "そして、これを送信すると、ストリームとしてデータが返される。"
  },
  {
    "start": 215822,
    "end": 222978,
    "text": "チャットGPTが文字を入力するときに、文字を足し算して、それらを組み合わせることができる。"
  },
  {
    "start": 223064,
    "end": 225758,
    "text": "このタイプはサーバー送信イベントAPIと呼ばれる。"
  },
  {
    "start": 225854,
    "end": 231474,
    "text": "このチュートリアルでは取り上げないが、もしそのバージョンも見たい場合はコメントで教えてほしい。"
  },
  {
    "start": 231522,
    "end": 234294,
    "text": "今回はレストフル・バージョンを使うだけだ。"
  },
  {
    "start": 234412,
    "end": 237894,
    "text": "では、次のアプリをMpxで作ってみよう。"
  },
  {
    "start": 238012,
    "end": 245478,
    "text": "ここではreactのnext jsフレームワークを使用しており、nameとその他のパラメーターを設定している。"
  },
  {
    "start": 245574,
    "end": 249834,
    "text": "その後、モジュールがダウンロードされ、アプリが作成される。"
  },
  {
    "start": 249952,
    "end": 255950,
    "text": "CDからアプリに入り、NPm rundevで実行しよう。"
  },
  {
    "start": 257570,
    "end": 260382,
    "text": "今、私はこれをvsコードで開いている。"
  },
  {
    "start": 260516,
    "end": 267698,
    "text": "メインファイルであるsource pages index jsにアクセスして、他のコードをすべて削除する。"
  },
  {
    "start": 267784,
    "end": 270450,
    "text": "簡単なフォームを作りましょう。"
  },
  {
    "start": 270520,
    "end": 276982,
    "text": "ヘッダーチャットjptフォーム入力 この入力のタイプはテキストになります。"
  },
  {
    "start": 277116,
    "end": 279766,
    "text": "ここでユーザーはテキストを入力する。"
  },
  {
    "start": 279868,
    "end": 283640,
    "text": "プレースホルダーを追加しましょう。"
  },
  {
    "start": 284970,
    "end": 295098,
    "text": "さらに、use stateとuse effectをインポートして、この2つのフックを使ってデータを保存したりフェッチしたりしよう。"
  },
  {
    "start": 295184,
    "end": 304270,
    "text": "まず、ユーザー入力の定数input valueを保存し、次にinput valueを設定する。"
  },
  {
    "start": 305970,
    "end": 307582,
    "text": "次はチャットログだ。"
  },
  {
    "start": 307636,
    "end": 313650,
    "text": "これは会話履歴のようなメッセージをすべて保持するもので、配列になる。"
  },
  {
    "start": 313990,
    "end": 315854,
    "text": "いよいよローディングだ。"
  },
  {
    "start": 315902,
    "end": 326238,
    "text": "これはAPIのレスポンスを待っているときで、ここで値を渡せばその値が反映される。"
  },
  {
    "start": 326264,
    "end": 334390,
    "text": "入力が更新されたら、onchange関数を追加し、イベント・ターゲットの値を受け取り、それを新しい状態に設定する。"
  },
  {
    "start": 334460,
    "end": 336102,
    "text": "入力値を設定する。"
  },
  {
    "start": 336236,
    "end": 338140,
    "text": "ああ、ここでタイプミスがあった。"
  },
  {
    "start": 338750,
    "end": 342538,
    "text": "入力後、メッセージを送信するボタンがある。"
  },
  {
    "start": 342704,
    "end": 345034,
    "text": "それでは、ハンドル・サブミット関数を作ってみよう。"
  },
  {
    "start": 345152,
    "end": 349980,
    "text": "これは、ユーザーがメッセージを入力して送信を押すとトリガーされる。"
  },
  {
    "start": 350430,
    "end": 353834,
    "text": "これはフォームであるため、私たちはイベントを受け取り、デフォルトを防ぐ必要がある。"
  },
  {
    "start": 353882,
    "end": 355838,
    "text": "そうしないとページをリロードしてしまう。"
  },
  {
    "start": 356004,
    "end": 362702,
    "text": "まず、ユーザーメッセージを取り込み、会話履歴に追加して、チャット自体に表示されるようにしましょう。"
  },
  {
    "start": 362836,
    "end": 372722,
    "text": "チャットログを設定すると、以前のチャットログを取得し、新しいメッセージのようにすべてのメッセージに追加します。"
  },
  {
    "start": 372856,
    "end": 378200,
    "text": "そして、ユーザー入力を消去して、新しいメッセージに対応できるようにする。"
  },
  {
    "start": 379290,
    "end": 383234,
    "text": "フォームの前のここに、すべてのメッセージを表示することができる。"
  },
  {
    "start": 383362,
    "end": 387042,
    "text": "チャットログマップメッセージインデックスをマッピングしてみよう。"
  },
  {
    "start": 387186,
    "end": 399418,
    "text": "ここではまずキーを設定し、次にこの中にメッセージの内容を入れ、submitハンドルのsubmit関数にフォームを渡す必要がある。"
  },
  {
    "start": 399504,
    "end": 402640,
    "text": "入力すると、メッセージが表示される。"
  },
  {
    "start": 403890,
    "end": 406506,
    "text": "では、新しいenvファイルを作ってみよう。"
  },
  {
    "start": 406538,
    "end": 408314,
    "text": "これは環境変数を保存するためである。"
  },
  {
    "start": 408362,
    "end": 409790,
    "text": "これでAPIキーが手に入った。"
  },
  {
    "start": 409860,
    "end": 417074,
    "text": "nextパブリック・オープンで始まっていることを確認してください。そうしないと、クライアント・サイドがそれを拾って、あなたのキーをここに貼り付けることができないからです。"
  },
  {
    "start": 417192,
    "end": 424130,
    "text": "環境変数を追加するたびに環境変数をピックアップする必要があるためだ。"
  },
  {
    "start": 424200,
    "end": 431042,
    "text": "アプリの実行を止めて、ターミナルでtailwindのモジュールを追加し始める。"
  },
  {
    "start": 431186,
    "end": 435570,
    "text": "tailwind CSS post CSS autoprofixerのインストールが必要です。"
  },
  {
    "start": 435650,
    "end": 438354,
    "text": "次にmpx tailwind initコマンドを実行する。"
  },
  {
    "start": 438402,
    "end": 442666,
    "text": "これにより、Tailwind config jsのcontent内にこれら2つのファイルが作成されます。"
  },
  {
    "start": 442768,
    "end": 447578,
    "text": "このパスを渡すと、どのファイルを見る必要があるかがわかる。"
  },
  {
    "start": 447664,
    "end": 448602,
    "text": "これを保存しよう。"
  },
  {
    "start": 448656,
    "end": 452322,
    "text": "追い風の最後のステップは、グローバルCSSにある。"
  },
  {
    "start": 452406,
    "end": 456270,
    "text": "他のスタイルをすべて削除し、それらのモジュールをインポートする。"
  },
  {
    "start": 456610,
    "end": 458314,
    "text": "よし、追い風はここまでだ。"
  },
  {
    "start": 458362,
    "end": 462666,
    "text": "APIを呼び出すために、もうひとつパッケージを追加しよう。"
  },
  {
    "start": 462778,
    "end": 463994,
    "text": "これがアクシオスだ。"
  },
  {
    "start": 464042,
    "end": 468190,
    "text": "APIからデータをフェッチするという点では、かなりポピュラーだ。"
  },
  {
    "start": 468270,
    "end": 473122,
    "text": "NPMでaxiosをインストールし、一番上にインポートする。"
  },
  {
    "start": 473176,
    "end": 476390,
    "text": "アクシオスから名前を取っただけだ。"
  },
  {
    "start": 477050,
    "end": 482482,
    "text": "OpenAIからデータを取得する関数を作ってみよう。"
  },
  {
    "start": 482546,
    "end": 486600,
    "text": "定数 send message equals で、これはメッセージを取り込む。"
  },
  {
    "start": 486970,
    "end": 489154,
    "text": "では、ライティングの準備をしよう。"
  },
  {
    "start": 489282,
    "end": 493914,
    "text": "まず、呼び出し先のエンドポイントのURLを貼り付ける。"
  },
  {
    "start": 494032,
    "end": 496298,
    "text": "ここに貼り付けておこう。"
  },
  {
    "start": 496384,
    "end": 499254,
    "text": "URLの後に、いくつかのヘッダーを定義することができる。"
  },
  {
    "start": 499302,
    "end": 501998,
    "text": "新しいオブジェクト・コンテンツ・タイプを作成する。"
  },
  {
    "start": 502084,
    "end": 517298,
    "text": "アプリケーションJSONに設定し、認証（bearer）とAPIキーを渡す。"
  },
  {
    "start": 517464,
    "end": 520622,
    "text": "これが今保存したキーの名前だ。"
  },
  {
    "start": 520686,
    "end": 524562,
    "text": "次のパブリックOpenAIのアンダースコア・キー。"
  },
  {
    "start": 524696,
    "end": 530690,
    "text": "そしてデータには、OpenAIが必要とするモデル名を渡します。"
  },
  {
    "start": 530770,
    "end": 535826,
    "text": "ドキュメントのリストモデルを見てみよう。"
  },
  {
    "start": 536018,
    "end": 542234,
    "text": "実際には、他のAPIのURLを貼り付けたので、代わりにチャットの完了になるはずです。"
  },
  {
    "start": 542432,
    "end": 545978,
    "text": "モデルを選ぼう"
  },
  {
    "start": 546064,
    "end": 547450,
    "text": "モデルのエンドポイント。"
  },
  {
    "start": 549310,
    "end": 555998,
    "text": "チャットの完成度については、GPT4がオプションの1つに挙げられているので、それを取ることができる。"
  },
  {
    "start": 556084,
    "end": 558382,
    "text": "それをここに入れよう。"
  },
  {
    "start": 558436,
    "end": 560954,
    "text": "その後、メッセージも渡す必要がある。"
  },
  {
    "start": 561002,
    "end": 562314,
    "text": "これは配列だ。"
  },
  {
    "start": 562442,
    "end": 567714,
    "text": "ロール・ユーザーを指定し、オブジェクトを渡す。"
  },
  {
    "start": 567832,
    "end": 571090,
    "text": "また、ユーザーが送信したメッセージも渡す。"
  },
  {
    "start": 571160,
    "end": 573460,
    "text": "の内容をメッセージに設定する。"
  },
  {
    "start": 574550,
    "end": 581080,
    "text": "ここでは、APIコールを開始する前にease loadingをtrueに設定することができる。"
  },
  {
    "start": 581930,
    "end": 589770,
    "text": "最後にaxiosを投稿することができます、投稿リクエストを作成し、最初にURLを渡し、次にデータが来る。"
  },
  {
    "start": 589920,
    "end": 594886,
    "text": "最後にヘッダーがあり、次にレスポンスがある。"
  },
  {
    "start": 595078,
    "end": 603280,
    "text": "まず、コンソール・ログに記録して、それがどのように見えるかを見てみよう。"
  },
  {
    "start": 603970,
    "end": 613040,
    "text": "括弧を直して、これで終わりにしよう。"
  },
  {
    "start": 613410,
    "end": 621538,
    "text": "チャットログを設定し、データを取得したら、それを会話履歴に渡して保存します。"
  },
  {
    "start": 621624,
    "end": 629734,
    "text": "これは、チャットログの古い以前の状態を取得し、それを追加する入力で行った方法と同じプロセスになります。"
  },
  {
    "start": 629772,
    "end": 635746,
    "text": "この場合、タイプは \"buy \"となり、メッセージはレスポンス・データの選択肢となる。"
  },
  {
    "start": 635858,
    "end": 640426,
    "text": "選択肢は配列なので、まず一つを選び、次にそのメッセージの内容を選ぶ。"
  },
  {
    "start": 640608,
    "end": 649226,
    "text": "最後に、データからすでに結果を得ているため、ローディングをfalseに設定し、ステートを更新した。"
  },
  {
    "start": 649408,
    "end": 652426,
    "text": "そうだ、偽にしよう。"
  },
  {
    "start": 652458,
    "end": 661274,
    "text": "エラーがあればキャッチして、コンソールにエラーを記録し、ローディングの状態を更新することができる。"
  },
  {
    "start": 661322,
    "end": 674406,
    "text": "これをfalseに設定すれば、これを保存し、submitハンドルの中にsendメッセージを渡すことができる。"
  },
  {
    "start": 674438,
    "end": 678698,
    "text": "ユーザーが送信を押すたびにトリガーされなければならない。"
  },
  {
    "start": 678874,
    "end": 685054,
    "text": "もう一度NPMアプリケーションを実行し、devを実行し、新しい機能をテストすることができる。"
  },
  {
    "start": 685172,
    "end": 693466,
    "text": "コンソールを開いてデータがどのように戻ってくるか見てみますが、エラーが発生しています。"
  },
  {
    "start": 693498,
    "end": 694554,
    "text": "私たちは検証することができる。"
  },
  {
    "start": 694682,
    "end": 696750,
    "text": "ああ、このモデルは存在しないんだ。"
  },
  {
    "start": 696830,
    "end": 702098,
    "text": "オーケー、では行ってみよう。今のところ2つのオプションしかないと書いてある。"
  },
  {
    "start": 702184,
    "end": 710198,
    "text": "2つ目のエンドポイントを貼り付けよう。"
  },
  {
    "start": 710364,
    "end": 713622,
    "text": "GPTも4つあるが、更新できる。"
  },
  {
    "start": 713756,
    "end": 716346,
    "text": "データの更新はとても簡単だ。"
  },
  {
    "start": 716448,
    "end": 720106,
    "text": "それを貼り付けて保存しよう。"
  },
  {
    "start": 720208,
    "end": 725098,
    "text": "もう1回実行して、どうなったか見てください。"
  },
  {
    "start": 725184,
    "end": 729758,
    "text": "ああ、また同じメッセージを伝えてしまった。"
  },
  {
    "start": 729924,
    "end": 733040,
    "text": "我々はデータを取り戻した。"
  },
  {
    "start": 735650,
    "end": 736254,
    "text": "素晴らしい。"
  },
  {
    "start": 736372,
    "end": 740270,
    "text": "これでスタイリングの一部を更新できる。"
  },
  {
    "start": 740710,
    "end": 744382,
    "text": "私は追い風のユーティリティークラスを使っている。"
  },
  {
    "start": 744446,
    "end": 752318,
    "text": "コンテナの設定、これはチャット・ボックスのように全体を中央に配置するためのもので、最大幅を設定する。"
  },
  {
    "start": 752414,
    "end": 755170,
    "text": "次に、列の方向だ。"
  },
  {
    "start": 755330,
    "end": 757238,
    "text": "高さはフルスクリーンになる。"
  },
  {
    "start": 757324,
    "end": 767402,
    "text": "その後、チャットGPTの背景色を設定し、ヘッダーのように、グラデーションのような色を作成して表示します。"
  },
  {
    "start": 767456,
    "end": 771078,
    "text": "グラデーションテキストを透明にすることができる。"
  },
  {
    "start": 771174,
    "end": 773594,
    "text": "こんな感じだ。"
  },
  {
    "start": 773792,
    "end": 778314,
    "text": "であれば、メッセージの履歴を新しいクラスにまとめることができる。"
  },
  {
    "start": 778512,
    "end": 779778,
    "text": "フレックスグローにする。"
  },
  {
    "start": 779814,
    "end": 784240,
    "text": "つまり、画面の残りのスペースを占有することになる。"
  },
  {
    "start": 784930,
    "end": 788234,
    "text": "最後に、メッセージの方向性だ。"
  },
  {
    "start": 788282,
    "end": 795540,
    "text": "もう一度、フレックス・カラムのようなものが必要で、その間にスペースがある。"
  },
  {
    "start": 795910,
    "end": 799154,
    "text": "メッセージ項目そのものに話を移そう。"
  },
  {
    "start": 799272,
    "end": 801582,
    "text": "をクラス名に使うなら、これはフレックスになる。"
  },
  {
    "start": 801646,
    "end": 806338,
    "text": "ここでは2つのケースがある。ユーザーメッセージの場合と、ボットメッセージの場合だ。"
  },
  {
    "start": 806424,
    "end": 808322,
    "text": "それは少し違ったスタイリングになるだろう。"
  },
  {
    "start": 808386,
    "end": 811046,
    "text": "私たちは、ユーザーを正当化したいのです。"
  },
  {
    "start": 811148,
    "end": 812854,
    "text": "それは右側だろう。"
  },
  {
    "start": 812892,
    "end": 815858,
    "text": "そうしたら、ボットをスタートさせる。"
  },
  {
    "start": 816034,
    "end": 825494,
    "text": "そして、ユーザーかボットかを視覚的に識別できるように、この中に異なる色を設定することもできます。"
  },
  {
    "start": 825622,
    "end": 828790,
    "text": "ユーザーのために、背景を紫の500にしよう。"
  },
  {
    "start": 828880,
    "end": 832718,
    "text": "ボットの場合は、背景をグレー800にしよう。"
  },
  {
    "start": 832804,
    "end": 837214,
    "text": "両者とも、LGは丸みを帯び、テキストは白でパディングされている。"
  },
  {
    "start": 837332,
    "end": 839134,
    "text": "で、最大値に設定する。"
  },
  {
    "start": 839172,
    "end": 847220,
    "text": "これでフォームのスタイリングは完了だ。"
  },
  {
    "start": 847290,
    "end": 850928,
    "text": "フレックスにはNULLを設定し、パディングを追加しよう。"
  },
  {
    "start": 851024,
    "end": 855792,
    "text": "divのクラス名、flexの丸め。"
  },
  {
    "start": 855936,
    "end": 867656,
    "text": "また、周囲にボーダーを少し追加し、背景色を変更して、ボックスやコンテナのような周囲の色とは異なるようにします。"
  },
  {
    "start": 867838,
    "end": 870092,
    "text": "インプットのために、フレックス・グロウをやろう。"
  },
  {
    "start": 870146,
    "end": 872332,
    "text": "残りのスペースも占有する。"
  },
  {
    "start": 872466,
    "end": 874940,
    "text": "背景の透明テキストは白になる。"
  },
  {
    "start": 875010,
    "end": 879464,
    "text": "次に、フォーカスのアウトラインとスタイリングを削除する。"
  },
  {
    "start": 879512,
    "end": 885980,
    "text": "ボタンの色は紫に設定し、背景の紫500は丸みを帯びさせます。"
  },
  {
    "start": 886060,
    "end": 887180,
    "text": "パディングを追加する。"
  },
  {
    "start": 887260,
    "end": 892224,
    "text": "テキストは白で、ホバー時には半太字になる。"
  },
  {
    "start": 892352,
    "end": 898580,
    "text": "背景を紫の600に設定し、小さなアニメーションをトランジションさせる。"
  },
  {
    "start": 900760,
    "end": 908252,
    "text": "さて、メッセージを入力して送信しているとき、読み込み中のインジケーターがないことにお気づきだろうか。"
  },
  {
    "start": 908336,
    "end": 913028,
    "text": "コンポーネントの中に新しいコンポーネントを作り、typing animationと名付けよう。"
  },
  {
    "start": 913204,
    "end": 924184,
    "text": "テキストが読み込まれていることをユーザーに知らせるために、3つの点が表示されるタイミングを表示しよう。"
  },
  {
    "start": 924312,
    "end": 928632,
    "text": "がフレックス・アイテムのセンターで、その内側に3つの点を置く。"
  },
  {
    "start": 928696,
    "end": 932092,
    "text": "ドットはクラスを使って作られるだけだ。"
  },
  {
    "start": 932156,
    "end": 935404,
    "text": "幅の高さ。"
  },
  {
    "start": 935452,
    "end": 943324,
    "text": "これは円のようなものを作り、背景のグラデーションを設定し、アニメートパルスはアニメートするクラスである。"
  },
  {
    "start": 943372,
    "end": 945252,
    "text": "合計3つのドットになる。"
  },
  {
    "start": 945306,
    "end": 948224,
    "text": "点をコピーペーストして、ディレイを加えるだけだよ。"
  },
  {
    "start": 948272,
    "end": 952084,
    "text": "それぞれのドットが来ると、アニメーションが他のドットの後に来る。"
  },
  {
    "start": 952202,
    "end": 958452,
    "text": "このタイピング・アニメーションをエクスポートして、index jsにインポートしよう。"
  },
  {
    "start": 958596,
    "end": 964360,
    "text": "一番上にanimation from componentsと入力し、次にコンポーネントの名前を入力する。"
  },
  {
    "start": 965420,
    "end": 972668,
    "text": "ここにインポートしたら、まず状態がロードされているかどうかをチェックし、次にそれを表示する。"
  },
  {
    "start": 972754,
    "end": 978412,
    "text": "とすると、これもボットメッセージのようにラップされる。"
  },
  {
    "start": 978466,
    "end": 980956,
    "text": "botからのメッセージのように見えるだろう。"
  },
  {
    "start": 981068,
    "end": 989040,
    "text": "div class name background gray 800 ということで、botのpadding text whiteと同じスタイリング。"
  },
  {
    "start": 989190,
    "end": 995430,
    "text": "そしてアニメーションを渡し、これを保存してどのように見えるか見てみよう。"
  },
  {
    "start": 1002620,
    "end": 1009924,
    "text": "ここにメッセージを入力して、どうすればリアクトにキーが表示されないようにできるかを尋ねようと思います。"
  },
  {
    "start": 1010052,
    "end": 1015832,
    "text": "というのも、今あるものをデプロイすると、OpenAIのAPIキーが公開されてしまうからだ。"
  },
  {
    "start": 1015896,
    "end": 1019356,
    "text": "チャットJPTがそれを隠す方法を知っているかどうか見てみよう。"
  },
  {
    "start": 1019378,
    "end": 1024800,
    "text": "もし、それがわからなければ、この後に私がどうするかを示すことになる。"
  },
  {
    "start": 1024950,
    "end": 1027376,
    "text": "ドットが表示されない"
  },
  {
    "start": 1027558,
    "end": 1029090,
    "text": "答えは出た。"
  },
  {
    "start": 1029540,
    "end": 1033440,
    "text": "アニメーションのタイプミスかもしれない。"
  },
  {
    "start": 1037460,
    "end": 1038064,
    "text": "見てみよう。"
  },
  {
    "start": 1038102,
    "end": 1053828,
    "text": "chow JPTの回答を見ると、今使っている環境変数を使うことと、サーバーにデータを送る前にクライアント側でハッシュ化または暗号化するサーバー側レンダリングを使うことは書いてある。"
  },
  {
    "start": 1053924,
    "end": 1057816,
    "text": "100％確実な答えではないと思う。"
  },
  {
    "start": 1057918,
    "end": 1062696,
    "text": "しかし、セキュリティに関するアドバイスを提供することはできないという免責事項がある。"
  },
  {
    "start": 1062728,
    "end": 1064540,
    "text": "もしかしたら、その点についてはより慎重になっているのかもしれない。"
  },
  {
    "start": 1064610,
    "end": 1075952,
    "text": "タイピング・アニメーションは、最初のステップでenvファイルに戻り、次のパブリックを削除していることを確認するためのバックグラウンドであるべきだ。"
  },
  {
    "start": 1076086,
    "end": 1077676,
    "text": "サーバーの運用を停止する。"
  },
  {
    "start": 1077708,
    "end": 1081404,
    "text": "繰り返しになるが、環境変数を更新するたびにこれを行う。"
  },
  {
    "start": 1081452,
    "end": 1084368,
    "text": "もうやめよう。"
  },
  {
    "start": 1084454,
    "end": 1088512,
    "text": "APIハローJSでは、サンプルのAPIエンドポイントを用意しています。"
  },
  {
    "start": 1088576,
    "end": 1094304,
    "text": "この名前を変更して、OpenAIを呼び出す独自のAPIエンドポイントを作成することにします。"
  },
  {
    "start": 1094432,
    "end": 1097696,
    "text": "まず、ポストメソッドのようなものを使うことは知っての通りだ。"
  },
  {
    "start": 1097728,
    "end": 1102632,
    "text": "の場合、リクエスト・メソッドがpostでないことをチェックできる。"
  },
  {
    "start": 1102686,
    "end": 1108548,
    "text": "間違ったメソッドを使っているという405エラーのようなものを送り返すことができる。"
  },
  {
    "start": 1108644,
    "end": 1119786,
    "text": "というメッセージが表示されたら、メソッドはpostでなければならず、そうでなければAPIを呼び出すことができる。"
  },
  {
    "start": 1119818,
    "end": 1123198,
    "text": "クライアント側でやったこととほとんど同じロジックになる。"
  },
  {
    "start": 1123284,
    "end": 1137610,
    "text": "まず、この一番上にあるaxiosをインポートし、前回使用した設定の一部をコピーします。"
  },
  {
    "start": 1137710,
    "end": 1143234,
    "text": "この関数は非同期呼び出しをしているので、asyncにする。"
  },
  {
    "start": 1143282,
    "end": 1148226,
    "text": "であれば、try catchを使い、tryの中でAPIの呼び出しを試すことができる。"
  },
  {
    "start": 1148338,
    "end": 1160202,
    "text": "定数レスポンスに等しく、そしてaxios postとそれが受け取っているすべての引数に等しい。"
  },
  {
    "start": 1160256,
    "end": 1164282,
    "text": "メッセージは動的なので、APIからそれを取り込むことになる。"
  },
  {
    "start": 1164426,
    "end": 1177602,
    "text": "try呼び出しの後、catchがあり、エラーがあればそれをキャッチし、コンソールログに記録し、レスポンスとして500を送り、何か問題があったというメッセージを返す。"
  },
  {
    "start": 1177656,
    "end": 1179810,
    "text": "これがAPIのレスポンスだ。"
  },
  {
    "start": 1180630,
    "end": 1186002,
    "text": "これを削除して、代わりに念のためにレスを貼り付けておこう。"
  },
  {
    "start": 1186056,
    "end": 1187202,
    "text": "ステータス200"
  },
  {
    "start": 1187256,
    "end": 1188862,
    "text": "つまり、成功したということだ。"
  },
  {
    "start": 1189006,
    "end": 1192134,
    "text": "また、次に公開されるOpenAI APIキーも更新します。"
  },
  {
    "start": 1192172,
    "end": 1193154,
    "text": "それはもう必要ない。"
  },
  {
    "start": 1193202,
    "end": 1198702,
    "text": "これはもうクライアント側ではないので、更新された環境変数を読み込んでいる。"
  },
  {
    "start": 1198866,
    "end": 1216400,
    "text": "リクエストからボディを取得するには、リクエストからボディを取得するように定数destructuringを構築し、メッセージの代わりにボディをデータ内に送信する。"
  },
  {
    "start": 1217330,
    "end": 1240520,
    "text": "JSoNの中に入って、実際にボディを直接送信して、クライアント側からモデルを更新したい場合などのためにデータを削除したり、コンソール・ログを削除したり、レスポンスの代わりにレスポンス・データを返すことができます。"
  },
  {
    "start": 1240590,
    "end": 1244428,
    "text": "データ部分だけが必要なのだから。"
  },
  {
    "start": 1244514,
    "end": 1244812,
    "text": "オーケー。"
  },
  {
    "start": 1244866,
    "end": 1256448,
    "text": "それを保存するには、localhostのAPIチャットを呼び出してテストすることができる。"
  },
  {
    "start": 1256614,
    "end": 1259744,
    "text": "これで、クライアント側からの呼び出しを更新できる。"
  },
  {
    "start": 1259782,
    "end": 1273092,
    "text": "このように、30行目で次のパブリックOpenAIキーを処理します。このキーはファイル内にバンドルされず、アプリをビルドしてデプロイするときに生成されます。"
  },
  {
    "start": 1273146,
    "end": 1283208,
    "text": "内部APIを呼び出すには、APIとチャットを実行すればいい。"
  },
  {
    "start": 1283294,
    "end": 1286168,
    "text": "これで念のためにテストができる。"
  },
  {
    "start": 1286254,
    "end": 1292030,
    "text": "メッセージを入力して送信を押してみよう。"
  },
  {
    "start": 1292400,
    "end": 1296540,
    "text": "タイピングアニメーションとボットバックからのメッセージを受け取っています。"
  },
  {
    "start": 1297440,
    "end": 1304268,
    "text": "さて、次のJSプロジェクト対ソリューションのデプロイの時間だが、GitHubにインポートして新しいプロジェクトを作成するだけだ。"
  },
  {
    "start": 1304364,
    "end": 1309756,
    "text": "このチュートリアルのコードへのリンクも追加しておく。"
  },
  {
    "start": 1309868,
    "end": 1320544,
    "text": "GitHubにデプロイする前にひとつだけ変更したのは、Envの名前をenv localに変更したことです。"
  },
  {
    "start": 1320672,
    "end": 1327876,
    "text": "また、OpenAIのAPIキーをコピーして、versalのデプロイ設定に追加する必要があります。"
  },
  {
    "start": 1327908,
    "end": 1331444,
    "text": "それをコピーしてダッシュボードを続けよう。"
  },
  {
    "start": 1331492,
    "end": 1335432,
    "text": "gitプロジェクトをアップロードしたら、deployを押すだけでデプロイされる。"
  },
  {
    "start": 1335566,
    "end": 1352744,
    "text": "プロジェクトの左側にある settings and environment variables で、ここにキーと、OpenAI からデプロイするために取得したキーの値を追加します。"
  },
  {
    "start": 1352792,
    "end": 1354464,
    "text": "ここに違うリンクがあるかもしれない。"
  },
  {
    "start": 1354502,
    "end": 1358384,
    "text": "これがデプロイメントのリンクで、これがドメインのリンクだ。"
  },
  {
    "start": 1358502,
    "end": 1361468,
    "text": "デプロイメントを見ると、段階がある。"
  },
  {
    "start": 1361564,
    "end": 1364924,
    "text": "これによって、展開がどう変わったかがわかる。"
  },
  {
    "start": 1364972,
    "end": 1375280,
    "text": "例えば、最新のデプロイメントを自分のドメインに表示したい場合、本番環境にプロモートすればいい。"
  },
  {
    "start": 1375440,
    "end": 1378744,
    "text": "ここにドメインがある。"
  },
  {
    "start": 1378782,
    "end": 1381732,
    "text": "これは新しい配備を意味する。"
  },
  {
    "start": 1381796,
    "end": 1389640,
    "text": "プロダクションに昇格すれば、あとはビルドが終わるのを待つだけだ。"
  },
  {
    "start": 1389710,
    "end": 1396300,
    "text": "よし、あとは完成を待つだけだ。"
  },
  {
    "start": 1396370,
    "end": 1399432,
    "text": "これが製品で、これがメイン・ドメインだ。"
  },
  {
    "start": 1399496,
    "end": 1400910,
    "text": "よし、これだ。"
  },
  {
    "start": 1402100,
    "end": 1406336,
    "text": "また、APIのエンドポイントも少し修正した。"
  },
  {
    "start": 1406438,
    "end": 1414624,
    "text": "これは、私のAPIが、私が作成したドメインからのみ呼び出され、他のウェブサイトからは呼び出されないことを確認するためです。"
  },
  {
    "start": 1414822,
    "end": 1419636,
    "text": "もし同じことがお望みであれば、もうひとつのセキュリティ・ステップとなる。"
  },
  {
    "start": 1419738,
    "end": 1421636,
    "text": "ここでコードを確認しよう。"
  },
  {
    "start": 1421738,
    "end": 1425776,
    "text": "APIを呼び出しているのは誰か？"
  },
  {
    "start": 1425888,
    "end": 1427072,
    "text": "まずチェックする。"
  },
  {
    "start": 1427136,
    "end": 1434264,
    "text": "次のjsのプロセスenv node environmentによって、現在どのような環境にいるかを確認することができる。"
  },
  {
    "start": 1434302,
    "end": 1438452,
    "text": "開発用には、もちろんlocalhostからリクエストしたい。"
  },
  {
    "start": 1438516,
    "end": 1441176,
    "text": "もしそれが開発でないなら、排除することになる。"
  },
  {
    "start": 1441288,
    "end": 1449144,
    "text": "もしプロダクションやその他のステージであれば、リファラルをチェックし、環境変数の内部をチェックする。"
  },
  {
    "start": 1449192,
    "end": 1460664,
    "text": "ここでは、アプリのURLを自分のウェブサイトのドメインに設定しているので、もしそのURLでなければ、この未承認のステータス番号と未承認というコードが返される。"
  },
  {
    "start": 1460792,
    "end": 1462952,
    "text": "それがチュートリアルのすべてだ。"
  },
  {
    "start": 1463016,
    "end": 1464628,
    "text": "ご視聴ありがとうございました。"
  },
  {
    "start": 1464714,
    "end": 1469936,
    "text": "chatgpt APIを使用しているプロジェクトがあれば、コメント欄にご記入ください。"
  },
  {
    "start": 1470048,
    "end": 1474976,
    "text": "あるいは、APIを使う以外にテキストタグを決める手助けが必要かもしれない。"
  },
  {
    "start": 1475008,
    "end": 1478610,
    "text": "次回のビデオでお会いしましょう。"
  }
]