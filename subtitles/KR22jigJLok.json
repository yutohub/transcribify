[
  {
    "start": 250,
    "end": 2474,
    "text": "Pythonのラムダ関数とは？"
  },
  {
    "start": 2602,
    "end": 9802,
    "text": "このビデオでは、ラムダ関数とは何かを説明し、その使い方と便利さを理解してもらうために例を示します。"
  },
  {
    "start": 9946,
    "end": 15386,
    "text": "まず第一に、ラムダ関数はPythonの通常の関数と機能的に同じである。"
  },
  {
    "start": 15498,
    "end": 16798,
    "text": "どういうことか、お見せしよう。"
  },
  {
    "start": 16884,
    "end": 21674,
    "text": "例えば、xとYを入力とする関数addがあるとしよう。"
  },
  {
    "start": 21802,
    "end": 24158,
    "text": "そして、xにyを足したものを返す。"
  },
  {
    "start": 24324,
    "end": 28534,
    "text": "では、4と5を入力したaddの結果をプリントしてみよう。"
  },
  {
    "start": 28652,
    "end": 31270,
    "text": "これを実行してみよう。"
  },
  {
    "start": 31340,
    "end": 36422,
    "text": "予想通り、まったく同じことをするラムダ関数を書くことができる。"
  },
  {
    "start": 36556,
    "end": 43242,
    "text": "ラムダ関数は、lambdaと入力し、次にスペースを入れ、ここで入力を定義する。"
  },
  {
    "start": 43376,
    "end": 45418,
    "text": "私たちはXコンマYを行います。"
  },
  {
    "start": 45584,
    "end": 50902,
    "text": "次に、コロンを追加し、その後にxとyの入力に対して実行したい演算を追加する。"
  },
  {
    "start": 50966,
    "end": 53182,
    "text": "この場合は、xとyを足したものになる。"
  },
  {
    "start": 53316,
    "end": 56714,
    "text": "現在、ラムダ関数は1行の式しか持つことができない。"
  },
  {
    "start": 56842,
    "end": 60730,
    "text": "ここで計算されたものが、そのまま返されると仮定する。"
  },
  {
    "start": 60810,
    "end": 67094,
    "text": "通常の関数ではreturnキーワードを追加しなければならないが、ラムダ関数ではその必要はない。"
  },
  {
    "start": 67242,
    "end": 68338,
    "text": "そうだ。"
  },
  {
    "start": 68424,
    "end": 70642,
    "text": "この2つはまったく同じだ。"
  },
  {
    "start": 70776,
    "end": 75938,
    "text": "さて、このラムダ関数には名前がついていないことにお気づきだろうか？"
  },
  {
    "start": 76024,
    "end": 77758,
    "text": "それが問題なんだ。"
  },
  {
    "start": 77854,
    "end": 83154,
    "text": "ラムダ関数は匿名関数とも呼ばれ、識別子に束縛されない。"
  },
  {
    "start": 83282,
    "end": 90706,
    "text": "さて、技術的にはこれを変数に代入して使うこともできるが、その時点では従来の関数定義を使ったほうがずっといい。"
  },
  {
    "start": 90818,
    "end": 101158,
    "text": "この2つが同じものであることを示すために、ここではadd twoという変数に代入し、4と5を入力としてadd twoを表示することにする。"
  },
  {
    "start": 101254,
    "end": 104926,
    "text": "これを実行すると、ここでも9が得られることがわかるだろう。"
  },
  {
    "start": 105028,
    "end": 113434,
    "text": "この式全体を括弧で囲み、入力も括弧で囲んで、この式全体を表示することもできる。"
  },
  {
    "start": 113562,
    "end": 115390,
    "text": "これも同じように機能することがわかるだろう。"
  },
  {
    "start": 115540,
    "end": 119134,
    "text": "さて、構文は理解できたが、ラムダ関数のポイントは何だろう？"
  },
  {
    "start": 119182,
    "end": 120286,
    "text": "どのように役立つのか？"
  },
  {
    "start": 120398,
    "end": 127250,
    "text": "ラムダ関数や無名関数の全体的な考え方は、より高次の関数に渡されるように作られているということだ。"
  },
  {
    "start": 127400,
    "end": 129630,
    "text": "高次関数って何だ？"
  },
  {
    "start": 129720,
    "end": 138994,
    "text": "高階関数とは、入力として別の関数を受け取るか、出力として関数を返すことができる関数のことだ。"
  },
  {
    "start": 139042,
    "end": 139814,
    "text": "あるいはその両方か。"
  },
  {
    "start": 139932,
    "end": 143066,
    "text": "私の考えでは、これは例を挙げた方がより理解しやすい。"
  },
  {
    "start": 143248,
    "end": 148986,
    "text": "さて、3456と7という数字の反復可能なリストがあるとしよう。"
  },
  {
    "start": 149168,
    "end": 159594,
    "text": "私がやりたいのは、このリストを入力として受け取り、さらに関数を入力として受け取ることができる高階関数を作成することである。"
  },
  {
    "start": 159722,
    "end": 164958,
    "text": "Pythonのmap関数をご存じなら、その関数を再現していることになる。"
  },
  {
    "start": 165124,
    "end": 167346,
    "text": "馴染みのない方は、私の話にお付き合いください。"
  },
  {
    "start": 167368,
    "end": 168722,
    "text": "もうすぐすべてが明らかになるだろう。"
  },
  {
    "start": 168856,
    "end": 174334,
    "text": "関数とイテラブルを受け取るmymapという関数を作ってみよう。"
  },
  {
    "start": 174462,
    "end": 179398,
    "text": "ここでは、空のリストとして返したい結果を初期化する。"
  },
  {
    "start": 179564,
    "end": 186850,
    "text": "では、イテレート可能な各アイテムを繰り返し処理し、各アイテムにファンクを適用して新しいアイテムを生成してみよう。"
  },
  {
    "start": 186930,
    "end": 190166,
    "text": "そして、この新しい項目を結果リストに追加する。"
  },
  {
    "start": 190348,
    "end": 196874,
    "text": "各項目に関数が適用された後、このforループの最後に、新しい結果リストを返す。"
  },
  {
    "start": 197072,
    "end": 199962,
    "text": "ここでマップ機能をテストしてみよう。"
  },
  {
    "start": 200096,
    "end": 203962,
    "text": "ここで、リスト内の各項目を数字でキューブ化したいとしよう。"
  },
  {
    "start": 204106,
    "end": 207994,
    "text": "立方体が私の地図と同じになるようにしよう。"
  },
  {
    "start": 208122,
    "end": 211866,
    "text": "さて、入力として関数と反復可能性を入力しなければならない。"
  },
  {
    "start": 211978,
    "end": 214814,
    "text": "この関数は単純なラムダ関数で定義できる。"
  },
  {
    "start": 214932,
    "end": 223314,
    "text": "ここでラムダを実行し、入力はxだけとする。"
  },
  {
    "start": 223352,
    "end": 223934,
    "text": "ループのために。"
  },
  {
    "start": 223982,
    "end": 229666,
    "text": "一度に1つのアイテムしか扱わないので、ラムダ式に必要な入力は1つだけだ。"
  },
  {
    "start": 229778,
    "end": 238566,
    "text": "次にコロン（colon）、そして入力に対して何らかの演算を行う。"
  },
  {
    "start": 238748,
    "end": 242070,
    "text": "そして2番目の入力は、反復処理可能なnumsである。"
  },
  {
    "start": 242410,
    "end": 246310,
    "text": "ここにキューブをプリントして、これを実行しよう。"
  },
  {
    "start": 246460,
    "end": 247798,
    "text": "さあ、行こう。"
  },
  {
    "start": 247964,
    "end": 255050,
    "text": "ラムダ関数は、上位の関数であるマップに渡され、イテレート可能な各アイテムをキューブ化するのに使われた。"
  },
  {
    "start": 255210,
    "end": 258042,
    "text": "これがラムダ関数の本来の使い方だ。"
  },
  {
    "start": 258186,
    "end": 262446,
    "text": "このビデオが気に入ったなら、そして何かを学んだなら、「いいね！」を残して私に知らせてほしい。"
  },
  {
    "start": 262548,
    "end": 266142,
    "text": "このようなコンテンツをもっとお望みなら、購読ボタンをクリックしてください。"
  },
  {
    "start": 266276,
    "end": 268620,
    "text": "次回のビデオでお会いしましょう。"
  }
]