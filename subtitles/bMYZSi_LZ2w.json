[
  {
    "start": 200,
    "end": 5070,
    "text": "皆さん、このチュートリアルではnext off v fiveの使い方を学びます。"
  },
  {
    "start": 5190,
    "end": 12750,
    "text": "Next offはnext JSで最も人気のある認証ライブラリで、現在バージョン5が最新版である。"
  },
  {
    "start": 12870,
    "end": 22230,
    "text": "実際、まだベータ版だが、いくつかの変更点があり、その多くはより良いものなので、新しいプロジェクトを始めるのに古いバージョンはもう使わないだろう。"
  },
  {
    "start": 22350,
    "end": 25286,
    "text": "このチュートリアルでは、この実装方法を学びます。"
  },
  {
    "start": 25358,
    "end": 34570,
    "text": "このチュートリアルのゴールは、できるだけ早くnext offを使い始め、自分のプロジェクトに実装できるようにすることです。"
  },
  {
    "start": 34690,
    "end": 40274,
    "text": "このため、このチュートリアルでは、大量の機能を備えた巨大な派手なプロジェクトは作らない。"
  },
  {
    "start": 40362,
    "end": 42482,
    "text": "その代わりに、いくつかのスタートコードを用意した。"
  },
  {
    "start": 42546,
    "end": 50002,
    "text": "後ほど、スタートコードをダウンロードする方法をお見せします。そして、このスタートコードにネクスト・オフ認証を順を追って追加していきます。"
  },
  {
    "start": 50066,
    "end": 61498,
    "text": "また、私のプロジェクトをダウンロードする代わりに、すでに認証機能を追加したい次のJSプロジェクトがある場合は、すぐに自分のプロジェクトに追加することもできます。"
  },
  {
    "start": 61554,
    "end": 66258,
    "text": "このチュートリアルでは、OAuth経由でGoogleとGitHubのログインを実装します。"
  },
  {
    "start": 66354,
    "end": 68258,
    "text": "グーグルやギットハブはその一例だ。"
  },
  {
    "start": 68354,
    "end": 74978,
    "text": "この仕組みがわかったら、DiscordやFacebookログインなど、さらに多くのプロバイダーを追加できる。"
  },
  {
    "start": 75034,
    "end": 76226,
    "text": "たくさんあるんだ。"
  },
  {
    "start": 76298,
    "end": 86988,
    "text": "また、Eメール・マジック・リンクによるログインも追加します。そうすれば、実際にEメールが受信トレイに送られてきて、それをクリックすればアプリにログインでき、実際に機能します。"
  },
  {
    "start": 87074,
    "end": 95592,
    "text": "認証されたユーザーだけがアクセスできるように、ページやサーバーアクション、APIエンドポイントを保護する方法を学びます。"
  },
  {
    "start": 95656,
    "end": 108872,
    "text": "また、サーバーサイド認証とクライアントサイド認証の違いも学びます。これは他のチュートリアルでは見落とされがちなのですが、この2つは全く異なるアプローチであり、キャッシュに重要な影響を与えるからです。"
  },
  {
    "start": 108936,
    "end": 111400,
    "text": "この2つの違いを見てみよう。"
  },
  {
    "start": 111480,
    "end": 113894,
    "text": "また、ユーザー・ロールの追加方法についても学びます。"
  },
  {
    "start": 113992,
    "end": 122610,
    "text": "1人か2人のユーザーだけが持つ管理者ロールを追加し、この管理者ロールに応じて、通常のユーザーがアクセスできないページにアクセスできるようにします。"
  },
  {
    "start": 122690,
    "end": 126762,
    "text": "また、ユーザー・データの更新方法も後で学ぶ。"
  },
  {
    "start": 126826,
    "end": 132930,
    "text": "ユーザー名を変更したい場合、またはロールを変更したい場合は、アプリの中からその方法を学びます。"
  },
  {
    "start": 133010,
    "end": 140394,
    "text": "繰り返しますが、私たちは派手なプロジェクトは作りませんが、プロジェクトのチュートリアルを作りたいのであれば、このチャンネルにある私の他のチュートリアルを見てください。"
  },
  {
    "start": 140482,
    "end": 144506,
    "text": "また、大きなプロジェクトの一環としてネクストオフを利用する選手もいる。"
  },
  {
    "start": 144698,
    "end": 153122,
    "text": "このチュートリアルはより焦点を絞ったもので、このチュートリアルの唯一の前提条件は、すでにnext JSとアプリ・ルーターの使い方を知っていることです。"
  },
  {
    "start": 153226,
    "end": 155178,
    "text": "これについてもチュートリアルがある。"
  },
  {
    "start": 155314,
    "end": 160202,
    "text": "このビデオの右上に、次のJSチュートリアルへのリンクを貼っておく。"
  },
  {
    "start": 160266,
    "end": 162642,
    "text": "まだネクストJSを使っていない人のために。"
  },
  {
    "start": 162706,
    "end": 166738,
    "text": "それなら、まずこの他のチュートリアルを見て、それからこのチュートリアルに戻ってくればいい。"
  },
  {
    "start": 166834,
    "end": 169010,
    "text": "さて、始める前にもうひとつ。"
  },
  {
    "start": 169130,
    "end": 174768,
    "text": "私のメールマガジンに登録していただければ、無料でリアクションのベストプラクティスのコースを提供します。"
  },
  {
    "start": 174864,
    "end": 182304,
    "text": "メールマガジンは、2週間に1度、反応についてのヒントを送っているので、とにかく購読してほしい。"
  },
  {
    "start": 182392,
    "end": 192584,
    "text": "もちろん、必要であればいつでも配信を停止することができます。また、codinginflow.com reactbestpracticesで、この無料のreactベストプラクティス・コースを入手することができます。"
  },
  {
    "start": 192712,
    "end": 208102,
    "text": "私のニュースレターに登録すると、この無料Eメールコースが送られてきます。また、より新しく、より大きな次のJSコースにも取り組んでいて、このコースに関する最新情報を私のEメールリストに送りますので、このEメールリストに登録する価値はあります。"
  },
  {
    "start": 208166,
    "end": 216330,
    "text": "codingandflow.comにアクセスし、ベストプラクティスに参加して、次の認証チュートリアルを楽しんでください。"
  },
  {
    "start": 216910,
    "end": 220278,
    "text": "さて、ではまずプロジェクトのセットアップから始めよう。"
  },
  {
    "start": 220334,
    "end": 225862,
    "text": "スタートコードを用意しましたので、ダウンロードしてください。"
  },
  {
    "start": 225926,
    "end": 231710,
    "text": "以下のビデオの説明の中に、next of v fiveと呼ばれるこのリポジトリへのリンクがある。"
  },
  {
    "start": 232010,
    "end": 239402,
    "text": "このリポジトリをクローンするか、zipファイルとしてダウンロードするか、お好きな方を選んで、対コードで開いてください。"
  },
  {
    "start": 239506,
    "end": 242578,
    "text": "あなたはリポジトリをgit cloneする方法を知っていると仮定します。"
  },
  {
    "start": 242634,
    "end": 244858,
    "text": "知らないなら、ググればいい。"
  },
  {
    "start": 244994,
    "end": 247418,
    "text": "ええ、そしてここに私が用意したいくつかのスタートコードを示します。"
  },
  {
    "start": 247474,
    "end": 248650,
    "text": "ここにロゴがある。"
  },
  {
    "start": 248690,
    "end": 257710,
    "text": "すでにいくつかのページがあるが、それらは後で実際のコードに置き換えたいTodoを含んでいる。"
  },
  {
    "start": 257830,
    "end": 268730,
    "text": "最初にやらなければならないのは、パッケージJSONに記載されているパッケージをすべてインストールすることだ。デフォルトではGitHubリポジトリにプッシュされないからだ。"
  },
  {
    "start": 269030,
    "end": 276370,
    "text": "コマンドラインを開き、Npm installの略であるNpm Iを実行することでインストールできる。"
  },
  {
    "start": 277470,
    "end": 284794,
    "text": "これでnode modulesフォルダが作成され、基本的にこれらの異なるパッケージのすべての内容が格納される。"
  },
  {
    "start": 284882,
    "end": 286802,
    "text": "もう知っているだろう。"
  },
  {
    "start": 286906,
    "end": 290450,
    "text": "これが終われば、技術的にはプロジェクトを開始できる。"
  },
  {
    "start": 290570,
    "end": 298270,
    "text": "ここには、まだコンパイルできないコードがある。"
  },
  {
    "start": 299130,
    "end": 305170,
    "text": "そして、実際のコードに置き換えたい、さまざまなTo Doがここにある。"
  },
  {
    "start": 305290,
    "end": 305650,
    "text": "たぶんね。"
  },
  {
    "start": 305690,
    "end": 309316,
    "text": "また、私がインストールした様々なパッケージを簡単に見てみよう。"
  },
  {
    "start": 309418,
    "end": 314112,
    "text": "このプロジェクトでは、UIコンポーネントにschedzyn UIを使用しています。"
  },
  {
    "start": 314216,
    "end": 317248,
    "text": "私は新しいプロジェクトの多くでこれを使っている。"
  },
  {
    "start": 317384,
    "end": 322800,
    "text": "箱から出してすぐに使える美しいコンポーネント・ライブラリだ。"
  },
  {
    "start": 322920,
    "end": 326184,
    "text": "ここではこれを使うが、次のオフではそれほど重要ではない。"
  },
  {
    "start": 326232,
    "end": 327816,
    "text": "これは何の役にも立たない。"
  },
  {
    "start": 327928,
    "end": 333280,
    "text": "異なるパッケージを使用する異なるプロジェクトがあっても、同じようにnext offを使用することができる。"
  },
  {
    "start": 333400,
    "end": 336792,
    "text": "Next authは、異なるデータベース・アダプタでも動作する。"
  },
  {
    "start": 336856,
    "end": 340800,
    "text": "ここでは、postgresデータベースであるzellストレージを使用する。"
  },
  {
    "start": 340840,
    "end": 344576,
    "text": "これは後で設定することにして、ORMとしてPrismaを使用する。"
  },
  {
    "start": 344648,
    "end": 349280,
    "text": "next offにはたくさんのデータベース・アダプターがあるので、プリズマを使う必要はない。"
  },
  {
    "start": 349320,
    "end": 353200,
    "text": "ドリズルのようなものも使えるし、他にもたくさんある。"
  },
  {
    "start": 353320,
    "end": 358248,
    "text": "このドキュメントの後半で、どのようなものが利用可能で、どのようにインストールできるかを説明する。"
  },
  {
    "start": 358344,
    "end": 364732,
    "text": "このプロジェクトではプリズマを使用し、必要最低限のセットアップを行っただけだ。"
  },
  {
    "start": 364856,
    "end": 369988,
    "text": "スタートコードをダウンロードする利点は、私と同じバージョン番号を持つことだ。"
  },
  {
    "start": 370084,
    "end": 377676,
    "text": "このチュートリアルを見たとしても、1年後や2年後にNPMIを実行するときには、まったく同じバージョン番号をインストールすることになる。"
  },
  {
    "start": 377748,
    "end": 385684,
    "text": "これにより、このチュートリアルが将来も機能し、チュートリアルが壊れてしまうようなバージョンアップがないことを保証します。"
  },
  {
    "start": 385772,
    "end": 397864,
    "text": "チュートリアルが終わったら、これらのパッケージをアップデートして実際に最新バージョンを入手するのがいいだろう。"
  },
  {
    "start": 397992,
    "end": 407144,
    "text": "今はまだベータ版だが、ここでスタートコードをダウンロードしてNPMIを実行すれば、私と同じスタート地点に立つことができる。"
  },
  {
    "start": 407232,
    "end": 421244,
    "text": "もうひとつ、後でこのチュートリアルのトピックごとに別のブランチを作ります。"
  },
  {
    "start": 421432,
    "end": 422396,
    "text": "オーケー、クールだ。"
  },
  {
    "start": 422508,
    "end": 425868,
    "text": "次にvesell.comにアクセスし、ここにログインする。"
  },
  {
    "start": 425964,
    "end": 431892,
    "text": "Verzelはホスティング・プロバイダーであり、next JSを開発したチームでもある。"
  },
  {
    "start": 431956,
    "end": 438900,
    "text": "後でプロジェクトをデプロイするときにここでホストすることになるので、ここでまたpostgresデータベースをセットアップしたい。"
  },
  {
    "start": 438940,
    "end": 447196,
    "text": "別のデータベースプロバイダを使用することもできますが、Vezelアカウントにログインすると簡単に設定できるので、私はこのプロバイダを使用しています。"
  },
  {
    "start": 447268,
    "end": 453848,
    "text": "GitHubアカウントでログインしておくと、後でプロジェクトをデプロイするのが簡単になります。"
  },
  {
    "start": 454024,
    "end": 458272,
    "text": "GitHubアカウントと接続することもできます。"
  },
  {
    "start": 458416,
    "end": 460544,
    "text": "この方法は後で紹介しよう。"
  },
  {
    "start": 460672,
    "end": 462208,
    "text": "をVezelダッシュボードに表示します。"
  },
  {
    "start": 462264,
    "end": 473272,
    "text": "ちなみに、無料のホビーアカウントを持っていても大丈夫です。幸運なことに、私たちは何も支払わなくても無料でデータベースを1つ手に入れることができます。"
  },
  {
    "start": 473456,
    "end": 477300,
    "text": "ここではストレージの下にpostgresデータベースを作成する。"
  },
  {
    "start": 478400,
    "end": 479816,
    "text": "名前をつけなければならない。"
  },
  {
    "start": 479928,
    "end": 489896,
    "text": "5つのチュートリアルの次と呼ぼう。DBかもしれないし、地域はユーザーに近いはずだ。"
  },
  {
    "start": 490008,
    "end": 499512,
    "text": "フランクフルトを選ぶつもりだ。僕自身はドイツにいるし、僕の住んでいるところから近いから、開発にはフランクフルトが一番早いだろう。"
  },
  {
    "start": 499656,
    "end": 504394,
    "text": "それに、ポストグレスはセットアップが簡単で手っ取り早いから好きなんだ。"
  },
  {
    "start": 504552,
    "end": 506678,
    "text": "最初のデータベースは無料です。"
  },
  {
    "start": 506774,
    "end": 509450,
    "text": "ここでは、異なるインストール手順が得られる。"
  },
  {
    "start": 509750,
    "end": 511294,
    "text": "それがプリズマのものだ。"
  },
  {
    "start": 511342,
    "end": 514366,
    "text": "実は、私はすでにこれをスタートコードに追加している。"
  },
  {
    "start": 514398,
    "end": 520230,
    "text": "このスキーマPrismaファイルには、すでにこのセクションが含まれている。"
  },
  {
    "start": 520390,
    "end": 523014,
    "text": "必要なのは環境変数だけだ。"
  },
  {
    "start": 523182,
    "end": 527854,
    "text": "このタブを開き、コピー、スニペットをクリックし、プロジェクトに戻る。"
  },
  {
    "start": 528022,
    "end": 533874,
    "text": "Prismaはenvローカルファイルから読み込むことができないので、通常のenvファイルでなければならない。"
  },
  {
    "start": 534062,
    "end": 535938,
    "text": "プロジェクトのルートにある。"
  },
  {
    "start": 536074,
    "end": 541550,
    "text": "ここにあるフォルダーの外に、envという新しいファイルを作成する。"
  },
  {
    "start": 541970,
    "end": 546114,
    "text": "すでにGitignoreの一番下に追加した。"
  },
  {
    "start": 546242,
    "end": 553818,
    "text": "なぜなら、envファイルには公開したくないデータベースの認証情報が含まれているからだ。"
  },
  {
    "start": 553994,
    "end": 562550,
    "text": "そして、ここにpostgresの認証情報を貼り付けると、後でPrismaが自動的に取得する。"
  },
  {
    "start": 562890,
    "end": 567450,
    "text": "そして、このデータベースに接続し、そこに何かを保存することができる。"
  },
  {
    "start": 567610,
    "end": 570218,
    "text": "そもそも、なぜデータベースが必要なのか？"
  },
  {
    "start": 570314,
    "end": 577290,
    "text": "ユーザー名、プロフィール、画像、URLの役割やその他の情報のようなユーザーデータを保存するためのものです。"
  },
  {
    "start": 577450,
    "end": 579674,
    "text": "そこにセッションも保存する。"
  },
  {
    "start": 579762,
    "end": 580762,
    "text": "セッションとは？"
  },
  {
    "start": 580826,
    "end": 583282,
    "text": "ユーザーがログインしていることをサーバーに伝える。"
  },
  {
    "start": 583386,
    "end": 585906,
    "text": "これが具体的にどのように機能するかは、後で説明する。"
  },
  {
    "start": 586058,
    "end": 594906,
    "text": "さて、データベースの準備ができたので、次の設定を開始しよう。"
  },
  {
    "start": 594978,
    "end": 597786,
    "text": "公式チュートリアルはこちら。"
  },
  {
    "start": 597858,
    "end": 600298,
    "text": "これを開く必要はない。"
  },
  {
    "start": 600354,
    "end": 602666,
    "text": "ステップ・バイ・ステップですべてお見せします。"
  },
  {
    "start": 602738,
    "end": 605890,
    "text": "これは次期認証V5のベータ版をカバーするものだ。"
  },
  {
    "start": 606050,
    "end": 608626,
    "text": "説明したように、これは現在まだベータ版だ。"
  },
  {
    "start": 608658,
    "end": 613698,
    "text": "次のオフ・ツアーからブランド名が変更され、j'sのオフ・ツアーとなったが、これはそれほど重要ではない。"
  },
  {
    "start": 613874,
    "end": 623622,
    "text": "私たちのプロジェクトでは、現時点で5.0 better 16の次のスタートコードにパッケージをインストール済みです。"
  },
  {
    "start": 623766,
    "end": 628166,
    "text": "次へ」をクリックすると、設定方法が表示される。"
  },
  {
    "start": 628198,
    "end": 630334,
    "text": "我々はすでにパッケージをインストールした。"
  },
  {
    "start": 630502,
    "end": 635694,
    "text": "次にオフ・シークレットが必要だが、これは環境変数にランダムな文字列を設定するだけだ。"
  },
  {
    "start": 635782,
    "end": 640050,
    "text": "npxというコマンドで作ることができる。"
  },
  {
    "start": 640430,
    "end": 642424,
    "text": "再びコマンドラインを開く。"
  },
  {
    "start": 642622,
    "end": 646356,
    "text": "これを実行すると、こうなる。"
  },
  {
    "start": 646508,
    "end": 657076,
    "text": "まずyで確認し、ランダムな文字列を取得してenvファイルにコピーする。"
  },
  {
    "start": 657228,
    "end": 660280,
    "text": "これは次のオフで自動的にピックアップされる。"
  },
  {
    "start": 660620,
    "end": 667320,
    "text": "一貫性を保つために、これを引用符で囲むこともできるが、結果は同じである。"
  },
  {
    "start": 667830,
    "end": 670478,
    "text": "よし、次のステップを見てみよう。"
  },
  {
    "start": 670614,
    "end": 672650,
    "text": "認証の秘密がある。"
  },
  {
    "start": 673150,
    "end": 678490,
    "text": "それから、オフTのファイルをセットアップする必要がある。"
  },
  {
    "start": 679350,
    "end": 685334,
    "text": "プロジェクトに戻り、これを直接srzフォルダに入れる。"
  },
  {
    "start": 685382,
    "end": 687130,
    "text": "sRzを右クリック。"
  },
  {
    "start": 687590,
    "end": 689210,
    "text": "このファイルをrと呼ぶ。"
  },
  {
    "start": 689950,
    "end": 691550,
    "text": "これは単なる命名規則にすぎない。"
  },
  {
    "start": 691590,
    "end": 693450,
    "text": "好きな名前をつけていい。"
  },
  {
    "start": 693930,
    "end": 695962,
    "text": "ここにこのコードを挿入する。"
  },
  {
    "start": 696026,
    "end": 702350,
    "text": "ビデオを一時停止し、これを手書きで入力するか、ドキュメントを開いた場合はそこからコピーしてください。"
  },
  {
    "start": 702770,
    "end": 708074,
    "text": "それから、サインインやサインアウトなどを処理するルートハンドラが必要だ。"
  },
  {
    "start": 708162,
    "end": 715550,
    "text": "ルートハンドラが何なのかわからない場合は、最初にリンクした次回のJ'sビギナー・チュートリアルを見てほしい。"
  },
  {
    "start": 716490,
    "end": 718458,
    "text": "じゃあ、これもコピーしておいたよ。"
  },
  {
    "start": 718594,
    "end": 721592,
    "text": "これは非常に特殊なフォルダ構造を必要とする。"
  },
  {
    "start": 721706,
    "end": 725036,
    "text": "この名前は正確につけなければならないので、細心の注意を払ってほしい。"
  },
  {
    "start": 725108,
    "end": 728044,
    "text": "すべてのフォルダを右クリックし、アプリフォルダを選択する。"
  },
  {
    "start": 728092,
    "end": 731280,
    "text": "Srcフォルダに新しいファイルを作成する。"
  },
  {
    "start": 731860,
    "end": 738600,
    "text": "次にAPI authを角括弧で囲んで入力する。"
  },
  {
    "start": 739100,
    "end": 753560,
    "text": "この角括弧の中に、ドット、ドット、ドットの次の単語を1つの単語として記述する。"
  },
  {
    "start": 753680,
    "end": 756620,
    "text": "ここにある名前はすべて正しくなければならない。"
  },
  {
    "start": 757160,
    "end": 760136,
    "text": "このコードをもう一度貼り付ける。"
  },
  {
    "start": 760248,
    "end": 762380,
    "text": "ビデオを一時停止して、これをタイプしてください。"
  },
  {
    "start": 762720,
    "end": 765420,
    "text": "よし、次のステップを見てみよう。"
  },
  {
    "start": 765920,
    "end": 768304,
    "text": "このミドルウェアは必要だが、これはオプションだ。"
  },
  {
    "start": 768432,
    "end": 770300,
    "text": "これでセッションは継続される。"
  },
  {
    "start": 770600,
    "end": 774848,
    "text": "このミドルウェアがなければ、セッションは30日後にタイムアウトする。"
  },
  {
    "start": 774944,
    "end": 781660,
    "text": "ログインしても、30日後にウェブサイトを使っても、またログインしなければならない。"
  },
  {
    "start": 781740,
    "end": 788932,
    "text": "このミドルウェアを使用すると、ユーザーがこの30日以内に当社のウェブサイトを訪問している限り、セッションが維持されます。"
  },
  {
    "start": 789036,
    "end": 790880,
    "text": "再度ログインする必要はない。"
  },
  {
    "start": 791340,
    "end": 798292,
    "text": "ファイルを置く場所と名前は正確でなければならない。"
  },
  {
    "start": 798436,
    "end": 803868,
    "text": "これを直接SRZフォルダに入れ、ミドルウェアTSと呼ばなければならない。"
  },
  {
    "start": 804004,
    "end": 812564,
    "text": "これは次のJSDevの特別なファイルタイプで、基本的に毎回ウェブサイトにアクセスする前に実行されるコードの一部を作成します。"
  },
  {
    "start": 812612,
    "end": 816788,
    "text": "このコードでセッションをリフレッシュする。"
  },
  {
    "start": 816924,
    "end": 825508,
    "text": "これは単純に、ルート・フォルダーに先ほど設定したauthファイル（auth tsファイル）からインポートするだけだ。"
  },
  {
    "start": 825644,
    "end": 828932,
    "text": "よし、次はデータベースに接続しよう。"
  },
  {
    "start": 829076,
    "end": 831100,
    "text": "ここにはもう一つのメニューがある。"
  },
  {
    "start": 831220,
    "end": 834276,
    "text": "繰り返しになるが、使えるアダプターは山ほどある。"
  },
  {
    "start": 834348,
    "end": 838478,
    "text": "ここにリストされていないデータベースでも、独自のアダプタを作成することができます。"
  },
  {
    "start": 838644,
    "end": 840474,
    "text": "このチュートリアルではPrismaを使用します。"
  },
  {
    "start": 840522,
    "end": 841986,
    "text": "プリズマをクリックする。"
  },
  {
    "start": 842138,
    "end": 844350,
    "text": "パッケージはすでにインストールした。"
  },
  {
    "start": 845490,
    "end": 850490,
    "text": "環境変数も、bezelのpostgresデータベースを指す。"
  },
  {
    "start": 850610,
    "end": 859282,
    "text": "そして、このPrismaアダプターを接続し、次にこのデータベースにすべての関連データを保存する。"
  },
  {
    "start": 859466,
    "end": 862258,
    "text": "ここでは、同じファイルにプリズマ・クライアントを作成した。"
  },
  {
    "start": 862354,
    "end": 872570,
    "text": "Prismaクライアントを別のファイルに保存して、たとえばユーザーを更新するためにデータベース操作を行いたい場合に、アプリ全体で再利用できるようにします。"
  },
  {
    "start": 872730,
    "end": 879042,
    "text": "プロジェクトに戻ると、ここに伝票フォルダがある。"
  },
  {
    "start": 879146,
    "end": 882746,
    "text": "ゼロからセットアップするチュートリアルは他にもたくさんある。"
  },
  {
    "start": 882898,
    "end": 886330,
    "text": "私はこれをプリズマのドキュメントからコピーしただけだ。"
  },
  {
    "start": 886450,
    "end": 893954,
    "text": "Prisma client next jsまたはPrisma next JSでググると、このコードが見つかります。"
  },
  {
    "start": 894002,
    "end": 896510,
    "text": "これがプロジェクトにコピーしたコードだ。"
  },
  {
    "start": 896650,
    "end": 912222,
    "text": "なぜこれほど多くのコードが必要かというと、開発中にプロジェクトの変更を保存すると、サーバーは基本的に再起動され、デフォルトでは新しいPrismaクライアントがインスタンス化されるため、しばらくするとクライアントが増えすぎて動かなくなるからです。"
  },
  {
    "start": 912326,
    "end": 920410,
    "text": "このコードは、プロジェクトの変更を保存するときに、以前のPrismaクライアントを再利用できるようにするだけです。"
  },
  {
    "start": 920710,
    "end": 923526,
    "text": "よし、ここで少し変更しなければならないことがある。"
  },
  {
    "start": 923558,
    "end": 925372,
    "text": "そのために、私はこれを追加したのだ。"
  },
  {
    "start": 925526,
    "end": 928184,
    "text": "デフォルトでは、プリズマはエッジでは機能しない。"
  },
  {
    "start": 928272,
    "end": 938168,
    "text": "エッジとは、ゼルが提供するコンテンツ・デリバリー・ネットワークのことで、エッジを有効にするかどうかは通常オプトインで決めることができる。"
  },
  {
    "start": 938264,
    "end": 954446,
    "text": "next jのミドルウェアは常にこのエッジで実行される。なぜなら、ページへのすべてのリクエストの前に実行されるため、非常に高速に実行されなければならないからだ。"
  },
  {
    "start": 954608,
    "end": 958370,
    "text": "プリズマはエッジ互換でなければならないが、デフォルトではそうなっていない。"
  },
  {
    "start": 958490,
    "end": 968418,
    "text": "幸いなことに、ここしばらくの間、プリズマ・エッジと互換性を持たせることができるようになった。"
  },
  {
    "start": 968594,
    "end": 984870,
    "text": "を削除し、代わりにconst neon neonと記述します。neonはデータベースの名前で、postgresはこのようなpostgresデータベースを提供するneonというサービスを利用しています。"
  },
  {
    "start": 985610,
    "end": 988590,
    "text": "もちろん、ここでの変数名は重要ではない。"
  },
  {
    "start": 989690,
    "end": 994590,
    "text": "そして新しいプールをインスタンス化し、これを手動でインポートしなければならないようだ。"
  },
  {
    "start": 995050,
    "end": 1005030,
    "text": "ここでは、neon database serverlessからpoolをインポートしている。poolはすでにスタイリング・コードに追加したパッケージである。"
  },
  {
    "start": 1005610,
    "end": 1021030,
    "text": "ここでは接続文字列を指定する必要がある。これはprocess envisioned dotの下にある。"
  },
  {
    "start": 1021450,
    "end": 1025066,
    "text": "env postgres prisma URL を処理します。"
  },
  {
    "start": 1025218,
    "end": 1031274,
    "text": "次に、const adapter equals new prisma neon を作成します。"
  },
  {
    "start": 1031362,
    "end": 1033010,
    "text": "ここでも自動インポートは機能しない。"
  },
  {
    "start": 1033050,
    "end": 1047102,
    "text": "このメニューをインポートし、prisma neonにneonオブジェクトを渡し、Prismaクライアントのコンストラクタに中かっこを追加してアダプタを渡す。"
  },
  {
    "start": 1047246,
    "end": 1052742,
    "text": "幸い、プリズマ・クライアントをエッジ互換にするのは簡単だ。"
  },
  {
    "start": 1052886,
    "end": 1064398,
    "text": "なぜなら、このPrisma neonクライアントは、エッジランタイムと互換性のある別の方法でデータベースに接続するからだ。"
  },
  {
    "start": 1064534,
    "end": 1069330,
    "text": "ドキュメントに戻ると、ここでも簡単に説明されている。"
  },
  {
    "start": 1069910,
    "end": 1072934,
    "text": "次にデータベーススキーマが必要だ。"
  },
  {
    "start": 1073102,
    "end": 1076198,
    "text": "ここではpostgresを使っているので、これが必要だ。"
  },
  {
    "start": 1076294,
    "end": 1080970,
    "text": "このファイルへのリンクを下のビデオ説明に貼っておくので、そこからコピーしてほしい。"
  },
  {
    "start": 1081270,
    "end": 1087654,
    "text": "そして、このデータベースには、ユーザー認証に必要なさまざまなテーブルが含まれています。"
  },
  {
    "start": 1087782,
    "end": 1093158,
    "text": "GoogleとGitHubのログインアカウントです。"
  },
  {
    "start": 1093254,
    "end": 1096542,
    "text": "ここにもいくつかの情報が保存されている。"
  },
  {
    "start": 1096686,
    "end": 1100210,
    "text": "電子メールでのログインには認証トークンが必要です。"
  },
  {
    "start": 1100630,
    "end": 1102654,
    "text": "ようやくセッションが再開された。"
  },
  {
    "start": 1102702,
    "end": 1106678,
    "text": "セッションは、このユーザーが実際にログインしていることをサーバーに伝えるものです。"
  },
  {
    "start": 1106774,
    "end": 1117198,
    "text": "ログイン時にユーザーのブラウザにクッキーがセットされ、このクエリはデータベース・セッションの代わりにセッションに接続される。"
  },
  {
    "start": 1117334,
    "end": 1120158,
    "text": "これらは認証の2つの異なる戦略である。"
  },
  {
    "start": 1120254,
    "end": 1130054,
    "text": "JWTSの利点は、ページを開くときに毎回データベースからセッションをフェッチする必要がないことだ。"
  },
  {
    "start": 1130142,
    "end": 1134350,
    "text": "しかし、JWTの欠点は、それを無効にできないことだ。"
  },
  {
    "start": 1134430,
    "end": 1141102,
    "text": "例えば、ユーザーを禁止したり、ユーザーがパスワードを変更したりしても、現在のセッションを破棄することはできません。"
  },
  {
    "start": 1141206,
    "end": 1147526,
    "text": "一定時間有効なJWTでログインしていれば、ログインできる。"
  },
  {
    "start": 1147598,
    "end": 1150820,
    "text": "たとえ禁止されていても、パスワードが変更されていても。"
  },
  {
    "start": 1150860,
    "end": 1152508,
    "text": "強制的にログアウトさせることはできない。"
  },
  {
    "start": 1152564,
    "end": 1154556,
    "text": "それがJWTの欠点だ。"
  },
  {
    "start": 1154628,
    "end": 1156580,
    "text": "もちろん、これを解決する方法はある。"
  },
  {
    "start": 1156660,
    "end": 1169684,
    "text": "最も一般的なものは、15分間しか有効でない非常に短命なJWTを使用し、有効期限が切れた後にトークンを自動的にリフレッシュするリフレッシュ・トークン戦略を持つことである。"
  },
  {
    "start": 1169812,
    "end": 1173516,
    "text": "しかし、このリフレッシュ・メカニズムは、そのままでは機能しない。"
  },
  {
    "start": 1173588,
    "end": 1175108,
    "text": "これは自分で実行しなければならない。"
  },
  {
    "start": 1175204,
    "end": 1179530,
    "text": "私がこれまでに見たJWTを使ったチュートリアルでは、そのようなことはしていなかった。"
  },
  {
    "start": 1179620,
    "end": 1184798,
    "text": "その代わりに、私がお話ししたような問題を抱えた長寿命のトークンを1つ作るだけです。"
  },
  {
    "start": 1184854,
    "end": 1187478,
    "text": "これらのトークンを無効にすることはできない。"
  },
  {
    "start": 1187654,
    "end": 1194870,
    "text": "手短に言えば、私たちは、古き良き戦場でテストされたデータベース・セッションを使用することで、これらの問題を回避している。"
  },
  {
    "start": 1194950,
    "end": 1200854,
    "text": "欠点は、セッションがデータベースに保存され、それをデータベースから読み込まなければならないことだ。"
  },
  {
    "start": 1200902,
    "end": 1204062,
    "text": "我々は常に最新の情報を持っている。"
  },
  {
    "start": 1204206,
    "end": 1208470,
    "text": "ユーザーを強制的にログアウトさせたい場合は、単にセッションを破棄すればよい。"
  },
  {
    "start": 1208510,
    "end": 1212466,
    "text": "私たちのデータベースからそれを削除することができますし、彼らはもうログインログインされていません。"
  },
  {
    "start": 1212578,
    "end": 1221434,
    "text": "同様に、あるユーザーをアクセス禁止にしたり、そのユーザーの役割を変更したりした場合にも、この情報は、そのユーザーが当社のウェブサイトを再び開いた時点で直ちに入手できるようになります。"
  },
  {
    "start": 1221522,
    "end": 1223986,
    "text": "これが、私がデータベース・セッションのファンである理由だ。"
  },
  {
    "start": 1224058,
    "end": 1229602,
    "text": "使いやすいし、セキュリティ上の問題もない。"
  },
  {
    "start": 1229746,
    "end": 1233090,
    "text": "また、スピードの問題に遭遇したこともない。"
  },
  {
    "start": 1233170,
    "end": 1237110,
    "text": "これらのデータベースへのアクセスは高速であるため、非常に高速であることに変わりはない。"
  },
  {
    "start": 1237680,
    "end": 1240552,
    "text": "とにかく、これを私のプロジェクトにコピーし直した。"
  },
  {
    "start": 1240616,
    "end": 1243560,
    "text": "このファイルへのリンクをビデオの説明文に入れます。"
  },
  {
    "start": 1243680,
    "end": 1248256,
    "text": "実はここで少し修正を加えなければならないので、そこからコピーすればいい。"
  },
  {
    "start": 1248448,
    "end": 1254448,
    "text": "このファイルはスキーマPrismaファイルに属しているので、ビデオの説明の中にこのファイルへのリンクがあります。"
  },
  {
    "start": 1254544,
    "end": 1260100,
    "text": "これをここに貼り付けたが、2回貼り付けてしまったので、これを削除する。"
  },
  {
    "start": 1260520,
    "end": 1268810,
    "text": "オーセンティケータも必要ないので、オーセンティケータ・テーブルは削除した。"
  },
  {
    "start": 1269430,
    "end": 1274174,
    "text": "プリズマについては、私の他のプロジェクト・チュートリアルでも詳しく取り上げている。"
  },
  {
    "start": 1274222,
    "end": 1282366,
    "text": "ゼロからセットアップする方法を学びたい場合は、以下のビデオの説明からコピーペーストしてください。"
  },
  {
    "start": 1282558,
    "end": 1293034,
    "text": "モデルとは単なるデータベーステーブルのことです。モデルとは、PrismaがPostgres上でデータベースを扱いやすくするために提供する抽象化です。"
  },
  {
    "start": 1293122,
    "end": 1295554,
    "text": "ここでひとつだけ変更したいことがある。"
  },
  {
    "start": 1295722,
    "end": 1299786,
    "text": "デフォルトでは、テーブルはモデルユーザーの名前を持ちます。"
  },
  {
    "start": 1299938,
    "end": 1305386,
    "text": "命名規則では通常、小文字で複数形にする。"
  },
  {
    "start": 1305538,
    "end": 1313590,
    "text": "このaddmap関数を使えば、モデル名を変更することなくテーブル名を変更することができる。"
  },
  {
    "start": 1313890,
    "end": 1320200,
    "text": "このようにして、テーブルの名前をusersに変更することができる。"
  },
  {
    "start": 1321420,
    "end": 1336360,
    "text": "マップをアカウントに追加し、セッションも同じようにマップをセッションに追加し、さらにもう1つ下にあるマップを追加する。"
  },
  {
    "start": 1336660,
    "end": 1344890,
    "text": "レアな屈折アンダースコア・トークンがこれを救う。"
  },
  {
    "start": 1345950,
    "end": 1355850,
    "text": "このスキーマをデータベースにプッシュするには、NPX Prisma DB pushを使用する。"
  },
  {
    "start": 1356710,
    "end": 1363130,
    "text": "これでうまくいかなかった場合は、envファイルの接続文字列がすべて正しいことを確認してください。"
  },
  {
    "start": 1363510,
    "end": 1364838,
    "text": "私にとってはうまくいった。"
  },
  {
    "start": 1364974,
    "end": 1372400,
    "text": "Vesellデータベースを開き、\"参照 \"をクリックすると、さまざまなテーブルが表示される。"
  },
  {
    "start": 1372520,
    "end": 1377380,
    "text": "まだデータは入っていないが、データベースの準備はできている。"
  },
  {
    "start": 1377800,
    "end": 1385640,
    "text": "さて、最後にもう一度RTSファイルに入り、プリズマを接続しなければならない。"
  },
  {
    "start": 1385680,
    "end": 1389020,
    "text": "次に、このPrismaクライアントをセットアップしましょう。"
  },
  {
    "start": 1389600,
    "end": 1395000,
    "text": "ここで一番上のアダプターをPrismaアダプターに設定する。"
  },
  {
    "start": 1395080,
    "end": 1399200,
    "text": "なぜオートコンプリートが機能しないのかわからない。"
  },
  {
    "start": 1400660,
    "end": 1402240,
    "text": "私はこれを手動でインポートしている。"
  },
  {
    "start": 1403180,
    "end": 1410200,
    "text": "Prismaアダプタに、libフォルダからインポートしたPrismaクライアントを渡します。"
  },
  {
    "start": 1411500,
    "end": 1414852,
    "text": "そう、そして今、次のオフは我々のデータベースに接続されている。"
  },
  {
    "start": 1414916,
    "end": 1421340,
    "text": "必要なモデルはすべて揃っているが、ログイン・プロバイダーがまだないので、まだログインできない。"
  },
  {
    "start": 1421500,
    "end": 1425566,
    "text": "次に、これらのログイン・プロバイダを追加し、Googleログインから始める。"
  },
  {
    "start": 1425668,
    "end": 1431710,
    "text": "しかし、すでに開発モードでプロジェクトを開始することができる。"
  },
  {
    "start": 1432650,
    "end": 1437538,
    "text": "そしてlocalhost 3000を開くと、この素晴らしいウェブサイトが再び表示される。"
  },
  {
    "start": 1437594,
    "end": 1445242,
    "text": "ここでやりたいことは、さまざまな認証機能を追加することだけだからだ。"
  },
  {
    "start": 1445266,
    "end": 1449630,
    "text": "私たちには様々なページがありますが、このページは後でユーザーデータを更新するためのものです。"
  },
  {
    "start": 1450330,
    "end": 1455054,
    "text": "また、スラッシュ・アドミニストレータがあるので、アドミニストレータ以外のユーザーをブロックしたい。"
  },
  {
    "start": 1455202,
    "end": 1461710,
    "text": "また、右上に現在ログインしているユーザーを示すボタンと、さまざまなリンクのあるメニューを設置したい。"
  },
  {
    "start": 1461790,
    "end": 1464910,
    "text": "ただひとつ、コンソールに問題がある。"
  },
  {
    "start": 1464950,
    "end": 1469558,
    "text": "このエラーは、プリズマに関連するエッジ・ライト・ローダーで見られる。"
  },
  {
    "start": 1469654,
    "end": 1473702,
    "text": "エッジで機能するようにプリズマをセットアップする方法を紹介したよね？"
  },
  {
    "start": 1473766,
    "end": 1475478,
    "text": "このプリズマネオンアダプターを使えば"
  },
  {
    "start": 1475574,
    "end": 1484432,
    "text": "唯一の問題は、エッジで動作せず、この全体がバグってしまうライブラリーが1つだけあることだ。"
  },
  {
    "start": 1484576,
    "end": 1491744,
    "text": "開発モードでは何の問題も感じなかったが、プロジェクトをビルドしてデプロイすると、突然すべてが超遅くなった。"
  },
  {
    "start": 1491872,
    "end": 1504832,
    "text": "この問題については、現在GitHubでissueが公開されており、修正されたズームになると思われる。"
  },
  {
    "start": 1504936,
    "end": 1510394,
    "text": "現時点では、この問題は存在しており、これを回避する以外に選択肢はない。"
  },
  {
    "start": 1510562,
    "end": 1518818,
    "text": "というのも、ミドルウェアはエッジで動作しており、これがすべての問題を引き起こしているからだ。"
  },
  {
    "start": 1518994,
    "end": 1528962,
    "text": "ミドルウェアの名前を変更し、その前にアンダースコアを追加します。"
  },
  {
    "start": 1529106,
    "end": 1533466,
    "text": "これもまた、30日を過ぎるとセッションが維持されなくなることを意味する。"
  },
  {
    "start": 1533578,
    "end": 1536280,
    "text": "ユーザーは30日後にロックアウトされます。"
  },
  {
    "start": 1536410,
    "end": 1537772,
    "text": "これは大したことではない。"
  },
  {
    "start": 1537836,
    "end": 1544652,
    "text": "このバグが修正された後、次の認証バージョンを更新することができます。"
  },
  {
    "start": 1544716,
    "end": 1548028,
    "text": "その後、このミドルウェアを入れ直せばうまくいくはずだ。"
  },
  {
    "start": 1548084,
    "end": 1549880,
    "text": "とりあえず、これを無効にする。"
  },
  {
    "start": 1550220,
    "end": 1553000,
    "text": "では、グーグル・ログインを追加しよう。"
  },
  {
    "start": 1553500,
    "end": 1561052,
    "text": "次のauthのドキュメントでは、これらの異なる認証プロバイダoauthに関する別のセクションがあります。"
  },
  {
    "start": 1561156,
    "end": 1564374,
    "text": "以下にいくつか例を挙げるが、実際にはもっとたくさんある。"
  },
  {
    "start": 1564492,
    "end": 1569682,
    "text": "クールなのは、一度次のオフの設定をすれば、好きなだけ追加できることだ。"
  },
  {
    "start": 1569746,
    "end": 1575034,
    "text": "次のオフでは、それらがすべて連動し、ユーザーデータが重複しないように注意する。"
  },
  {
    "start": 1575162,
    "end": 1582218,
    "text": "また、バックエンドのロジックもすべて引き受けてくれる。なぜなら、これを動作させるには、実際にはかなりの数のステップが必要だからだ。"
  },
  {
    "start": 1582274,
    "end": 1584338,
    "text": "次のオフは彼らの面倒を見る。"
  },
  {
    "start": 1584434,
    "end": 1590314,
    "text": "例えばGoogleのサーバーに必要なリクエストを送信し、レスポンスを処理する、といった具合だ。"
  },
  {
    "start": 1590362,
    "end": 1592468,
    "text": "あまり多くのことをする必要はない。"
  },
  {
    "start": 1592634,
    "end": 1594584,
    "text": "まずはグーグル・ログインから始めよう。"
  },
  {
    "start": 1594752,
    "end": 1600912,
    "text": "これを動作させるには、Google IDとGoogleシークレットが必要だ。"
  },
  {
    "start": 1601056,
    "end": 1606512,
    "text": "そのために、コンソール・ドット・クラウド・ドット・グーグル・ドット・コムの下にあるグーグル・クラウド・コンソールにアクセスする。"
  },
  {
    "start": 1606616,
    "end": 1607712,
    "text": "これは無料だ。"
  },
  {
    "start": 1607816,
    "end": 1618140,
    "text": "どのOauthクライアントでも、それがGoogleであろうとFacebookであろうとGitHubであろうと、これを機能させるためにはそのプラットフォーム上に何らかのアプリをセットアップしなければならない。"
  },
  {
    "start": 1618890,
    "end": 1623110,
    "text": "ここで私たちがやりたいのは、新しいプロジェクトを作ることだ。"
  },
  {
    "start": 1624130,
    "end": 1628362,
    "text": "5つのチュートリアルの次とでも言おうか。"
  },
  {
    "start": 1628426,
    "end": 1631082,
    "text": "繰り返しになるが、もちろん名前はあなた次第だ。"
  },
  {
    "start": 1631266,
    "end": 1635910,
    "text": "私は組織を持っていないので、これは無組織のままにしている。"
  },
  {
    "start": 1636290,
    "end": 1647810,
    "text": "このプロジェクトを作成し、しばらく待ってから、終了後に「プロジェクトを選択」をクリックします。"
  },
  {
    "start": 1647970,
    "end": 1648586,
    "text": "オーケー。"
  },
  {
    "start": 1648658,
    "end": 1650922,
    "text": "そして、ナビゲーション・メニューのここをクリックする。"
  },
  {
    "start": 1651026,
    "end": 1656394,
    "text": "APIとサービスの認証情報はこちら。"
  },
  {
    "start": 1656442,
    "end": 1661770,
    "text": "まずOauthの同意画面に行き、これを設定する。"
  },
  {
    "start": 1661930,
    "end": 1663050,
    "text": "ただついていくだけだ。"
  },
  {
    "start": 1663130,
    "end": 1670002,
    "text": "私たちのチームだけでなく、誰もがサインインできるように、このアプリを社外でも使えるようにしたい。"
  },
  {
    "start": 1670146,
    "end": 1683972,
    "text": "チュートリアルの次に、このアプリに名前を付けなければならない。"
  },
  {
    "start": 1684076,
    "end": 1688360,
    "text": "ここで、利用可能な電子メールを選択する。"
  },
  {
    "start": 1688940,
    "end": 1698956,
    "text": "重要なのは、アプリのロゴを設定しないことだ。なぜなら、アプリのロゴを追加するとすぐに、アプリを公開する前にGoogleのチームによる検証が必要になるからだ。"
  },
  {
    "start": 1699068,
    "end": 1704822,
    "text": "アプリのロゴを設定しなければ、すぐに公開して本番で使えるようにすればいい。"
  },
  {
    "start": 1704966,
    "end": 1709862,
    "text": "ここでは、ウェブサイト、プライバシーポリシー、利用規約などへのリンクを追加することができます。"
  },
  {
    "start": 1709966,
    "end": 1712854,
    "text": "オーソライズド・ドメインは必要ないと思う。"
  },
  {
    "start": 1712942,
    "end": 1721610,
    "text": "連絡先は、info@codinginfloor.com、Gmailアドレスでもかまいません。"
  },
  {
    "start": 1721950,
    "end": 1724130,
    "text": "そして保存をクリックして続ける。"
  },
  {
    "start": 1724670,
    "end": 1727190,
    "text": "そして、必要なスコープを追加しなければならない。"
  },
  {
    "start": 1727270,
    "end": 1737720,
    "text": "実際に必要なのは、プロフィール画像や名前など、ログインしたユーザーのプロフィール情報を含む、一番上の2つのスコープだけです。"
  },
  {
    "start": 1738140,
    "end": 1743680,
    "text": "また、機密情報ではないので、使用するのに特別なパーミッションは必要ない。"
  },
  {
    "start": 1744180,
    "end": 1750468,
    "text": "Google Driveのアカウントにアクセスするようなことはしたくないので、機密性の高いスコープは必要ない。"
  },
  {
    "start": 1750604,
    "end": 1752840,
    "text": "彼らのプロフィール情報が欲しいだけなのだ。"
  },
  {
    "start": 1753700,
    "end": 1754920,
    "text": "保存して続ける。"
  },
  {
    "start": 1755740,
    "end": 1758016,
    "text": "テストユーザーは必要ない。"
  },
  {
    "start": 1758148,
    "end": 1759872,
    "text": "保存してもう一度続ける。"
  },
  {
    "start": 1760056,
    "end": 1770128,
    "text": "すべて確認したら、ダッシュボードに戻るをクリックし、コンテンツ画面を設定する。"
  },
  {
    "start": 1770264,
    "end": 1772176,
    "text": "次に認証情報をクリックする。"
  },
  {
    "start": 1772328,
    "end": 1774608,
    "text": "ここでAPIキーを取得する。"
  },
  {
    "start": 1774704,
    "end": 1780048,
    "text": "クレデンシャルの作成をクリックすると、APIキーではなくOauthクライアントIDが必要になる。"
  },
  {
    "start": 1780224,
    "end": 1787620,
    "text": "OauthクライアントIDのアプリケーション・タイプはウェブ・アプリケーションで、ここでも名前を付ける。"
  },
  {
    "start": 1788080,
    "end": 1807360,
    "text": "次に、5つのチュートリアルサイト、たとえばauthorized redirect URL'sを追加する必要がある。Google経由でログインすると、自分のサーバーのページにリダイレクトされ、このページがプロフィール情報を読み取るからだ。"
  },
  {
    "start": 1807480,
    "end": 1813294,
    "text": "これはnext offで処理されるが、開発では特定のURLにリダイレクトしなければならない。"
  },
  {
    "start": 1813422,
    "end": 1815518,
    "text": "これはローカルホストにあるんだよね？"
  },
  {
    "start": 1815654,
    "end": 1830542,
    "text": "HTTPのsコロンスラッシュスラッシュlocalhostコロン3000コールバックGoogleのAPIなし。"
  },
  {
    "start": 1830646,
    "end": 1832850,
    "text": "スペルを間違えないように。"
  },
  {
    "start": 1833230,
    "end": 1844970,
    "text": "プロジェクトの最初のほうで、API Authとsketch allルートと同じフォルダの下に、このルートtのファイルをセットアップしたのを覚えている。"
  },
  {
    "start": 1845270,
    "end": 1848038,
    "text": "これはこのコールバックURLを処理する。"
  },
  {
    "start": 1848174,
    "end": 1850630,
    "text": "これは、この会社が扱っていることのひとつに過ぎない。"
  },
  {
    "start": 1850750,
    "end": 1857078,
    "text": "これはさまざまなことを処理するもので、ひとつはさまざまなOauthプロバイダーのコールバックURLだ。"
  },
  {
    "start": 1857214,
    "end": 1864198,
    "text": "もちろん本番では、localhostではなく、実際の本番ドメインに別のURLを追加する必要がある。"
  },
  {
    "start": 1864334,
    "end": 1866330,
    "text": "今はこれがすべてだ。"
  },
  {
    "start": 1866840,
    "end": 1872600,
    "text": "これを作成し、最後にクライアントIDとクライアント・シークレットを取得する。"
  },
  {
    "start": 1872720,
    "end": 1878672,
    "text": "同じ環境変数名を使いたいので、次のオフのドキュメントをもう一度見てみよう。"
  },
  {
    "start": 1878736,
    "end": 1880128,
    "text": "最初にこれをコピーした。"
  },
  {
    "start": 1880264,
    "end": 1895338,
    "text": "この2つをenvファイルに追加し、クライアントIDに置き換える。"
  },
  {
    "start": 1895514,
    "end": 1910610,
    "text": "ここでも引用符で囲み、クライアントシークレットを入力する。"
  },
  {
    "start": 1910770,
    "end": 1916590,
    "text": "あとは、このグーグル・プロバイダーをof tのファイルに追加するだけだ。"
  },
  {
    "start": 1917050,
    "end": 1922084,
    "text": "このプロジェクトでは、グーグル・プロバイダーを追加したい。"
  },
  {
    "start": 1922132,
    "end": 1930920,
    "text": "この場合も、手動でインポートする必要があり、インポートは次のようになる。"
  },
  {
    "start": 1931460,
    "end": 1934388,
    "text": "クールなのは、これでうまくいくことだ。"
  },
  {
    "start": 1934524,
    "end": 1942760,
    "text": "複雑なバックエンドロジック、Googleアカウントとのやり取り、プロフィール情報の読み取りは、すべてnext authが代行してくれる。"
  },
  {
    "start": 1943100,
    "end": 1954824,
    "text": "これを保存して開発モードでプロジェクトを実行すると、localhostの3000にアクセスできるはずです。"
  },
  {
    "start": 1954872,
    "end": 1965928,
    "text": "このURLに手動でアクセスし、API認証サインインを行い、Googleログインボタンのあるサインイン画面を見つける必要がある。"
  },
  {
    "start": 1965984,
    "end": 1968984,
    "text": "クリックすると、クールでしょう？"
  },
  {
    "start": 1969112,
    "end": 1975070,
    "text": "ここでエラーが出る場合は、Google CloudコンソールのリダイレクトURLが誤っている可能性があります。"
  },
  {
    "start": 1975200,
    "end": 1978282,
    "text": "それが正しいかどうか、もう一度確認してください。"
  },
  {
    "start": 1978466,
    "end": 1987658,
    "text": "そして、Googleアカウントでログインし、これを確認すると、アプリにリダイレクトされ、ログインが完了した。"
  },
  {
    "start": 1987754,
    "end": 1997270,
    "text": "このページでは、ユーザーが実際にログインしていることを示すものはまだ何もありませんが、データベースとアカウントにセッションが表示されているはずです。"
  },
  {
    "start": 1997690,
    "end": 2005860,
    "text": "別のコンソールを開くか、rundevを一旦キャンセルしてNPXを実行する。"
  },
  {
    "start": 2005980,
    "end": 2010068,
    "text": "Prismaのクールな機能であるPrisma Studio。"
  },
  {
    "start": 2010204,
    "end": 2014828,
    "text": "localhost 5555でPrisma Studioが開きます。"
  },
  {
    "start": 2014964,
    "end": 2017500,
    "text": "ここでデータベースのテーブルを見ることができる。"
  },
  {
    "start": 2017660,
    "end": 2021284,
    "text": "ここには新しいユーザー、セッション、アカウントがあります。"
  },
  {
    "start": 2021452,
    "end": 2023572,
    "text": "ログインしたばかりのユーザーだ。"
  },
  {
    "start": 2023636,
    "end": 2044912,
    "text": "グーグルアカウントから名前、メールアドレス、そして画像も読み取り、これに必要な情報を含むグーグルアカウントのアカウント行と、このユーザーが実際にログインしていることをサーバーに伝えるセッションをつなげる。"
  },
  {
    "start": 2044976,
    "end": 2050660,
    "text": "私たちのブラウザには、基本的にセッションの鍵となるクーガーがある。"
  },
  {
    "start": 2051240,
    "end": 2058098,
    "text": "このページのデザインが気に入らない場合は、カスタムページを設定することもできます。"
  },
  {
    "start": 2058194,
    "end": 2060090,
    "text": "これはドキュメントに記載されている。"
  },
  {
    "start": 2060170,
    "end": 2061562,
    "text": "ここではやらない。"
  },
  {
    "start": 2061706,
    "end": 2069306,
    "text": "後日、GitHubやEメールログインなどのログインオプションを追加すると、自動的にこのページに追加されます。"
  },
  {
    "start": 2069418,
    "end": 2071834,
    "text": "繰り返しになるが、このページを置き換えることもできる。"
  },
  {
    "start": 2071882,
    "end": 2073834,
    "text": "ドキュメントに記載されている。"
  },
  {
    "start": 2074002,
    "end": 2076642,
    "text": "GitHubのログインも追加しましょう。"
  },
  {
    "start": 2076746,
    "end": 2087247,
    "text": "GitHubのアカウントにアクセスして、代名詞を設定するのを忘れていたことに気づきました。念のために言っておきますが、代名詞はasyncとawaitです。"
  },
  {
    "start": 2087343,
    "end": 2090007,
    "text": "これは私たちがここにいる目的ではない。"
  },
  {
    "start": 2090143,
    "end": 2097979,
    "text": "ここで、開発者設定に移動します。"
  },
  {
    "start": 2098679,
    "end": 2104927,
    "text": "ここではOAuthアプリを設定することができ、インターフェイスはGoogleよりもずっとシンプルだ。"
  },
  {
    "start": 2105063,
    "end": 2107047,
    "text": "ここでも、アプリに名前をつけなければならない。"
  },
  {
    "start": 2107183,
    "end": 2112254,
    "text": "次のチュートリアルのホームページURL。"
  },
  {
    "start": 2112342,
    "end": 2124010,
    "text": "ここで、我々は実際にダミーの説明は必須ではありませんとして、チュートリアルv five.comの次のために今、私たちが望むものを使用することができます。"
  },
  {
    "start": 2124470,
    "end": 2128102,
    "text": "ここでは、Googleで追加したのと同じコールバックURLを追加する。"
  },
  {
    "start": 2128166,
    "end": 2136864,
    "text": "ただ、最後の部分はGitHubに変更する必要があります。これは、本番環境では次の認証で再びGitHubコールバックを行うためです。"
  },
  {
    "start": 2136912,
    "end": 2144032,
    "text": "本番用のURLに変更するか、開発用と本番用の2つのアプリをセットアップする必要があります。"
  },
  {
    "start": 2144136,
    "end": 2146100,
    "text": "これは通常、あなたがやりたいことだ。"
  },
  {
    "start": 2146400,
    "end": 2148740,
    "text": "そして、このアプリケーションを登録する。"
  },
  {
    "start": 2149200,
    "end": 2157420,
    "text": "クライアントIDをここにコピーして、プロジェクトのenvファイルに戻る。"
  },
  {
    "start": 2158000,
    "end": 2160560,
    "text": "これはGoogleの認証IDです。"
  },
  {
    "start": 2160640,
    "end": 2170486,
    "text": "次に、GitHub のアイデアを認証する必要があります。これはこのクライアントのアイデアで、GitHub のシークレットを認証する必要があります。"
  },
  {
    "start": 2170598,
    "end": 2178810,
    "text": "正しく名前をつければ、これらの変数はnext authによって自動的にピックアップされるからだ。"
  },
  {
    "start": 2179110,
    "end": 2184930,
    "text": "GitHub のシークレットは、新しいクライアントシークレットを作成することで取得します。"
  },
  {
    "start": 2187390,
    "end": 2196220,
    "text": "これをここにコピーして、とりあえずこれで終了。"
  },
  {
    "start": 2196520,
    "end": 2207660,
    "text": "Tのファイルに戻り、GitHubプロバイダーをインポートし、プロバイダー配列にGitHubを追加します。"
  },
  {
    "start": 2208360,
    "end": 2213808,
    "text": "このように、私たちのページに新しい登録オプションが追加された。"
  },
  {
    "start": 2213904,
    "end": 2216560,
    "text": "これでGitHubにもサインインできるようになりました。"
  },
  {
    "start": 2216720,
    "end": 2219648,
    "text": "コーディングとフローのGitHubアカウントにログインしている。"
  },
  {
    "start": 2219704,
    "end": 2222784,
    "text": "これが私たちのアプリにログインできるものです。"
  },
  {
    "start": 2222872,
    "end": 2224632,
    "text": "ひとつだけはっきりさせておきたいことがある。"
  },
  {
    "start": 2224736,
    "end": 2231944,
    "text": "私たちのアプリのユーザーは、実際にはGoogleやGitHubのアカウントとはつながっていません。"
  },
  {
    "start": 2232032,
    "end": 2237088,
    "text": "私たちはこのデータをログインにのみ使用し、私たちのウェブサイト上でセッションを作成します。"
  },
  {
    "start": 2237184,
    "end": 2240696,
    "text": "GitHubやGoogleとの継続的なつながりはない。"
  },
  {
    "start": 2240808,
    "end": 2248316,
    "text": "彼らは基本的に、ユーザーにサインインさせて、オーケー、このユーザーは本当に本人です、と伝えるだけの責任がある。"
  },
  {
    "start": 2248408,
    "end": 2250332,
    "text": "以下は彼のプロフィールである。"
  },
  {
    "start": 2250476,
    "end": 2252668,
    "text": "このデータは、好きなように使ってくれ。"
  },
  {
    "start": 2252844,
    "end": 2260036,
    "text": "このことを明確にするために、フローでコーディングとしてログインすると、アプリに2人目のユーザーができるはずです。"
  },
  {
    "start": 2260188,
    "end": 2260548,
    "text": "もう一度言う。"
  },
  {
    "start": 2260604,
    "end": 2262236,
    "text": "プリズマスタジオをオープンしよう"
  },
  {
    "start": 2262308,
    "end": 2266308,
    "text": "2つ目のアカウントはGitHubだ。"
  },
  {
    "start": 2266404,
    "end": 2271680,
    "text": "私が今驚いているのは、これが同じユーザーIDでつながっていることだ。"
  },
  {
    "start": 2272260,
    "end": 2277834,
    "text": "これは別のメールアドレスなので、別のユーザーに接続されているのだろうと思った。"
  },
  {
    "start": 2278012,
    "end": 2287518,
    "text": "セッションがすでにアクティブになっていたので、このアカウントを同じユーザーに接続したようです。"
  },
  {
    "start": 2287694,
    "end": 2291654,
    "text": "このグーグルのメールアドレスを持つユーザーは1人だけです。"
  },
  {
    "start": 2291822,
    "end": 2295830,
    "text": "このユーザーは現在、GitHubとGoogleに接続している。"
  },
  {
    "start": 2295990,
    "end": 2300918,
    "text": "別のアカウントを作るのかと思っていたが、どうやらこういう仕組みらしい。"
  },
  {
    "start": 2301014,
    "end": 2307964,
    "text": "また、別のグーグルアカウントにログインして、2人目のユーザーを作成してみることもできる。"
  },
  {
    "start": 2308012,
    "end": 2312280,
    "text": "ロックアウトされるように、既存のセッションを破棄させてください。"
  },
  {
    "start": 2313380,
    "end": 2317280,
    "text": "このレコードはPrisma Studioで削除することができます。"
  },
  {
    "start": 2318260,
    "end": 2325960,
    "text": "もう一度、slash API auth sign inにアクセスして、ここにある別のGoogleアカウントにログインする。"
  },
  {
    "start": 2326660,
    "end": 2331340,
    "text": "クールなのは、OAuthプロバイダーのセキュリティ機能もすべて利用できることだ。"
  },
  {
    "start": 2331380,
    "end": 2335524,
    "text": "例えば、私はグーグルアカウントで2段階認証を有効にしている。"
  },
  {
    "start": 2335652,
    "end": 2341400,
    "text": "ログインする前に新しいマシンでこれをやらなければならない。"
  },
  {
    "start": 2342620,
    "end": 2343360,
    "text": "続ける。"
  },
  {
    "start": 2344100,
    "end": 2347204,
    "text": "これで2つ目の口座ができたことになる。"
  },
  {
    "start": 2347372,
    "end": 2349468,
    "text": "ページを更新してみよう。"
  },
  {
    "start": 2349604,
    "end": 2354164,
    "text": "ええ、そして今、私たちは実際に別のメールアドレスを持つ2番目のユーザを持っています。"
  },
  {
    "start": 2354292,
    "end": 2355924,
    "text": "赤外線コーディングとフロー。"
  },
  {
    "start": 2356092,
    "end": 2360200,
    "text": "こちらは画像はありませんが、別のアカウントに接続しています。"
  },
  {
    "start": 2361270,
    "end": 2369022,
    "text": "よし、もうひとつ、次のオフオブジェクトに行こう。"
  },
  {
    "start": 2369126,
    "end": 2381734,
    "text": "ここでは、ログインボタンの色など、さまざまな値を設定することができるJavaScriptオブジェクトを取るテーマ値を追加します。"
  },
  {
    "start": 2381902,
    "end": 2390248,
    "text": "私はただロゴをスラッシュロゴのpngに設定したいだけで、このファイルはここのpublicフォルダにあります。"
  },
  {
    "start": 2390384,
    "end": 2391420,
    "text": "ロゴのpng。"
  },
  {
    "start": 2392320,
    "end": 2403152,
    "text": "これを保存し、再度API認証サインインのログインページを開くと、ロゴが表示される。"
  },
  {
    "start": 2403336,
    "end": 2412966,
    "text": "また、追加の認証プロバイダーが必要な場合は、ドキュメントを参照してください。"
  },
  {
    "start": 2413088,
    "end": 2417282,
    "text": "oauth providersページでアプリをセットアップするだけだ。"
  },
  {
    "start": 2417426,
    "end": 2425474,
    "text": "次に、ログインするためのボタンと、現在ログインしているユーザーのプロフィール画像などを表示する方法を追加しよう。"
  },
  {
    "start": 2425562,
    "end": 2428234,
    "text": "私たちはまず、サーバーサイドですべてを行うことから始めます。"
  },
  {
    "start": 2428322,
    "end": 2431890,
    "text": "これが、このサインイン機能が奇妙に見える理由だ。"
  },
  {
    "start": 2432050,
    "end": 2434138,
    "text": "ボタンを使うのではなく、フォームを使うのだ。"
  },
  {
    "start": 2434194,
    "end": 2436402,
    "text": "このフォームはサーバーアクションを実行します。"
  },
  {
    "start": 2436546,
    "end": 2442444,
    "text": "この利点は、JavaScriptがなくてもサーバーコンポーネントで動作することだ。"
  },
  {
    "start": 2442602,
    "end": 2446020,
    "text": "プロジェクトに戻って設定しよう。"
  },
  {
    "start": 2446520,
    "end": 2452640,
    "text": "プロジェクトで、すでにスタイリング・コードに追加したナバーTsXファイルを開いてみよう。"
  },
  {
    "start": 2452760,
    "end": 2458528,
    "text": "ここでは、次のJSアプリ・ルーターで、現在ログインしているユーザーをデフォルトで表示したい。"
  },
  {
    "start": 2458624,
    "end": 2461712,
    "text": "このコンポーネントはサーバー・コンポーネントですよね？"
  },
  {
    "start": 2461896,
    "end": 2465928,
    "text": "つまり、この関数を非同期関数にして、ここにデータを取り込むことができる。"
  },
  {
    "start": 2466064,
    "end": 2474200,
    "text": "ここでは、const session equals await offで実行できる、現在ログインしているユーザーを取得したい。"
  },
  {
    "start": 2474540,
    "end": 2478180,
    "text": "このオフ機能は、オフTのファイルから来ている。"
  },
  {
    "start": 2478220,
    "end": 2479640,
    "text": "私たちはこれをここに輸出している。"
  },
  {
    "start": 2479980,
    "end": 2483900,
    "text": "こうすることで、ログインしているユーザーの現在のセッションを取得することができる。"
  },
  {
    "start": 2484060,
    "end": 2489360,
    "text": "ユーザーがログインしている場合はこの値が設定され、ログインしていない場合はnullが設定される。"
  },
  {
    "start": 2490020,
    "end": 2499080,
    "text": "ここで、セッション・ユーザーの下にユーザーを見つけることができる。セッション・ユーザーは、ユーザーがログインしているかどうかによって、定義されているかどうかが決まる。"
  },
  {
    "start": 2499480,
    "end": 2507736,
    "text": "サーバーサイドでセッションをフェッチする利点は、ページが開かれるとすぐにこのデータが利用可能になることだ。"
  },
  {
    "start": 2507928,
    "end": 2512384,
    "text": "をクリックすると、右上のナビバーに表示されます。"
  },
  {
    "start": 2512432,
    "end": 2516120,
    "text": "後で、このページがサーバーからロードされ次第、すぐに。"
  },
  {
    "start": 2516240,
    "end": 2529506,
    "text": "セッションがロードされる前に、サーバーからページが返されることはないからだ。"
  },
  {
    "start": 2529618,
    "end": 2533282,
    "text": "もうひとつの選択肢は、クライアント側でユーザーに負荷をかけることだ。"
  },
  {
    "start": 2533426,
    "end": 2535610,
    "text": "こうすることで、まずページをロードすることができる。"
  },
  {
    "start": 2535730,
    "end": 2549266,
    "text": "そうすると、右上隅にしばらく何も表示されなくなるか、YouTubeのようにプレースホルダーのようなものが表示され、数百ミリ秒後にユーザーがポップアップ表示される。"
  },
  {
    "start": 2549378,
    "end": 2552258,
    "text": "クライアント側のアプローチにも利点がある。"
  },
  {
    "start": 2552314,
    "end": 2556394,
    "text": "これらの利点が何なのか、そしてそれをどのように実行に移せるのかについては、後ほど説明する。"
  },
  {
    "start": 2556522,
    "end": 2559442,
    "text": "ここでは、サーバー側の認証に焦点を当てる。"
  },
  {
    "start": 2559586,
    "end": 2571826,
    "text": "では、ナビバーで現在ログインしているユーザーを取得し、そのユーザーがログインしているかどうかによって、私が用意した別のコンポーネントであるユーザー・ボタンを表示させます。"
  },
  {
    "start": 2571938,
    "end": 2576850,
    "text": "これはドロップダウンメニューで、現在ログインしているユーザーの画像やその他のものを表示します。"
  },
  {
    "start": 2576890,
    "end": 2586952,
    "text": "もしユーザーがログインしていない場合は、サインイン・ボタンを表示したい。"
  },
  {
    "start": 2587056,
    "end": 2591536,
    "text": "この部分は同じコンポーネントに入れることができる。"
  },
  {
    "start": 2591688,
    "end": 2595420,
    "text": "サインイン・ボタンという関数を作る。"
  },
  {
    "start": 2598360,
    "end": 2601180,
    "text": "ここではフォームを返したい。"
  },
  {
    "start": 2601520,
    "end": 2609286,
    "text": "繰り返しますが、onclickリスナーを持つ通常のボタンは使えません。なぜなら、onclickにはJavaScriptが必要で、これはサーバー・コンポーネントでは動作しないからです。"
  },
  {
    "start": 2609408,
    "end": 2616390,
    "text": "フォームやフォーム送信ボタンはJavaScriptを必要としないため、サーバーコンポーネントで使用することができます。"
  },
  {
    "start": 2616890,
    "end": 2623670,
    "text": "このフォームに、非同期関数の形で次のようなアクションを提供する。"
  },
  {
    "start": 2625050,
    "end": 2626818,
    "text": "とりあえず、ここは空にしておこう。"
  },
  {
    "start": 2626994,
    "end": 2635818,
    "text": "このフォームタグを閉じ、下に閉じタグを追加して、サーバーアクションをゼロから説明します。"
  },
  {
    "start": 2635874,
    "end": 2642798,
    "text": "次回のJ's job boardのチュートリアルでは、このチュートリアルをご覧になりたい方のために、右上にこのチュートリアルへのリンクを貼ります。"
  },
  {
    "start": 2642974,
    "end": 2645770,
    "text": "ここで誤字があります。"
  },
  {
    "start": 2646670,
    "end": 2650670,
    "text": "さて、これがフォームで、ここにボタンを置くことができる。"
  },
  {
    "start": 2650830,
    "end": 2656950,
    "text": "これには、すでに用意した小屋のcnコンポーネントの一つである大文字のボタンを使います。"
  },
  {
    "start": 2657070,
    "end": 2662214,
    "text": "このボタンはすでにスタイルが設定されているので、UIフォルダからのインポートです。"
  },
  {
    "start": 2662342,
    "end": 2672200,
    "text": "ここでもonclicklistenersを使うことはできませんが、JavaScriptがなくてもサーバーアクションを実行するフォーム送信ボタンを使うことができます。"
  },
  {
    "start": 2672580,
    "end": 2674800,
    "text": "このボタンはサインインと表示されます。"
  },
  {
    "start": 2675540,
    "end": 2677988,
    "text": "そして、このサーバー・アクションをここに埋める。"
  },
  {
    "start": 2678124,
    "end": 2684900,
    "text": "繰り返しますが、ドキュメントではこのようにuse serverディレクティブを使ってサーバーアクションにしています。"
  },
  {
    "start": 2685020,
    "end": 2693948,
    "text": "別のチュートリアルでは、サーバー・アクションをゼロから説明した。"
  },
  {
    "start": 2694084,
    "end": 2695724,
    "text": "ここでのインポートが正しいことを確認する。"
  },
  {
    "start": 2695772,
    "end": 2705344,
    "text": "この関数はrファイルからインポートする必要があり、クライアントで動作する別の関数があるので、これを呼び出す必要がある。"
  },
  {
    "start": 2705472,
    "end": 2721064,
    "text": "もちろん、フォームを使う代わりに、先ほど開いたURLにAPI Authサインへのリンクを貼ることもできる。"
  },
  {
    "start": 2721192,
    "end": 2727678,
    "text": "ドキュメントにあるサーバー・アクションが使われていることに気づくまで、私もそうしてきた。"
  },
  {
    "start": 2727784,
    "end": 2731418,
    "text": "サーバーアクションを使う利点は2つある。"
  },
  {
    "start": 2731554,
    "end": 2739698,
    "text": "例えば、別のURLでカスタムログインページを設定した場合、自動的に正しいURLにリダイレクトされます。"
  },
  {
    "start": 2739794,
    "end": 2750706,
    "text": "もう1つの利点は、ログインボタンにマウスカーソルを置くと、これがリンクの場合、このAPI URLへのプレビューが表示されることです。"
  },
  {
    "start": 2750858,
    "end": 2754358,
    "text": "サーバーアクションを使用すると、このリンクプレビューは表示されません。"
  },
  {
    "start": 2754474,
    "end": 2759214,
    "text": "普通のボタンのように見えるので、ユーザーには少し良く見えると私は思う。"
  },
  {
    "start": 2759302,
    "end": 2762010,
    "text": "また、ここでリンクを使っても間違いではない。"
  },
  {
    "start": 2762430,
    "end": 2771250,
    "text": "とにかく、これがサインイン・ボタンであり、これを十分な内部でレンダリングし、ユーザーが定義されているかどうかをチェックしたい。"
  },
  {
    "start": 2771670,
    "end": 2785790,
    "text": "もし「はい」なら、先ほどお見せしたユーザー・ボタンをレンダリングし、そこにユーザーを渡す必要があります。もし「いいえ」なら、デザイン・イン・ボタンをレンダリングし、デザイン・イン・ページに移動します。"
  },
  {
    "start": 2786370,
    "end": 2791594,
    "text": "これを保存して、もう一度ウェブサイトを開いてみよう。"
  },
  {
    "start": 2791762,
    "end": 2793290,
    "text": "これがドロップダウンメニューだ。"
  },
  {
    "start": 2793410,
    "end": 2796442,
    "text": "現在、このユーザーにはプロフィール画像がありません。"
  },
  {
    "start": 2796546,
    "end": 2801250,
    "text": "プロフィール画像を持つユーザーアカウントでログインした場合、現在エラーが表示されます。"
  },
  {
    "start": 2801330,
    "end": 2803850,
    "text": "慌てないでください、すぐに直します。"
  },
  {
    "start": 2803970,
    "end": 2809276,
    "text": "このエラーをお見せするにはログアウトする必要がありますが、ログアウトボタンはまだありません。"
  },
  {
    "start": 2809418,
    "end": 2814920,
    "text": "プロジェクトに戻って、この下のユーザー・ボタンに入りましょう。"
  },
  {
    "start": 2814960,
    "end": 2818408,
    "text": "ログアウト機能を追加するために、もうひとつ残しておいた。"
  },
  {
    "start": 2818504,
    "end": 2835460,
    "text": "これを削除し、再びサーバー・コンポーネントにする。クライアント・コンポーネントにする必要がないように、ここでもフォームを使うことができ、非同期の矢印関数の形で別のサーバー・アクションを渡す。"
  },
  {
    "start": 2836270,
    "end": 2847770,
    "text": "serverディレクティブを使う必要がある。そして、authファイルからのインポートであるawait sign outを再び呼び出す。"
  },
  {
    "start": 2849110,
    "end": 2858430,
    "text": "フォームタグを閉じてボタンの下に置き、このボタンにもsubmitタイプを追加する。"
  },
  {
    "start": 2858590,
    "end": 2860278,
    "text": "このフォームを提出する。"
  },
  {
    "start": 2860414,
    "end": 2868710,
    "text": "これは小文字のbボタンです。これはドロップダウンメニューの一部なので、ボタンのスタイリングは必要ないからです。"
  },
  {
    "start": 2869170,
    "end": 2873186,
    "text": "変更が適用されたことを確認するために、ページを更新してください。"
  },
  {
    "start": 2873338,
    "end": 2881546,
    "text": "これでログアウトできるようになり、セッションのサインアウトは破棄され、ユーザーボタンの代わりにサインインボタンが表示されるようになりました。"
  },
  {
    "start": 2881618,
    "end": 2882314,
    "text": "完璧だ。"
  },
  {
    "start": 2882482,
    "end": 2887098,
    "text": "ちなみに、このページのズームレベルを変えたので、少し歪んで見えるだけである。"
  },
  {
    "start": 2887154,
    "end": 2889550,
    "text": "通常、このテキストは真ん中にあるはずだ。"
  },
  {
    "start": 2890060,
    "end": 2905012,
    "text": "というのも、このURLはまだホワイトリストに登録されていないため、このようなエラーが表示されるからです。"
  },
  {
    "start": 2905156,
    "end": 2916988,
    "text": "ユーザーボタンでは、次の画像にこの画像を表示するので、次の設定ファイルで、これらの画像を読み込むことができるURLを許可しなければならないからです。"
  },
  {
    "start": 2917044,
    "end": 2918280,
    "text": "そこへ行こう"
  },
  {
    "start": 2918700,
    "end": 2928840,
    "text": "ここでこのブロックに入り、画像を書き換え、列の中括弧、リモートパターン、列の角括弧を使用する。"
  },
  {
    "start": 2929220,
    "end": 2937508,
    "text": "ここに、中かっこで囲んだホスト名を持つオブジェクトを置く。"
  },
  {
    "start": 2937604,
    "end": 2949460,
    "text": "ここに表示されているURLが何であれ、おそらく私が持っているのと同じものだろう。lh three dot googleusercontent.comここにこれを入れ、他には何も入れず、これを保存する。"
  },
  {
    "start": 2949920,
    "end": 2954600,
    "text": "その後、開発モードでアプリを再起動する。"
  },
  {
    "start": 2954720,
    "end": 2957816,
    "text": "z を制御して実行を停止する。"
  },
  {
    "start": 2958008,
    "end": 2965060,
    "text": "それからnpmを実行し、もう一度devを実行してページを更新すれば、うまくいくはずだ。"
  },
  {
    "start": 2965440,
    "end": 2966072,
    "text": "多田"
  },
  {
    "start": 2966136,
    "end": 2968740,
    "text": "これでプロフィール画像が表示された。"
  },
  {
    "start": 2969120,
    "end": 2977248,
    "text": "なぜなら、これらのURLから画像を読み込むことを許可しなければならない理由があるからだ。"
  },
  {
    "start": 2977344,
    "end": 2987344,
    "text": "というのも、次に使用する画像は自動的にリサイズされるため、計算時間がかかり、ブラジルのコストがかかってしまうからだ。"
  },
  {
    "start": 2987432,
    "end": 2992528,
    "text": "無料でリサイズできる画像の数は決まっており、それを超えると有料になります。"
  },
  {
    "start": 2992624,
    "end": 3002252,
    "text": "問題は、このURLで画像のリサイズを許可してしまうと、理論上、他のユーザーが当ウェブサイトを使って画像のリサイズをしてしまう可能性があることだ。"
  },
  {
    "start": 3002376,
    "end": 3005716,
    "text": "正確な仕組みはわからないが、可能だということはわかる。"
  },
  {
    "start": 3005868,
    "end": 3013400,
    "text": "理想的には、ホスト名はあなたが所有するURLであるべきで、あなたのウェブサイト上で画像のサイズを変更できるのはあなただけです。"
  },
  {
    "start": 3013860,
    "end": 3024700,
    "text": "私が通常行っているのは、Googleのサーバーから直接画像を取得するのではなく、ユーザーがサインアップしたときに、自分の画像ストレージにアップロードすることです。"
  },
  {
    "start": 3024820,
    "end": 3032914,
    "text": "これは、追加のステップが必要なのと、次のオフに集中したいので、ここではやりたくなかったのですが、次回のJSコースでやります。"
  },
  {
    "start": 3033002,
    "end": 3040682,
    "text": "codinginflow.comのニュースレターで、このコースの詳細と最新情報をご覧ください。"
  },
  {
    "start": 3040786,
    "end": 3045874,
    "text": "そこで、このコースに関する最新情報を定期的にお送りし、コースが開講されたら、皆さんにお伝えします。"
  },
  {
    "start": 3045962,
    "end": 3052498,
    "text": "そう、このコースでは、実際のファイルストレージを実装し、ユーザーのプロフィール画像をそこにアップロードします。"
  },
  {
    "start": 3052594,
    "end": 3054146,
    "text": "ここではこのステップは省略する。"
  },
  {
    "start": 3054298,
    "end": 3064590,
    "text": "別の方法として、次の画像を使わず、このように通常のHTML画像タグを使う方法もあります。"
  },
  {
    "start": 3064670,
    "end": 3075526,
    "text": "つまり、このホスト名を追加する必要はなく、これはまだ機能しますが、フォールバックとしてこのアバター・プレースホルダーを使うことはできません。"
  },
  {
    "start": 3075678,
    "end": 3082890,
    "text": "そのため、ここでは次の画像を使いましたが、本番では通常、このような画像は入れたくないということを覚えておいてください。"
  },
  {
    "start": 3083470,
    "end": 3090230,
    "text": "自分のサーバーか、少なくとも自分だけがアクセスできるファイルストレージから画像をロードしたい。"
  },
  {
    "start": 3090390,
    "end": 3091654,
    "text": "さて、話はもういい。"
  },
  {
    "start": 3091742,
    "end": 3095374,
    "text": "今、私たちはすでに2つの異なるユーザーでログインしています。"
  },
  {
    "start": 3095422,
    "end": 3098974,
    "text": "フロント・ページでは、単純にこれらのユーザーのリストを表示したい。"
  },
  {
    "start": 3099062,
    "end": 3105750,
    "text": "この目的は、ユーザーデータをどこかに表示したい場合に、データベースからどのようにロードできるかを紹介することです。"
  },
  {
    "start": 3105870,
    "end": 3109846,
    "text": "後ほど、それぞれのユーザーのプロフィールページも作成します。"
  },
  {
    "start": 3109998,
    "end": 3120792,
    "text": "プロジェクトに戻り、ルートフォルダーにあるページTsXファイルを開きます。"
  },
  {
    "start": 3120976,
    "end": 3127088,
    "text": "繰り返しますが、これはサーバー・コンポーネントなので、これを非同期関数にして、ここにユーザーを取り込めばいいのです。"
  },
  {
    "start": 3127224,
    "end": 3128456,
    "text": "そうしよう"
  },
  {
    "start": 3128608,
    "end": 3139300,
    "text": "Const users は await Prisma.user.find many と等しく、これによりデータベースからすべてのユーザーが取得されます。"
  },
  {
    "start": 3141390,
    "end": 3149250,
    "text": "ここでは、単純に順序なしリストとしてレンダリングしたい。"
  },
  {
    "start": 3150150,
    "end": 3153422,
    "text": "ちなみに、このプロジェクトではもっときれいにセットアップした。"
  },
  {
    "start": 3153526,
    "end": 3162970,
    "text": "書式設定のショートカットを押せば、自動的に適切な順番にクラスが並び替えられる。"
  },
  {
    "start": 3163550,
    "end": 3169740,
    "text": "さて、ここで私たちはフェッチしたユーザーをUIエレメントにマッピングしたい。"
  },
  {
    "start": 3170400,
    "end": 3176500,
    "text": "各ユーザーを受け取り、各ユーザーに対してリスト項目をレンダリングする。"
  },
  {
    "start": 3177720,
    "end": 3182540,
    "text": "これは、データベースからのユニークなユーザーIDとなるキーが必要です。"
  },
  {
    "start": 3182920,
    "end": 3189180,
    "text": "各ユーザーのプロフィールページへのリンクが表示されます。"
  },
  {
    "start": 3190320,
    "end": 3198730,
    "text": "ここでは、スラッシュ、ユーザー・スラッシュ、ユーザー・アイデアの順にバックテキスト文字列を追加する。"
  },
  {
    "start": 3201470,
    "end": 3203090,
    "text": "このリンクを閉じる。"
  },
  {
    "start": 3203990,
    "end": 3208934,
    "text": "リンクのテキストにはユーザー名が表示されますが、未定義でもかまいません。"
  },
  {
    "start": 3208982,
    "end": 3218810,
    "text": "予備として、ユーザーとユーザーIDを表示し、クリックできるようにします。"
  },
  {
    "start": 3219390,
    "end": 3221490,
    "text": "リンクもスタイリッシュにしたい。"
  },
  {
    "start": 3222240,
    "end": 3226340,
    "text": "マウスカーソルをその上に置いたときに、アンダーラインを引きたいだけなんだ。"
  },
  {
    "start": 3227920,
    "end": 3234380,
    "text": "今、私たちのページを見てみると、フローリアン・ウォルターズが2人いる。"
  },
  {
    "start": 3235400,
    "end": 3236696,
    "text": "私の2つの異なるアカウント。"
  },
  {
    "start": 3236728,
    "end": 3239860,
    "text": "こちらはプロフィール画像があるが、こちらはない。"
  },
  {
    "start": 3240440,
    "end": 3247140,
    "text": "このページは、ユーザー・アイデア・ページtsxの下にすでに設定したものです。"
  },
  {
    "start": 3247590,
    "end": 3252910,
    "text": "繰り返しになるが、このパス・プレースホルダーについては、次回のJ'sビギナー・チュートリアルで説明する。"
  },
  {
    "start": 3252950,
    "end": 3255570,
    "text": "これはここでは取り上げない。"
  },
  {
    "start": 3255990,
    "end": 3263446,
    "text": "また、メタデータを生成して、ページのタイトルにユーザー名を表示するようにした。"
  },
  {
    "start": 3263638,
    "end": 3269410,
    "text": "繰り返しになるが、これはすべて次回のJ'sビギナー・チュートリアルでカバーする。"
  },
  {
    "start": 3269710,
    "end": 3277784,
    "text": "また、わざとページの読み込みに時間がかかるように、人工的なディレイを追加した。"
  },
  {
    "start": 3277872,
    "end": 3280416,
    "text": "なぜこんなに遅いのか、混乱しないでほしい。"
  },
  {
    "start": 3280528,
    "end": 3282696,
    "text": "ここで1.5秒追加した。"
  },
  {
    "start": 3282808,
    "end": 3283200,
    "text": "なぜですか？"
  },
  {
    "start": 3283280,
    "end": 3292384,
    "text": "というのも、後でこのページを静的にキャッシュする方法をお見せしたいからだ。"
  },
  {
    "start": 3292512,
    "end": 3294776,
    "text": "今のところは心配する必要はない。"
  },
  {
    "start": 3294888,
    "end": 3298408,
    "text": "ただ、このページが人為的に遅くされていることは覚えておいてほしい。"
  },
  {
    "start": 3298504,
    "end": 3303276,
    "text": "データベースが遅くなったからではなく、ここに遅延があるからだ。"
  },
  {
    "start": 3303428,
    "end": 3305644,
    "text": "そう、このページだ。"
  },
  {
    "start": 3305812,
    "end": 3312532,
    "text": "次に、ユーザー名を更新して別のものに変更するオプションをユーザーに与えたいと思います。"
  },
  {
    "start": 3312596,
    "end": 3316612,
    "text": "そのために設定ページがありますが、今はまだ何もできません。"
  },
  {
    "start": 3316716,
    "end": 3321764,
    "text": "また、このページを保護し、実際にログインしている場合のみ開くことができるようにしたい。"
  },
  {
    "start": 3321812,
    "end": 3329276,
    "text": "というのも、今ログアウトしてもこのページを見ることはできるのですが、ログインしているアカウントがないので意味がないのです。"
  },
  {
    "start": 3329388,
    "end": 3329756,
    "text": "そうだろう？"
  },
  {
    "start": 3329828,
    "end": 3330620,
    "text": "そうしよう"
  },
  {
    "start": 3330660,
    "end": 3331240,
    "text": "次ページ"
  },
  {
    "start": 3331660,
    "end": 3337740,
    "text": "プロジェクトに戻ると、settingsフォルダにこのページがある。"
  },
  {
    "start": 3337860,
    "end": 3343164,
    "text": "保護したいアプリの設定ページTSX。"
  },
  {
    "start": 3343292,
    "end": 3357128,
    "text": "このページのTSXファイルと、別個の設定ページ・コンポーネントに分割しました。これは、JavaScriptを必要とするトーストやフォーム入力フィールドのような機能が必要なため、クライアント・コンポーネントとして必要だからです。"
  },
  {
    "start": 3357264,
    "end": 3360792,
    "text": "ここでメタデータを設定できるのは、ページTsXファイルだけです。"
  },
  {
    "start": 3360816,
    "end": 3370304,
    "text": "このページを保護するためにサーバーサイド認証を行いたい。"
  },
  {
    "start": 3370432,
    "end": 3375848,
    "text": "繰り返しになるが、サーバーサイド認証の利点は、ロード状態を処理する必要がないことだ。"
  },
  {
    "start": 3375984,
    "end": 3381238,
    "text": "サーバーからこのページが戻ってくるとすぐに、ユーザーがログインしているかどうかがわかる。"
  },
  {
    "start": 3381284,
    "end": 3384586,
    "text": "これは、ナバーでやったこととよく似ている。"
  },
  {
    "start": 3384698,
    "end": 3424272,
    "text": "constセッションコールを作成し、authを待ち、セッションuserからuserを取得する。userが未定義の場合、次のスラッシュナビゲーションからスラッシュAPIオフサインインのログインページにインポートするリダイレクトを行う。"
  },
  {
    "start": 3424416,
    "end": 3427672,
    "text": "ここでは、リダイレクトさせたいURLを定義することができる。"
  },
  {
    "start": 3427736,
    "end": 3435340,
    "text": "ログイン後、フロントページにリダイレクトされないように、スラッシュ・セッティングにリダイレクトされるようにしたい。"
  },
  {
    "start": 3435640,
    "end": 3446860,
    "text": "これを保存してログアウトすると、ログインページにリダイレクトされるはずなので、ログインしないと設定を開くことができない。"
  },
  {
    "start": 3448560,
    "end": 3454904,
    "text": "Googleでサインインすると、設定ページにリダイレクトされ、これで使えるようになる。"
  },
  {
    "start": 3455032,
    "end": 3457120,
    "text": "これがページを保護する方法だ。"
  },
  {
    "start": 3457200,
    "end": 3461580,
    "text": "ページにセッションをロードし、それをどう使うかを決める。"
  },
  {
    "start": 3461680,
    "end": 3469780,
    "text": "後ほど、ユーザーが管理者としてログインしているかどうかによって異なるUIをレンダリングする、管理者ページでの別の例を見てみよう。"
  },
  {
    "start": 3469900,
    "end": 3476588,
    "text": "もうひとつの選択肢は、ページを開くたびに実行されるミドルウェアで認証を処理することだ。"
  },
  {
    "start": 3476684,
    "end": 3483388,
    "text": "これを好む人もいるが、実はzelle自身は認証にミドルウェアを使うことに反対している。"
  },
  {
    "start": 3483484,
    "end": 3488924,
    "text": "ひとつは、保護したいパスをすべて追加するのを忘れないようにしなければならないため、それほど安全ではないということだ。"
  },
  {
    "start": 3488972,
    "end": 3494924,
    "text": "この場合、ページ上でデータを取得する場所の近くで行う方がより安全である。"
  },
  {
    "start": 3495092,
    "end": 3503340,
    "text": "第二に、ミドルウェアとページの間でユーザーデータを共有することができないので、ユーザーデータを取得するために、ここでもう一度セッションをフェッチしなければならない。"
  },
  {
    "start": 3503460,
    "end": 3505180,
    "text": "他にも理由はある。"
  },
  {
    "start": 3505260,
    "end": 3508220,
    "text": "私は自分のページを保護するためにミドルウェアを使っていない。"
  },
  {
    "start": 3508340,
    "end": 3510612,
    "text": "私はページ自体でオフチェックをしている。"
  },
  {
    "start": 3510716,
    "end": 3511804,
    "text": "その方がいいと思う。"
  },
  {
    "start": 3511932,
    "end": 3520172,
    "text": "このフォーム自体はこの設定ページ・コンポーネントの中にあり、そのためにschedcnのフォーム・コンポーネントを使用しています。"
  },
  {
    "start": 3520236,
    "end": 3521748,
    "text": "本当に彼らのファンなんだ。"
  },
  {
    "start": 3521884,
    "end": 3526532,
    "text": "これらはリアクトやフックフォームと統合されており、かなり使いやすい。"
  },
  {
    "start": 3526676,
    "end": 3529188,
    "text": "フォームが複雑なのは有名な話だ。"
  },
  {
    "start": 3529324,
    "end": 3537092,
    "text": "繰り返しになるが、ここでは詳しい設定方法については説明しない。"
  },
  {
    "start": 3537116,
    "end": 3549642,
    "text": "ユーザー名用のフォームフィールドはすでに追加しましたが、現在これを実行すると、カールのプロフィールを更新するサーバーアクションは空なので、実際にはまだユーザー名は更新されません。"
  },
  {
    "start": 3549786,
    "end": 3552042,
    "text": "それが次に実行したいことだ。"
  },
  {
    "start": 3552226,
    "end": 3553950,
    "text": "もうひとつだけ。"
  },
  {
    "start": 3554370,
    "end": 3559946,
    "text": "設定ページで、現在ログインしているユーザーの名前を読み込みたい。"
  },
  {
    "start": 3560058,
    "end": 3582600,
    "text": "このフィールドには、デフォルトでFlorian Baltaを入力させたい。このページをロードしたときに、設定ページに入り、やりたいことは、サーバーコンポーネントですでに取得したユーザーを設定ページに転送することだ。"
  },
  {
    "start": 3583020,
    "end": 3587520,
    "text": "settingsページのpropsと呼ぶインターフェイスを追加します。"
  },
  {
    "start": 3588180,
    "end": 3594200,
    "text": "これはユーザーを取り込み、プリズマ・クライアントからではなく、次のオフからユーザーをインポートします。"
  },
  {
    "start": 3595950,
    "end": 3609570,
    "text": "そして、設定ページのプロップからこのプロップを再構築し、現在のユーザーからデフォルト値を追加するために、このプロップを追加しました。"
  },
  {
    "start": 3610910,
    "end": 3619570,
    "text": "の場合、名前をユーザー名に設定するが、未定義の場合は再び空文字列に戻さなければならない。"
  },
  {
    "start": 3620400,
    "end": 3625860,
    "text": "これを保存するが、もちろんこのプロップを設定ページに渡す必要もある。"
  },
  {
    "start": 3626680,
    "end": 3633360,
    "text": "これを保存してページを更新すると、ユーザー名が自動的にここに表示される。"
  },
  {
    "start": 3633480,
    "end": 3634620,
    "text": "クールだろ？"
  },
  {
    "start": 3634920,
    "end": 3642024,
    "text": "プロジェクトに戻り、settingsフォルダにあるactions tsファイルをご覧ください。"
  },
  {
    "start": 3642152,
    "end": 3644888,
    "text": "これが設定ページのサーバーアクションです。"
  },
  {
    "start": 3644984,
    "end": 3648440,
    "text": "このフォームを送信するときに、すでにこのサーバーアクションを呼び出しています。"
  },
  {
    "start": 3648520,
    "end": 3654060,
    "text": "ここでは、フォームの入力フィールドから名前を渡すだけで、まだ何もしていない。"
  },
  {
    "start": 3654220,
    "end": 3658604,
    "text": "ちなみに、Zobaアクションのチュートリアルのリンクはこちら。"
  },
  {
    "start": 3658732,
    "end": 3661492,
    "text": "ここでもう一度、認証をチェックしなければならない。"
  },
  {
    "start": 3661676,
    "end": 3675324,
    "text": "認証されていないユーザーが設定ページを開くことができないとしても、フロントエンドを回避してサーバーアクションを直接呼び出すことは可能なので、サーバーアクションで認証を再度チェックする必要があります。"
  },
  {
    "start": 3675412,
    "end": 3678560,
    "text": "これはページとまったく同じ働きをする。"
  },
  {
    "start": 3679100,
    "end": 3682800,
    "text": "ウェイトオフで現在のセッションをフェッチする。"
  },
  {
    "start": 3684420,
    "end": 3688332,
    "text": "今回は、ユーザー・オブジェクト全体ではなく、ユーザーIDだけが必要だ。"
  },
  {
    "start": 3688476,
    "end": 3695280,
    "text": "セッション・ユーザー・ドットIDから取得したconstユーザーのアイデアを作成しよう。"
  },
  {
    "start": 3697540,
    "end": 3702052,
    "text": "ユーザーがログインしていなければ、プロフィールを更新することはできませんよね？"
  },
  {
    "start": 3702196,
    "end": 3706200,
    "text": "以下では、感嘆符がユーザーのアイデアかどうかをチェックする。"
  },
  {
    "start": 3707450,
    "end": 3713750,
    "text": "そして、未承認というエラーを投げたい。"
  },
  {
    "start": 3714370,
    "end": 3716470,
    "text": "エラーメッセージはあなた次第だ。"
  },
  {
    "start": 3716810,
    "end": 3721554,
    "text": "フロントエンドでは、このエラーは単にエラートーストとして表示される。"
  },
  {
    "start": 3721642,
    "end": 3724506,
    "text": "設定ページではこのように設定している。"
  },
  {
    "start": 3724618,
    "end": 3727530,
    "text": "エラーがスローされた場合は、それをキャッチしてトーストを表示する。"
  },
  {
    "start": 3727650,
    "end": 3730490,
    "text": "このエラートーストには無許可とは書かれていない。"
  },
  {
    "start": 3730570,
    "end": 3739294,
    "text": "その代わりに、この一般的なエラーメッセージが表示される。そもそもログインしていなければ、このページにいるはずがないのだから、それで十分だ。"
  },
  {
    "start": 3739382,
    "end": 3748310,
    "text": "人間が読めるようなエラーメッセージは必要ない。サーバーのアクションを中断させるエラーが必要なのだ。"
  },
  {
    "start": 3748430,
    "end": 3750610,
    "text": "一般的なエラーメッセージで十分だ。"
  },
  {
    "start": 3750910,
    "end": 3753910,
    "text": "この下に表示されたら、ログインしているということだ。"
  },
  {
    "start": 3753990,
    "end": 3756370,
    "text": "次に、入力から名前を取得したい。"
  },
  {
    "start": 3756710,
    "end": 3774150,
    "text": "そこで、Prisma user updateを使用します。中括弧コロンのidは、現在ログインしているユーザーのidです。"
  },
  {
    "start": 3775730,
    "end": 3778818,
    "text": "次に、更新したいデータを設定する。"
  },
  {
    "start": 3778954,
    "end": 3780826,
    "text": "名前を上書きしたい。"
  },
  {
    "start": 3781018,
    "end": 3782546,
    "text": "これがこの仕組みだ。"
  },
  {
    "start": 3782698,
    "end": 3790670,
    "text": "これでPrismaは、サーバーアクションに送信した名前入力を使って、このアイデアのユーザーエントリを更新します。"
  },
  {
    "start": 3791170,
    "end": 3796950,
    "text": "このように、ホームページのURLでパスを再バリデートしてください。"
  },
  {
    "start": 3797290,
    "end": 3798866,
    "text": "これには2つの意味がある。"
  },
  {
    "start": 3799018,
    "end": 3808178,
    "text": "ひとつは、フロントページがキャッシュされている場合（デフォルトではそうなっている）、このページが再レンダリングされることだ。"
  },
  {
    "start": 3808314,
    "end": 3813826,
    "text": "ユーザーのデータは再度フェッチされ、更新された後、ブラジルにキャッシュされる。"
  },
  {
    "start": 3813898,
    "end": 3820214,
    "text": "このページを開くたびに、キャッシュされたバージョンを取得するだけで、毎回データベースにアクセスする必要がなくなるからだ。"
  },
  {
    "start": 3820342,
    "end": 3825854,
    "text": "revalidateパスはクライアント側のキャッシュ・ルーターもクリアするので、ページが更新される。"
  },
  {
    "start": 3825902,
    "end": 3828702,
    "text": "基本的にはルーターのリフレッシュと似ている。"
  },
  {
    "start": 3828806,
    "end": 3843982,
    "text": "これは、名前を更新した後にブラウザの更新ボタンを押すのとほとんど同じで、例えば、ナバー・ユーザー・ボタンに最新のユーザー名が表示されるように気を配りますが、通常の更新のような衝撃はありません。"
  },
  {
    "start": 3844046,
    "end": 3846402,
    "text": "その代わり、ほとんど見えなくなる。"
  },
  {
    "start": 3846526,
    "end": 3848762,
    "text": "ここのデータだけが更新される。"
  },
  {
    "start": 3848946,
    "end": 3852802,
    "text": "繰り返しになるが、これはrevalidate pathが処理することである。"
  },
  {
    "start": 3852986,
    "end": 3854626,
    "text": "実際に試してみよう。"
  },
  {
    "start": 3854778,
    "end": 3866154,
    "text": "プロフィールが更新され、ユーザーボタンに新しい名前が表示されます。"
  },
  {
    "start": 3866282,
    "end": 3874998,
    "text": "これをリフレッシュすると、最新のデータが表示され、フロントページにはフローリアンとフローリアン・ウォルターが表示される。"
  },
  {
    "start": 3875154,
    "end": 3883830,
    "text": "サーバーアクションを使用せず、APIルートハンドラを使用し、これらのルートtsファイルでバックエンドを処理する場合は、同じように動作します。"
  },
  {
    "start": 3883990,
    "end": 3890774,
    "text": "その後、セッションを取得してチェックし、ユーザーがログインしていない場合はエラー・レスポンスを返します。"
  },
  {
    "start": 3890902,
    "end": 3900244,
    "text": "では次に、あるユーザーに管理者ロールを追加して、秘密の管理ページにアクセスできるようにしたいと思います。"
  },
  {
    "start": 3900382,
    "end": 3905984,
    "text": "しかし、それ以上に学ぶべき重要なトピックがたくさんある。"
  },
  {
    "start": 3906032,
    "end": 3909300,
    "text": "このチュートリアルを最後まで見てください。"
  },
  {
    "start": 3909680,
    "end": 3923580,
    "text": "新しい管理者ロールを追加するために、スキーマPrismaファイルを開き、ユーザーテーブルを開きます。"
  },
  {
    "start": 3924200,
    "end": 3927030,
    "text": "roleというカラムをもうひとつ追加した。"
  },
  {
    "start": 3927650,
    "end": 3932426,
    "text": "このカラムを文字列とし、クエスチョンマークを追加することで、このカラムをヌル化可能にする。"
  },
  {
    "start": 3932578,
    "end": 3939250,
    "text": "ロールを持たないユーザーは一般ユーザーですが、例えばadminのような文字列を設定することができます。"
  },
  {
    "start": 3939330,
    "end": 3950338,
    "text": "その後、書式設定のショートカット、私のマシンではshift alt fを押して、これを適切に整列させ、保存して、この変更をデータベースにプッシュする必要がある。"
  },
  {
    "start": 3950514,
    "end": 3958870,
    "text": "新しいターミナルを開き、先ほど実行したNPX Prisma DB pushコマンドを実行する。"
  },
  {
    "start": 3960210,
    "end": 3963202,
    "text": "ここで警告が出たら、それを確認すること。"
  },
  {
    "start": 3963346,
    "end": 3968034,
    "text": "NPXプリズマスタジオでプリズマスタジオを開いてみましょう。"
  },
  {
    "start": 3968082,
    "end": 3972070,
    "text": "そうすれば、テーブルに新しいカラムが表示されるはずだ。"
  },
  {
    "start": 3973970,
    "end": 3978740,
    "text": "ユーザー・テーブルの中に我々のロールがある。"
  },
  {
    "start": 3978890,
    "end": 3987264,
    "text": "これで、例えばこのアカウントに入り、Prisma Studioで直接変更することができます。"
  },
  {
    "start": 3987352,
    "end": 3988536,
    "text": "変更を保存します。"
  },
  {
    "start": 3988648,
    "end": 3995656,
    "text": "もちろん、アプリ内に管理ダッシュボードのような役割を変更できる機能を作ることもできる。"
  },
  {
    "start": 3995768,
    "end": 3999576,
    "text": "もうひとつの簡単な方法は、データベースを直接修正することだ。"
  },
  {
    "start": 3999608,
    "end": 4002208,
    "text": "例えば、我々はプリズマスタジオだ。"
  },
  {
    "start": 4002224,
    "end": 4006362,
    "text": "今、このユーザーは管理者権限を持っている。"
  },
  {
    "start": 4006506,
    "end": 4012870,
    "text": "というわけで、ユーザーボタンtsxファイルにもうひとつ用意した。"
  },
  {
    "start": 4013250,
    "end": 4017722,
    "text": "このメニューオプションを管理者だけに表示したい。"
  },
  {
    "start": 4017826,
    "end": 4021310,
    "text": "を削除しよう。"
  },
  {
    "start": 4022410,
    "end": 4031270,
    "text": "基本的にやりたいことは、まずこのアイコンをインポートすることだ。"
  },
  {
    "start": 4032150,
    "end": 4036486,
    "text": "この場合、中括弧で囲んで条件付きでレンダリングしたい。"
  },
  {
    "start": 4036638,
    "end": 4042610,
    "text": "user dotのroleがadminと等しい場合にレンダリングしたいんだよね？"
  },
  {
    "start": 4044150,
    "end": 4045570,
    "text": "管理者であって管理者ではない。"
  },
  {
    "start": 4046470,
    "end": 4063392,
    "text": "なぜなら、ページを開くとき、現在のユーザーセッションを取得するためにサーバーにリクエストを行い、ロールが変更された場合、フロントエンドとバックエンドでこの情報を利用することができるからです。"
  },
  {
    "start": 4063536,
    "end": 4074648,
    "text": "唯一の問題は、typescriptはこのroleフィールドがこのユーザーオブジェクトに存在することを知らないということです。なぜなら、デフォルトではnext authはこれらの値しか返さないからです。"
  },
  {
    "start": 4074784,
    "end": 4080144,
    "text": "次の認証ユーザー・テーブルにフィールドを追加するときは、タイプスクリプトを少し手伝わなければならない。"
  },
  {
    "start": 4080192,
    "end": 4082940,
    "text": "これについては、次のauthドキュメントで説明する。"
  },
  {
    "start": 4083720,
    "end": 4089790,
    "text": "プロジェクトのルートを直接クリックし、新規ファイルを作成する。"
  },
  {
    "start": 4090450,
    "end": 4101042,
    "text": "このように、タイプ・スラッシュの次にマイナスd tsを書くと、このタイプ・フォルダが作成され、その中にこのファイルが入る。"
  },
  {
    "start": 4101186,
    "end": 4113154,
    "text": "これらのd tsファイルは、いわゆるタイプスクリプト宣言ファイルであり、その中で基本的に、セッションやユーザータイプの形など、既存のタイプの形を変更することができる。"
  },
  {
    "start": 4113202,
    "end": 4127670,
    "text": "次のauthライブラリでは、必ずこのファイルをnext auth d tsと呼び、ここにdeclare moduleと書き、またnext offという文字列を中括弧で囲む。"
  },
  {
    "start": 4128050,
    "end": 4133190,
    "text": "ここでは、ユーザー・インターフェースを次のように変更したい。"
  },
  {
    "start": 4133610,
    "end": 4137618,
    "text": "これは、次の認証ライブラリの既存ユーザータイプである。"
  },
  {
    "start": 4137754,
    "end": 4148759,
    "text": "このカラムはオプションなので、ユーザーはロールを必要としません。"
  },
  {
    "start": 4150419,
    "end": 4159923,
    "text": "なぜなら、セッションからユーザー・オブジェクトを取得し、それが正しい型を持っていることを確認したいからである。"
  },
  {
    "start": 4160091,
    "end": 4162435,
    "text": "セッションにあるのは、このユーザー変数ですね？"
  },
  {
    "start": 4162467,
    "end": 4166792,
    "text": "これらの名前は、小文字のユーザー・カラムと一致しなければならない。"
  },
  {
    "start": 4166936,
    "end": 4176744,
    "text": "これはこのユーザー・タイプであり、この追加ロール・フィールドを持っている。"
  },
  {
    "start": 4176872,
    "end": 4180344,
    "text": "もちろん、すべてのデフォルト値も維持したいよね？"
  },
  {
    "start": 4180392,
    "end": 4184600,
    "text": "今はロールがあるだけで、IDや名前などは消えているからね。"
  },
  {
    "start": 4184680,
    "end": 4195518,
    "text": "これらのフィールドをすべて手作業で追加する代わりに、間違えやすいのですが、前のタイプ、デフォルトのものとマージすればいいのです。"
  },
  {
    "start": 4195694,
    "end": 4200158,
    "text": "そして、2つの角括弧を作り、ここに文字列としてuserを書く。"
  },
  {
    "start": 4200334,
    "end": 4202750,
    "text": "今、私たちは両方の世界のベストを手に入れた。"
  },
  {
    "start": 4202910,
    "end": 4209810,
    "text": "ここには、以前と同じタイプのデフォルト値と、追加のロール・フィールドがあります。"
  },
  {
    "start": 4210790,
    "end": 4213134,
    "text": "これでエラーはなくなった。"
  },
  {
    "start": 4213222,
    "end": 4214810,
    "text": "私たちはこの仕事を用意しています。"
  },
  {
    "start": 4215310,
    "end": 4227962,
    "text": "localhostでアプリを開いてみよう。メニューには新しい管理オプションがあり、管理者ロールを持つアカウントでログインしているので、管理者へのリンクになっている。"
  },
  {
    "start": 4228106,
    "end": 4232070,
    "text": "通常のユーザーである別のアカウントでログインしてみよう。"
  },
  {
    "start": 4232690,
    "end": 4236070,
    "text": "こちらが管理者で、こちらが一般ユーザー。"
  },
  {
    "start": 4236370,
    "end": 4241762,
    "text": "管理者以外のアクセスをブロックしていないので、管理者ページはまだ見ることができる。"
  },
  {
    "start": 4241826,
    "end": 4247108,
    "text": "ユーザーボタンのドロップダウンメニューから管理者リンクが消えています。"
  },
  {
    "start": 4247284,
    "end": 4250956,
    "text": "では、このページで管理者以外のアクセスをブロックしてみよう。"
  },
  {
    "start": 4251028,
    "end": 4257180,
    "text": "プロジェクトに戻り、管理フォルダー内の管理ページにアクセスする。"
  },
  {
    "start": 4257340,
    "end": 4259760,
    "text": "この仕組みはもうわかっているよね？"
  },
  {
    "start": 4260820,
    "end": 4265520,
    "text": "ウェイトオフによって現在のセッションを取得する。"
  },
  {
    "start": 4267100,
    "end": 4277270,
    "text": "セッション・ユーザーを介してセッションからユーザーを取り出すのだが、このサーバー・コンポーネントを非同期にしなければならない。"
  },
  {
    "start": 4278890,
    "end": 4281634,
    "text": "そして、もし僕らがまったくロックオンされなかったら......。"
  },
  {
    "start": 4281682,
    "end": 4287070,
    "text": "もしuserが未定義であれば、再度ログイン画面にリダイレクトしたい。"
  },
  {
    "start": 4287810,
    "end": 4302960,
    "text": "スラッシュAPIをオフにしてサインインし、ログイン後にこのページにリダイレクトされるように、コールバックURLを再びadministrationに追加しよう。"
  },
  {
    "start": 4303340,
    "end": 4312160,
    "text": "このページでセッションをフェッチすることのクールな点は、ユーザーデータが期待したものでなかった場合にどうするかについて、柔軟性があることです。"
  },
  {
    "start": 4312460,
    "end": 4318212,
    "text": "もしユーザーが未定義であれば、ログイン画面にリダイレクトします。"
  },
  {
    "start": 4318316,
    "end": 4324648,
    "text": "もしログインしていて管理者でない場合は、別のUIをレンダリングする。"
  },
  {
    "start": 4324724,
    "end": 4327440,
    "text": "もちろん、あなたのアプリでこれをどう扱うかはあなた次第だ。"
  },
  {
    "start": 4327480,
    "end": 4331900,
    "text": "また、ユーザーが管理者でない場合はリダイレクトさせることもできる。"
  },
  {
    "start": 4332480,
    "end": 4333864,
    "text": "以下、確認する。"
  },
  {
    "start": 4334032,
    "end": 4343020,
    "text": "ユーザー・ロールがadminでない場合は、別のUIを返したい。"
  },
  {
    "start": 4343360,
    "end": 4345340,
    "text": "メイン・タグを返す。"
  },
  {
    "start": 4345720,
    "end": 4353030,
    "text": "アメックス、オート、私の10に設定したい。"
  },
  {
    "start": 4354090,
    "end": 4366750,
    "text": "そして、ここにパラグラフ・タグを追加し、テキスト・センターに「このページを表示する権限がありません。"
  },
  {
    "start": 4367330,
    "end": 4377766,
    "text": "このプロジェクトにprettierを追加して以来、書式設定のショートカットを押すと、すべてが括弧と正しいクラスの順序できれいに書式設定されるようになった。"
  },
  {
    "start": 4377938,
    "end": 4384510,
    "text": "さて、これで管理者以外のアカウントを開くと、「このページを表示する権限がありません。"
  },
  {
    "start": 4384670,
    "end": 4386610,
    "text": "このアカウントでログアウトしよう。"
  },
  {
    "start": 4386990,
    "end": 4389158,
    "text": "ログイン画面へ。"
  },
  {
    "start": 4389334,
    "end": 4393450,
    "text": "これがURLエンコードされた管理者へのコールバックURLだ。"
  },
  {
    "start": 4393950,
    "end": 4396770,
    "text": "代わりに管理者アカウントでログインしてみよう。"
  },
  {
    "start": 4398150,
    "end": 4399894,
    "text": "管理ページにたどり着く。"
  },
  {
    "start": 4399982,
    "end": 4401246,
    "text": "今はアクセスできる。"
  },
  {
    "start": 4401398,
    "end": 4405234,
    "text": "ご覧のように、次をオフにしたロールを追加するのはとても簡単だ。"
  },
  {
    "start": 4405422,
    "end": 4406642,
    "text": "ひとつ問題がある。"
  },
  {
    "start": 4406706,
    "end": 4412234,
    "text": "私たちのコードでは、不必要に重さを減らしている。"
  },
  {
    "start": 4412322,
    "end": 4420906,
    "text": "例えば管理ページで1回、同じページに表示されるナビバーでも1回。"
  },
  {
    "start": 4420978,
    "end": 4429210,
    "text": "そうですね。そして、1つのページを開くために、現在のセッションを取得するために2回データベースへのリクエストを行うwait offを呼び出すのは、少し無駄が多いように思えます。"
  },
  {
    "start": 4429330,
    "end": 4431032,
    "text": "次はそれを直そう。"
  },
  {
    "start": 4431226,
    "end": 4434468,
    "text": "なるほど、これは見過ごされがちな問題だと思う。"
  },
  {
    "start": 4434564,
    "end": 4440580,
    "text": "同じページ上の複数のコンポーネントにリクエストする場合は、これらのリクエストを重複排除すべきである。"
  },
  {
    "start": 4440700,
    "end": 4447876,
    "text": "そうでなければ、不必要な重複データベース・リクエストが発生する。reactはこれを行うシンプルな関数を提供している。"
  },
  {
    "start": 4447908,
    "end": 4450812,
    "text": "このコンポーネントの外のどこかに置くだけだ。"
  },
  {
    "start": 4450916,
    "end": 4456476,
    "text": "これをlibフォルダに入れて、ここに新しいファイルを作成しよう。"
  },
  {
    "start": 4456508,
    "end": 4458520,
    "text": "セッションは終了だ。"
  },
  {
    "start": 4460180,
    "end": 4463876,
    "text": "ここでは単にデフォルトをエクスポートしている。"
  },
  {
    "start": 4463948,
    "end": 4467560,
    "text": "次に、reactからのインポートであるキャッシュ関数を呼び出す。"
  },
  {
    "start": 4468140,
    "end": 4472588,
    "text": "ここでオフ関数を呼び出し、それで終わりだ。"
  },
  {
    "start": 4472764,
    "end": 4481316,
    "text": "このキャッシュ機能はreact自体が提供しているもので、ここに入れたものを重複排除してくれる。"
  },
  {
    "start": 4481348,
    "end": 4487988,
    "text": "ここでセッションをフェッチすると、このリクエストは重複排除される。"
  },
  {
    "start": 4488044,
    "end": 4491588,
    "text": "というのも、この名前は少し誤解を招く可能性があるからだ。"
  },
  {
    "start": 4491724,
    "end": 4500908,
    "text": "ページを更新すると、このキャッシュは実際にクリアされ、再びセッションを取得する。"
  },
  {
    "start": 4500964,
    "end": 4503516,
    "text": "一度のリクエストでは、それ以上はフェッチできない。"
  },
  {
    "start": 4503628,
    "end": 4508840,
    "text": "このキャッシュ機能は、1つのサーバー・リクエスト内で重複を解消するだけである。"
  },
  {
    "start": 4509140,
    "end": 4520472,
    "text": "言い換えれば、ページを更新するときにセッションを取得し、それをこのキャッシュに入れ、ナバーとページの両方がこのキャッシュからセッションを取得する。"
  },
  {
    "start": 4520576,
    "end": 4525776,
    "text": "ページを更新すると、キャッシュはクリアされ、新しいセッションがフェッチされる。"
  },
  {
    "start": 4525928,
    "end": 4531792,
    "text": "もちろん、以前にwait offを呼び出したすべての場所で、このキャッシュされた関数を使わなければならない。"
  },
  {
    "start": 4531896,
    "end": 4534024,
    "text": "サイドバーの検索を開いてみよう。"
  },
  {
    "start": 4534072,
    "end": 4541310,
    "text": "この1つのコントロール・シフトfは、ウェイティング・オフを検索し、新しいキャッシュ・ファンクションに置き換えてみよう。"
  },
  {
    "start": 4542010,
    "end": 4547410,
    "text": "これはデフォルトのエクスポートなので、手動でインポートして名前を付け直す必要がある。"
  },
  {
    "start": 4547450,
    "end": 4554378,
    "text": "lib get sessionからこのget sessionを呼び出そうと思う。"
  },
  {
    "start": 4554474,
    "end": 4564190,
    "text": "また、これをコピーし、await offの代わりにawait get sessionを呼び出すと、複製されたセッションが得られる。"
  },
  {
    "start": 4564500,
    "end": 4566356,
    "text": "他のページでも同じことをする。"
  },
  {
    "start": 4566428,
    "end": 4572204,
    "text": "ページを開くときのサーバー・リクエストの一部ではないので、サーバー・アクションでこれを行う必要はない。"
  },
  {
    "start": 4572252,
    "end": 4574564,
    "text": "これは後でボタンをクリックしたときにだけ起こる。"
  },
  {
    "start": 4574612,
    "end": 4580840,
    "text": "ここでは、キャッシュされたバージョンは使用せず、ページを開いたときにキャッシュされたセッションを取得するようにします。"
  },
  {
    "start": 4581260,
    "end": 4586596,
    "text": "こちらも設定ページとナビバーにあります。"
  },
  {
    "start": 4586628,
    "end": 4591788,
    "text": "ナビバーはページと一緒に表示されるものだからだ。"
  },
  {
    "start": 4591924,
    "end": 4599084,
    "text": "今、これは重複排除されるべきであり、ページを開いたときにセッションをフェッチするためにリクエストするのは1回だけにすべきである。"
  },
  {
    "start": 4599132,
    "end": 4602556,
    "text": "今は直接見ることはできないが、これは水面下で機能している。"
  },
  {
    "start": 4602628,
    "end": 4606748,
    "text": "基本的に、これは重要だと思うから見せたかっただけなんだ。"
  },
  {
    "start": 4606884,
    "end": 4611148,
    "text": "必要なのは1つだけなのに、2つもデータベースをリクエストするのはちょっともったいない。"
  },
  {
    "start": 4611244,
    "end": 4613436,
    "text": "次にもうひとつ、はっきりさせておきたいことがある。"
  },
  {
    "start": 4613468,
    "end": 4622828,
    "text": "JSもこのような不安定なキャッシュ機能を提供しているが、これは複数のサーバー・リクエストを越えてリクエストを実際にキャッシュするという点で異なっている。"
  },
  {
    "start": 4622884,
    "end": 4627804,
    "text": "私たちは、セッションを得るためにこれを使いたくない。"
  },
  {
    "start": 4627892,
    "end": 4636820,
    "text": "ネーミングがちょっと残念なのは、同じようにcacheと呼ばれているからだ。しかし、念のために言っておくが、この関数ではなくreactのcache関数を使いたい。"
  },
  {
    "start": 4636940,
    "end": 4642440,
    "text": "次に、サーバーサイドではなくクライアントサイドでセッションを処理する方法を学びます。"
  },
  {
    "start": 4643100,
    "end": 4656384,
    "text": "前にも述べたように、サーバーサイドでセッションをフェッチすることのクールな点は、ページを更新するときに時間がかからないことだ。"
  },
  {
    "start": 4656512,
    "end": 4668896,
    "text": "サーバー・サイド・フェッチの問題は、ページ上のユーザーをフェッチするときに、このページを静的にキャッシュできないことだ。"
  },
  {
    "start": 4668968,
    "end": 4672944,
    "text": "ページを読み込む前に、誰がアプリにログインしているかはわからない。"
  },
  {
    "start": 4673112,
    "end": 4681150,
    "text": "ブラウザのクッキーにアクセスし、next jsが動的にページをレンダリングする。"
  },
  {
    "start": 4681270,
    "end": 4691558,
    "text": "ダイナミック・レンダリングとは、ページを開くたびに、データが必要であればデータベースからデータをロードし、それをUIに表示することで、ゼロからレンダリングすることを意味する。"
  },
  {
    "start": 4691734,
    "end": 4700318,
    "text": "というのも、ここでユーザーのプロフィール・データを読み込むので、理論的にはこれらのページをキャッシュすることができるからだ。"
  },
  {
    "start": 4700454,
    "end": 4714880,
    "text": "プロジェクトをコンパイルするときに、データベースからすべてのデータをフェッチし、ページを静的にキャッシュしておけば、実行時にユーザーがページを開いたときに、いちいちデータベースをリクエストする代わりに、キャッシュされたバージョンを提供するだけでいい。"
  },
  {
    "start": 4714920,
    "end": 4719392,
    "text": "再度、現在ログインしているユーザーをフェッチするときに、ダイナミックキャッシュをオプトアウトします。"
  },
  {
    "start": 4719496,
    "end": 4724352,
    "text": "問題は、すべてのページに表示されるナビバーにユーザーをフェッチすることです。"
  },
  {
    "start": 4724456,
    "end": 4731568,
    "text": "これは、このページ自体でログインユーザーを必要としない場合でも、すべてのページの静的キャッシュを無効にします。"
  },
  {
    "start": 4731704,
    "end": 4741792,
    "text": "言い換えれば、もしナバーからユーザー・ボタンを削除すれば、このページを静的にキャッシュすることができる。"
  },
  {
    "start": 4741896,
    "end": 4750020,
    "text": "このページが実際にはキャッシュされていないことを示すために、人工的な遅延を加えたのもこのためだ。"
  },
  {
    "start": 4750320,
    "end": 4761896,
    "text": "NPM run buildでプロジェクトをコンパイルしてみると、キャッシュ可能なすべてのページがキャッシュされる。"
  },
  {
    "start": 4761928,
    "end": 4763680,
    "text": "その理由はわかっている。"
  },
  {
    "start": 4763840,
    "end": 4777400,
    "text": "ユーザー・タイプに変更を加えたので、これをこのアダプター・タイプにキャストする必要があると思いますが、これは手動でインポートする必要があります。"
  },
  {
    "start": 4778020,
    "end": 4782148,
    "text": "これは次のオフのアダプター・パッケージから来るはずだ。"
  },
  {
    "start": 4782324,
    "end": 4788360,
    "text": "これでエラーがなくなり、プロジェクトをコンパイルできるようになるはずだ。"
  },
  {
    "start": 4789220,
    "end": 4796716,
    "text": "これが終わったら、NPM startを実行し、再びページを開く。"
  },
  {
    "start": 4796908,
    "end": 4799948,
    "text": "では、プロジェクトを本番モードで動かしてみよう。"
  },
  {
    "start": 4800044,
    "end": 4805540,
    "text": "もしこのページがキャッシュできるなら、次のJSはビルド時にキャッシュする。"
  },
  {
    "start": 4805620,
    "end": 4821654,
    "text": "ページを更新するたびにローディング・スピナーが表示されるのは、このページがキャッシュされていないためです。このページを開くたびに現在のセッションを取得するため、たとえ再ログインしていなくても、サーバー側ではなくクライアント側でセッションを取得することで解決できます。"
  },
  {
    "start": 4821812,
    "end": 4828362,
    "text": "今ひとつ触れておきたいのは、next JSは現在、パーシャル・プリレンダリングという新機能に取り組んでいるということだ。"
  },
  {
    "start": 4828466,
    "end": 4840310,
    "text": "これは理論的には、部分的なプリレンダリングの問題も解決するはずです。"
  },
  {
    "start": 4840690,
    "end": 4847762,
    "text": "ここを削除して、例えば、ユーザーメニューのようなものに入れるんだ。"
  },
  {
    "start": 4847826,
    "end": 4850240,
    "text": "ここでセッションが始まった。"
  },
  {
    "start": 4850360,
    "end": 4855704,
    "text": "そして、部分的なプリレンダリングを有効にすれば、このようにサスペンス境界線にまとめることができる。"
  },
  {
    "start": 4855832,
    "end": 4859712,
    "text": "そうすれば、私たちのページもすぐに提供されることになる。"
  },
  {
    "start": 4859856,
    "end": 4864640,
    "text": "セッションをフェッチする部分だけが、完全に別々にロードされる。"
  },
  {
    "start": 4864800,
    "end": 4878888,
    "text": "というのも、クライアント・サイド・ローディングによく似ていて、ページを更新するときに少し遅れてユーザーがポップアップ表示されるからだ。"
  },
  {
    "start": 4879024,
    "end": 4881200,
    "text": "その代わり、少し遅れて表示される。"
  },
  {
    "start": 4881320,
    "end": 4883432,
    "text": "これがサスペンスの境界線だ。"
  },
  {
    "start": 4883536,
    "end": 4889816,
    "text": "最初のページが戻ってきた後、その間に何を挟んでも読み込みを延期する。"
  },
  {
    "start": 4889928,
    "end": 4894200,
    "text": "これは、クライアント側でセッションをロードするのと同じ効果があるはずだ。"
  },
  {
    "start": 4894360,
    "end": 4901328,
    "text": "ただ、クライアント・コンポーネントを作るよりも便利かもしれない。"
  },
  {
    "start": 4901384,
    "end": 4906892,
    "text": "すぐにコードを書き始めれば、理解できるようになる。"
  },
  {
    "start": 4906956,
    "end": 4909932,
    "text": "問題は、この部分的なプリレンダリングがうまくいかなかったことだ。"
  },
  {
    "start": 4909996,
    "end": 4915692,
    "text": "試しに有効にして、セッション・フェッチをサスペンス・バウンダリーにラップしてみた。"
  },
  {
    "start": 4915796,
    "end": 4922220,
    "text": "ページがまだ動的にレンダリングされるため、この機能はまだ実験的なもので、まだ機能しないだけかもしれない。"
  },
  {
    "start": 4922260,
    "end": 4924940,
    "text": "この場合はわからないが、ここでは省略する。"
  },
  {
    "start": 4925020,
    "end": 4928268,
    "text": "次回のJ'sチュートリアルで取り上げようと思う。"
  },
  {
    "start": 4928324,
    "end": 4930068,
    "text": "それまで安定していることを願っている。"
  },
  {
    "start": 4930164,
    "end": 4934240,
    "text": "ここでは、デシジョン・クライアントのフェッチに焦点を当てる。"
  },
  {
    "start": 4934540,
    "end": 4950732,
    "text": "そのためには、レイアウトTSXファイル（ルート・レイアウト）に入り、ナビバーとページを含むボディ内のすべてを、手動でインポートしなければならないセッション・プロバイダにラップしなければなりません。"
  },
  {
    "start": 4950796,
    "end": 4966660,
    "text": "ここでも中かっこをインポートする。"
  },
  {
    "start": 4968640,
    "end": 4975976,
    "text": "これはコンテキスト・プロバイダで、内部的にセッションを取得し、クライアント側ですべての子プロバイダに提供します。"
  },
  {
    "start": 4976168,
    "end": 4993068,
    "text": "このレイアウトでサーバコンポーネントとしてセッションをフェッチし、セッションプロパを介してプロバイダに渡すこともできますが、ルートレイアウトでセッションをフェッチし、すべてのページでクッキーにアクセスすることになるので、すべてのページが動的にレンダリングされることになります。"
  },
  {
    "start": 4993164,
    "end": 5003652,
    "text": "その場合、このセッションプロバイダは内部的にセッションをフェッチしますが、クライアント側はページがロードされた後です。"
  },
  {
    "start": 5003756,
    "end": 5009044,
    "text": "セッションをフェッチするのに数百ミリ秒かかるため、これは少し遅れて起こる。"
  },
  {
    "start": 5009172,
    "end": 5014324,
    "text": "ナビバーでは、サーバー・サイドではなくクライアント・サイドでユーザーをフェッチしたい。"
  },
  {
    "start": 5014412,
    "end": 5026382,
    "text": "つまり、このコンポーネント全体をuse clientでクライアント・コンポーネントにすることになる。"
  },
  {
    "start": 5026566,
    "end": 5041710,
    "text": "その代わりにuse session hookを使い、このフックがセッション・プロバイダからセッションを取得し、先ほどと同じようにセッションからユーザーを取り出す。"
  },
  {
    "start": 5041790,
    "end": 5052910,
    "text": "このステータス・フィールドは、セッション・データ・ユーザーからユーザーを取得します。"
  },
  {
    "start": 5053610,
    "end": 5060738,
    "text": "違いは、最初のページが戻ってきた後、このセッションがまだロードされている瞬間があることだ。"
  },
  {
    "start": 5060874,
    "end": 5063402,
    "text": "このローディング状態も処理しなければならない。"
  },
  {
    "start": 5063466,
    "end": 5069226,
    "text": "ユーザが定義されていれば、ログインしていることになるので、ユーザ・ボタンをレンダリングします。"
  },
  {
    "start": 5069338,
    "end": 5077580,
    "text": "ユーザが定義されていない場合、サインインボタンをすぐにレンダリングしたくありません。すでにログインしていても、セッションがまだロードされていない可能性があるからです。"
  },
  {
    "start": 5077700,
    "end": 5082124,
    "text": "その代わりに、セッションがロードされるまで何も表示しないか、プレースホルダーを表示したい。"
  },
  {
    "start": 5082172,
    "end": 5086580,
    "text": "YouTubeやMediumのような多くの大きなウェブサイトは、実際にこのようなことをしている。"
  },
  {
    "start": 5086700,
    "end": 5091900,
    "text": "この上のナビバーに注目すると、ここに現在のセッションが表示されている。"
  },
  {
    "start": 5092020,
    "end": 5108922,
    "text": "ページを更新すると、しばらくの間、プレースホルダーが表示される。これは、クライアント側でセッションを取得するか、少なくとも最初のページがロードされた後に何らかの遅延が発生するためだと思われる。"
  },
  {
    "start": 5109026,
    "end": 5110986,
    "text": "必要であれば、プレースホルダーを作ることもできる。"
  },
  {
    "start": 5111058,
    "end": 5112802,
    "text": "何も見せたくはないんだ。"
  },
  {
    "start": 5112986,
    "end": 5128990,
    "text": "ユーザが未定義で、セッションのステータスがローディングのみでなければ、ボタンにデザインをレンダリングしますよね？"
  },
  {
    "start": 5129570,
    "end": 5136306,
    "text": "また、クライアントではこのフォームは必要ないので、ボタンコンポーネントのデザインコードを変更したい。"
  },
  {
    "start": 5136418,
    "end": 5143442,
    "text": "通常のボタンをレンダリングして、代わりにonclick関数を使えばいい。"
  },
  {
    "start": 5143546,
    "end": 5151546,
    "text": "submit型を削除し、矢印関数を渡すonclickハンドラを追加する。"
  },
  {
    "start": 5151698,
    "end": 5159598,
    "text": "ちなみに、ビデオの説明にあるこのプロジェクトのリポジトリには、このチュートリアルのさまざまな部分のブランチがあります。"
  },
  {
    "start": 5159694,
    "end": 5165862,
    "text": "サーバーサイドのアプローチで古いコードをもう一度見たい場合は、該当するブランチに行ってください。"
  },
  {
    "start": 5166006,
    "end": 5166454,
    "text": "いいかい？"
  },
  {
    "start": 5166502,
    "end": 5168214,
    "text": "クライアント側はもっと簡単だ。"
  },
  {
    "start": 5168262,
    "end": 5170774,
    "text": "私たちはフォームを必要とせず、単にサインインを呼びかけるだけです。"
  },
  {
    "start": 5170902,
    "end": 5177086,
    "text": "このインポートはサーバー上でしか機能しないため、間違っています。"
  },
  {
    "start": 5177238,
    "end": 5182342,
    "text": "私たちは、next off reactからのインポートである別のサインイン機能を使いたい。"
  },
  {
    "start": 5182446,
    "end": 5185552,
    "text": "これはクライアント側のもので、このように呼び出す。"
  },
  {
    "start": 5185726,
    "end": 5193280,
    "text": "このインポートが正しいことを確認し、セッションのインポートを削除する。"
  },
  {
    "start": 5193820,
    "end": 5206160,
    "text": "次にユーザーボタンのTsxファイルに入り、ここでボタンを更新します。"
  },
  {
    "start": 5206740,
    "end": 5217200,
    "text": "フォームタグを削除し、on submitを削除し、on clickリスナーをここにも追加しましょう。"
  },
  {
    "start": 5218740,
    "end": 5220420,
    "text": "今回はサインアウトを求める。"
  },
  {
    "start": 5220460,
    "end": 5222452,
    "text": "ここでもまた、インポートを交換しなければならない。"
  },
  {
    "start": 5222556,
    "end": 5224004,
    "text": "これは間違っている。"
  },
  {
    "start": 5224172,
    "end": 5232644,
    "text": "リアクトの次にサインアウトするリアクトが必要で、これを実際に設定することができる。"
  },
  {
    "start": 5232692,
    "end": 5235164,
    "text": "ここではコールバックURLも設定できる。"
  },
  {
    "start": 5235332,
    "end": 5243510,
    "text": "サインアウトしたときに、元のページではなくフロントページにリダイレクトされるようにしたい。"
  },
  {
    "start": 5244170,
    "end": 5249834,
    "text": "さて、これを保存して、プロジェクトを再構築し、キャッシュが機能するかどうか確認してみよう。"
  },
  {
    "start": 5249882,
    "end": 5252710,
    "text": "ちなみに、このエラーは後で修正する。"
  },
  {
    "start": 5253010,
    "end": 5262626,
    "text": "NPM run buildに続いてNPM startを実行し、ページを開いて更新しよう。"
  },
  {
    "start": 5262738,
    "end": 5272756,
    "text": "なぜなら、このページはコンパイル時にレンダリングされ、CDNにキャッシュされるからだ。"
  },
  {
    "start": 5272828,
    "end": 5274452,
    "text": "ログインも試してみよう。"
  },
  {
    "start": 5274596,
    "end": 5277988,
    "text": "そう、これがコンソールに表示されたエラーだ。"
  },
  {
    "start": 5278084,
    "end": 5279636,
    "text": "早く解決しよう。"
  },
  {
    "start": 5279748,
    "end": 5285444,
    "text": "これは現時点では次期ベータ版ライブラリのバグだが、簡単な修正方法がある。"
  },
  {
    "start": 5285492,
    "end": 5290796,
    "text": "もう一度Tのファイルに入って、ここに別のコンフィギュレーションを追加しなければならない。"
  },
  {
    "start": 5290828,
    "end": 5295348,
    "text": "trustホストをtrueに設定しなければならない。"
  },
  {
    "start": 5295404,
    "end": 5299620,
    "text": "これはバグだが、すでにGitHubにこれに関するオープン・イシューがある。"
  },
  {
    "start": 5299780,
    "end": 5306160,
    "text": "これを追加して、もう一度プロジェクトをコンパイルし、ログインしてみよう。"
  },
  {
    "start": 5306460,
    "end": 5308724,
    "text": "今回はこのエラーは出なかった。"
  },
  {
    "start": 5308892,
    "end": 5315036,
    "text": "NPm run startを実行し、戻ってページを更新するとログインしている。"
  },
  {
    "start": 5315108,
    "end": 5315796,
    "text": "素晴らしい。"
  },
  {
    "start": 5315988,
    "end": 5323944,
    "text": "ご覧のように、ページはまだ静的にキャッシュされており、完璧で、ユーザーは非常に短い遅延の後にポップアップします。"
  },
  {
    "start": 5324032,
    "end": 5329940,
    "text": "非常に短い時間ですが、セッションはクライアント側でフェッチされるようになり、すべてのページに影響を与えることはなくなりました。"
  },
  {
    "start": 5330240,
    "end": 5339464,
    "text": "このセッションをクライアントサイドでフェッチするもう一つの利点は、ページ間で自動的に同期されることである。"
  },
  {
    "start": 5339552,
    "end": 5360458,
    "text": "というのも、スキーマに追加したフィールドはデフォルトではクライアントで利用できないからです。"
  },
  {
    "start": 5360554,
    "end": 5391820,
    "text": "というのも、デフォルトのnext authでは、use sessionを呼び出すと、クライアントで受け取るユーザーオブジェクトに、絶対に必要なフィールドだけが追加されるからです。"
  },
  {
    "start": 5391900,
    "end": 5394068,
    "text": "クライアント側では、これは異なる動作をする。"
  },
  {
    "start": 5394204,
    "end": 5398682,
    "text": "手短に言えば、次の認証にこのロールを公開したいと伝えなければならない。"
  },
  {
    "start": 5398796,
    "end": 5407382,
    "text": "T'sファイルでこれをやらなければならない。この中のどこかに、アダプターとプロバイダーの間に入れたい。"
  },
  {
    "start": 5407406,
    "end": 5407742,
    "text": "何？"
  },
  {
    "start": 5407766,
    "end": 5409770,
    "text": "そんなことはどうでもいい、個人の好みだ。"
  },
  {
    "start": 5410230,
    "end": 5415890,
    "text": "ここで、JavaScriptオブジェクトを渡すコールバック・フィールドを上書きすることができる。"
  },
  {
    "start": 5416590,
    "end": 5429198,
    "text": "ここでは、さまざまなコールバックがあり、基本的に認証プロセスにフックして何かをすることができる。"
  },
  {
    "start": 5429294,
    "end": 5438010,
    "text": "セッションが取得されるたびに、ここでは、再構築したいパラメータを取得し、ここからセッションとユーザーを必要とする。"
  },
  {
    "start": 5438430,
    "end": 5449570,
    "text": "データベースから取得したセッションとフロントエンドに返したユーザーを、フロントエンドで受け取ったセッションにこのロールを入れるように、次に指示したいだけです。"
  },
  {
    "start": 5450000,
    "end": 5458820,
    "text": "セッション・ドット・ユーザー・ドット・ロールを設定することでこれを行う。"
  },
  {
    "start": 5459120,
    "end": 5462104,
    "text": "そうでなければ、これは自動補完には使えない。"
  },
  {
    "start": 5462152,
    "end": 5467784,
    "text": "ここでは、これをデータベースから取得したユーザー・ロールに割り当てたい。"
  },
  {
    "start": 5467832,
    "end": 5471940,
    "text": "そして重要なのは、このセッションを返して、実際にプレーできるようにすることだ。"
  },
  {
    "start": 5472320,
    "end": 5479126,
    "text": "そして実行を停止して、ページをキャッシュしない開発モードでもう一度実行してみよう。"
  },
  {
    "start": 5479198,
    "end": 5484290,
    "text": "今はそんなことはどうでもいい。"
  },
  {
    "start": 5484990,
    "end": 5489030,
    "text": "localhostを開いてみよう。管理者ロールがそこにある。"
  },
  {
    "start": 5489150,
    "end": 5489918,
    "text": "完璧だ。"
  },
  {
    "start": 5490094,
    "end": 5495650,
    "text": "セッション・コールバックを介して明示的にクライアントに公開しなければならない。"
  },
  {
    "start": 5495990,
    "end": 5496886,
    "text": "もうひとつ。"
  },
  {
    "start": 5496958,
    "end": 5505054,
    "text": "ナバー・クライアント・サイドでセッションをフェッチしているので、ユーザー名を更新しても、自動的に更新されないと思います。"
  },
  {
    "start": 5505102,
    "end": 5506036,
    "text": "試してみよう。"
  },
  {
    "start": 5506118,
    "end": 5511416,
    "text": "フローリアンWのプロフィールが更新されました。"
  },
  {
    "start": 5511528,
    "end": 5511968,
    "text": "なぜですか？"
  },
  {
    "start": 5512064,
    "end": 5516928,
    "text": "なぜなら、サーバーコンポーネントをリフェッチするルーターをリフレッシュするだけだからだ。"
  },
  {
    "start": 5517024,
    "end": 5523608,
    "text": "そのため、明示的に再取得する必要があります。"
  },
  {
    "start": 5523704,
    "end": 5525380,
    "text": "これは次のように機能する。"
  },
  {
    "start": 5525960,
    "end": 5528140,
    "text": "設定ページに入る。"
  },
  {
    "start": 5528880,
    "end": 5531856,
    "text": "ここにはすでにクライアントのコンポーネントがある。"
  },
  {
    "start": 5531888,
    "end": 5534040,
    "text": "また、現在のセッションにもアクセスしたい。"
  },
  {
    "start": 5534120,
    "end": 5537550,
    "text": "私たちは常にセッションをイコールで使っている。"
  },
  {
    "start": 5539450,
    "end": 5543026,
    "text": "ちなみに、使用セッションは自動的に重複排除される。"
  },
  {
    "start": 5543098,
    "end": 5547266,
    "text": "これをコンポーネントの数だけ何度でも呼び出すことができる。"
  },
  {
    "start": 5547338,
    "end": 5550898,
    "text": "セッションプロバイダーからは、常に同じセッションが提供される。"
  },
  {
    "start": 5551034,
    "end": 5563112,
    "text": "ここでは、実際にユーザーを取得したいわけではなく、セッションオブジェクトが必要なだけです。なぜなら、ここでプロフィールを更新した後、session dot updateを呼びたいからです。"
  },
  {
    "start": 5563216,
    "end": 5572520,
    "text": "このメソッドには何も渡さず、セッション・プロバイダをキャストしてセッションをリフェッチし、ユーザー・ボタンに更新されたユーザー名が表示されるようにします。"
  },
  {
    "start": 5572680,
    "end": 5574260,
    "text": "試してみよう。"
  },
  {
    "start": 5574920,
    "end": 5577224,
    "text": "念のため、ページを更新してみよう。"
  },
  {
    "start": 5577312,
    "end": 5585280,
    "text": "フロリアンの名前を元に戻しました。"
  },
  {
    "start": 5585440,
    "end": 5586072,
    "text": "完璧だ。"
  },
  {
    "start": 5586176,
    "end": 5600110,
    "text": "なぜなら、サーバーコンポーネントでセッションを取得し、ユーザーを取得できなかった場合はリダイレクトすることで、サーバー側でページを保護しているからです。"
  },
  {
    "start": 5600850,
    "end": 5605722,
    "text": "ページ上で、update関数を介してクライアント側で取得したユーザーを更新します。"
  },
  {
    "start": 5605826,
    "end": 5607154,
    "text": "これでいいと思う。"
  },
  {
    "start": 5607242,
    "end": 5613482,
    "text": "また、サーバー側でフェッチしたセッションを完全に削除し、すべてをクライアント側で処理することもできる。"
  },
  {
    "start": 5613626,
    "end": 5624964,
    "text": "ここでリダイレクトする代わりに、use sessionからセッションをチェックし、このページを表示するかどうかを決定するuse effectか何かをここに置くことができる。"
  },
  {
    "start": 5625012,
    "end": 5632996,
    "text": "この利点は、サーバーサイドとクライアントサイドの代わりに、クライアントサイドのセッションテーブルへのリクエストが1回で済むことである。"
  },
  {
    "start": 5633188,
    "end": 5656934,
    "text": "というのも、このようにリダイレクトしても、クライアント側でユーザーの一部を処理することができるからだ。"
  },
  {
    "start": 5657022,
    "end": 5661022,
    "text": "だから、そもそもナビバーでセッションを使うんだ。"
  },
  {
    "start": 5661126,
    "end": 5664806,
    "text": "サーバーサイドとクライアントサイド、どちらを使う？"
  },
  {
    "start": 5664878,
    "end": 5667614,
    "text": "あなたのプロジェクトや必要なものによります。"
  },
  {
    "start": 5667702,
    "end": 5674876,
    "text": "もしページに静的なキャッシュが必要ないのであれば、サーバーサイドで常にセッションを取得するようにします。"
  },
  {
    "start": 5674988,
    "end": 5681840,
    "text": "静的キャッシュが必要な場合は、私たちの回避策を使うか、それが利用可能になった時点で部分的なプリレンダリングを行う必要があります。"
  },
  {
    "start": 5682300,
    "end": 5689580,
    "text": "さて、次はメールでのログインを追加しましょう。今のところ OAuth プロバイダーは Google と GitHub だけです。"
  },
  {
    "start": 5689660,
    "end": 5696360,
    "text": "ソーシャルアカウントでログインしたくない人のための追加オプションとして、Eメールログインがあるのは常に良いことだ。"
  },
  {
    "start": 5696870,
    "end": 5702062,
    "text": "パスワードとEメールによるログインを有効にしたい場合も可能です。"
  },
  {
    "start": 5702166,
    "end": 5707054,
    "text": "ドキュメントにはクレデンシャルの項目で説明されているが、実際には推奨されていない。"
  },
  {
    "start": 5707142,
    "end": 5712006,
    "text": "パスワードは本質的に安全ではないからだ。"
  },
  {
    "start": 5712078,
    "end": 5717246,
    "text": "OAuthプロバイダーやマジック・リンクのようなものを使った方がいい。"
  },
  {
    "start": 5717398,
    "end": 5723944,
    "text": "パスワード・ログインの使い方を知りたい場合は、Eメール・ログインのドキュメントを参照してください。"
  },
  {
    "start": 5723992,
    "end": 5726232,
    "text": "このために実際にメールを送らなければならない。"
  },
  {
    "start": 5726256,
    "end": 5728712,
    "text": "そのためには何らかのメールサービスが必要だ。"
  },
  {
    "start": 5728736,
    "end": 5732664,
    "text": "再送信を使用しますが、これを機能させるには実際のドメインが必要です。"
  },
  {
    "start": 5732752,
    "end": 5737672,
    "text": "DNSの設定を変更するには、基本的にあなた自身のウェブサイトが必要です。"
  },
  {
    "start": 5737816,
    "end": 5745900,
    "text": "もしこれがなければ、このセクションは飛ばして、チュートリアルの次の部分であるデプロイメントのパートに進まなければならない。"
  },
  {
    "start": 5746240,
    "end": 5754596,
    "text": "recentでアカウントを作成し、ダッシュボードでdomainsに行き、ここでドメインを設定する必要がある。"
  },
  {
    "start": 5754708,
    "end": 5758708,
    "text": "これはサブドメインでも構わないが、ルートドメインを所有する必要がある。"
  },
  {
    "start": 5758764,
    "end": 5766564,
    "text": "codinginflow.comは私のドメインで、tutorial dot codinginflow.comからメールを送信できるように設定しました。"
  },
  {
    "start": 5766612,
    "end": 5777672,
    "text": "ドメインの追加をクリックし、所有するドメインを追加すると、ドメインプロバイダーのDNS設定に追加しなければならないさまざまなDNSレコードが表示されます。"
  },
  {
    "start": 5777796,
    "end": 5780968,
    "text": "具体的な方法は、ドメインプロバイダーによって異なる。"
  },
  {
    "start": 5781024,
    "end": 5783456,
    "text": "この仕組みをご存じない方は、ググってみてください。"
  },
  {
    "start": 5783488,
    "end": 5793280,
    "text": "そんなに難しくはないんだけど、いくつかの記録をそこに追加して、それからこの上のどこかにある \"verify \"をクリックする必要があるんだ。"
  },
  {
    "start": 5793400,
    "end": 5798056,
    "text": "これは、私がこのドメインからメールを送信する権限を得たことを意味する。"
  },
  {
    "start": 5798168,
    "end": 5810914,
    "text": "Codinginflow.comまたはチュートリアルのドットcodinginflow.comドットでは、APIキーの下にあるAPIキーが必要ですここでAPIキーを作成しますここでチュートリアルの次のオフ私は後でこれを削除します。"
  },
  {
    "start": 5811082,
    "end": 5819790,
    "text": "すべてのドメインにフルアクセスし、envファイルにコピーしてプロジェクトに追加する。"
  },
  {
    "start": 5820370,
    "end": 5827270,
    "text": "変数名は、最近のアンダースコア・キーから外したものである。"
  },
  {
    "start": 5828210,
    "end": 5837880,
    "text": "このAPIキーをここに挿入して保存し、次にauth tsファイルに入って新しいプロバイダーを追加する。"
  },
  {
    "start": 5838260,
    "end": 5855676,
    "text": "googleのGitHubにresentを追加し、次の認証プロバイダーから手動でresentをインポートする。"
  },
  {
    "start": 5855868,
    "end": 5857800,
    "text": "メールの差出人を設定したい。"
  },
  {
    "start": 5858370,
    "end": 5872650,
    "text": "これは、DNSの設定によって承認された電子メールでなければならない。最近までは、電子メールアドレスの最初の部分は何でもよく、例えば返信はしないが、広告の後の部分は一致しなければならない。"
  },
  {
    "start": 5872810,
    "end": 5877470,
    "text": "そうでない場合、再送信はこのメールの送信を許可せず、エラーとなります。"
  },
  {
    "start": 5878010,
    "end": 5886070,
    "text": "チュートリアルドットcodinginflow.comを認証し、ログインメールがこのメールアドレスから送信されるようになりました。"
  },
  {
    "start": 5886540,
    "end": 5888480,
    "text": "これでうまくいくはずだ。"
  },
  {
    "start": 5889140,
    "end": 5896772,
    "text": "もう一度プロジェクトを開き、このページを更新して開発モードにすると、Eメールのログイン・ボタンが現れる。"
  },
  {
    "start": 5896876,
    "end": 5899172,
    "text": "さて、このボタンテキストだが、実はバグである。"
  },
  {
    "start": 5899236,
    "end": 5905804,
    "text": "ほとんどのユーザーは再送信の意味を知らないだろうからだ。"
  },
  {
    "start": 5905852,
    "end": 5906204,
    "text": "そうだろう？"
  },
  {
    "start": 5906292,
    "end": 5912052,
    "text": "また、これについてはすでに問題があるので、将来的には修正されるでしょう。"
  },
  {
    "start": 5912116,
    "end": 5916812,
    "text": "最終的にはEメールでサインインと表示されるが、これはすでに機能している。"
  },
  {
    "start": 5916876,
    "end": 5924400,
    "text": "管理者のGoogleアカウントと同じメールアドレスで試してみよう。"
  },
  {
    "start": 5925020,
    "end": 5929356,
    "text": "最近のものでサインインしてください。"
  },
  {
    "start": 5929508,
    "end": 5934388,
    "text": "ここでエラーが出る場合は、ドメインの認証がまだ済んでいない可能性があります。"
  },
  {
    "start": 5934484,
    "end": 5938372,
    "text": "どのようなエラーが発生しているかは、対コードのコンソールを見ればわかる。"
  },
  {
    "start": 5938556,
    "end": 5949322,
    "text": "noreplyutorialcodinginfloor.comからこのメールボックスに実際のメールが届いた。"
  },
  {
    "start": 5949346,
    "end": 5961426,
    "text": "クリックする前に、Prisma studioを見てみましょう。検証トークンが表示されているはずです。"
  },
  {
    "start": 5961578,
    "end": 5963858,
    "text": "このトークンはしばらくすると失効する。"
  },
  {
    "start": 5963914,
    "end": 5968376,
    "text": "これはデフォルトで設定されているものだと思いますが、変更することもできます。"
  },
  {
    "start": 5968538,
    "end": 5979040,
    "text": "このEメールマジックリンクは1日間有効で、クリックするとこのトークンは削除され、同じアカウントにログインできるようになります。"
  },
  {
    "start": 5979420,
    "end": 5982188,
    "text": "トークンは消えているはずだ。"
  },
  {
    "start": 5982364,
    "end": 5983708,
    "text": "よし、超クールだ。"
  },
  {
    "start": 5983844,
    "end": 5989252,
    "text": "これで、ユーザーには電子メールアドレスが関連づけられるはずです。"
  },
  {
    "start": 5989316,
    "end": 5995250,
    "text": "グーグルから取得したメールアドレスは以前から持っていたが、認証されたメールアドレスは以前は無効だったのだろう？"
  },
  {
    "start": 5995340,
    "end": 5998838,
    "text": "なぜなら、グーグルはこのメールが認証されたかどうかを教えてくれないからだ。"
  },
  {
    "start": 5998894,
    "end": 6007010,
    "text": "同じユーザーと同じEメールアドレスでログインした今、このEメールが有効であることがわかった。"
  },
  {
    "start": 6007510,
    "end": 6008014,
    "text": "オーケー。"
  },
  {
    "start": 6008062,
    "end": 6011062,
    "text": "実際に受信するメールをカスタマイズできる。"
  },
  {
    "start": 6011206,
    "end": 6025100,
    "text": "繰り返しになるが、これはドキュメントの「recent」の「providers」に記載されており、この下にある「emails」をカスタマイズすることもできる。"
  },
  {
    "start": 6025680,
    "end": 6032832,
    "text": "さて、そしてこのチュートリアルの最後のステップは、プロジェクトをデプロイして、すべてが機能するように変更を加えることだ。"
  },
  {
    "start": 6032936,
    "end": 6036260,
    "text": "この最後の部分は非常に重要なので、見逃さないように。"
  },
  {
    "start": 6036640,
    "end": 6051120,
    "text": "さて、私たちのプロジェクトをVerzelにデプロイします。その前に、パッケージのJSONにアクセスして、Prisma generateを実行するポスト・インストール・スクリプトを追加する必要があります。"
  },
  {
    "start": 6051280,
    "end": 6055040,
    "text": "これは、次のjsでプリズマを使うときには必ず必要なことである。"
  },
  {
    "start": 6055160,
    "end": 6060400,
    "text": "これにより、プロジェクトがコンパイルされた後などにPrismaクライアントが生成されるようになります。"
  },
  {
    "start": 6060480,
    "end": 6061776,
    "text": "100％の確信はない。"
  },
  {
    "start": 6061888,
    "end": 6064656,
    "text": "これを追加しないとエラーになることだけは知っている。"
  },
  {
    "start": 6064808,
    "end": 6070928,
    "text": "このプロジェクトをGitHubにプッシュしたいのですが、ソース・コントロールを使ってコード上で直接行うことができます。"
  },
  {
    "start": 6071104,
    "end": 6074860,
    "text": "すべてをGitHubのリポジトリにプッシュし、メインブランチに移す。"
  },
  {
    "start": 6075250,
    "end": 6079470,
    "text": "次に、以前ストレージを作成したVerzelのダッシュボードに行く。"
  },
  {
    "start": 6079970,
    "end": 6082938,
    "text": "ここでもGitHubアカウントに接続する必要があります。"
  },
  {
    "start": 6082994,
    "end": 6092258,
    "text": "そうでない場合は、設定で接続することができます。新しいプロジェクトを追加すると、自動的にGitHubリポジトリが表示されます。"
  },
  {
    "start": 6092314,
    "end": 6094550,
    "text": "このプロジェクトをインポートすればいい。"
  },
  {
    "start": 6095370,
    "end": 6102430,
    "text": "次のJSプロジェクトであることは自動的に認識されますが、環境変数を提供する必要がありますね？"
  },
  {
    "start": 6102990,
    "end": 6112490,
    "text": "このファイルを丸ごとコピーして、ここにペーストすれば、すべてのファイルが追加され、デプロイをクリックすればいい。"
  },
  {
    "start": 6113310,
    "end": 6125646,
    "text": "コンパイルが完了したら、このウェブサイトを開くことができるはずだ。無料のバーセル・ドメインが手に入るので、静的にキャッシュされたページに移動することができる。"
  },
  {
    "start": 6125798,
    "end": 6128654,
    "text": "Eメールでのログインが有効なのでは？"
  },
  {
    "start": 6128742,
    "end": 6130542,
    "text": "ここで何かを変える必要はないのだから。"
  },
  {
    "start": 6130566,
    "end": 6131766,
    "text": "試してみよう。"
  },
  {
    "start": 6131918,
    "end": 6138638,
    "text": "最近のURLでサインインすると、localhostではなく、私たちのURLでサインインすると表示されるようになりました。"
  },
  {
    "start": 6138694,
    "end": 6143770,
    "text": "これで自動的に正しいURLがピックアップされ、サインインできる。"
  },
  {
    "start": 6144190,
    "end": 6144758,
    "text": "素晴らしい。"
  },
  {
    "start": 6144814,
    "end": 6154210,
    "text": "これはまだ機能するが、コールバックURLがまだlocalhostを指しているため、Oauthは機能せず、このエラーが発生する。"
  },
  {
    "start": 6154510,
    "end": 6163770,
    "text": "この問題を解決するために、Googleクラウドコンソールでプロジェクトに入り、もう一度APIとサービスの認証情報にアクセスする。"
  },
  {
    "start": 6164190,
    "end": 6170610,
    "text": "このリダイレクトURLを修正し、別の正規リダイレクトURLを追加します。"
  },
  {
    "start": 6170950,
    "end": 6185638,
    "text": "本番用ドメインが必要です。HTTPはここにコピーしますが、オフ・コールバックは同じ相対URLにあります。"
  },
  {
    "start": 6185774,
    "end": 6192270,
    "text": "これをHTTPsで追加し、保存すると、グーグル・ログインが機能するようになる。"
  },
  {
    "start": 6193250,
    "end": 6195114,
    "text": "祈っている。"
  },
  {
    "start": 6195242,
    "end": 6198458,
    "text": "念のためページを更新してみよう。"
  },
  {
    "start": 6198634,
    "end": 6202870,
    "text": "Googleでサインインしてください。"
  },
  {
    "start": 6203490,
    "end": 6204434,
    "text": "驚いたよ。"
  },
  {
    "start": 6204602,
    "end": 6210442,
    "text": "ここではロゴを追加していないので、プロジェクトをデプロイするために検証を待つ必要もない。"
  },
  {
    "start": 6210546,
    "end": 6218540,
    "text": "authの同意画面に行き、アプリの公開をクリックすれば、Googleアカウントを持つどのユーザーに対しても機能するようになる。"
  },
  {
    "start": 6219240,
    "end": 6221000,
    "text": "確認して終わり。"
  },
  {
    "start": 6221080,
    "end": 6224220,
    "text": "これでGoogleログインが本番で使えるようになった。"
  },
  {
    "start": 6225040,
    "end": 6231304,
    "text": "次に GitHub の設定に戻り、GitHub アプリで同じことをします。"
  },
  {
    "start": 6231432,
    "end": 6237688,
    "text": "O次に、5つのチュートリアルのうち、リダイレクトURLを追加できるのは1つだけです。"
  },
  {
    "start": 6237784,
    "end": 6242574,
    "text": "開発用と本番用の2つが必要な場合は、2つのアプリを作成する必要がある。"
  },
  {
    "start": 6242672,
    "end": 6246634,
    "text": "便宜上、すでに作成したものを再利用することにする。"
  },
  {
    "start": 6246762,
    "end": 6263110,
    "text": "もう一度、ルートURLのこの部分をlocalhostに置き換える必要がある。"
  },
  {
    "start": 6263530,
    "end": 6268270,
    "text": "アプリケーションを更新すると、GitHubへのログインもできるようになります。"
  },
  {
    "start": 6270940,
    "end": 6278360,
    "text": "GitHubでサインインすると、すでにGitHubアカウントにログインしているので、すぐに使えます。"
  },
  {
    "start": 6278740,
    "end": 6281676,
    "text": "さてさて、このチュートリアルが役に立ったかな？"
  },
  {
    "start": 6281748,
    "end": 6284020,
    "text": "もしそうなら、このビデオに「いいね！」をお願いします。"
  },
  {
    "start": 6284140,
    "end": 6287044,
    "text": "次のJSコースでは、もっと上級のコースを考えていることを忘れないでほしい。"
  },
  {
    "start": 6287092,
    "end": 6292564,
    "text": "最新情報を入手したい方は、codinginflow.comのニュースレターに登録してください。"
  },
  {
    "start": 6292652,
    "end": 6299268,
    "text": "あるいは、私のニュースレターに自動的に登録される、無料の反応ベストプラクティスEメールコースを手に入れるのもいい。"
  },
  {
    "start": 6299324,
    "end": 6306448,
    "text": "codingandflow.comのreactbestpracticesでご覧いただけます。それでは、また次のビデオでお会いしましょう。"
  },
  {
    "start": 6306544,
    "end": 6307720,
    "text": "良いコーディングを。"
  }
]