[
  {
    "start": 320,
    "end": 11910,
    "text": "皆さん、next JS 13コースへようこそ！このコースでは、next JSの最新バージョンを使って、新しいアプリディレクトリとreactサーバーコンポーネントの使い方を学びます。"
  },
  {
    "start": 12030,
    "end": 28660,
    "text": "ご存じないかもしれないが、next JSはreactフレームワークであり、reactをもう少し使いやすくしてくれる。"
  },
  {
    "start": 28820,
    "end": 35040,
    "text": "ネクストJSのショーケースのページをご覧いただければわかるように、ネクストJSは実際に大企業に利用されている。"
  },
  {
    "start": 35340,
    "end": 37364,
    "text": "これは単なるおもちゃのフレームワークではない。"
  },
  {
    "start": 37412,
    "end": 43720,
    "text": "これは現在最も人気のあるリアクト・フレームワークで、これで実際の制作サイトを構築することができる。"
  },
  {
    "start": 44100,
    "end": 47652,
    "text": "さて、なぜreactの上にフレームワークが必要なのかと疑問に思うかもしれない。"
  },
  {
    "start": 47716,
    "end": 49412,
    "text": "リアクトはすでにフレームワークではないのか？"
  },
  {
    "start": 49476,
    "end": 51212,
    "text": "なぜ今、次のJSが必要なのか？"
  },
  {
    "start": 51236,
    "end": 67752,
    "text": "というのも、従来のリアクト・アプリでは、JavaScriptを使ってクライアント・サイドでレンダリングすることしかできなかったからだ。"
  },
  {
    "start": 67856,
    "end": 76720,
    "text": "そして、JavaScriptを使って、基本的にはバックエンドでブラウザからデータをフェッチし、それが終わった後にUIに表示する。"
  },
  {
    "start": 76800,
    "end": 82304,
    "text": "これにより、以前のサーバーサイド・ソリューションに比べ、多くの人にとって開発が容易になった。"
  },
  {
    "start": 82392,
    "end": 85376,
    "text": "クライアント・サイド・レンダリングにも欠点がある。"
  },
  {
    "start": 85408,
    "end": 100404,
    "text": "例えば、これらのページをレンダリングするためにはJavaScriptが必要である。つまり、誰かがブラウザでJavaScriptを無効にしている場合、古典的なリアクト・アプリは動作せず、代わりに「このウェブサイトを表示するにはJavaScriptが必要です」というメッセージが表示されるだけである。"
  },
  {
    "start": 100532,
    "end": 103492,
    "text": "クライアント・サイド・レンダリングには、他にもいくつかの欠点がある。"
  },
  {
    "start": 103516,
    "end": 122128,
    "text": "例えば、Googleボットのような検索クローラーが、Google検索にインデックスさせるためにウェブサイトをクロールするとき、あなたの反応ウェブサイトをクロールするとき、これらのクローラーの一部は実際にJavaScriptを実行することができませんので、アルデスはこの空のページであり、彼らはインデックスする何も持っていないので、検索エンジン最適化にはあまり適していません。"
  },
  {
    "start": 122224,
    "end": 128728,
    "text": "グーグルのクローラーはJavaScriptを実際に実行できるようになったので、古典的なリアクト・アプリもグーグルにインデックスされるようになった。"
  },
  {
    "start": 128784,
    "end": 137344,
    "text": "私の知る限りでは、この空のHTMLページではなく、すでにサーバーからすべてのデータが戻ってくるのであれば、これほど最適な方法はない。"
  },
  {
    "start": 137432,
    "end": 147606,
    "text": "その後、次のJSが登場し、reactにいくつかの関数を追加して、サーバーでデータを取得し、準備のできたHTMLページをクライアントに返すのに使えるようになった。"
  },
  {
    "start": 147718,
    "end": 165334,
    "text": "あるいは、プロジェクトをコンパイルするときにデータをフェッチし、HTMLページにデータをキャッシュしておき、このページにアクセスがあったときにユーザーに提供することもできる。"
  },
  {
    "start": 165422,
    "end": 170598,
    "text": "つまり、プロジェクトをコンパイルし直すまで、どのユーザーも常に同じページを表示することになる。"
  },
  {
    "start": 170694,
    "end": 180748,
    "text": "もちろんこれは、次のJSがプリフェッチ戦略なども実装しているため、このページを開くのが非常に速く、ほとんど瞬時のようだったということも意味している。"
  },
  {
    "start": 180804,
    "end": 187292,
    "text": "全体として、next JSのおかげで、検索エンジンに最適化されたウェブページを超高速で構築できるようになった。"
  },
  {
    "start": 187396,
    "end": 204446,
    "text": "というのも、リアクトにはサーバー・コンポーネントと呼ばれるものがあり、これもまた、リアクト・コンポーネントをサーバー上でレンダリングし、サーバー上でデータを取得し、ユーザーがページにアクセスしたときに何らかのHTMLを提供する方法だからだ。"
  },
  {
    "start": 204558,
    "end": 213494,
    "text": "これは基本的に、next JSが以前から特別な関数を使って行ってきたことと同じである。"
  },
  {
    "start": 213582,
    "end": 219078,
    "text": "リアクト・サーバー・コンポーネントを使えば、クライアントにJavaScriptを渡す必要はない。"
  },
  {
    "start": 219174,
    "end": 226838,
    "text": "例えば、サーバーコンポーネントで重いNPMパッケージを使用した場合、このNPMパッケージがクライアントに届くことはない。"
  },
  {
    "start": 226894,
    "end": 230742,
    "text": "これはサーバー上で実行され、必要なことは何でも実行される。"
  },
  {
    "start": 230806,
    "end": 236980,
    "text": "例えば、マークダウンをレンダリングし、そしてまた準備ができたHTMLページがクライアントに送られる。"
  },
  {
    "start": 237100,
    "end": 243148,
    "text": "技術的にはHTMLではなく、彼らが発明した特別なフォーマットだが、概念的には次のように動作する。"
  },
  {
    "start": 243244,
    "end": 251060,
    "text": "違いは、次のJSでサーバーにデータをフェッチするかどうかをページ・レベルで決める必要がないことだ。"
  },
  {
    "start": 251100,
    "end": 254044,
    "text": "以前は1ページずつ決めなければならなかった。"
  },
  {
    "start": 254132,
    "end": 258555,
    "text": "今はコンポーネント・レベルで決めることができるので、サーバー・コンポーネントを持つことができる。"
  },
  {
    "start": 258707,
    "end": 261155,
    "text": "インディー・サーバー・コンポーネントはクライアント・コンポーネントになることができる。"
  },
  {
    "start": 261227,
    "end": 266771,
    "text": "これらは基本的に、JavaScriptを使ってクライアント上でレンダリングされる古典的なリアクト・コンポーネントである。"
  },
  {
    "start": 266955,
    "end": 269763,
    "text": "これらのクライアント・コンポーネントは、再びサーバー・コンポーネントになることができる。"
  },
  {
    "start": 269851,
    "end": 274419,
    "text": "つまり、ウェブサイトをさらに最適化することができるのだ。"
  },
  {
    "start": 274579,
    "end": 281059,
    "text": "問題は、リアクトがこれらのサーバーコンポーネントをネイティブに持つようになった今、ネクストJの役割は何かということだ。"
  },
  {
    "start": 281139,
    "end": 289955,
    "text": "というのも、手作業でサーバーコンポーネントをサポートするプロジェクトを立ち上げるのは難しいからだ。"
  },
  {
    "start": 290067,
    "end": 295648,
    "text": "ネクストJSDevは、これらの機能をすべて提供し、さらに独自の機能を追加してくれる。"
  },
  {
    "start": 295744,
    "end": 310424,
    "text": "例えば、next JSには独自のルーティング・システムが用意されているので、特別なファイル名を持つファイルを置くフォルダを作成するだけで、ウェブサイト上に異なるサブページを作成することができる。"
  },
  {
    "start": 310552,
    "end": 320112,
    "text": "ネクストJSはまた、画像最適化のようなものも追加し、ウェブサイトのパフォーマンスやSEOにとっても重要な、画像のリサイズを自動的に行ってくれる。"
  },
  {
    "start": 320216,
    "end": 323368,
    "text": "実際にサーバー側のレンダリングを向上させている。"
  },
  {
    "start": 323464,
    "end": 335832,
    "text": "リアクト・サーバー・コンポーネントの上では、いくつかの改良された動作が得られるし、サーバー上でのみ実行されるAPIルート・ハンドラを提供するため、バックエンド全体をnext JSで構築することもできる。"
  },
  {
    "start": 335896,
    "end": 344304,
    "text": "このサーバーへのHTTPリクエストは、expressや他のバックエンドサーバーと同じように行うことができる。"
  },
  {
    "start": 344352,
    "end": 353444,
    "text": "これらのAPIルートは非常に便利で、フルスタックのウェブサイトを持つことができ、別のバックエンドサーバーをセットアップすることなく、データベースリクエストやすべてを行うことができるからだ。"
  },
  {
    "start": 353532,
    "end": 355124,
    "text": "これらすべてが1つのプロジェクトに含まれているのだ。"
  },
  {
    "start": 355252,
    "end": 360100,
    "text": "大きなプロジェクトでは、expressサーバーのような別のバックエンドサーバーが必要になることが多い。"
  },
  {
    "start": 360140,
    "end": 361412,
    "text": "これも問題ない。"
  },
  {
    "start": 361476,
    "end": 367076,
    "text": "別のバックエンドでnext JSを使うこともできるが、あると便利な機能であることは間違いない。"
  },
  {
    "start": 367268,
    "end": 371724,
    "text": "さて、次のJ'sはこのリアクションのセットアップをより簡単にしてくれる。"
  },
  {
    "start": 371812,
    "end": 379382,
    "text": "実際、リアクトのドキュメントではフレームワークを使うことを推奨している。"
  },
  {
    "start": 379516,
    "end": 381794,
    "text": "次のJSがベストだと思う。"
  },
  {
    "start": 381882,
    "end": 402890,
    "text": "nextJSを管理しているのはVerzelという会社で、彼らはホスティング・プロバイダーでもあり、彼らのウェブ・ホスティングはもちろんnextJSに最適化されている。つまり、GitHubアカウントをVerzelleに接続し、いくつかのボタンをクリックするだけで、プロジェクトが超簡単にデプロイされ、サーバー・コンポーネントやAPIルートがすべて機能する。"
  },
  {
    "start": 402970,
    "end": 410764,
    "text": "もしあなたがリアクトをまったく知らないのであれば、まずクラシックリアクトを学び、そこですべてがクライアントサイドでレンダリングされるようにすれば何の問題もない。"
  },
  {
    "start": 410882,
    "end": 422912,
    "text": "というのも、リアクトの複雑さは楽しいけれど簡単ではないし、その上さらに追加機能があるのだから。"
  },
  {
    "start": 422976,
    "end": 428624,
    "text": "もしあなたが今までreactを使ったことがないのであれば、まずvanilla reactを学ぶことをお勧めする。"
  },
  {
    "start": 428752,
    "end": 435184,
    "text": "これについては、YouTubeの私のメーン・ビギナー・コースで、エクスプレス・バックエンドを使ったリアクトを学ぶことができる。"
  },
  {
    "start": 435312,
    "end": 450474,
    "text": "最初の何時間か、リアクトの部分を学んで、リアクトの基本を理解したと感じたら、このチュートリアルに戻って、ネクストJSで次のレベルに到達する方法を学べば十分です。"
  },
  {
    "start": 450642,
    "end": 454042,
    "text": "さて、ここでこれから作るプロジェクトを見てみよう。"
  },
  {
    "start": 454186,
    "end": 464194,
    "text": "このチュートリアルのポイントは、最も効率的な方法で次のJSアプリ・ルーターの重要な機能をすべて教えることだからです。"
  },
  {
    "start": 464282,
    "end": 470186,
    "text": "将来的には、もっと派手なプロジェクトのチュートリアルを作りたいと思っているので、これを見たい人はチャンネル登録をしてね。"
  },
  {
    "start": 470258,
    "end": 471950,
    "text": "このプロジェクトはシンプルだ。"
  },
  {
    "start": 471990,
    "end": 496446,
    "text": "また、next JS 13のアプリディレクトリの機能について学ぶだけでなく、これらの機能を旧来のページディレクトリと比較します。つまり、もしあなたが以前next JSの古いアプローチを使ったことがあるなら、これらのアプローチが互いにどのように対応し、既存のnext JSプロジェクトを新しいアプリルーターにどのように変換できるかを理解することができます。"
  },
  {
    "start": 496558,
    "end": 503254,
    "text": "このウェブサイトには様々なページがあり、それぞれのページで次のJSDeVのキャッシュ戦略を学ぶことができます。"
  },
  {
    "start": 503292,
    "end": 505322,
    "text": "キャッシュこそがすべてだからだ。"
  },
  {
    "start": 505426,
    "end": 513842,
    "text": "キャッシュは、ページのデータがいつフェッチされるかを、ページにアクセスするとき、あるいはプロジェクトを構築するときだけ、あるいはある時間間隔で決定する。"
  },
  {
    "start": 513906,
    "end": 516082,
    "text": "次のJSで、このすべてを設定することができる。"
  },
  {
    "start": 516186,
    "end": 520466,
    "text": "この画像は、画面を大きなサイズに設定したため、少し大きくなっている。"
  },
  {
    "start": 520538,
    "end": 522346,
    "text": "すべてをきちんと見ることができる。"
  },
  {
    "start": 522458,
    "end": 524506,
    "text": "これはウェブページの実際のサイズである。"
  },
  {
    "start": 524618,
    "end": 527034,
    "text": "そんなことはどうでもいい。"
  },
  {
    "start": 527162,
    "end": 528814,
    "text": "さて、ここからが面白いところだ。"
  },
  {
    "start": 528922,
    "end": 537374,
    "text": "この画像をunsplash APIから取得するエンドポイントは、このエンドポイントにリクエストするたびにランダムな画像を返します。"
  },
  {
    "start": 537502,
    "end": 541022,
    "text": "通常、ページを更新すると、新しい画像が戻ってくるはずだ。"
  },
  {
    "start": 541126,
    "end": 547254,
    "text": "このページでは静的キャッシュと言ったので、このデータはコンパイル時にしか取得されない。"
  },
  {
    "start": 547302,
    "end": 551446,
    "text": "つまり、ページを更新すると、また同じ画像が表示されるということだ。"
  },
  {
    "start": 551558,
    "end": 556170,
    "text": "私たちのアイデアでプロジェクトを再び構築するまで、私たちは同じ画像を見ることになる。"
  },
  {
    "start": 556730,
    "end": 559842,
    "text": "そこで、プロジェクトをもう一度コンパイルしてみた。"
  },
  {
    "start": 559906,
    "end": 561550,
    "text": "また始めるつもりだ。"
  },
  {
    "start": 562130,
    "end": 568946,
    "text": "ページを更新すると、また違う画像が表示される。なぜなら、これもビルド時に取得され、キャッシュされるからだ。"
  },
  {
    "start": 569058,
    "end": 573794,
    "text": "無料のunsplashアカウントを使っているためか、画像の読み込みに時間がかかる。"
  },
  {
    "start": 573922,
    "end": 575562,
    "text": "ちょっと遅いかな。"
  },
  {
    "start": 575706,
    "end": 580378,
    "text": "ページを更新すると、また同じ画像が表示される。"
  },
  {
    "start": 580554,
    "end": 586390,
    "text": "この写真に写っている人が何をしているのかは知らないが、これは私の靴紐の結び方ではない。"
  },
  {
    "start": 586770,
    "end": 587482,
    "text": "とにかくだ。"
  },
  {
    "start": 587586,
    "end": 591906,
    "text": "静的キャッシングの対極にあるのが、この動的ページだ。"
  },
  {
    "start": 592058,
    "end": 594322,
    "text": "このページは静的キャッシュされません。"
  },
  {
    "start": 594386,
    "end": 599338,
    "text": "その代わりに、静的ページとまったく同じエンドポイントにリクエストを行う。"
  },
  {
    "start": 599434,
    "end": 602458,
    "text": "ただ、ここではこのページにアクセスされるたびにそうしている。"
  },
  {
    "start": 602554,
    "end": 607138,
    "text": "このページを更新すると、unsplashから新しい写真が戻ってくる。"
  },
  {
    "start": 607274,
    "end": 611514,
    "text": "この2つのページのコードとマークアップはほとんど同じである。"
  },
  {
    "start": 611562,
    "end": 616302,
    "text": "キャッシングの動作が少し違うだけで、このすべてをすぐに学ぶことができる。"
  },
  {
    "start": 616406,
    "end": 622758,
    "text": "これらはすべて、next JSの旧バージョンのアプリ・ルーター以前にも可能だったが、現在はすべて少し違う仕組みになっている。"
  },
  {
    "start": 622854,
    "end": 632254,
    "text": "スタティック・レンダリングとダイナミック・レンダリングの中間的な方法として、インクリメンタル・スタティック・リジェネレーション、略してISRと呼ばれるものもある。"
  },
  {
    "start": 632382,
    "end": 642362,
    "text": "ISRを使えば、静的ページと同じように画像を静的にフェッチしてキャッシュし、一定の時間間隔で再検証することができる。"
  },
  {
    "start": 642486,
    "end": 652378,
    "text": "ここでは、時間間隔を15秒に設定している。つまり、15秒間は静的ページと同じように同じ画像が戻ってくるということだ。"
  },
  {
    "start": 652474,
    "end": 654730,
    "text": "すべてのユーザーがこの画像を取り戻す。"
  },
  {
    "start": 654810,
    "end": 662922,
    "text": "この時間ウィンドウが終了した後にユーザーがこのウェブサイトを開くと、次のjsが先に進み、新しいデータでこのページを再びレンダリングする。"
  },
  {
    "start": 663026,
    "end": 666322,
    "text": "これは、静的レンダリングと動的レンダリングの中間的な方法である。"
  },
  {
    "start": 666426,
    "end": 672350,
    "text": "今、15秒以上経過しているので、ページを更新すると新しい画像が表示されるはずです。"
  },
  {
    "start": 672690,
    "end": 681550,
    "text": "15秒間ページを更新すると、また15秒間同じ画像が表示される。"
  },
  {
    "start": 682330,
    "end": 688522,
    "text": "そして、ページを更新すると、より新しい再レンダリングがトリガーされるので、2回更新しなければならない。"
  },
  {
    "start": 688586,
    "end": 697950,
    "text": "15秒後、1回目の更新で古い画像が表示され、再レンダリングのトリガーとなり、2回目の更新で実際の新しいページが表示される。"
  },
  {
    "start": 701140,
    "end": 702996,
    "text": "15秒はもう終わっているはずだ。"
  },
  {
    "start": 703028,
    "end": 707956,
    "text": "そこに新しい映像があり、また15秒間同じ映像が映し出される。"
  },
  {
    "start": 708068,
    "end": 724308,
    "text": "なぜなら、ページを開くたびにバックエンドにリクエストする必要がないため、読み込みが非常に速いだけでなく、ここで設定するタイムウィンドウの大きさに応じて、比較的最新のデータを得ることができるからだ。"
  },
  {
    "start": 724364,
    "end": 729464,
    "text": "ページによっては1時間おきに更新されれば十分なものもあれば、5分おきに更新されるものもある。"
  },
  {
    "start": 729572,
    "end": 730784,
    "text": "何が必要かによる。"
  },
  {
    "start": 730872,
    "end": 743608,
    "text": "動的ページではunsplash APIへのリクエストが完了するまでに時間がかかったのに対し、この動的ページではページを開いたときに何もフェッチする必要がないため、静的ページと同じ速さでロードされる。"
  },
  {
    "start": 743704,
    "end": 749736,
    "text": "また、ダイナミック・ルートについても学びます。ダイナミック・ルートでは、URLの中に変更可能な何かを記述することができます。"
  },
  {
    "start": 749928,
    "end": 755076,
    "text": "ここではフィットネス画像を表示しているが、このページも静的にレンダリングされ、キャッシュされている。"
  },
  {
    "start": 755168,
    "end": 756836,
    "text": "だから開幕が早いんだ。"
  },
  {
    "start": 756948,
    "end": 764692,
    "text": "つまり、例えば「I don't know」や「Sunny」のように、どんな単語にも置き換えることができるのだ。"
  },
  {
    "start": 764836,
    "end": 768316,
    "text": "このページを開くと、ダイナミック・ページと同じように動作する。"
  },
  {
    "start": 768468,
    "end": 774172,
    "text": "unsplash APIからデータを取得し、このページを生成してキャッシュします。"
  },
  {
    "start": 774316,
    "end": 778040,
    "text": "このページをもう一度更新すれば、同じデータが表示されるはずだ。"
  },
  {
    "start": 779260,
    "end": 786756,
    "text": "そして、検索ページでは、バニラリアクト・アプリと同じように、古き良きクライアント・サイド・フェッチを使用している。"
  },
  {
    "start": 786828,
    "end": 790628,
    "text": "もちろん、next jsでもサーバー・サイド・フェッチを使う必要はない。"
  },
  {
    "start": 790684,
    "end": 794076,
    "text": "また、エフェクトやステートを使ってクライアント・サイドからデータをフェッチすることもできる。"
  },
  {
    "start": 794228,
    "end": 800560,
    "text": "これにはJavaScriptの実行が必要だが、何らかのインタラクティブ性が必要なときには便利だ。"
  },
  {
    "start": 801060,
    "end": 811508,
    "text": "例えば、ここでdocsと入力すると、このようにプログレス・スピナーが表示され、バックエンドから画像を取得してUIに表示する。"
  },
  {
    "start": 811684,
    "end": 824546,
    "text": "次のJS13で重要なその他の機能、例えば、各ページのメタデータの設定方法、例えば、上部に表示されるタイトルについて学びます。"
  },
  {
    "start": 824578,
    "end": 828970,
    "text": "これは、以前のページ・ディレクトリと比べると、現在では少し違った動きをしている。"
  },
  {
    "start": 829050,
    "end": 835910,
    "text": "また、前に触れたように、画像のサイズを自動的に変更する次の画像コンポーネントの使い方も学びます。"
  },
  {
    "start": 836250,
    "end": 840570,
    "text": "unsplash APIから返される画像は、実際にはこれよりもずっと大きい。"
  },
  {
    "start": 840690,
    "end": 852126,
    "text": "新しいタブでこの画像を開くと、ここで表示するのに最適なサイズであることがわかる。"
  },
  {
    "start": 852238,
    "end": 858430,
    "text": "また、特別なアンダースコアが次の画像URLにあり、そこから画像を読み込んでいることもわかる。"
  },
  {
    "start": 858590,
    "end": 864942,
    "text": "これは、次のJSがこれらの画像を自動的にリサイズしてくれるためで、読み込みが速くなるだけだ。"
  },
  {
    "start": 864966,
    "end": 868230,
    "text": "これは次のJSがもたらす非常に便利な機能である。"
  },
  {
    "start": 868310,
    "end": 873310,
    "text": "また、これらのバックエンドルートの1つにAPIエンドポイントを設定する。"
  },
  {
    "start": 873430,
    "end": 875510,
    "text": "この仕組みも学んでほしい。"
  },
  {
    "start": 875590,
    "end": 886398,
    "text": "最後に、私たちはVerzelleにすべてをデプロイし、Verzelはあなたに無料でURLを提供します。"
  },
  {
    "start": 886494,
    "end": 892510,
    "text": "バニラJavaScriptは狂人のためのものだからだ。"
  },
  {
    "start": 892630,
    "end": 899724,
    "text": "もしまだリアクトの経験がないのであれば、まずは僕の初心者向けコースを見るべきだ。"
  },
  {
    "start": 899812,
    "end": 903004,
    "text": "JSの予備知識は必要ない。"
  },
  {
    "start": 903052,
    "end": 905580,
    "text": "もしあなたが次のjsにまったく詳しくないのであれば、これで十分だ。"
  },
  {
    "start": 905620,
    "end": 906636,
    "text": "何でも教えてあげる。"
  },
  {
    "start": 906748,
    "end": 917260,
    "text": "というのも、このようなチュートリアルをもっとたくさん作って、次のJSとReact、そして将来的には他のフレームワークを使った、より高度なプロジェクトを作りたいと思っているからだ。"
  },
  {
    "start": 917380,
    "end": 934014,
    "text": "また、私の有料コースにも賛辞を送りたいと思います。次のJS有料コースでは、より高度な機能を備えた大規模なプロジェクトを構築し、expressのバックエンドを別個に構築して、必要なものをすべて備えた本番環境を整え、すべてをデプロイします。"
  },
  {
    "start": 934142,
    "end": 939910,
    "text": "1、2ヶ月前にコースを録画したとき、次のJSのページディレクトリを使った。"
  },
  {
    "start": 939990,
    "end": 945526,
    "text": "私は現在、このすべてを新しいアプリのディレクトリに移行するアップデートに取り組んでいる。"
  },
  {
    "start": 945598,
    "end": 955568,
    "text": "なぜなら、そこでは古いアプローチの使い方を学び、それを新しいアプローチにリファクタリングする方法を学ぶ。"
  },
  {
    "start": 955654,
    "end": 962940,
    "text": "新しいアプリのルーターにはまだバグが残っているので、ページ・ディレクトリを使った古いアプローチを知っておくことはまだ役に立つと思う。"
  },
  {
    "start": 962980,
    "end": 972804,
    "text": "実際、GitHubには多くの問題があり、私自身もすでに多くのバグレポートを提出している。"
  },
  {
    "start": 972852,
    "end": 979988,
    "text": "nextJSはすでに、ページ・ルーターがnextJSのさらに多くのメジャー・バージョンでサポートされることを確認している。"
  },
  {
    "start": 980084,
    "end": 981498,
    "text": "この先何年も。"
  },
  {
    "start": 981604,
    "end": 987158,
    "text": "でも、両方のアプローチを学ぶことは有益だと思う。"
  },
  {
    "start": 987214,
    "end": 991502,
    "text": "リンクはcodinginflow.com next jsの下にあります。"
  },
  {
    "start": 991606,
    "end": 998574,
    "text": "このチュートリアルでは、より新しいアプリ・ルーター・アプローチに完全に焦点を当てます。"
  },
  {
    "start": 998702,
    "end": 1001450,
    "text": "それでは、このコースを大いに楽しんでください。"
  },
  {
    "start": 1002270,
    "end": 1006888,
    "text": "next jsを使うには、マシンにnode JSがインストールされている必要がある。"
  },
  {
    "start": 1007014,
    "end": 1011020,
    "text": "以前にreactを扱ったことがあるなら、おそらくすでにnodeがインストールされているだろう。"
  },
  {
    "start": 1011140,
    "end": 1017428,
    "text": "node veerと入力するとバージョン18.15と表示される。"
  },
  {
    "start": 1017564,
    "end": 1024540,
    "text": "何も表示されない場合は、nodejs.orgにアクセスし、最新のLTsバージョンをインストールしてください。"
  },
  {
    "start": 1024660,
    "end": 1030212,
    "text": "インストール手順に従って、もう一度このコマンドを入力してください。"
  },
  {
    "start": 1030316,
    "end": 1047440,
    "text": "実際のnext jsアプリの作成はとても簡単で、next jsにはcreate next appコマンドというものが用意されている。"
  },
  {
    "start": 1047780,
    "end": 1050020,
    "text": "これをコマンドラインにコピーする。"
  },
  {
    "start": 1050140,
    "end": 1052332,
    "text": "必要なら手書きで入力してもいい。"
  },
  {
    "start": 1052476,
    "end": 1057108,
    "text": "Enterキーを押すと、セットアップがいくつか質問してくる。"
  },
  {
    "start": 1057244,
    "end": 1061508,
    "text": "もしこのチュートリアルを将来見ることになったら、いくつかのことが変わるかもしれない。"
  },
  {
    "start": 1061604,
    "end": 1066780,
    "text": "例えば、私たちが使っているパッケージが新しいバージョンになり、それが原因で物事が壊れてしまうことがある。"
  },
  {
    "start": 1066900,
    "end": 1077748,
    "text": "このビデオでは、私が使っているプロジェクトのスタート・コードへのリンクも貼っておきます。"
  },
  {
    "start": 1077844,
    "end": 1080060,
    "text": "スタートコードのGitHubリンクだ。"
  },
  {
    "start": 1080140,
    "end": 1090132,
    "text": "将来、このチュートリアルを見ていて動かなくなった場合、ここでやっているようにプロジェクトを手動でセットアップする代わりに、スタートコードをダウンロードしてこれを使うことができる。"
  },
  {
    "start": 1090236,
    "end": 1093756,
    "text": "勇気があれば、まったく新しいプロジェクトを立ち上げることもできる。"
  },
  {
    "start": 1093868,
    "end": 1095486,
    "text": "これが私たちがこれからやろうとしていることだ。"
  },
  {
    "start": 1095588,
    "end": 1098058,
    "text": "プロジェクトの名前を聞かれる。"
  },
  {
    "start": 1098154,
    "end": 1100042,
    "text": "これを何と呼んでも構わない。"
  },
  {
    "start": 1100226,
    "end": 1111430,
    "text": "このnext J S 13.4 image gallery 13.4は、このチュートリアルで使用するnext JSのバージョンです。"
  },
  {
    "start": 1113050,
    "end": 1117042,
    "text": "エンターキーを押すと、タイプスクリプトを使うかどうか聞いてくる。"
  },
  {
    "start": 1117106,
    "end": 1121354,
    "text": "矢印キーで \"はい \"を選択し、もう一度エンターキーを押す。"
  },
  {
    "start": 1121402,
    "end": 1124590,
    "text": "これはコードの間違いを見つけるのに役立つだけだ。"
  },
  {
    "start": 1125320,
    "end": 1129520,
    "text": "ここではtailwind cSSは使わず、代わりにbootstrapを使う。"
  },
  {
    "start": 1129600,
    "end": 1141632,
    "text": "bootstrapの人気は少し落ちていて、tailwind CSSの方がよりモダンなのは知っていますが、自分たちですべてのCSSを書く代わりに、bootstrapを使って素早く小さなプロジェクトを立ち上げる方が簡単です。"
  },
  {
    "start": 1141736,
    "end": 1144536,
    "text": "私がブートストラップを選ぶ理由はこれだけではない。"
  },
  {
    "start": 1144608,
    "end": 1152764,
    "text": "Bootstrapのようなコンポーネント・ライブラリは、リアクト・サーバー・コンポーネントで特別な処理をする必要がある。"
  },
  {
    "start": 1152872,
    "end": 1155372,
    "text": "追い風CSSは「いいえ」を選択。"
  },
  {
    "start": 1155516,
    "end": 1161460,
    "text": "また、これらはすべて、以下のビデオ解説にあるスターティング・ポイント・プロジェクトですでにセットアップされている。"
  },
  {
    "start": 1161620,
    "end": 1166620,
    "text": "ソース・ディレクトリは任意で、すべてのソース・コードをこのフォルダに置くだけだ。"
  },
  {
    "start": 1166660,
    "end": 1169852,
    "text": "私は組織のためにこれが好きなので、ここでも「はい」を選択する。"
  },
  {
    "start": 1169956,
    "end": 1172348,
    "text": "間違ってエンターキーを2回押してしまった。"
  },
  {
    "start": 1172444,
    "end": 1179588,
    "text": "次の質問は、アプリ・ルーターを使うかどうかです。"
  },
  {
    "start": 1179644,
    "end": 1183960,
    "text": "以前のものはpagesディレクトリだったが、このチュートリアルではアプリ・ルーターを使う。"
  },
  {
    "start": 1184290,
    "end": 1187090,
    "text": "デフォルトのインポートエイリアスをカスタマイズしますか？"
  },
  {
    "start": 1187170,
    "end": 1189870,
    "text": "いや、これが最後の質問になるはずだ。"
  },
  {
    "start": 1190250,
    "end": 1201546,
    "text": "この作業が終わったら、コマンドラインを閉じて、このプロジェクトをセットアップしたフォルダを開くことができる。"
  },
  {
    "start": 1201658,
    "end": 1205354,
    "text": "ここで右クリックしてコードで開くことができる。"
  },
  {
    "start": 1205482,
    "end": 1211264,
    "text": "このオプションがない場合は、対コードを開き、そこにフォルダをドラッグ＆ドロップすることもできる。"
  },
  {
    "start": 1211402,
    "end": 1215960,
    "text": "または、対コード内で「開く」をクリックし、このフォルダを開く。"
  },
  {
    "start": 1216540,
    "end": 1223240,
    "text": "さて、このcreate next appコマンドを実行すると、プロジェクトの中にすでにたくさんのファイルがセットアップされる。"
  },
  {
    "start": 1223700,
    "end": 1228400,
    "text": "セットアップでタイプスクリプトを選択したので、タイプスクリプトのコンフィギュレーションがある。"
  },
  {
    "start": 1228700,
    "end": 1233172,
    "text": "もちろん、依存関係といくつかのスクリプトを含むパッケージJSONがある。"
  },
  {
    "start": 1233316,
    "end": 1239332,
    "text": "次に、このプロジェクトをGitHubにプッシュするためのGitignoreを設定する。"
  },
  {
    "start": 1239436,
    "end": 1244724,
    "text": "SRZフォルダには、ウェブサイトを構成する実際のファイルが格納されています。"
  },
  {
    "start": 1244892,
    "end": 1250044,
    "text": "このプロジェクトを実行する前に、ここで使用するブートストラップの依存関係をインストールしたいと思います。"
  },
  {
    "start": 1250092,
    "end": 1266862,
    "text": "このコマンドでターミナルを開き、new terminalと入力する。"
  },
  {
    "start": 1266886,
    "end": 1269182,
    "text": "依存関係はすでにインストールされている。"
  },
  {
    "start": 1269366,
    "end": 1278050,
    "text": "インストール・ブートストラップ・スペースとリアクト・ブートストラップを略してNPMと入力する。"
  },
  {
    "start": 1279150,
    "end": 1282702,
    "text": "実はこれが、インストールしなければならない唯一の依存関係だ。"
  },
  {
    "start": 1282886,
    "end": 1288974,
    "text": "このプロジェクトで使用するのは、あなたの次のJSプロジェクトにすでに含まれているもの以外にはこれだけです。"
  },
  {
    "start": 1289142,
    "end": 1289542,
    "text": "オーケー。"
  },
  {
    "start": 1289566,
    "end": 1296700,
    "text": "そうすれば、このプロジェクトを開発モードで実行することができる。"
  },
  {
    "start": 1297160,
    "end": 1302432,
    "text": "これは、JSONパッケージにデフォルトでセットアップされているスクリプトである。"
  },
  {
    "start": 1302576,
    "end": 1308560,
    "text": "次のdevコマンドを実行し、また次のJのウェブサイトを開発モードで実行する。"
  },
  {
    "start": 1308720,
    "end": 1313460,
    "text": "見ての通り、デフォルトではlocalhost 3000で実行される。"
  },
  {
    "start": 1313920,
    "end": 1318936,
    "text": "ブラウザーを開いてlocalhost 3000にアクセスすればいい。"
  },
  {
    "start": 1319008,
    "end": 1320074,
    "text": "これを見てくれ。"
  },
  {
    "start": 1320232,
    "end": 1324062,
    "text": "そう、デフォルトで設定されている定型ページだ。"
  },
  {
    "start": 1324246,
    "end": 1329890,
    "text": "もちろん、いずれはこのページを廃止して、自分たちのページを立ち上げるつもりだ。"
  },
  {
    "start": 1330230,
    "end": 1332846,
    "text": "それが次のセクションでやることだ。"
  },
  {
    "start": 1333038,
    "end": 1341590,
    "text": "さて、localhost 3000で見ることができるフロントページは、このページTSXファイルから来ている。"
  },
  {
    "start": 1341750,
    "end": 1352324,
    "text": "このフロントページレイアウトのJSXコードはすべてsrzの中にあり、このページのTSXはsrzの中にあり、そしてappフォルダの中にあります。"
  },
  {
    "start": 1352452,
    "end": 1358004,
    "text": "appフォルダーは、新しいnext Jsアプリルーターのページ用のAltaコードを置く場所です。"
  },
  {
    "start": 1358132,
    "end": 1360044,
    "text": "ページフォルダーができる前はね。"
  },
  {
    "start": 1360132,
    "end": 1366084,
    "text": "さて、pagesフォルダの中にこのappフォルダがあり、このファイルはindex TSXと呼ばれていた。"
  },
  {
    "start": 1366212,
    "end": 1368324,
    "text": "現在はTSXと呼ばれている。"
  },
  {
    "start": 1368452,
    "end": 1370196,
    "text": "それらは同等である。"
  },
  {
    "start": 1370308,
    "end": 1380770,
    "text": "ウェブサイトに表示するページを作りたいときはいつでも、このようなページTSxファイルを作らなければならない。"
  },
  {
    "start": 1380890,
    "end": 1387242,
    "text": "ページの隣には、フロントページ専用のCSSを含むCSSモジュールがある。"
  },
  {
    "start": 1387346,
    "end": 1394602,
    "text": "CSSモジュールを使ったことがない人のために説明しておくと、CSSモジュールは基本的に、CSSを特定のファイルだけにスコープする方法だ。"
  },
  {
    "start": 1394746,
    "end": 1405892,
    "text": "ここでは、ページ・モジュールCSSをインポートし、ここで設定したCSSクラスがこの1つのコンポーネントにのみ適用されるようにしています。"
  },
  {
    "start": 1405996,
    "end": 1414612,
    "text": "こうすることで、互いに干渉し合う可能性のあるグローバル・クラスをいくつも設定する必要がなくなるからだ。"
  },
  {
    "start": 1414756,
    "end": 1424148,
    "text": "その代わり、例えばここにあるメイン・クラスはこのページだけに適用され、後で別のページに別のメインCSSクラスを設けることができる。"
  },
  {
    "start": 1424284,
    "end": 1437804,
    "text": "旧来のページ・ディレクトリとの大きな違いは、CSSファイルやその他のファイルを、旧来のページ・ディレクトリや次のJSのページの隣にあるアプリ・ルーターに直接置くことができるようになったことだ。"
  },
  {
    "start": 1437852,
    "end": 1439412,
    "text": "そこでは不可能だった。"
  },
  {
    "start": 1439436,
    "end": 1443692,
    "text": "これらのファイルは、pagesフォルダーの外にある別のフォルダーに入れなければならなかった。"
  },
  {
    "start": 1443796,
    "end": 1447460,
    "text": "これで、これらのファイルを共同検索できるようになった。"
  },
  {
    "start": 1447620,
    "end": 1451452,
    "text": "そしてもうひとつ重要なファイルが、このレイアウトTsXファイルだ。"
  },
  {
    "start": 1451516,
    "end": 1453652,
    "text": "このファイル名も重要である。"
  },
  {
    "start": 1453756,
    "end": 1459080,
    "text": "ページTSXやレイアウトTSXの名前を変更すると、動作しなくなります。"
  },
  {
    "start": 1459740,
    "end": 1462668,
    "text": "このレイアウトはアプリケーション全体を包み込む。"
  },
  {
    "start": 1462804,
    "end": 1470676,
    "text": "ホームページのTSxファイルは、実際にはbodyタグの中の子としてここにレンダリングされる。"
  },
  {
    "start": 1470828,
    "end": 1474892,
    "text": "後で別のページに移動した場合も、ここにレンダリングされる。"
  },
  {
    "start": 1475036,
    "end": 1482308,
    "text": "レイアウトは、例えば、このアプリの別のページ間で共有されるべき十分なバーを置くことができる場所です。"
  },
  {
    "start": 1482404,
    "end": 1490112,
    "text": "もし以前にnext Jsでpagesディレクトリを使ったことがあれば、これはunderscore appとunderscore dot documentファイルに相当する。"
  },
  {
    "start": 1490176,
    "end": 1495672,
    "text": "これらのレイアウトは1つのレイアウトファイルに統合され、ネストしたレイアウトも作成できるようになった。"
  },
  {
    "start": 1495736,
    "end": 1506024,
    "text": "このレイアウトはアプリ全体に適用されますが、例えばサイドバーのような似たような要素を共有すべき特定のルートにのみサブレイアウトを設定することもできます。"
  },
  {
    "start": 1506112,
    "end": 1518242,
    "text": "シンプルなアプリの場合、これはより高度なもので、通常はアプリ全体を包む1つのレイアウトをアプリフォルダに持つだけで十分です。"
  },
  {
    "start": 1518266,
    "end": 1526002,
    "text": "このconstメタデータをエクスポートすることができる。スペルは重要で、このように小文字で正確に綴る必要がある。"
  },
  {
    "start": 1526026,
    "end": 1528962,
    "text": "このようにして、ウェブページのメタデータを定義することができる。"
  },
  {
    "start": 1529026,
    "end": 1539562,
    "text": "例えば、タイトルはこのタブに表示されるもので、説明文は、例えばツイッターやフェイスブックなどのソーシャルメディアにウェブサイトへのリンクを貼り付けるときに表示される。"
  },
  {
    "start": 1539706,
    "end": 1544910,
    "text": "これは個人的な好みに過ぎないが、二重引用符を使うことにしよう。"
  },
  {
    "start": 1545470,
    "end": 1554966,
    "text": "タイトルをnext JS 13.4イメージギャラリーに設定し、保存するとすぐにこのタブで変更が確認できます。"
  },
  {
    "start": 1555078,
    "end": 1557166,
    "text": "タイトルがまた変わった。"
  },
  {
    "start": 1557238,
    "end": 1561086,
    "text": "アプリのサブページごとに異なるタイトルを設定できる。"
  },
  {
    "start": 1561158,
    "end": 1562406,
    "text": "これは後でやろう。"
  },
  {
    "start": 1562558,
    "end": 1566662,
    "text": "このタイトルをレイアウトに設定すると、アプリケーション全体がラップされます。"
  },
  {
    "start": 1566766,
    "end": 1569102,
    "text": "これは基本的にフォールバックとして使われる。"
  },
  {
    "start": 1569206,
    "end": 1574308,
    "text": "特定のページでより詳細なタイトルを設定しない場合は、いつでもこのタイトルが使われる。"
  },
  {
    "start": 1574404,
    "end": 1576772,
    "text": "これはいわばグローバルタイトルである。"
  },
  {
    "start": 1576916,
    "end": 1587440,
    "text": "また、チュートリアル・プロジェクトの説明をフローでコーディングして変更するつもりだ。"
  },
  {
    "start": 1587820,
    "end": 1596240,
    "text": "説明文はブラウザに表示されないため、ここでは見ることができないが、これもまた、例えばソーシャルメディア上で、ウェブサイトへのリンクを貼り付けると表示される。"
  },
  {
    "start": 1596580,
    "end": 1601000,
    "text": "このグローバルCSSファイルもここにインポートする。"
  },
  {
    "start": 1601480,
    "end": 1607528,
    "text": "先にCSSモジュールの仕組みを説明したが、グローバルCSSを使うこともできる。"
  },
  {
    "start": 1607664,
    "end": 1612656,
    "text": "ここに入れたものは、ホームページのすべてのページに適用されます。"
  },
  {
    "start": 1612848,
    "end": 1625024,
    "text": "独自のルートを設定するには、別のページTSXファイルを作成する必要がありますが、ルート・フォルダにすでに1つありますよね。"
  },
  {
    "start": 1625192,
    "end": 1629872,
    "text": "例えば、localhost 3000 helloの下にページを作りたいとしよう。"
  },
  {
    "start": 1630016,
    "end": 1635860,
    "text": "そのためには、アプリのディレクトリに相対URLで新しいフォルダを作らなければならない。"
  },
  {
    "start": 1636280,
    "end": 1638824,
    "text": "この場合、こんにちは、これはほんの一例です。"
  },
  {
    "start": 1638992,
    "end": 1642740,
    "text": "そしてここにTSXのページを置く。"
  },
  {
    "start": 1643240,
    "end": 1647576,
    "text": "繰り返しになるが、これはTSXと呼ばれるページでなければならない。"
  },
  {
    "start": 1647648,
    "end": 1651936,
    "text": "よし、ここに何を入れても、このURLの下にレンダリングされるはずだ。"
  },
  {
    "start": 1652128,
    "end": 1659610,
    "text": "ここで、export default関数を使ってコンポーネントをエクスポートすることができる。"
  },
  {
    "start": 1661430,
    "end": 1663630,
    "text": "コンポーネントの名前はあなた次第だ。"
  },
  {
    "start": 1663670,
    "end": 1667214,
    "text": "このページをハローページと呼ぶのは自由だ。"
  },
  {
    "start": 1667382,
    "end": 1677110,
    "text": "ここでは単純に、hello next JS 13と書かれたdivを返します。"
  },
  {
    "start": 1677230,
    "end": 1683890,
    "text": "これを保存して、localhost 3000にナビゲートしてみよう。"
  },
  {
    "start": 1684560,
    "end": 1685340,
    "text": "こんにちは。"
  },
  {
    "start": 1686240,
    "end": 1687512,
    "text": "そこに私たちのページがある。"
  },
  {
    "start": 1687616,
    "end": 1692944,
    "text": "まだ見た目は美しくないが、これで次のJS 13アプリでどのようにページをセットアップできるかがわかった。"
  },
  {
    "start": 1693032,
    "end": 1701944,
    "text": "また、ページTSXファイルの命名は重要で、古いページディレクトリのインデックスTSXファイルに相当する。"
  },
  {
    "start": 1702032,
    "end": 1704080,
    "text": "今はページTsXと呼ばれている。"
  },
  {
    "start": 1704200,
    "end": 1708712,
    "text": "昔のページ・ルーターでは、ファイル名はURLの一部だった。"
  },
  {
    "start": 1708856,
    "end": 1715610,
    "text": "例えば、これをバジンガと名づければ、ハローバジンガのページに到達します。"
  },
  {
    "start": 1715730,
    "end": 1716786,
    "text": "今すぐアプリのルーターで"
  },
  {
    "start": 1716818,
    "end": 1718226,
    "text": "これはもう事実ではない。"
  },
  {
    "start": 1718298,
    "end": 1721442,
    "text": "このページには常にtsXという名前をつけなければならない。"
  },
  {
    "start": 1721546,
    "end": 1729346,
    "text": "他の名前はありえないし、URL構造はこのページtsxファイルを置くフォルダによって完全に定義される。"
  },
  {
    "start": 1729458,
    "end": 1738636,
    "text": "もし私たちのページをhello Bazingaの下に置きたいのであれば、helloフォルダの中にbazingaという別のフォルダを作らなければなりません。"
  },
  {
    "start": 1738738,
    "end": 1741384,
    "text": "これが、ネストされたURLルートを作成する方法だ。"
  },
  {
    "start": 1741552,
    "end": 1748312,
    "text": "さて、デフォルトでアプリケーション全体を包むレイアウトには、このフォントが設定されています。"
  },
  {
    "start": 1748456,
    "end": 1749776,
    "text": "これはグーグルのフォントだ。"
  },
  {
    "start": 1749848,
    "end": 1762488,
    "text": "次ページのJSには、グーグル・フォントが付属しており、あなたのサーバーに保存される。"
  },
  {
    "start": 1762584,
    "end": 1764744,
    "text": "さまざまなフォントを試すこともできる。"
  },
  {
    "start": 1764872,
    "end": 1767008,
    "text": "これらのGoogleフォントはすべてここで入手できる。"
  },
  {
    "start": 1767064,
    "end": 1773484,
    "text": "デフォルトではenterに固定され、ボディに適用される。"
  },
  {
    "start": 1773652,
    "end": 1775840,
    "text": "ボディはすべてのページを包む。"
  },
  {
    "start": 1776140,
    "end": 1784380,
    "text": "このクラス名を削除すると、helloページのフォントはこの非常に醜いフォントに変わるはずだ。"
  },
  {
    "start": 1784540,
    "end": 1791080,
    "text": "フロント・ページも更新すれば、アプリ全体に適用されるからだ。"
  },
  {
    "start": 1791420,
    "end": 1792588,
    "text": "これはひどい。"
  },
  {
    "start": 1792644,
    "end": 1802150,
    "text": "また、アプリ全体のすべてのページで共有したい要素も、このレイアウトに入れることができます。"
  },
  {
    "start": 1802450,
    "end": 1806898,
    "text": "コードをフォーマットし直して、とりあえずここにdivを入れよう。"
  },
  {
    "start": 1806994,
    "end": 1809722,
    "text": "後でこれを実際のナバーに置き換える。"
  },
  {
    "start": 1809906,
    "end": 1812338,
    "text": "とりあえず、ここにテキストを置いておく。"
  },
  {
    "start": 1812514,
    "end": 1817010,
    "text": "この差分はレイアウト間で共有される。"
  },
  {
    "start": 1817170,
    "end": 1820298,
    "text": "さて、これを保存すると、ここにこのdivが表示されるはずだ。"
  },
  {
    "start": 1820354,
    "end": 1823082,
    "text": "よし、この上の部分に隠れている。"
  },
  {
    "start": 1823226,
    "end": 1828258,
    "text": "トップページのTSXファイルで、これを素早く削除しよう。"
  },
  {
    "start": 1828354,
    "end": 1831882,
    "text": "これはhelloの方ではなく、このappフォルダーの中にある。"
  },
  {
    "start": 1832066,
    "end": 1836554,
    "text": "この部分を削除して保存する。"
  },
  {
    "start": 1836642,
    "end": 1846426,
    "text": "スラッシュ・ハローに移動すると、共有されたdivが表示される。"
  },
  {
    "start": 1846578,
    "end": 1856750,
    "text": "なるほど、レイアウトTSXとページTsXはnext j'sの中では特別なファイルであり、これらの名前をつけるだけで、ある目的を果たすことができるからだ。"
  },
  {
    "start": 1856870,
    "end": 1862790,
    "text": "次のjsには、ルーターで特定の役割を果たす特別なファイルがもっとある。"
  },
  {
    "start": 1862910,
    "end": 1867670,
    "text": "例えば、地獄のように存在しないページに行こうとする。"
  },
  {
    "start": 1867710,
    "end": 1871118,
    "text": "例えば、この一般的な404ページにたどり着く。"
  },
  {
    "start": 1871254,
    "end": 1873678,
    "text": "これはデフォルトで次のJSに設定されている。"
  },
  {
    "start": 1873734,
    "end": 1880508,
    "text": "というのも、私たちの共有divはここにはなく、実際、アプリのレイアウトの何もここにはないからだ。"
  },
  {
    "start": 1880614,
    "end": 1886200,
    "text": "例えば、私たちのアプリが素敵な背景色やブランディングを持っていたとしても、これらは何も表示されません。"
  },
  {
    "start": 1886240,
    "end": 1889384,
    "text": "ここでは、このごく当たり障りのない白い404ページが表示される。"
  },
  {
    "start": 1889512,
    "end": 1893120,
    "text": "私たち自身の404ページにこれを置き換えるのはいい考えだ。"
  },
  {
    "start": 1893200,
    "end": 1898168,
    "text": "アプリ・フォルダー内に直接ファイルを作成することで、これを再び行うことができる。"
  },
  {
    "start": 1898264,
    "end": 1906250,
    "text": "それはここに置かれ、TSXというマイナスではない正確な名前がなければならない。"
  },
  {
    "start": 1906440,
    "end": 1910318,
    "text": "これは自動的に404 not foundページに変わる。"
  },
  {
    "start": 1910454,
    "end": 1918438,
    "text": "このファイルを作成すると、画面が空っぽになるのはそのためだ。"
  },
  {
    "start": 1918574,
    "end": 1920734,
    "text": "簡単なページをエクスポートしてみよう。"
  },
  {
    "start": 1920822,
    "end": 1927210,
    "text": "ここでもデフォルトの関数をエクスポートし、not foundと呼び直す。"
  },
  {
    "start": 1929470,
    "end": 1931414,
    "text": "ここではレイアウトを返したい。"
  },
  {
    "start": 1931502,
    "end": 1935856,
    "text": "ここでもシンプルに説明するが、自分のプロジェクトではもっと洗練させることができる。"
  },
  {
    "start": 1936038,
    "end": 1937560,
    "text": "ここにdivを置いた。"
  },
  {
    "start": 1938060,
    "end": 1946240,
    "text": "このdivの中に、見つからなかった見出しと、その下にテキストを入れた。"
  },
  {
    "start": 1946820,
    "end": 1950204,
    "text": "申し訳ありませんが、このページは存在しません。"
  },
  {
    "start": 1950292,
    "end": 1953844,
    "text": "保存するとこのようになる。"
  },
  {
    "start": 1953932,
    "end": 1956828,
    "text": "ページを更新してみよう。"
  },
  {
    "start": 1956884,
    "end": 1960188,
    "text": "美しくはないけれど、僕と同じように働いてくれる。"
  },
  {
    "start": 1960324,
    "end": 1974774,
    "text": "つまり、アプリのレイアウトにナバーがある場合、このナバーは見つからないページでも表示されます。"
  },
  {
    "start": 1974902,
    "end": 1982094,
    "text": "次に設定する特別なファイルは、これらのページの読み込みに時間がかかる場合のためのローディング・ページだ。"
  },
  {
    "start": 1982142,
    "end": 1984410,
    "text": "代わりにこのローディング・ページが表示される。"
  },
  {
    "start": 1984910,
    "end": 1987958,
    "text": "ここでもappフォルダに入れる必要がある。"
  },
  {
    "start": 1988094,
    "end": 1993578,
    "text": "また、異なるルート内でより詳細なローディングページを作成することができます。"
  },
  {
    "start": 1993734,
    "end": 2001042,
    "text": "ローディングページをhelloに置くこともでき、これはhelloフォルダ内のルート間をナビゲートするときだけ使われる。"
  },
  {
    "start": 2001186,
    "end": 2009030,
    "text": "通常、少なくとも1つのグローバル・ローディング・ページをアプリ・フォルダーに置きたいものだ。"
  },
  {
    "start": 2009410,
    "end": 2016130,
    "text": "JavaScriptを使用する場合は、TsxまたはJsxを読み込むという名前にしなければならない。"
  },
  {
    "start": 2016290,
    "end": 2018630,
    "text": "ファイル名が異なってはならない。"
  },
  {
    "start": 2019300,
    "end": 2021620,
    "text": "ここでは非常にシンプルなレイアウトを設定してみよう。"
  },
  {
    "start": 2021700,
    "end": 2039292,
    "text": "ここでもデフォルトの関数をエクスポートし、ここではローディングと書かれたdivだけを返します。"
  },
  {
    "start": 2039356,
    "end": 2040308,
    "text": "これはあなた次第だ。"
  },
  {
    "start": 2040364,
    "end": 2041960,
    "text": "私はこれをローディングと呼ぶつもりだ。"
  },
  {
    "start": 2042580,
    "end": 2048520,
    "text": "ローディング・ページが表示されるのは、開こうとしているページに遅延がある場合だけだ。"
  },
  {
    "start": 2048890,
    "end": 2052190,
    "text": "もう一度、ハローページに入ろう。"
  },
  {
    "start": 2052610,
    "end": 2054970,
    "text": "今、私たちは何か、心を揺さぶるようなことをする。"
  },
  {
    "start": 2055010,
    "end": 2068722,
    "text": "リニューアル・リアクトから来た場合、この関数を非同期関数に変え、ここで人工的な遅延を発生させる。"
  },
  {
    "start": 2068906,
    "end": 2072630,
    "text": "これは人工的なディレイを挿入するためのちょっとしたトリックだ。"
  },
  {
    "start": 2073530,
    "end": 2076460,
    "text": "私がここでタイプしていることをそのままタイプしてください。"
  },
  {
    "start": 2076650,
    "end": 2087220,
    "text": "resolveとエラー関数を作成し、resolveと遅延（例えば1秒）を渡すz timeoutを呼び出す。"
  },
  {
    "start": 2088320,
    "end": 2094240,
    "text": "ここでもまた、1秒間待機するプロミスを作成し、ここで待機する。"
  },
  {
    "start": 2094360,
    "end": 2097856,
    "text": "この1秒が終わってからが本番だ。"
  },
  {
    "start": 2097968,
    "end": 2099420,
    "text": "これは単なる遅延だ。"
  },
  {
    "start": 2099840,
    "end": 2106770,
    "text": "これを保存し、再びhelloページを開くと、1秒間ロード中のページが表示されるはずだ。"
  },
  {
    "start": 2107350,
    "end": 2112930,
    "text": "ご覧のように、テキストはロード中と表示され、実際のページに置き換えられている。"
  },
  {
    "start": 2113270,
    "end": 2128478,
    "text": "なぜこのコンポーネントを非同期関数にすればいいかというと、次のJS 13アプリ・ルーターでは、デフォルトですべてのコンポーネントがサーバー・コンポーネントになっているからだ。"
  },
  {
    "start": 2128534,
    "end": 2132896,
    "text": "つまり、ここで非同期コードを待つことができる。"
  },
  {
    "start": 2132968,
    "end": 2138424,
    "text": "APIコールを行い、機密データや認証情報をここに入れることもできる。"
  },
  {
    "start": 2138552,
    "end": 2146640,
    "text": "クライアントが受け取るのはこの部分だけで、基本的にはレンダリングされたHTMLで、インタラクティブ性が必要な場合はその中にすでにデータが含まれている。"
  },
  {
    "start": 2146760,
    "end": 2157952,
    "text": "リアクトのステートやエフェクト、クリック・ハンドラなど、例えばボタンをクリックしたときに何かをするもの、あるいはローカル・ストレージのようにブラウザでしか利用できないAPIなどだ。"
  },
  {
    "start": 2158016,
    "end": 2161902,
    "text": "そうなると、サーバー・コンポーネントではなく、クライアント・コンポーネントにしなければならない。"
  },
  {
    "start": 2162006,
    "end": 2164798,
    "text": "これを間違ってやろうとすると、エラーになるだけだ。"
  },
  {
    "start": 2164854,
    "end": 2179110,
    "text": "例えば、ここにuseエフェクトを入れてみよう。通常reactで利用可能なuseエフェクトを、空のブロックでここに入れて保存すると、エラーが発生する。"
  },
  {
    "start": 2179270,
    "end": 2181710,
    "text": "エフェクトを使用する必要があるコンポーネントをインポートしています。"
  },
  {
    "start": 2181790,
    "end": 2184878,
    "text": "クライアント・コンポーネントでしか機能しないんだ。"
  },
  {
    "start": 2185014,
    "end": 2192720,
    "text": "このようなサーバー・コンポーネントをクライアント・コンポーネントにするためには、import文の上の方まで行かなければならない。"
  },
  {
    "start": 2192800,
    "end": 2195020,
    "text": "ファイルの先頭になければならない。"
  },
  {
    "start": 2195360,
    "end": 2196232,
    "text": "さあ、着いた。"
  },
  {
    "start": 2196256,
    "end": 2202720,
    "text": "クライアントを使用するという文字列を追加するだけで、これはクライアント・コンポーネントになる。"
  },
  {
    "start": 2202880,
    "end": 2209944,
    "text": "なぜなら、これはもう非同期関数ではなく、普通のクライアント・コンポーネントだからだ。"
  },
  {
    "start": 2209992,
    "end": 2212464,
    "text": "ここでuseeffectが使えるようになった。"
  },
  {
    "start": 2212592,
    "end": 2229966,
    "text": "コンポーネントをクライアント・コンポーネントにすると、このコンポーネントの内部で使用するコンポーネントもクライアント・コンポーネントとみなされます。つまり、クライアント・コンポーネントのひとつひとつにディレクティブとも呼ばれるuse client文字列を記述する必要はありません。"
  },
  {
    "start": 2230078,
    "end": 2233190,
    "text": "一番上のクライアント・コンポーネントに入れれば十分だ。"
  },
  {
    "start": 2233230,
    "end": 2237446,
    "text": "繰り返しになるが、ここで使っているコンポーネントもクライアント・コンポーネントである。"
  },
  {
    "start": 2237558,
    "end": 2251032,
    "text": "例えば、ブロック投稿をレンダリングする場合、ブログ投稿カード・コンポーネントがあれば、このブログ投稿カード・コンポーネントもクライアント・コンポーネントとみなされる。"
  },
  {
    "start": 2251096,
    "end": 2259904,
    "text": "もしサーバー・コンポーネントの中で使うのであれば、クライアントを直接このブログ記事カード・コンポーネントの中に作らない限り、それらはサーバー・コンポーネントとなる。"
  },
  {
    "start": 2260032,
    "end": 2263360,
    "text": "これは常に、私たちがここで使っている部品にまで浸透していく。"
  },
  {
    "start": 2263440,
    "end": 2270680,
    "text": "その例外として、サーバー・コンポーネントをクライアント・コンポーネントに入れることができる。"
  },
  {
    "start": 2270760,
    "end": 2275864,
    "text": "一般的には、この使用クライアントを可能な限り低い位置に移動させようとするのは良い考えだ。"
  },
  {
    "start": 2275992,
    "end": 2293108,
    "text": "なぜなら、サーバーコンポーネントの方が効率的だからである。実際にクライアントコンポーネントが必要になるまでは、サーバーコンポーネントを使うべきである。"
  },
  {
    "start": 2293244,
    "end": 2304060,
    "text": "ここではuseエフェクトは必要ないので、これをサーバー・コンポーネントに戻し、もうひとつ特別なファイルを設定する。"
  },
  {
    "start": 2304140,
    "end": 2306880,
    "text": "ここでも、appフォルダでこれを行う。"
  },
  {
    "start": 2307230,
    "end": 2314942,
    "text": "これはエラーTSXと呼ばれ、コンポーネント内で予期せぬエラーが発生した場合に表示される。"
  },
  {
    "start": 2315126,
    "end": 2321958,
    "text": "エラーページはクライアント・コンポーネントでなければならない。"
  },
  {
    "start": 2322094,
    "end": 2328490,
    "text": "一番上にuse clientディレクティブを置き、ここにもページをエクスポートします。"
  },
  {
    "start": 2329150,
    "end": 2330982,
    "text": "デフォルトの機能をエクスポートします。"
  },
  {
    "start": 2331086,
    "end": 2336840,
    "text": "非同期的なことをする必要はないし、これはサーバー・コンポーネントではないからできない。"
  },
  {
    "start": 2339460,
    "end": 2348588,
    "text": "ここでもシンプルなUI、つまりエラーとなったhとの差分を返す。"
  },
  {
    "start": 2348764,
    "end": 2351836,
    "text": "この絵文字もここに入れた。"
  },
  {
    "start": 2351908,
    "end": 2354480,
    "text": "もちろん、好きなように設定できる。"
  },
  {
    "start": 2355180,
    "end": 2359120,
    "text": "ここにもテキストを入れたんだけど、何かうまくいかなかったんだ。"
  },
  {
    "start": 2360880,
    "end": 2370216,
    "text": "これを保存して、試しにハローページの一番上か、あるいはその下にエラーを表示してみよう。"
  },
  {
    "start": 2370288,
    "end": 2376660,
    "text": "ローディングページがエラーになります。"
  },
  {
    "start": 2377880,
    "end": 2382540,
    "text": "これを保存して、エラーページを表示しよう。"
  },
  {
    "start": 2382840,
    "end": 2385480,
    "text": "これは、ユーザーが本番でも見ることができるものだ。"
  },
  {
    "start": 2385560,
    "end": 2386976,
    "text": "彼らはこの部分をここで見ることはないだろう。"
  },
  {
    "start": 2387008,
    "end": 2395512,
    "text": "これは、エラーの発生元を示すための開発用であり、エラー・ページは実際にいくつかの引数を受け付けることができる。"
  },
  {
    "start": 2395696,
    "end": 2400020,
    "text": "これはタイプスクリプトなので、まずこれらの引数の型を定義しなければならない。"
  },
  {
    "start": 2400320,
    "end": 2402500,
    "text": "そのためには、インターフェイスを作る必要がある。"
  },
  {
    "start": 2403840,
    "end": 2408060,
    "text": "私はこれをエラーページ・プロップスと呼ぶつもりだが、この名前もまたあなた次第だ。"
  },
  {
    "start": 2408680,
    "end": 2411440,
    "text": "エラー・ページはエラーを入力として受け取ることができる。"
  },
  {
    "start": 2411560,
    "end": 2416020,
    "text": "例えば、そこからデータを読み出したり、ロックしたり。"
  },
  {
    "start": 2416720,
    "end": 2419568,
    "text": "このリセット機能を使うこともできる。"
  },
  {
    "start": 2419704,
    "end": 2425088,
    "text": "リセットを呼び出すと、ページを再レンダリングしようとする。"
  },
  {
    "start": 2425264,
    "end": 2428100,
    "text": "これで、これらの引数をページに渡すことができる。"
  },
  {
    "start": 2429680,
    "end": 2435420,
    "text": "タイプをエラーページ・プロップスに設定し、ここにエラーとリセット機能を用意した。"
  },
  {
    "start": 2435880,
    "end": 2438584,
    "text": "例えば、ここにボタンを置くことができる。"
  },
  {
    "start": 2438712,
    "end": 2444374,
    "text": "繰り返しになるが、ボタンはコンポーネントがクライアント・コンポーネントである必要がある。"
  },
  {
    "start": 2444472,
    "end": 2447082,
    "text": "エラーページはクライアント・コンポーネントでなければならない。"
  },
  {
    "start": 2447186,
    "end": 2452010,
    "text": "そのため、上部にクライアント・ディレクティブを使用する必要があり、ここではブートストラップ・ボタンを使用しています。"
  },
  {
    "start": 2452050,
    "end": 2453410,
    "text": "通常のボタンを使うこともできる。"
  },
  {
    "start": 2453450,
    "end": 2454470,
    "text": "君次第だ。"
  },
  {
    "start": 2455650,
    "end": 2460430,
    "text": "このボタンをクリックすると、ここにあるリセット関数が呼び出される。"
  },
  {
    "start": 2461090,
    "end": 2465990,
    "text": "ちなみに、これはresetという名前でなければならない。"
  },
  {
    "start": 2468250,
    "end": 2471150,
    "text": "ボタンのテキストを再試行に設定しよう。"
  },
  {
    "start": 2471680,
    "end": 2473580,
    "text": "すると、このボタンが表示される。"
  },
  {
    "start": 2473880,
    "end": 2478980,
    "text": "まだブートストラップのCSSを追加していないので、スタイリングはまだ適用されていません。"
  },
  {
    "start": 2479320,
    "end": 2490224,
    "text": "このCSSはアプリ全体に適用されるべきものであり、グローバルCSSの上に置くことで、このCSSが最初に実行されるようにする。"
  },
  {
    "start": 2490352,
    "end": 2493580,
    "text": "ここに入れたものは、ブートストラップのCSSを上書きする。"
  },
  {
    "start": 2494080,
    "end": 2496980,
    "text": "ビデオを一時停止して、これを手書きで入力することができます。"
  },
  {
    "start": 2497460,
    "end": 2504444,
    "text": "これはreact bootstrapのドキュメントからの引用です。"
  },
  {
    "start": 2504572,
    "end": 2516200,
    "text": "以下にインストール手順とコピーするCSSを示しますが、手で入力するか、下のビデオ説明でリンクしたGitHubリポジトリからコピーした方が早いでしょう。"
  },
  {
    "start": 2516540,
    "end": 2523710,
    "text": "そして、これを保存し、ページをリフレッシュした後、このボタンにスタイリングが適用され、少し見栄えが良くなるはずである。"
  },
  {
    "start": 2524210,
    "end": 2526074,
    "text": "このボタンをクリックすると"
  },
  {
    "start": 2526122,
    "end": 2531882,
    "text": "ページの再レンダリングを試みますが、同じエラーが発生するため、実際には何も起こりません。"
  },
  {
    "start": 2532066,
    "end": 2541190,
    "text": "もちろん、このページもレンダリングされる。"
  },
  {
    "start": 2543210,
    "end": 2544946,
    "text": "リフレッシュしなければならないかもしれない。"
  },
  {
    "start": 2545138,
    "end": 2554064,
    "text": "これらのファイルは、次のJS13でいわゆる特殊ファイルと呼ばれるもので、特定の機能を与える非常に特殊な名前を持っているからだ。"
  },
  {
    "start": 2554232,
    "end": 2558744,
    "text": "また、これらの異なる特別なファイルをより細かく作成することもできる。"
  },
  {
    "start": 2558872,
    "end": 2564392,
    "text": "例えば、ハロー・ルートのためだけにローディングTSXを作ることもできるし、別のレイアウトを作ることもできる。"
  },
  {
    "start": 2564496,
    "end": 2571700,
    "text": "あるいは、helloルートに別のエラーページを用意することもできるが、通常は少なくとも1つはグローバル・アプリ・フォルダーに置きたい。"
  },
  {
    "start": 2572160,
    "end": 2587186,
    "text": "さて、このプロジェクトでbootstrapを使う理由のひとつは、bootstrapや他のコンポーネント・ライブラリが、このサーバー・コンポーネントのアプローチにまだ適応していないため、次のJS13のアプリ・ルーターで特別な設定が必要だからだ。"
  },
  {
    "start": 2587298,
    "end": 2595466,
    "text": "問題を確認するために、レイアウトに移動して、すべてのページをブートストラップ・コンテナにレンダリングしてみましょう。"
  },
  {
    "start": 2595498,
    "end": 2605290,
    "text": "このdiffはもう必要ないので削除して、代わりにこのブートストラップ・コンテナをインポートして、すべてのページをラップしたい。"
  },
  {
    "start": 2605450,
    "end": 2612058,
    "text": "ブートストラップ・コンテナは、パディングを追加し、コンテンツを画面の端ではなく中央に寄せます。"
  },
  {
    "start": 2612114,
    "end": 2616624,
    "text": "しかし、これを保存するとエラーになる。"
  },
  {
    "start": 2616792,
    "end": 2628368,
    "text": "コンテナのようなこれらのブートストラップ・コンポーネントは、内部的にクライアント・コンポーネントの機能を使用するので、サーバー・コンポーネントでuseeffectを使用しようとすると、先ほどと同じエラーが発生します。"
  },
  {
    "start": 2628464,
    "end": 2630320,
    "text": "この場合は状態を使用する。"
  },
  {
    "start": 2630440,
    "end": 2637216,
    "text": "繰り返しになるが、他のリアクト・コンポーネント・ライブラリーもおそらく同じ問題を抱えている。"
  },
  {
    "start": 2637328,
    "end": 2642504,
    "text": "これらは通常、何らかの方法でクリックされたり、ユーザーの入力に反応したりする。"
  },
  {
    "start": 2642592,
    "end": 2657472,
    "text": "問題は、これらのコンポーネントはソースコード内にus clientディレクティブがないため、まだリアクト・サーバー・コンポーネントに適応されておらず、ファイルの先頭でuse clientディレクティブを宣言しないとクライアント側の機能を使えないことだ。"
  },
  {
    "start": 2657536,
    "end": 2663360,
    "text": "これで、理論的にはアプリ全体のレイアウトをクライアント・コンポーネントにすることができ、クライアント機能をここで使うことができる。"
  },
  {
    "start": 2663440,
    "end": 2669724,
    "text": "というのも、やはりサーバーコンポーネントの方が効率的で、可能な限りサーバーコンポーネントを使いたいからだ。"
  },
  {
    "start": 2669872,
    "end": 2680636,
    "text": "サードパーティーのコンポーネントをクライアント・コンポーネントにする簡単な方法がある。"
  },
  {
    "start": 2680828,
    "end": 2682620,
    "text": "そのために新しいファイルを作成する。"
  },
  {
    "start": 2682780,
    "end": 2689924,
    "text": "今回はappフォルダではなく、SRZフォルダに置き、componentsと呼ぶことにする。"
  },
  {
    "start": 2690052,
    "end": 2697860,
    "text": "ここには、異なるページ間で共有するあらゆる種類のコンポーネントと、特定のページにのみ属するコンポーネントを置くことができる。"
  },
  {
    "start": 2697900,
    "end": 2701440,
    "text": "また、必要なページを直接探すこともできる。"
  },
  {
    "start": 2702380,
    "end": 2708156,
    "text": "componentsフォルダに、Bootstrap TSXと呼ぶファイルを作成します。"
  },
  {
    "start": 2708348,
    "end": 2710800,
    "text": "このファイルには好きな名前をつけることができる。"
  },
  {
    "start": 2711140,
    "end": 2715680,
    "text": "このファイルをuse clientディレクティブでクライアント・コンポーネントにする。"
  },
  {
    "start": 2716540,
    "end": 2725676,
    "text": "そうすれば、クライアント・コンポーネントにしたい様々なコンポーネントをbootstrapからエクスポートするだけです。"
  },
  {
    "start": 2725828,
    "end": 2736410,
    "text": "をエクスポートし、react bootstrapやあなたが使っているコンポーネント・ライブラリから、このデストラクチャリング構文をここに追加する。"
  },
  {
    "start": 2737030,
    "end": 2741302,
    "text": "ここにアプリで使いたいコンポーネントを追加する。"
  },
  {
    "start": 2741486,
    "end": 2746238,
    "text": "これが今セットアップしたコンテナだ。"
  },
  {
    "start": 2746334,
    "end": 2747782,
    "text": "すぐに追加するつもりだ。"
  },
  {
    "start": 2747966,
    "end": 2752730,
    "text": "また、サーバーサイドレンダリングに必要なSSRプロバイダーも必要です。"
  },
  {
    "start": 2754230,
    "end": 2759840,
    "text": "後でアラートコンポーネントも使いたいし、スピンオフやローディングページも使いたい。"
  },
  {
    "start": 2760820,
    "end": 2770052,
    "text": "このようにして、これらのブートストラップ・コンポーネントをクライアント・コンポーネントからエクスポートして、クライアント・コンポーネントのように使うことができます。"
  },
  {
    "start": 2770236,
    "end": 2783764,
    "text": "このファイルを閉じてレイアウトに戻り、インポートをreact bootstrapからaddに変更します。"
  },
  {
    "start": 2783852,
    "end": 2784480,
    "text": "そうだね。"
  },
  {
    "start": 2785060,
    "end": 2789004,
    "text": "ここに、先ほど設定したブートストラップ・ファイルを入れる。"
  },
  {
    "start": 2789172,
    "end": 2795692,
    "text": "これを保存してページを更新すると、コンテナのパディングが適用される。"
  },
  {
    "start": 2795756,
    "end": 2800444,
    "text": "このコンテナがクライアント・コンポーネントになったからだ。"
  },
  {
    "start": 2800612,
    "end": 2806868,
    "text": "先ほど、クライアント・コンポーネントの中に入れるものはすべてクライアント・コンポーネントでもあると説明した。"
  },
  {
    "start": 2807004,
    "end": 2813696,
    "text": "ということは、コンテナ・クライアント・コンポーネントに入れたから、すべてのページがクライアント・コンポーネントになったということだろうか？"
  },
  {
    "start": 2813768,
    "end": 2818536,
    "text": "もしそうなら、もうハローページを開くことはできないだろう？"
  },
  {
    "start": 2818608,
    "end": 2823620,
    "text": "なぜなら、helloページではサーバー・コンポーネントを使用しているからだ。"
  },
  {
    "start": 2824080,
    "end": 2825896,
    "text": "なぜこれが有効なのか？"
  },
  {
    "start": 2826008,
    "end": 2830432,
    "text": "helloをコンテナの中に入れても、なぜサーバー・コンポーネントなのか？"
  },
  {
    "start": 2830536,
    "end": 2835432,
    "text": "これは、Helloページがコンテナ・コンポーネントに直接コード化されていないからだ。"
  },
  {
    "start": 2835536,
    "end": 2837320,
    "text": "その代わりに小道具として渡す。"
  },
  {
    "start": 2837480,
    "end": 2843024,
    "text": "これをchildren propとして渡します。これが、ここにある特殊なリアクト構文です。"
  },
  {
    "start": 2843152,
    "end": 2852544,
    "text": "コンポーネントでこのような子プロップを宣言すると、このコンテナの場合のように、開始タグと終了タグの間に別のコンポーネントを渡すことができる。"
  },
  {
    "start": 2852632,
    "end": 2858088,
    "text": "このようにすると、サーバーのコンポーネントをクライアントのコンポーネントに渡すことができる。"
  },
  {
    "start": 2858184,
    "end": 2862680,
    "text": "コンテナはクライアント・コンポーネントだが、ページはサーバー・コンポーネントであり続けることができる。"
  },
  {
    "start": 2862760,
    "end": 2871588,
    "text": "これが可能なのは、コンポーネントをpropとして渡したとき、reactがこのページの内容を事前に知る必要がないからだ。"
  },
  {
    "start": 2871684,
    "end": 2876172,
    "text": "その代わりに、ラッパー・コンポーネントのスロットを確保する必要がある。"
  },
  {
    "start": 2876276,
    "end": 2884644,
    "text": "コンテナ・コンポーネントには、後でレンダリングしたサーバー・コンポーネントを入れる、いわば空っぽの穴がある。"
  },
  {
    "start": 2884732,
    "end": 2892086,
    "text": "もし、コンテナ・コンポーネントのコードに直接ハロー・ページをハードコードするのであれば、それはクライアント・コンポーネントでなければならない。"
  },
  {
    "start": 2892148,
    "end": 2903010,
    "text": "最初は混乱するかもしれないが、これは重要な概念だ。なぜなら、こうすることでクライアント・コンポーネントのラッパーを作ることができ、その中に効率的な非同期サーバー・コンポーネントを残すことができるからだ。"
  },
  {
    "start": 2903130,
    "end": 2914794,
    "text": "ルート・レイアウトでは特に重要です。なぜなら、ここでは通常コンテナやコンテキスト・プロバイダのような異なる種類のラバーがあり、レイアウト内でサーバー・コンポーネントをレンダリングできるようにしたいからです。"
  },
  {
    "start": 2914882,
    "end": 2924206,
    "text": "これは、サーバー・コンポーネントを子プロップスとして渡すことで可能になる。"
  },
  {
    "start": 2924278,
    "end": 2936690,
    "text": "また、SSRプロバイダを使いたいのですが、これもまたreact bootstrapから直接インポートするのではなく、先ほどセットアップしたbootstrapファイルのcomponentsフォルダからインポートします。"
  },
  {
    "start": 2937270,
    "end": 2939710,
    "text": "このSSRプロバイダーでコンテナを包む。"
  },
  {
    "start": 2939750,
    "end": 2944246,
    "text": "これは、サーバー・サイド・レンダリングを使用するときはいつでも、react bootstrapによって必要とされる。"
  },
  {
    "start": 2944318,
    "end": 2947646,
    "text": "そうでなければ、アイデアに矛盾が生じる。"
  },
  {
    "start": 2947718,
    "end": 2950626,
    "text": "これはreact bootstrapのドキュメントで説明されている。"
  },
  {
    "start": 2950778,
    "end": 2954434,
    "text": "レイアウト全体をこれで包んでしまえば、あとは忘れるだけだ。"
  },
  {
    "start": 2954562,
    "end": 2968066,
    "text": "というのも、この部分は通常ページのメイン部分であり、ナビバーは後でmainタグの上に置くからだ。"
  },
  {
    "start": 2968258,
    "end": 2973490,
    "text": "最後に、コンテナにパディングを追加したい。"
  },
  {
    "start": 2973530,
    "end": 2979050,
    "text": "ブートストラップ・ユーティリティ・クラスでこれを行うことができます。"
  },
  {
    "start": 2979470,
    "end": 2985982,
    "text": "ここでは、p yマイナス4に設定し、垂直方向のマージンを加えている。"
  },
  {
    "start": 2986126,
    "end": 2988694,
    "text": "これがトップとボトムのYである。"
  },
  {
    "start": 2988862,
    "end": 2992210,
    "text": "これで、ページの上部にスペースがあることがわかる。"
  },
  {
    "start": 2993070,
    "end": 2996422,
    "text": "よし、ホームページ全体も空っぽにしよう。"
  },
  {
    "start": 2996566,
    "end": 2999390,
    "text": "新インデックスで得られるネタバレをすべて削除する。"
  },
  {
    "start": 2999430,
    "end": 3005014,
    "text": "J'sプロジェクトでは、ご覧のようにメイン・タグがここにあります。"
  },
  {
    "start": 3005182,
    "end": 3014038,
    "text": "return文の中にあるものをすべて取り除き、代わりにホームページと書かれたdivをここに追加します。"
  },
  {
    "start": 3014174,
    "end": 3015718,
    "text": "これは後で交換する。"
  },
  {
    "start": 3015854,
    "end": 3018566,
    "text": "これらのimport文を取り除くこともできる。"
  },
  {
    "start": 3018678,
    "end": 3024086,
    "text": "ここではクライアント機能を使用していないので、デフォルトではサーバーコンポーネントである。"
  },
  {
    "start": 3024278,
    "end": 3036394,
    "text": "これでホームページはこのようになり、このCSSモジュール全体を削除することもできる。"
  },
  {
    "start": 3036522,
    "end": 3038190,
    "text": "これは削除しよう。"
  },
  {
    "start": 3038610,
    "end": 3045946,
    "text": "続いて、グローバルCSSファイルに移動し、デフォルトの定型文をたくさん設定する。"
  },
  {
    "start": 3045978,
    "end": 3047602,
    "text": "ほとんど必要ない。"
  },
  {
    "start": 3047746,
    "end": 3052950,
    "text": "ここでは、最大幅とボーダー半径のCSS変数を削除している。"
  },
  {
    "start": 3053250,
    "end": 3055790,
    "text": "フォントも色もこのままでいい。"
  },
  {
    "start": 3056110,
    "end": 3058054,
    "text": "プライマリー・クローバーは必要ない。"
  },
  {
    "start": 3058142,
    "end": 3063766,
    "text": "ここに残しておいてもいいけど、必要ないから削除した方がいいよ。"
  },
  {
    "start": 3063918,
    "end": 3067250,
    "text": "このメディア・ブロックはすべて取り除くことができる。"
  },
  {
    "start": 3070350,
    "end": 3072854,
    "text": "オーバーフローは非表示にできる。"
  },
  {
    "start": 3072902,
    "end": 3077170,
    "text": "これは、ブートストラップのナバーに粘着性を持たせる際に、いくつかの問題を引き起こしたと思います。"
  },
  {
    "start": 3077870,
    "end": 3084402,
    "text": "その代わりに、ビューポートの高さを表す100 vHの最小高さを追加します。"
  },
  {
    "start": 3084466,
    "end": 3091666,
    "text": "こうすることで、グラデーションがページの高さ全体に広がり、見栄えがよくなる。"
  },
  {
    "start": 3091858,
    "end": 3098470,
    "text": "そして、リンクから継承されたこの色を削除し、通常の色を取り戻すことができる。"
  },
  {
    "start": 3098890,
    "end": 3109484,
    "text": "この最後のメディアブロックを削除し、代わりにすべての画像を対象とするブロックを追加する。"
  },
  {
    "start": 3109602,
    "end": 3115900,
    "text": "後で画像を読み込むときには、この水色の背景があるので、これをプレースホルダーのようなものとして使うことができる。"
  },
  {
    "start": 3116280,
    "end": 3117752,
    "text": "よし、これを保存しよう。"
  },
  {
    "start": 3117896,
    "end": 3118968,
    "text": "もうひとつ。"
  },
  {
    "start": 3119024,
    "end": 3135636,
    "text": "もう一度ローディングTSXファイルに入って、今はこのローディング・テキストがあるのですが、その代わりにブートストラップ・スピナーを返したいと思います。"
  },
  {
    "start": 3135728,
    "end": 3139440,
    "text": "こうすることで、ローディング・ページをクライアント・コンポーネントにする必要がなくなる。"
  },
  {
    "start": 3140940,
    "end": 3143924,
    "text": "では、このフォルダからインポートしよう。"
  },
  {
    "start": 3143972,
    "end": 3147360,
    "text": "インポート文が追加されなかったので、手動で行う必要がある。"
  },
  {
    "start": 3148300,
    "end": 3160156,
    "text": "add slash components slash bootstrapからspinnerをインポートして、これを終わらせなければならない。"
  },
  {
    "start": 3160308,
    "end": 3162280,
    "text": "アニメーションをボーダーに設定する。"
  },
  {
    "start": 3163020,
    "end": 3167436,
    "text": "また、クラス名を使ってスタイルも追加している。"
  },
  {
    "start": 3167548,
    "end": 3177560,
    "text": "ここでもブートストラップのユーティリティ・クラスを使っている。d blockでCSSのdisplay属性をblockに設定し、m autoで自動マージンを追加する。"
  },
  {
    "start": 3178660,
    "end": 3187348,
    "text": "そしてこれを閉じると、このスタイリングはスピナーを左端ではなく、ページの中央に置くだけである。"
  },
  {
    "start": 3187524,
    "end": 3188564,
    "text": "試してみよう。"
  },
  {
    "start": 3188612,
    "end": 3192044,
    "text": "人工的なローディング遅延があるhelloをもう一度開いてみよう。"
  },
  {
    "start": 3192132,
    "end": 3196540,
    "text": "1秒間だけ見えるスピナーが少し良くなった。"
  },
  {
    "start": 3196620,
    "end": 3201316,
    "text": "これを他の何か、例えばスケルトンなどに置き換えることもできる。"
  },
  {
    "start": 3201428,
    "end": 3203188,
    "text": "これは完全にあなた次第だ。"
  },
  {
    "start": 3203284,
    "end": 3210428,
    "text": "次のセクションでは、ナビバーを設定し、次のリンクと新しい次のルーターフックについて学びます。"
  },
  {
    "start": 3210524,
    "end": 3215480,
    "text": "その後、さまざまなキャッシュ戦略でページを作り始める。"
  },
  {
    "start": 3215940,
    "end": 3220000,
    "text": "では、ルート・レイアウトに入れられるだけのバーをセットしよう。"
  },
  {
    "start": 3220950,
    "end": 3224710,
    "text": "スナッフ・バー・コンポーネントをcomponentsフォルダに入れることができる。"
  },
  {
    "start": 3224830,
    "end": 3232238,
    "text": "ルート・レイアウトでしか使用しないので、appフォルダのレイアウトTSXファイルと一緒に配置するのが理にかなっていると思います。"
  },
  {
    "start": 3232374,
    "end": 3235370,
    "text": "アプリを右クリックし、新規ファイルを作成する。"
  },
  {
    "start": 3235830,
    "end": 3237490,
    "text": "ナバーと呼ぶことにする。"
  },
  {
    "start": 3237990,
    "end": 3242862,
    "text": "名前はあなた次第だが、小文字のBを使ったNavbarという名前はつけるべきではない。"
  },
  {
    "start": 3242966,
    "end": 3243254,
    "text": "なぜですか？"
  },
  {
    "start": 3243302,
    "end": 3247020,
    "text": "なぜなら、ブートストラップのナビバーはすでに小文字のビールを使った名前を持っているからです。"
  },
  {
    "start": 3247150,
    "end": 3249824,
    "text": "ここでは、ブートストラップのナビバーを使います。"
  },
  {
    "start": 3249912,
    "end": 3251440,
    "text": "となると、ネーミングの衝突が起きる。"
  },
  {
    "start": 3251560,
    "end": 3253872,
    "text": "だから大文字の \"b \"なのだ。"
  },
  {
    "start": 3254016,
    "end": 3259808,
    "text": "フックはクライアント・サイドの機能だ。"
  },
  {
    "start": 3259984,
    "end": 3265184,
    "text": "このナバー全体をuse clientディレクティブでクライアント・コンポーネントにします。"
  },
  {
    "start": 3265312,
    "end": 3269800,
    "text": "ブートストラップ・ナンバーバーはいずれにせよクライアント・コンポーネントなので、これも理にかなっている。"
  },
  {
    "start": 3269880,
    "end": 3274986,
    "text": "ここには他の要素を入れないので、ファイル全体をクライアント・コンポーネントにすればいい。"
  },
  {
    "start": 3275048,
    "end": 3277438,
    "text": "ここでレンダリングされるサーバー部分はない。"
  },
  {
    "start": 3277534,
    "end": 3288526,
    "text": "ブートストラップを使用しない場合、またはここでインタラクティブな機能を使用しない場合、そしてステートでエフェクトを使用しない場合、このコンポーネントをサーバー・コンポーネントにしてみることもできます。"
  },
  {
    "start": 3288598,
    "end": 3291182,
    "text": "クライアント・コンポーネントもまったく問題ない。"
  },
  {
    "start": 3291286,
    "end": 3303260,
    "text": "さて、ここではNavbarousという同じ名前のデフォルト関数をエクスポートし、UI要素を返したい。"
  },
  {
    "start": 3304800,
    "end": 3307128,
    "text": "ブートストラップ・ナンバーを返したい。"
  },
  {
    "start": 3307184,
    "end": 3308912,
    "text": "再びナフバーを打つ。"
  },
  {
    "start": 3309016,
    "end": 3316020,
    "text": "Autoimportは機能せず、先ほど説明したように、インポートはuse clientディレクティブより下でなければならない。"
  },
  {
    "start": 3316960,
    "end": 3323960,
    "text": "ここでは、小文字のビールを使ったナビバーをインポートしたい。"
  },
  {
    "start": 3324120,
    "end": 3332704,
    "text": "コンポーネント・フォルダからインポートすることもできるし、react bootstrapからインポートすることもできる。"
  },
  {
    "start": 3332792,
    "end": 3338544,
    "text": "このuse clientディレクティブが含まれていなくても、bootstrap navbarを直接インポートすることができます。"
  },
  {
    "start": 3338672,
    "end": 3345096,
    "text": "繰り返しになるが、クライアント・コンポーネントにハードコードされたものはすべて、自動的にクライアント・コンポーネントとみなされる。"
  },
  {
    "start": 3345208,
    "end": 3349060,
    "text": "というわけで、ここではブートストラップのナビバーを直接使えばいいのだ。"
  },
  {
    "start": 3349440,
    "end": 3351430,
    "text": "よし、ではセッティングしてみよう。"
  },
  {
    "start": 3351600,
    "end": 3356250,
    "text": "背景をプライマリーに設定したいのですが、デフォルトでは青になります。"
  },
  {
    "start": 3356290,
    "end": 3357790,
    "text": "すぐにわかるだろう。"
  },
  {
    "start": 3358210,
    "end": 3362270,
    "text": "テキストが明るい色になるように、バリアントをダークに設定します。"
  },
  {
    "start": 3363170,
    "end": 3366350,
    "text": "ここではスティッキー（粘着性）をトップに設定しているが、これはすべてオプションである。"
  },
  {
    "start": 3367370,
    "end": 3370750,
    "text": "我々はexpandをsmに設定した。"
  },
  {
    "start": 3371610,
    "end": 3373898,
    "text": "これでスナッフバーが反応するようになる。"
  },
  {
    "start": 3373954,
    "end": 3378970,
    "text": "画面が小さくなると自動的にハンバーガーメニューになり、クリックできる。"
  },
  {
    "start": 3379050,
    "end": 3385162,
    "text": "これが私がブートストラップを気に入っている理由である。"
  },
  {
    "start": 3385226,
    "end": 3390430,
    "text": "ナビバーがまだ展開されていない場合、項目をクリックするとナビバーが折りたたまれるようにする。"
  },
  {
    "start": 3391210,
    "end": 3392950,
    "text": "よし、このタグを閉じよう。"
  },
  {
    "start": 3393730,
    "end": 3395230,
    "text": "これを大きくしよう。"
  },
  {
    "start": 3396490,
    "end": 3399346,
    "text": "ナバーにはコンテナを置く。"
  },
  {
    "start": 3399538,
    "end": 3406350,
    "text": "繰り返しになるが、一貫性を保つためにreact bootstrapから直接使用したい。"
  },
  {
    "start": 3407050,
    "end": 3411350,
    "text": "また、これはナバー内の要素に間隔を追加する。"
  },
  {
    "start": 3411850,
    "end": 3424346,
    "text": "ナビバーの左側にアイコンやテキストを追加することができます。"
  },
  {
    "start": 3424418,
    "end": 3426922,
    "text": "をクリックすると、通常はホームページに戻る。"
  },
  {
    "start": 3427066,
    "end": 3429994,
    "text": "ahref属性でリンクにすることができます。"
  },
  {
    "start": 3430162,
    "end": 3432770,
    "text": "ホームページにリンクしてほしい。"
  },
  {
    "start": 3432890,
    "end": 3434790,
    "text": "スラッシュを加えるだけだ。"
  },
  {
    "start": 3435820,
    "end": 3440680,
    "text": "ここに画像を追加することもできるが、画像を用意していないので、ここではテキストに設定することにする。"
  },
  {
    "start": 3441380,
    "end": 3441764,
    "text": "次ページ"
  },
  {
    "start": 3441812,
    "end": 3446400,
    "text": "JS13.4イメージギャラリー。"
  },
  {
    "start": 3448020,
    "end": 3453120,
    "text": "これを保存して、もうレイアウトに入れよう。"
  },
  {
    "start": 3454140,
    "end": 3461560,
    "text": "これはページのメインコンテンツではなく、すべてのページで共有されるためです。"
  },
  {
    "start": 3462060,
    "end": 3468040,
    "text": "ブートストラップのナビバーではなく、大文字のbが重要なナビバーをインポートします。"
  },
  {
    "start": 3468500,
    "end": 3471532,
    "text": "これを閉じると、ここにナバーが表示される。"
  },
  {
    "start": 3471636,
    "end": 3474360,
    "text": "これがホームページに戻るリンクだ。"
  },
  {
    "start": 3475180,
    "end": 3477800,
    "text": "ハローページへのリンクも追加しよう。"
  },
  {
    "start": 3478220,
    "end": 3480200,
    "text": "ナバー・ブランドの下。"
  },
  {
    "start": 3480780,
    "end": 3489360,
    "text": "まず最初に、ナバー・トグルを設置して、先ほどお話ししたレスポンシブ・ハンバーガー・メニューを追加します。"
  },
  {
    "start": 3490620,
    "end": 3497932,
    "text": "次に、このエリア・コントロール属性を設定する。"
  },
  {
    "start": 3497956,
    "end": 3499796,
    "text": "idを渡さなければならない。"
  },
  {
    "start": 3499828,
    "end": 3502120,
    "text": "メイン・ナビバーに設定する。"
  },
  {
    "start": 3502460,
    "end": 3506120,
    "text": "そしてスラッシュと閉じ角括弧で閉じる。"
  },
  {
    "start": 3506420,
    "end": 3509628,
    "text": "そして、その下には十分な崩壊がある。"
  },
  {
    "start": 3509684,
    "end": 3512600,
    "text": "そう、それで中のすべての要素が折りたたみ可能になる。"
  },
  {
    "start": 3513220,
    "end": 3517698,
    "text": "このエリアコントロールで設定したのと同じアイデアにリセットする。"
  },
  {
    "start": 3517844,
    "end": 3520290,
    "text": "繰り返しますが、これはメイン・ナビバーです。"
  },
  {
    "start": 3521350,
    "end": 3525118,
    "text": "これで、Navbarの折りたたみの中に何を入れても反応するようになった。"
  },
  {
    "start": 3525214,
    "end": 3530142,
    "text": "小さい画面では、自動的にこのハンバーガーのドロップダウンメニューに変わります。"
  },
  {
    "start": 3530326,
    "end": 3534774,
    "text": "さて、ここにナフ・コンポーネント（ナフ・バーではなく、ただのナフ）を入れる。"
  },
  {
    "start": 3534822,
    "end": 3537810,
    "text": "再度、react bootstrapからインポートする必要があります。"
  },
  {
    "start": 3538470,
    "end": 3543890,
    "text": "これを閉じて、最後にここにハロー・ページへのリンクを貼る。"
  },
  {
    "start": 3544390,
    "end": 3548570,
    "text": "オープニングアングル、ブラケット、リンク。"
  },
  {
    "start": 3550590,
    "end": 3558750,
    "text": "今回、ブランド・アイテムのJust Likeをhelloに設定したのは、ここにナビゲートしたいからだ。"
  },
  {
    "start": 3558790,
    "end": 3563690,
    "text": "このリンクをクリックすると、このリンクは閉じられ、テキストはhelloにリセットされる。"
  },
  {
    "start": 3564430,
    "end": 3569330,
    "text": "このドロップダウンメニューをクリックすると、ハローページに移動できる。"
  },
  {
    "start": 3569640,
    "end": 3574992,
    "text": "これを大きくすると、ナバーが広がり、ここにメニュー項目が表示される。"
  },
  {
    "start": 3575136,
    "end": 3577360,
    "text": "これはレスポンシブ・ナビゲーション・バーです。"
  },
  {
    "start": 3577480,
    "end": 3590608,
    "text": "というのも、これらのリンクは通常のHTMLリンク、通常のアングル・タグのように振る舞うからだ。"
  },
  {
    "start": 3590704,
    "end": 3596392,
    "text": "ブラウザのトップから、このローディング・インジケータを見ることができる。"
  },
  {
    "start": 3596536,
    "end": 3601232,
    "text": "helloページに移動すると、ローディング・スピナーが表示される。"
  },
  {
    "start": 3601256,
    "end": 3617176,
    "text": "なぜなら、この方法ではリアクト・コンポーネントのすべてのステートが失われ、たとえばログインしているユーザーをフェッチすると、ステートも失われてリーフハッチしなければならなくなるからだ。"
  },
  {
    "start": 3617208,
    "end": 3619264,
    "text": "繰り返すが、これは非常に非効率的だ。"
  },
  {
    "start": 3619352,
    "end": 3627274,
    "text": "また、リンクをクリックするたびにページが更新され、時にはページがちらつくこともあるため、ナビゲーションの見栄えが非常に悪くなる。"
  },
  {
    "start": 3627402,
    "end": 3639962,
    "text": "また、next jsはナビゲーションを最適化するために、すでにナビゲートしたページをキャッシュしたり、画面に表示されたリンクを事前にフェッチしたりすることがあるため、ルーター内に保存されているキャッシュも失われる。"
  },
  {
    "start": 3640066,
    "end": 3644830,
    "text": "その代わりに、next jsにはナビゲーションに使う特別なリンククラスがある。"
  },
  {
    "start": 3645170,
    "end": 3656876,
    "text": "href属性を削除して、このテキストを次のスラッシュ・リンクからエクスポートしたリンク・コンポーネントにラップする。"
  },
  {
    "start": 3657068,
    "end": 3658720,
    "text": "これが使いたいリンクだ。"
  },
  {
    "start": 3659020,
    "end": 3665120,
    "text": "トップページを表示するのと同じhref属性を与え、その中にテキストを挿入する。"
  },
  {
    "start": 3666300,
    "end": 3674308,
    "text": "これを保存すると、ブランド・テキストのスタイリングが消えているのがわかるが、少なくとも動作は改善されている。"
  },
  {
    "start": 3674364,
    "end": 3678362,
    "text": "今、フロントページをクリックしても、このホットリフレッシュは起こらない。"
  },
  {
    "start": 3678506,
    "end": 3685722,
    "text": "その代わりに、私たちは瞬時にナビゲートし、コンポーネントの状態を失うことはない。"
  },
  {
    "start": 3685826,
    "end": 3691230,
    "text": "もちろん、CSSでこれを修正することもできますが、Bootstrapにはこれを処理する簡単な方法があります。"
  },
  {
    "start": 3691650,
    "end": 3700874,
    "text": "ナバー・ブランドの中にリンクを入れ子にする代わりに、ナバー・ブランドにs属性を追加することができます。"
  },
  {
    "start": 3701042,
    "end": 3708710,
    "text": "こうすることで、Bootstrapに、ここでは別の種類のコンポーネントを使用するが、レンダリングとスタイルはNavbarブランドのようにするように指示することができます。"
  },
  {
    "start": 3709010,
    "end": 3711070,
    "text": "ここでもリンクを渡す。"
  },
  {
    "start": 3711930,
    "end": 3715962,
    "text": "今、このナビバー・ブランド全体がこのような次のリンクに変わっている。"
  },
  {
    "start": 3716146,
    "end": 3723370,
    "text": "内側のリンクタグを削除して、ここにahref属性を追加すればよい。"
  },
  {
    "start": 3723490,
    "end": 3725466,
    "text": "今、私たちは両方の世界のベストを手に入れた。"
  },
  {
    "start": 3725578,
    "end": 3730554,
    "text": "これで、ナバー・ブランドのスタイルが手に入ったが、次のリンクのように動作する。"
  },
  {
    "start": 3730722,
    "end": 3732996,
    "text": "これは特別なブートストラップ・プロップだ。"
  },
  {
    "start": 3733178,
    "end": 3742576,
    "text": "他のコンポーネント・ライブラリにも、さまざまな種類のコンポーネントをレンダリングできる同様のプロップが用意されていることは知っている。"
  },
  {
    "start": 3742648,
    "end": 3748464,
    "text": "ここでもsプロップに1つのsを渡し、リンクを渡す。"
  },
  {
    "start": 3748632,
    "end": 3755016,
    "text": "これで、アプリ内の次のリンクから適切なナビゲーションができるようになった。"
  },
  {
    "start": 3755168,
    "end": 3756140,
    "text": "ずっといい。"
  },
  {
    "start": 3756520,
    "end": 3758292,
    "text": "もうひとつ改善したいことがある。"
  },
  {
    "start": 3758456,
    "end": 3762692,
    "text": "今いるメニューをハイライトしたいんだ。"
  },
  {
    "start": 3762836,
    "end": 3775880,
    "text": "先ほどこれをクリックしたせいで、helloページにいないにもかかわらず、helloページがハイライトされている。"
  },
  {
    "start": 3777260,
    "end": 3781084,
    "text": "これがtrueと評価されると、helloリンクがハイライトされる。"
  },
  {
    "start": 3781172,
    "end": 3783340,
    "text": "いつハイライトさせたいか？"
  },
  {
    "start": 3783420,
    "end": 3787116,
    "text": "helloにいるときはいつでもhelloのリンクがハイライトされるようにしたい。"
  },
  {
    "start": 3787188,
    "end": 3790136,
    "text": "では、現在のパスを取得しなければならない。"
  },
  {
    "start": 3790168,
    "end": 3795264,
    "text": "私たちはこのコンポーネント内の古いページ・ディレクトリにある現在のURLにいる。"
  },
  {
    "start": 3795352,
    "end": 3800864,
    "text": "useルーターフックを使ってインポートできる次のルーターの上でこれを行った。"
  },
  {
    "start": 3800952,
    "end": 3807912,
    "text": "appディレクトリにもルーターがあり、ルーターを拒否することはできるが、ネクストスラッシュのルーターからは拒否できない。"
  },
  {
    "start": 3808016,
    "end": 3811100,
    "text": "これはappディレクトリでは動作しない。"
  },
  {
    "start": 3811640,
    "end": 3817162,
    "text": "別のファイルからインポートする必要があるのですが、自動インポートは提案してくれませんでした。"
  },
  {
    "start": 3817186,
    "end": 3818750,
    "text": "私はこれを手動でやらなければならない。"
  },
  {
    "start": 3820530,
    "end": 3825922,
    "text": "ネクスト・スラッシュ・ルーターからではなく、ネクスト・スラッシュ・ナビゲーションからインポートしなければならない。"
  },
  {
    "start": 3826066,
    "end": 3828750,
    "text": "これはアプリ・ルーターで動作するものだ。"
  },
  {
    "start": 3829850,
    "end": 3834746,
    "text": "ここで、use routerフックを再びpagesディレクトリで取得することができる。"
  },
  {
    "start": 3834818,
    "end": 3837634,
    "text": "これで、このルーターから現在のパスを引き出すことができた。"
  },
  {
    "start": 3837682,
    "end": 3848902,
    "text": "ドットを追加すると、ルーター機能が3つのフックに分割されたため、このような値やメソッドがないことがわかる。"
  },
  {
    "start": 3849086,
    "end": 3857062,
    "text": "私たちは、ルーターやドット・プッシュなどで異なるページ間をプログラムで移動できるルーターを使用した。"
  },
  {
    "start": 3857166,
    "end": 3867250,
    "text": "入力したURLを取得したい場合は、別のフックを使用する。"
  },
  {
    "start": 3867840,
    "end": 3870584,
    "text": "ここで現在のパスを取得することができる。"
  },
  {
    "start": 3870752,
    "end": 3872504,
    "text": "これは実際には文字列型である。"
  },
  {
    "start": 3872592,
    "end": 3879920,
    "text": "現在、これはhelloであり、use search paramsと呼ばれる3番目のフックがある。"
  },
  {
    "start": 3879960,
    "end": 3883416,
    "text": "こうすることで、URLから検索パラメータを取り出すことができる。"
  },
  {
    "start": 3883568,
    "end": 3889140,
    "text": "ご存じないかもしれませんが、検索パラメータとは、クエスチョンマークの後ろに渡すことができる属性のことです。"
  },
  {
    "start": 3890960,
    "end": 3893472,
    "text": "この場合、必要なのはパス名だけだ。"
  },
  {
    "start": 3893536,
    "end": 3897216,
    "text": "検索パラメーターを削除して、ルーターを使う。"
  },
  {
    "start": 3897368,
    "end": 3913700,
    "text": "このインポートを削除することもできるが、パス名は残しておく。この変数が文字列helloと等しいかどうかをチェックしたいからだ。"
  },
  {
    "start": 3914000,
    "end": 3918912,
    "text": "そして、このメニュー項目をアクティブに設定し、そうでなければハイライトされないようにしたい。"
  },
  {
    "start": 3919056,
    "end": 3921868,
    "text": "今、私たちはハローページにいる。"
  },
  {
    "start": 3922024,
    "end": 3927440,
    "text": "helloがハイライトされ、ホームページに移動するとhelloはもうハイライトされていない。"
  },
  {
    "start": 3928300,
    "end": 3929692,
    "text": "これを加える必要はない。"
  },
  {
    "start": 3929796,
    "end": 3935988,
    "text": "主な目的は、現在アプリ・ディレクトリにあるさまざまなルーター・フックをお見せしたかったからです。"
  },
  {
    "start": 3936124,
    "end": 3942764,
    "text": "さて、これでウェブページの足場は整ったので、次のいくつかのセクションではキャッシュに焦点を当てます。"
  },
  {
    "start": 3942852,
    "end": 3951066,
    "text": "どのようにunsplash APIからデータをフェッチできるか、そしてコンパイル時や動的にキャッシュするさまざまな方法など。"
  },
  {
    "start": 3951258,
    "end": 3956242,
    "text": "さて、それでは次のj'sでこれらの異なるキャッシング戦略について学ぶ番だ。"
  },
  {
    "start": 3956426,
    "end": 3968350,
    "text": "実は非常に興味深いのは、サーバー・コンポーネントのデフォルトでは、特別な設定なしにこのように書くだけで、プロジェクトをコンパイルするときにこの部分が実行されるということだ。"
  },
  {
    "start": 3968770,
    "end": 3972338,
    "text": "ここで何らかのデータを取得すれば、それがレイアウトに配置される。"
  },
  {
    "start": 3972474,
    "end": 3986576,
    "text": "そして、次のJ'sは自動的にこの生成されたレイアウトをサーバーにキャッシュし、プロジェクトを再度コンパイルするまで、まったく同じページをユーザーに提供する。"
  },
  {
    "start": 3986728,
    "end": 3989816,
    "text": "どういうことか、もう一度ハローページを開いてみよう。"
  },
  {
    "start": 3989928,
    "end": 3996952,
    "text": "ページを更新するたびに、ローディング・スピナーが表示される。"
  },
  {
    "start": 3997056,
    "end": 4007450,
    "text": "開発モードでプロジェクトを実行せず、代わりにNPM buildでプロジェクトをビルドすると、何か違うことが起こる。"
  },
  {
    "start": 4007790,
    "end": 4010410,
    "text": "実際にはNPMがビルドを実行する。"
  },
  {
    "start": 4013310,
    "end": 4015198,
    "text": "そして、あることをする。"
  },
  {
    "start": 4015334,
    "end": 4023134,
    "text": "本番用にコードを最適化し、このようなサーバー・コンポーネント用の静的ページを生成する。"
  },
  {
    "start": 4023262,
    "end": 4029210,
    "text": "これには20秒か30秒くらい、あるいはプロジェクトの規模によってはそれ以上かかる。"
  },
  {
    "start": 4029550,
    "end": 4034174,
    "text": "これが終わったら、NPMと入力してプロジェクトを開始する。"
  },
  {
    "start": 4034302,
    "end": 4039350,
    "text": "では、開発モードではなく、プロダクション・モードで始めてみよう。"
  },
  {
    "start": 4039470,
    "end": 4048182,
    "text": "プロジェクトをコンパイルすると、ここでもサーバー・コンポーネントが実行され、静的なHTMLページが生成される。"
  },
  {
    "start": 4048326,
    "end": 4049582,
    "text": "これは何を意味するのか？"
  },
  {
    "start": 4049726,
    "end": 4053974,
    "text": "つまり、ページを更新してもローディング・スピナーが表示されなくなったのだ。"
  },
  {
    "start": 4054142,
    "end": 4057370,
    "text": "その代わり、すぐに静的ページが表示される。"
  },
  {
    "start": 4057530,
    "end": 4063714,
    "text": "次のJSでpagesディレクトリを使用している場合、これはstatic propsの取得に相当します。"
  },
  {
    "start": 4063802,
    "end": 4072130,
    "text": "静的プロップをエクスポートして、ここでデータを取得する代わりに、特別なコンフィギュレーションなしに、サーバーコンポーネント内で直接それを行います。"
  },
  {
    "start": 4072210,
    "end": 4075026,
    "text": "ここでデータを取得し、レイアウトを返すだけだ。"
  },
  {
    "start": 4075098,
    "end": 4078946,
    "text": "next JSはビルド時にこのページを自動的にキャッシュします。"
  },
  {
    "start": 4079098,
    "end": 4084248,
    "text": "では、この効果をよりよく見るために、実際のデータをロードしてみよう。"
  },
  {
    "start": 4084384,
    "end": 4086784,
    "text": "これにはunsplash APIを使用する。"
  },
  {
    "start": 4086912,
    "end": 4095320,
    "text": "無料会員登録すると、1時間に50枚の画像を取得できる。"
  },
  {
    "start": 4095440,
    "end": 4100088,
    "text": "unsplash.comのデベロッパーは、ここで無料のアカウントを作成する必要があります。"
  },
  {
    "start": 4100224,
    "end": 4103688,
    "text": "それからアプリに行き、アプリを設定する。"
  },
  {
    "start": 4103864,
    "end": 4110283,
    "text": "アクセスキーはこの下にある。"
  },
  {
    "start": 4110411,
    "end": 4113259,
    "text": "もちろん、アクセスキーを誰かと共有するべきではありません。"
  },
  {
    "start": 4113339,
    "end": 4118279,
    "text": "このキーは後で削除するので、もう使えないからだ。"
  },
  {
    "start": 4118619,
    "end": 4125923,
    "text": "このアクセス・キーをコピーしてプロジェクトに入り、通常、これらの秘密をコードにハードコードしたくはないだろう。"
  },
  {
    "start": 4126051,
    "end": 4132107,
    "text": "デフォルトではGitHubにプッシュされないからだ。"
  },
  {
    "start": 4132243,
    "end": 4144197,
    "text": "このnth localのような想定ファイルは、新しいnext jsプロジェクトzorを立ち上げたときに、ルート・フォルダーにあるgitignoreの中にある。"
  },
  {
    "start": 4144293,
    "end": 4155489,
    "text": "srzの中ではなく、tのコンフィグやその他のすべての外側に、dot nth dot localと呼ぶファイルを作るんだ。"
  },
  {
    "start": 4156269,
    "end": 4160117,
    "text": "では、なぜ次のJではenvではなくnを使うのか？"
  },
  {
    "start": 4160173,
    "end": 4167500,
    "text": "通常、ある種の一般的な設定には通常のenvファイルを使い、秘密はenvローカルファイルに入れる。"
  },
  {
    "start": 4167620,
    "end": 4172284,
    "text": "このため、Nv localはデフォルトでGitignoreに入っているが、通常のenvファイルは入っていない。"
  },
  {
    "start": 4172372,
    "end": 4179760,
    "text": "もちろん、ローカルが付加されていない通常のenvファイルを好むなら、これを設定してgitignoreに追加することもできる。"
  },
  {
    "start": 4180100,
    "end": 4182724,
    "text": "ここではn個のローカルファイルを使うだけだ。"
  },
  {
    "start": 4182852,
    "end": 4188244,
    "text": "ここにunsplashアンダースコア・アクセス・キーを追加する。"
  },
  {
    "start": 4188292,
    "end": 4193924,
    "text": "好きな名前を付けることができるが、通常はすべて大文字でアンダースコアを付けるのが一般的だ。"
  },
  {
    "start": 4194052,
    "end": 4196404,
    "text": "そして、ここにキーを貼り付ける。"
  },
  {
    "start": 4196572,
    "end": 4199924,
    "text": "引用符で囲んでもよいが、その必要はない。"
  },
  {
    "start": 4200012,
    "end": 4202080,
    "text": "このように編集することもできる。"
  },
  {
    "start": 4202420,
    "end": 4217870,
    "text": "そして、このエンドポイントからフェッチしたい。このエンドポイントでは、ページ上部のどこかからランダムな画像を取得することができる。"
  },
  {
    "start": 4218250,
    "end": 4224946,
    "text": "次にランダム画像エンドポイントを呼び出し、ランダムな写真を取得する。"
  },
  {
    "start": 4225058,
    "end": 4230590,
    "text": "これをURLに追加すると、この下に戻ってくるデータが表示される。"
  },
  {
    "start": 4230930,
    "end": 4234170,
    "text": "これがJSONレスポンスの構造になる。"
  },
  {
    "start": 4234290,
    "end": 4241018,
    "text": "私たちはtypescriptを使用しているので、型安全な方法でアプリでこれらの値を使用できるように、このための型を作成します。"
  },
  {
    "start": 4241114,
    "end": 4246268,
    "text": "というのも、アプリでこれらの情報をすべて表示することはないからだ。"
  },
  {
    "start": 4246354,
    "end": 4252780,
    "text": "私が欲しいのは、UIに表示できるように画像の説明を表示することだ。"
  },
  {
    "start": 4253720,
    "end": 4263384,
    "text": "画像を投稿したユーザーを表示したいのですが、ユーザー名はこの下にあり、URLには実際の画像が含まれています。"
  },
  {
    "start": 4263472,
    "end": 4270536,
    "text": "この画像は次のjsでリサイズし、幅と高さも変更するので、rawで十分だと思います。"
  },
  {
    "start": 4270608,
    "end": 4279560,
    "text": "プロジェクトに入り、srzの中にmodelsをリコールする新しいフォルダを作りましょう。"
  },
  {
    "start": 4280460,
    "end": 4285196,
    "text": "ここに、好きな名前をつけられる新しいファイルを追加する。"
  },
  {
    "start": 4285308,
    "end": 4293612,
    "text": "HTMLコードが含まれていないので、このunsplash画像をTSXではなくtsと呼ぶことにする。"
  },
  {
    "start": 4293756,
    "end": 4296308,
    "text": "これは単なるタイプスクリプトファイルだ。"
  },
  {
    "start": 4296484,
    "end": 4302658,
    "text": "ここでは、この型がエントリーにどのように見えるかを定義するインターフェイスをエクスポートする。"
  },
  {
    "start": 4302754,
    "end": 4319150,
    "text": "名前をつける unsplash image すでに言ったように、ここには説明を書き、ここで使うキーはreturn型の中のキーとまったく同じ名前でなければならない。"
  },
  {
    "start": 4319610,
    "end": 4323610,
    "text": "そうしないと、どの値がどのキーに属しているのか、コードがわからなくなるだろ？"
  },
  {
    "start": 4323650,
    "end": 4325830,
    "text": "スペルは同じでなければならない。"
  },
  {
    "start": 4327320,
    "end": 4329384,
    "text": "それから、ユーザーも取得したい。"
  },
  {
    "start": 4329512,
    "end": 4338768,
    "text": "ユーザーには、例えばユーザー名やその他のものを含むネストされたオブジェクトがあります。"
  },
  {
    "start": 4338904,
    "end": 4344780,
    "text": "我々はユーザー名だけを気にしているので、ここにユーザー名文字列を追加する。"
  },
  {
    "start": 4345480,
    "end": 4350712,
    "text": "次に、URLオブジェクトに含まれる画像URLを取得したい。"
  },
  {
    "start": 4350856,
    "end": 4354340,
    "text": "前にも述べたように、ここから生の画像を取り出したい。"
  },
  {
    "start": 4354670,
    "end": 4361170,
    "text": "そして最後に幅（これは数字）、高さ（これも数字）。"
  },
  {
    "start": 4361590,
    "end": 4364198,
    "text": "これが私たちのアプリで使うタイプだ。"
  },
  {
    "start": 4364294,
    "end": 4367846,
    "text": "ここにある他の値は無視する。"
  },
  {
    "start": 4367998,
    "end": 4371758,
    "text": "もちろん、より洗練されたアプリを作りたければ、それらを追加することもできる。"
  },
  {
    "start": 4371894,
    "end": 4376126,
    "text": "では、helloページと同じような動作をする新しいページを作りたい。"
  },
  {
    "start": 4376238,
    "end": 4382740,
    "text": "コンパイル時にデータをフェッチし、再びプロジェクトをコンパイルするまで静的ページをキャッシュする。"
  },
  {
    "start": 4382860,
    "end": 4391516,
    "text": "このページでは静的レンダリングが表示されているので、今回はhelloではなくstaticを指す新しいルートを作成したい。"
  },
  {
    "start": 4391588,
    "end": 4395004,
    "text": "このページをsteadyと呼ぶ必要はない。"
  },
  {
    "start": 4395092,
    "end": 4398628,
    "text": "それで、新しいURLを設定する方法はもう学んだよね？"
  },
  {
    "start": 4398684,
    "end": 4402212,
    "text": "appフォルダーの中にさらにフォルダーを作る。"
  },
  {
    "start": 4402396,
    "end": 4407360,
    "text": "スラッシュスタティックに移動したい場合は、staticと呼ぶフォルダを作成する。"
  },
  {
    "start": 4408020,
    "end": 4417240,
    "text": "これを実際に開くことができるページに戻すには、helloページでやったのと同じように、この中にページTSXファイルを入れる必要がある。"
  },
  {
    "start": 4417580,
    "end": 4421452,
    "text": "ここでは、いつものようにデフォルトの関数をエクスポートする。"
  },
  {
    "start": 4421556,
    "end": 4426980,
    "text": "繰り返すが、私はこのページを静的ページと呼ぶつもりだ。"
  },
  {
    "start": 4427140,
    "end": 4430156,
    "text": "ここでは、unsplashからデータを取得したいんだよね？"
  },
  {
    "start": 4430228,
    "end": 4435200,
    "text": "デフォルトではサーバー上でのみ実行されるからだ。"
  },
  {
    "start": 4436170,
    "end": 4441410,
    "text": "そして、constレスポンスを作成し、unsplash APIにフェッチリクエストをするだけです。"
  },
  {
    "start": 4441490,
    "end": 4444706,
    "text": "フェッチでなくても、アクシオスのようなものを使うこともできる。"
  },
  {
    "start": 4444738,
    "end": 4445810,
    "text": "それはあなた次第だ。"
  },
  {
    "start": 4445970,
    "end": 4448018,
    "text": "フェッチは最も簡単なものだ。"
  },
  {
    "start": 4448194,
    "end": 4455630,
    "text": "このリクエストを再度行うURLは、unsplash APIのドキュメントにある。"
  },
  {
    "start": 4456130,
    "end": 4458226,
    "text": "ルートURLはこの部分である。"
  },
  {
    "start": 4458338,
    "end": 4467950,
    "text": "これを文字列にコピーしよう。終点はスラッシュ・フォトのランダムな位置だ。"
  },
  {
    "start": 4468490,
    "end": 4471378,
    "text": "の場合、APIキーも渡さなければならない。"
  },
  {
    "start": 4471514,
    "end": 4474866,
    "text": "これもドキュメントのどこかに書いてある。"
  },
  {
    "start": 4474938,
    "end": 4480314,
    "text": "彼らは、APIキーを検索パラメータとしてURLに追加しなければならないと教えてくれた。"
  },
  {
    "start": 4480402,
    "end": 4482082,
    "text": "クエスチョンマークを加える。"
  },
  {
    "start": 4482266,
    "end": 4505700,
    "text": "そして、クライアントのアイデアを書き、スペルが正しいことを確認し、APIキーを追加したいので、この名前をコピーし、process Envで文字列に追加する。"
  },
  {
    "start": 4507120,
    "end": 4516140,
    "text": "JSONには、先ほどインターフェイスでunsplash画像タイプを設定した、このデータ・ブロックが含まれる。"
  },
  {
    "start": 4517150,
    "end": 4522942,
    "text": "この画像をここから取り出すために、const image equals awaitを作成する。"
  },
  {
    "start": 4523086,
    "end": 4528770,
    "text": "ちなみに、これは非同期処理なので、fetchの前にweightを付けなければならない。"
  },
  {
    "start": 4529950,
    "end": 4537210,
    "text": "フェッチ・レスポンスからこのJSONボディを渡すレスポンスJSONを待ちたい。"
  },
  {
    "start": 4537550,
    "end": 4540006,
    "text": "これはunsplash画像のタイプになります。"
  },
  {
    "start": 4540158,
    "end": 4550540,
    "text": "コンパイラーは気づかないので、typeはanyに設定されているが、このhypeをmodelsフォルダからインポートしたunsplash imageに設定することができる。"
  },
  {
    "start": 4550700,
    "end": 4555116,
    "text": "これで、この画像変数を使うと自動補完されるようになった。"
  },
  {
    "start": 4555308,
    "end": 4560564,
    "text": "でも、ここでunsplashのアクセスキーを使っても大丈夫なの？"
  },
  {
    "start": 4560652,
    "end": 4562132,
    "text": "これは機密データではないのか？"
  },
  {
    "start": 4562236,
    "end": 4569066,
    "text": "しかし、説明したように、サーバー・コンポーネントはサーバー上でしか実行されないので、クライアントには表示されない。"
  },
  {
    "start": 4569188,
    "end": 4573966,
    "text": "次のj'sには、これらの環境変数に対する追加のセキュリティ対策がある。"
  },
  {
    "start": 4574078,
    "end": 4579646,
    "text": "この環境変数をクライアントで直接使うとしても、実際には未定義である。"
  },
  {
    "start": 4579798,
    "end": 4587974,
    "text": "次のパブリック・アンダースコアだけをプレフィックスにつければ、この値はクライアントでしか持たない。"
  },
  {
    "start": 4588022,
    "end": 4590990,
    "text": "こうすることで、この変数をクライアントから見えるようにすることができる。"
  },
  {
    "start": 4591110,
    "end": 4596920,
    "text": "これは、私たちが誤って機密情報を公開しないための、もうひとつのセキュリティ対策なのです。"
  },
  {
    "start": 4597110,
    "end": 4601652,
    "text": "これはサーバー上でのみ実行されるので、この接頭辞を追加する必要はない。"
  },
  {
    "start": 4601836,
    "end": 4606760,
    "text": "それでは、以下のレイアウトをリターン・ブロックに設定してみよう。"
  },
  {
    "start": 4608380,
    "end": 4614520,
    "text": "ここにdivを置き、そこにユーティリティ・クラスとクラス名を追加する。"
  },
  {
    "start": 4614980,
    "end": 4617916,
    "text": "これをd flexでフレックスボックスにする。"
  },
  {
    "start": 4618028,
    "end": 4620120,
    "text": "繰り返すが、これはブートストラップから来ている。"
  },
  {
    "start": 4620460,
    "end": 4629090,
    "text": "この属性でフレックス・カラムにし、align item centerですべてを画面上に水平に送ることができる。"
  },
  {
    "start": 4630070,
    "end": 4632150,
    "text": "ここに画像を入れたい。"
  },
  {
    "start": 4632230,
    "end": 4639410,
    "text": "next jsには、通常のHTML画像の代わりに使用する特別な次の画像があります。"
  },
  {
    "start": 4641470,
    "end": 4653134,
    "text": "そうすれば、ユーザーは不必要に大きな画像を読み込む必要がなくなり、もちろん読み込みに時間がかかることもなくなるからだ。"
  },
  {
    "start": 4653222,
    "end": 4665638,
    "text": "こうすることで、画像が現れたときにレイアウトがずれてしまうのを避けることができるからです。"
  },
  {
    "start": 4665774,
    "end": 4673678,
    "text": "例えば、ここに画像があるとします。しかし、事前にサイズ、例えば高さがわかっておらず、下にテキストがあるとします。"
  },
  {
    "start": 4673814,
    "end": 4681622,
    "text": "通常のHTML画像では、画像の読み込みが終わると、画像がポップアップし、その下にあるすべての要素を押し下げますよね？"
  },
  {
    "start": 4681726,
    "end": 4686142,
    "text": "これは、画面上の要素を動き回ってしまうため、ユーザーエクスペリエンスに悪影響を及ぼす。"
  },
  {
    "start": 4686246,
    "end": 4690006,
    "text": "ボタンをクリックしようとすると、違う場所に移動してしまうことがある。"
  },
  {
    "start": 4690118,
    "end": 4692878,
    "text": "そのため、SEO対策にもならない。"
  },
  {
    "start": 4693014,
    "end": 4696678,
    "text": "私の知る限り、グーグルはこの種の行為を本当に罰している。"
  },
  {
    "start": 4696774,
    "end": 4701330,
    "text": "次の画像では、幅と高さを事前に定義するよう強制している。"
  },
  {
    "start": 4701630,
    "end": 4707970,
    "text": "まず、通常のHTML画像と同じように、画像のソースを設定します。"
  },
  {
    "start": 4708550,
    "end": 4712010,
    "text": "これはunsplashから送られてきた画像から得たものだ。"
  },
  {
    "start": 4712310,
    "end": 4718530,
    "text": "ここに、先ほどインターフェイスで定義したURLがあり、ここで生の画像をロードしたい。"
  },
  {
    "start": 4719310,
    "end": 4721918,
    "text": "次に、幅と高さを定義しなければならない。"
  },
  {
    "start": 4722054,
    "end": 4728102,
    "text": "画像の寸法が事前にわからないので、縦長のものもあれば横長のものもある。"
  },
  {
    "start": 4728206,
    "end": 4729930,
    "text": "ここで計算したい。"
  },
  {
    "start": 4730250,
    "end": 4732906,
    "text": "上にちょっとしたコードを追加するだけだ。"
  },
  {
    "start": 4733018,
    "end": 4742154,
    "text": "また、画像を固定寸法に設定し、CSSのobject fit cover属性を使って、画像が歪まないように中央で切り抜くこともできます。"
  },
  {
    "start": 4742242,
    "end": 4745230,
    "text": "ここでは画像のサイズを動的に変更する。"
  },
  {
    "start": 4745730,
    "end": 4750226,
    "text": "ここでは、幅と高さを計算するコードを少し書きます。"
  },
  {
    "start": 4750378,
    "end": 4764070,
    "text": "画像自体の幅がすでに小さい場合を除き、画像の幅を常に500ピクセルに設定したいのです。"
  },
  {
    "start": 4764570,
    "end": 4773938,
    "text": "これは通常のJavaScript関数で、ここに渡した値のうち最小の値を返すだけである。"
  },
  {
    "start": 4774074,
    "end": 4780110,
    "text": "ここでは、APIから戻ってきた画像の500と幅を渡す。"
  },
  {
    "start": 4780530,
    "end": 4786184,
    "text": "画像の幅が例えば600ピクセルであれば、500ピクセルが返される。"
  },
  {
    "start": 4786282,
    "end": 4789860,
    "text": "もしこれが400ピクセルなら、私たちは400ピクセルを取り戻すことになる。"
  },
  {
    "start": 4789980,
    "end": 4796360,
    "text": "そして、この新しい幅から高さを計算し、元の縦横比を保ちたい。"
  },
  {
    "start": 4796700,
    "end": 4802076,
    "text": "内は、幅を画像のドット幅で割ったもの。"
  },
  {
    "start": 4802268,
    "end": 4805920,
    "text": "そして、これに画像の高さを掛ける。"
  },
  {
    "start": 4807260,
    "end": 4811292,
    "text": "そして、この幅に合う新しい高さを得るんだ。"
  },
  {
    "start": 4811316,
    "end": 4815210,
    "text": "そして新しい幅と高さをここに渡す。"
  },
  {
    "start": 4815590,
    "end": 4820326,
    "text": "もし幅や高さを渡さなければ、実際にエラーが発生する。"
  },
  {
    "start": 4820398,
    "end": 4822930,
    "text": "この映像をスクリーンに映すことはできなかった。"
  },
  {
    "start": 4823390,
    "end": 4825174,
    "text": "オルトプロップも設定しよう。"
  },
  {
    "start": 4825262,
    "end": 4826838,
    "text": "これが下線を引いた理由である。"
  },
  {
    "start": 4826894,
    "end": 4828090,
    "text": "リントは文句を言っている。"
  },
  {
    "start": 4829750,
    "end": 4836606,
    "text": "これは例えばスクリーンリーダー用に表示されるもので、目の不自由な人や視力の弱い人に便利なものだ。"
  },
  {
    "start": 4836718,
    "end": 4841758,
    "text": "可能な限り、画像の説明を含むaltプロパティを渡すべきである。"
  },
  {
    "start": 4841934,
    "end": 4848330,
    "text": "画像レスポンスに、ここで使用できる説明があります。"
  },
  {
    "start": 4849110,
    "end": 4855294,
    "text": "このエントリーを保存し、スラッシュスタティックにアクセスすると、実際に画面にこのように表示されるはずだ。"
  },
  {
    "start": 4855342,
    "end": 4864478,
    "text": "もしこれが正常に機能していれば、not foundのページが表示されるはずだ。なぜなら、先にビルドしてプロジェクトを開始したため、変更が自動的に適用されないからだ。"
  },
  {
    "start": 4864654,
    "end": 4875160,
    "text": "実行を停止し、再度NPM run devを実行して開発モードで実行し、ページを更新するとここに画像が表示されるはずです。"
  },
  {
    "start": 4877700,
    "end": 4887140,
    "text": "これは、次の設定で画像をロードするURLを追加する必要があるからです。"
  },
  {
    "start": 4887220,
    "end": 4895596,
    "text": "これは、次のJSがこれらの画像のサイズを自動的に変更するためで、どのURLから画像のサイズを変更してもよいかをあらかじめJSに指示しておく必要がある。"
  },
  {
    "start": 4895708,
    "end": 4901036,
    "text": "これは、私たちのリサイズ・エンドポイントを他人が悪用できないようにするための保護である。"
  },
  {
    "start": 4901148,
    "end": 4905812,
    "text": "バックエンドから画像を取得している場合は、バックエンドのURLを追加します。"
  },
  {
    "start": 4905916,
    "end": 4908920,
    "text": "ここにunsplashのURLを追加します。"
  },
  {
    "start": 4909460,
    "end": 4917040,
    "text": "プロジェクトに入り、新しいnext JSプロジェクトに付属しているnext config jsを開く。"
  },
  {
    "start": 4917420,
    "end": 4925188,
    "text": "次の設定ブロックの中に入り、再びJavaScriptオブジェクトであるimagesの値を追加する。"
  },
  {
    "start": 4925244,
    "end": 4938628,
    "text": "中括弧を追加し、ここでdomains値を設定します。domains値は、画像の読み込みを許可したい各URLの文字列を含む配列を指定します。"
  },
  {
    "start": 4938764,
    "end": 4943120,
    "text": "これは、エラーメッセージに表示されている画像ドットunsplash.comです。"
  },
  {
    "start": 4943700,
    "end": 4948160,
    "text": "画像によってはURLが異なるので、ここに2つ目のURLを追加する。"
  },
  {
    "start": 4949050,
    "end": 4952670,
    "text": "もうひとつはplus dot unsplash.com。"
  },
  {
    "start": 4954050,
    "end": 4960578,
    "text": "これを保存すると、正しく動作しなかった場合は自動的にプロジェクトが再起動されるはずだ。"
  },
  {
    "start": 4960634,
    "end": 4963590,
    "text": "もう一度NPM run devを実行しなければならない。"
  },
  {
    "start": 4964610,
    "end": 4971114,
    "text": "これでページを更新すると、指を交差させた画像が表示されるはずだ。"
  },
  {
    "start": 4971162,
    "end": 4975300,
    "text": "青い背景があり、そちら側にまた画像がある。"
  },
  {
    "start": 4975340,
    "end": 4981676,
    "text": "スクリーンのサイズを大きくしたので、すべてが少し拡大されているので、これは少し小さくなるだろう。"
  },
  {
    "start": 4981748,
    "end": 4983440,
    "text": "ああ、こんな感じだ。"
  },
  {
    "start": 4983820,
    "end": 4987080,
    "text": "この画像をよりクールに見えるように少しスタイリングしてみよう。"
  },
  {
    "start": 4987580,
    "end": 4998640,
    "text": "ここでは、いくつかのユーティリティ・クラスを使って、画像タグに直接、角丸を追加しています。"
  },
  {
    "start": 5001270,
    "end": 5011490,
    "text": "アスペクト比を保つために、最小幅を100％、高さを100％に設定したい。"
  },
  {
    "start": 5012070,
    "end": 5022462,
    "text": "これは、ここで定義した幅に達するまで、小さな画面では画像が自動的に小さくなるという便利な機能である。"
  },
  {
    "start": 5022526,
    "end": 5027090,
    "text": "一番大きいバージョンはこれですが、この画像をもっと小さくすることもできます。"
  },
  {
    "start": 5027850,
    "end": 5035290,
    "text": "さて、画像の下には、この画像を作成したユーザーのプロフィールへのリンクも貼りたい。"
  },
  {
    "start": 5035410,
    "end": 5037710,
    "text": "画像の下にバイヤーと書いている。"
  },
  {
    "start": 5038370,
    "end": 5044642,
    "text": "そして、次のリンクをここに追加する。これは、自分たちのアプリ内のページにリンクするためだ。"
  },
  {
    "start": 5044706,
    "end": 5049594,
    "text": "これが外部ページなら、通常のHTMLリンク、つまりaタグを使うことになる。"
  },
  {
    "start": 5049682,
    "end": 5057210,
    "text": "これは私たち自身のアプリの中の別のページになるので、次のリンクを使い、中括弧の中に文字列を渡す。"
  },
  {
    "start": 5057550,
    "end": 5061210,
    "text": "このリンクはスラッシュ・ユーザーを指す。"
  },
  {
    "start": 5061590,
    "end": 5066210,
    "text": "このルートも、今ではなく、プロジェクトの後半に設定する予定だ。"
  },
  {
    "start": 5066710,
    "end": 5074130,
    "text": "そして、unsplashのレスポンスに含まれるimage dot user dot usernameを追加する。"
  },
  {
    "start": 5074910,
    "end": 5078932,
    "text": "これを閉じると、リンクのテキストにユーザー名も表示される。"
  },
  {
    "start": 5079086,
    "end": 5086940,
    "text": "ここに中括弧を追加し、その間にユーザー・ユーザー名を記述する。"
  },
  {
    "start": 5087600,
    "end": 5089460,
    "text": "よし、こんな感じだ。"
  },
  {
    "start": 5090000,
    "end": 5091464,
    "text": "よし、これを保存しよう。"
  },
  {
    "start": 5091552,
    "end": 5098848,
    "text": "今は開発モードなので、Ctrlを押しながらfキーを5回押せば、このページをハードリフレッシュできる。"
  },
  {
    "start": 5098984,
    "end": 5101380,
    "text": "実際には毎回新しい画像が得られる。"
  },
  {
    "start": 5101720,
    "end": 5105336,
    "text": "通常の方法でリフレッシュすると、同じ画像が表示される。"
  },
  {
    "start": 5105448,
    "end": 5115312,
    "text": "これは、プロジェクトをコンパイルして本番モードで実行するときも同じで、next j sが先に進んでこのデータをフェッチするからである。"
  },
  {
    "start": 5115376,
    "end": 5123656,
    "text": "プロジェクトをコンパイルすると、このHTMLが生成され、キャッシュされてユーザーに提供される。"
  },
  {
    "start": 5123688,
    "end": 5128420,
    "text": "このページをすべてのユーザーに開くと、すべてのユーザーが同じページを見ることになる。"
  },
  {
    "start": 5128800,
    "end": 5137566,
    "text": "開発モードでは、キャッシュがヒットしたときとヒットしなかったときのログが実際に表示されます。"
  },
  {
    "start": 5137678,
    "end": 5143702,
    "text": "このキャッシュミスは、ctrl f 5でページをハードリロードしたときのものだ。"
  },
  {
    "start": 5143846,
    "end": 5146078,
    "text": "そうでなければ、キャッシュからページを取得した。"
  },
  {
    "start": 5146254,
    "end": 5152214,
    "text": "また、build againを実行してプロジェクトをビルドし、再度ビルドを開始することもできる。"
  },
  {
    "start": 5152342,
    "end": 5159410,
    "text": "その場合、ページをハードリロードしても、通常のリロードをしても、常に同じページが戻ってくる。"
  },
  {
    "start": 5160370,
    "end": 5165670,
    "text": "ページを更新すると、プロジェクトを再構築したため、おそらく新しい画像が表示される。"
  },
  {
    "start": 5166370,
    "end": 5170106,
    "text": "その後、大丈夫、実はまだ同じ画像なんだ。"
  },
  {
    "start": 5170258,
    "end": 5181186,
    "text": "要は、このページを普通にリフレッシュしようがハード・リフレッシュしようが、コンパイル時にしかフェッチされないので、いつも同じ画像が再び表示されるということだ。"
  },
  {
    "start": 5181378,
    "end": 5186594,
    "text": "但し、これは古いpagesディレクトリで静的プロップを取得するのと同じことである。"
  },
  {
    "start": 5186682,
    "end": 5188432,
    "text": "これは同じで、ただそれだけだった。"
  },
  {
    "start": 5188456,
    "end": 5191496,
    "text": "ここでは、サーバー・コンポーネントで直接フェッチを行う。"
  },
  {
    "start": 5191608,
    "end": 5194168,
    "text": "もちろん、これは必ずしもあなたが望んでいることではないだろう？"
  },
  {
    "start": 5194224,
    "end": 5197224,
    "text": "このページを開くたびに新しい画像を取得したいこともある。"
  },
  {
    "start": 5197272,
    "end": 5198880,
    "text": "もちろん、私たちにもできる。"
  },
  {
    "start": 5198960,
    "end": 5201760,
    "text": "これは、このチュートリアルの次のセクションで学ぶことである。"
  },
  {
    "start": 5201840,
    "end": 5207264,
    "text": "その前に、このページのメタデータを変更する方法を紹介したい。"
  },
  {
    "start": 5207432,
    "end": 5214460,
    "text": "このページへの変更を即座に確認できるように、実行を停止して再び開発モードで実行することにする。"
  },
  {
    "start": 5215040,
    "end": 5219304,
    "text": "ルート・レイアウトにこのメタデータ・ブロックがあることを思い出してほしい。"
  },
  {
    "start": 5219432,
    "end": 5225780,
    "text": "実際にこれをコピーして、1つのページに対してより具体的なメタデータを定義することができる。"
  },
  {
    "start": 5226320,
    "end": 5230488,
    "text": "ページの説明を変えたくないので、削除すればいい。"
  },
  {
    "start": 5230624,
    "end": 5238136,
    "text": "このようにすると、レイアウトで設定した説明文が使用されるので、レイアウトで設定した説明文に自動的にフォールバックします。"
  },
  {
    "start": 5238248,
    "end": 5240032,
    "text": "タイトルを変えたいだけなんだ。"
  },
  {
    "start": 5240096,
    "end": 5249514,
    "text": "私はこれを静的フェッチマイナスに設定し、同じ次のJS 13画像ギャラリーにしたい。"
  },
  {
    "start": 5249642,
    "end": 5256138,
    "text": "NPM startからNPM run devに切り替えたので、これを保存するときにページを更新しなければならない。"
  },
  {
    "start": 5256234,
    "end": 5261058,
    "text": "これで、次のJS画像ギャラリーをフェッチする新しいタイトルの静的画像を見ることができます。"
  },
  {
    "start": 5261234,
    "end": 5264234,
    "text": "メタデータを動的に設定することもできる。"
  },
  {
    "start": 5264362,
    "end": 5270050,
    "text": "このページで取得したレスポンスから必要なメタデータを設定したいとしよう。"
  },
  {
    "start": 5270090,
    "end": 5272024,
    "text": "どうやってこれをここに上げるんだ？"
  },
  {
    "start": 5272152,
    "end": 5278008,
    "text": "これは可能だが、別のアプローチが必要で、後でユーザープロファイルを設定するときに紹介する。"
  },
  {
    "start": 5278104,
    "end": 5284832,
    "text": "チュートリアルを最後までご覧ください。"
  },
  {
    "start": 5285016,
    "end": 5298720,
    "text": "もうひとつ、このページがどのように動くかを説明するテキストをここに少し入れておき、後でこのプロジェクトをもう一度見たときに、イメージアラートの上にブートストラップアラートを置きたいことを思い出せるようにしたい。"
  },
  {
    "start": 5298800,
    "end": 5301896,
    "text": "テキストに背景を加えるだけで、見栄えが良くなる。"
  },
  {
    "start": 5302008,
    "end": 5310232,
    "text": "繰り返しますが、これはサーバー・コンポーネントなので、react bootstrapからではなく、独自のコンポーネント・フォルダーからalertをインポートすることが重要です。"
  },
  {
    "start": 5310336,
    "end": 5317456,
    "text": "reactのbootstrapを直接使うことができないのは、必要なUs clientディレクティブがないからだ。"
  },
  {
    "start": 5317608,
    "end": 5320384,
    "text": "我々はそれを我々のパッケージからインポートする。"
  },
  {
    "start": 5320432,
    "end": 5333570,
    "text": "自動インポートが機能しないようなので、コンポーネントの追加スラッシュ・ブートストラップから手動でインポートする必要がある。"
  },
  {
    "start": 5334470,
    "end": 5338970,
    "text": "ここに、先ほどこのファイルにエクスポートしたアラートがある。"
  },
  {
    "start": 5340390,
    "end": 5344406,
    "text": "ここにテキストを入れたいんだ。"
  },
  {
    "start": 5344558,
    "end": 5347010,
    "text": "実は、ここにコピーペーストするだけなんだ。"
  },
  {
    "start": 5348150,
    "end": 5353288,
    "text": "このテキストは、このページがビルド時にデータをフェッチし、キャッシュすることを示している。"
  },
  {
    "start": 5353414,
    "end": 5362540,
    "text": "unsplash APIが常に新しい画像を返すにもかかわらず、ページをリフレッシュしても、プロジェクトを再度コンパイルするまで同じ画像が表示される。"
  },
  {
    "start": 5362700,
    "end": 5364572,
    "text": "これがここで学んだことだ。"
  },
  {
    "start": 5364676,
    "end": 5371972,
    "text": "静的レンダリング 最後に、新しい静的ページへのリンクをナバーに追加し、helloページを削除しましょう。"
  },
  {
    "start": 5372116,
    "end": 5376480,
    "text": "これは単なるプレゼンテーションのためなので、このハローページはもう必要ない。"
  },
  {
    "start": 5376780,
    "end": 5379400,
    "text": "このフォルダ全体を削除する。"
  },
  {
    "start": 5380110,
    "end": 5386690,
    "text": "ここでナバーに入り、helloをスラッシュスタティックに置き換えてみよう。"
  },
  {
    "start": 5387830,
    "end": 5394010,
    "text": "パス名の比較もstaticに設定すると、テキストはstaticと表示される。"
  },
  {
    "start": 5394950,
    "end": 5399774,
    "text": "これで、フロントページと静的ページの間を移動できるようになった。"
  },
  {
    "start": 5399942,
    "end": 5400970,
    "text": "クールだ。"
  },
  {
    "start": 5401350,
    "end": 5410352,
    "text": "次に、まったく同じエンドポイントからデータをフェッチする別のページを作成したい。"
  },
  {
    "start": 5410526,
    "end": 5421540,
    "text": "コンパイル時にページをレンダリングしてキャッシュするのではなく、ページを開くたびにリクエストを行い、更新するたびにサーバー・コンポーネントを持つようにしたい。"
  },
  {
    "start": 5421580,
    "end": 5427516,
    "text": "データのフェッチとレンダリングはすべてサーバーサイドで行われるが、レスポンスのキャッシュ方法は異なる。"
  },
  {
    "start": 5427668,
    "end": 5430748,
    "text": "これには別のURLが必要だろう？"
  },
  {
    "start": 5430884,
    "end": 5440508,
    "text": "appフォルダー内のstaticフォルダーの隣に、dynamicというフォルダーを作成する。"
  },
  {
    "start": 5440644,
    "end": 5442260,
    "text": "ここにクールな小技がある。"
  },
  {
    "start": 5442380,
    "end": 5445924,
    "text": "説明したように、これらのフォルダ名はすべてURLの一部ですよね？"
  },
  {
    "start": 5445972,
    "end": 5449396,
    "text": "静的フォルダーがある場合、スラッシュstaticとなる。"
  },
  {
    "start": 5449508,
    "end": 5452228,
    "text": "ダイナミック・フォルダーでは、スラッシュ・ダイナミックになる。"
  },
  {
    "start": 5452324,
    "end": 5457188,
    "text": "サブフォルダーに入れた場合は、そのサブフォルダーもURLの一部になります。"
  },
  {
    "start": 5457284,
    "end": 5465414,
    "text": "サブフォルダーがURLに影響を与えることなく、異なるページのフォルダーをサブフォルダーに整理したい場合はどうすればいいのでしょうか？"
  },
  {
    "start": 5465502,
    "end": 5466782,
    "text": "これは実際に可能だ。"
  },
  {
    "start": 5466926,
    "end": 5470410,
    "text": "そのためには、フォルダ名を括弧でくくるだけでいい。"
  },
  {
    "start": 5470710,
    "end": 5476110,
    "text": "appフォルダーの中に別のフォルダーを作ろう。このフォルダーは整理のためだけに使いたい。"
  },
  {
    "start": 5476270,
    "end": 5478566,
    "text": "これはURLの一部にはしたくない。"
  },
  {
    "start": 5478718,
    "end": 5480998,
    "text": "そして、括弧の中に名前を入れることができる。"
  },
  {
    "start": 5481174,
    "end": 5485142,
    "text": "例えば、サーバーサイドレンダリング用にSSRフォルダを作成します。"
  },
  {
    "start": 5485286,
    "end": 5489594,
    "text": "ここにダイナミック・フォルダーとスタティック・フォルダーを置きたい。"
  },
  {
    "start": 5489782,
    "end": 5495130,
    "text": "インポートも更新したいが、今はURL構造は変わっていない。"
  },
  {
    "start": 5495210,
    "end": 5501630,
    "text": "静的ページへのアクセスは静的ページのままなので、SSRはURLの一部ではない。"
  },
  {
    "start": 5501970,
    "end": 5506550,
    "text": "では、ダイナミック・フォルダーにページを入れましょう。"
  },
  {
    "start": 5507010,
    "end": 5514954,
    "text": "ページTSxとこのページは、すでにある静的ページとよく似ている。"
  },
  {
    "start": 5515042,
    "end": 5520464,
    "text": "右側の静的ページを開き、同じimport文が必要だ。"
  },
  {
    "start": 5520552,
    "end": 5522900,
    "text": "それをここにコピーペーストする。"
  },
  {
    "start": 5523560,
    "end": 5529060,
    "text": "メタデータも必要で、タイトルにダイナミック・フェッチと書くだけだ。"
  },
  {
    "start": 5529480,
    "end": 5532328,
    "text": "それから、ページ・コンポーネントもエクスポートしたい。"
  },
  {
    "start": 5532464,
    "end": 5541100,
    "text": "デフォルトの非同期関数をasyncでエクスポートする。"
  },
  {
    "start": 5541880,
    "end": 5552310,
    "text": "次に、この部分をすべてコピーして、まったく同じエンドポイントでフェッチ・リクエストを行い、画像を取得して、幅と高さを計算し、UIを返します。"
  },
  {
    "start": 5554050,
    "end": 5557270,
    "text": "ここにも同じクラス名のdivがある。"
  },
  {
    "start": 5559770,
    "end": 5562562,
    "text": "ここでの注意喚起は違うことを言うだろう。"
  },
  {
    "start": 5562746,
    "end": 5565514,
    "text": "今のところは空にしておいて、以下。"
  },
  {
    "start": 5565602,
    "end": 5571750,
    "text": "また、divの中に画像とユーザー・プロフィールへのリンクをコピー・ペーストしたい。"
  },
  {
    "start": 5574220,
    "end": 5578920,
    "text": "さて、このページは静的ページとまったく同じように動作する。"
  },
  {
    "start": 5579380,
    "end": 5580620,
    "text": "試してみよう。"
  },
  {
    "start": 5580700,
    "end": 5587560,
    "text": "ここを閉じて、もう一度小さくして、スラッシュ・ダイナミックに行こう。"
  },
  {
    "start": 5588220,
    "end": 5590044,
    "text": "そうすれば、画像が得られるはずだ。"
  },
  {
    "start": 5590212,
    "end": 5593868,
    "text": "ページを更新すると、また同じ画像が表示される。"
  },
  {
    "start": 5594044,
    "end": 5597324,
    "text": "これを動的ページに変えるのはとても簡単だ。"
  },
  {
    "start": 5597412,
    "end": 5602442,
    "text": "メタデータの上か下にあるページ機能の外に出る。"
  },
  {
    "start": 5602506,
    "end": 5605150,
    "text": "個人的な好みによるので関係ない。"
  },
  {
    "start": 5605610,
    "end": 5610070,
    "text": "そして、revalidateという名前のconstをエクスポートする。"
  },
  {
    "start": 5611170,
    "end": 5614626,
    "text": "これは、next j'sがこのページを再検証する頻度を示す。"
  },
  {
    "start": 5614738,
    "end": 5619082,
    "text": "この値をゼロに設定すれば、ページを更新するたびにこの値を再検証することができる。"
  },
  {
    "start": 5619186,
    "end": 5621750,
    "text": "このページはまったくキャッシュされません。"
  },
  {
    "start": 5622090,
    "end": 5625130,
    "text": "さて、これを保存すると、ダイナミック・ページになる。"
  },
  {
    "start": 5625170,
    "end": 5631744,
    "text": "これでページを更新すると、キャッシュされなくなったため、毎回新しい画像が表示されるようになった。"
  },
  {
    "start": 5631792,
    "end": 5637472,
    "text": "ページを更新するたびに、遅延なく再検証される。"
  },
  {
    "start": 5637616,
    "end": 5642752,
    "text": "これはpagesディレクトリにあるサーバーサイドプロップの取得に相当する。"
  },
  {
    "start": 5642936,
    "end": 5646912,
    "text": "ここでも、このデータはサーバー・コンポーネントのサーバー・サイドでフェッチされる。"
  },
  {
    "start": 5646976,
    "end": 5653308,
    "text": "これはクライアント・コンポーネントではなく、ページを開くたびにサーバーへのリクエストが発生するだけだ。"
  },
  {
    "start": 5653424,
    "end": 5658492,
    "text": "ページを更新したときにローディング・インジケータが表示されるのは、このためです。"
  },
  {
    "start": 5658596,
    "end": 5661948,
    "text": "これはunsplash APIにフェッチリクエストをしなければならない。"
  },
  {
    "start": 5662084,
    "end": 5668588,
    "text": "このページ全体に対してrevalidateを設定する代わりに、特定のフェッチ・コールに対して設定することもできる。"
  },
  {
    "start": 5668724,
    "end": 5670652,
    "text": "ここでフェッチを待つ。"
  },
  {
    "start": 5670836,
    "end": 5676044,
    "text": "URLの後にカンマを追加し、中かっこで設定を追加する。"
  },
  {
    "start": 5676132,
    "end": 5689710,
    "text": "ここにキャッシュ・フィールドを追加した。このフィールドには文字列を設定することができ、次のjsでキャッシュなし、または保存なしに設定することができる。"
  },
  {
    "start": 5689750,
    "end": 5691050,
    "text": "同じ効果がある。"
  },
  {
    "start": 5692030,
    "end": 5697222,
    "text": "ゼロの再検証と同じことを、特定のフェッチカーのレベルで行うだけだ。"
  },
  {
    "start": 5697286,
    "end": 5701446,
    "text": "これをコメントアウトしても、動的にレンダリングされるはずだ。"
  },
  {
    "start": 5701598,
    "end": 5705210,
    "text": "ページを更新するたびに新しい画像が戻ってくる。"
  },
  {
    "start": 5705390,
    "end": 5712842,
    "text": "つまり、このページにはまだキャッシュされている他のフェッチ・カードがあるということだ。"
  },
  {
    "start": 5712946,
    "end": 5719306,
    "text": "これにより、ページ全体のキャッシュ戦略を一度に決める必要がなくなるので、より多くのファイルをコントロールできるようになる。"
  },
  {
    "start": 5719418,
    "end": 5721634,
    "text": "フェッチカーごとに決めればいい。"
  },
  {
    "start": 5721762,
    "end": 5724346,
    "text": "ここでもノーストアが使える。"
  },
  {
    "start": 5724378,
    "end": 5729242,
    "text": "後で覚えられるように、スラッシュの後に \"S \"を付けるんだ。"
  },
  {
    "start": 5729346,
    "end": 5736918,
    "text": "もちろん、これは有効な構文ではないが、コメントアウトしておこう。"
  },
  {
    "start": 5737054,
    "end": 5743310,
    "text": "この次の値でキャッシュを設定することもできる。"
  },
  {
    "start": 5743430,
    "end": 5749934,
    "text": "この次のオブジェクトは、next j'sによってフェッチ関数に追加される。"
  },
  {
    "start": 5750022,
    "end": 5754966,
    "text": "next j'sは基本的に、このフェッチ機能を独自のコンフィギュレーションで強化する。"
  },
  {
    "start": 5755158,
    "end": 5759316,
    "text": "ここには、ゼロに設定できるrevalidateフィールドもある。"
  },
  {
    "start": 5759508,
    "end": 5761520,
    "text": "これも同じ効果がある。"
  },
  {
    "start": 5761940,
    "end": 5763196,
    "text": "試してみよう。"
  },
  {
    "start": 5763348,
    "end": 5765800,
    "text": "ページを更新すると、新しい画像が表示される。"
  },
  {
    "start": 5766180,
    "end": 5770772,
    "text": "キャッシュなし、ストアエントリーなし、検証はすべて事実上同じである。"
  },
  {
    "start": 5770876,
    "end": 5773708,
    "text": "次のJでもまったく同じ効果がある。"
  },
  {
    "start": 5773884,
    "end": 5777708,
    "text": "どうしてこんなにいろいろな選択肢があるのかわからないけど、こういうことなんだ。"
  },
  {
    "start": 5777844,
    "end": 5779908,
    "text": "ここにコメントとして残しておこうと思う。"
  },
  {
    "start": 5780004,
    "end": 5785708,
    "text": "後で復習が必要なときは、このレポジトリを見ればいい。"
  },
  {
    "start": 5785844,
    "end": 5793516,
    "text": "また、これが開発モードだけでなく本番でも機能することを確認するために、プロジェクトをビルドしてみよう。"
  },
  {
    "start": 5793708,
    "end": 5795604,
    "text": "ここでひとつだけ注意したいことがある。"
  },
  {
    "start": 5795692,
    "end": 5800020,
    "text": "Unsplashの無料アカウントでは、1時間あたり50枚というレート制限があります。"
  },
  {
    "start": 5800140,
    "end": 5804372,
    "text": "これを超えてこのページを頻繁に更新すると、エラーが表示されるようになります。"
  },
  {
    "start": 5804476,
    "end": 5809084,
    "text": "このようなエラーに惑わされることなく、再挑戦できるまで1時間待てばいいのだ。"
  },
  {
    "start": 5809212,
    "end": 5815582,
    "text": "プロジェクトをビルドすると、この下に、さまざまなページのキャッシュ戦略を示すアイコンが表示されます。"
  },
  {
    "start": 5815756,
    "end": 5823138,
    "text": "ご覧のように、dynamicの前にラムダのアイコンがあるが、これはサーバーサイドが実行時にレンダリングすることを意味している。"
  },
  {
    "start": 5823274,
    "end": 5825866,
    "text": "これはサーバサイドプロップの取得に相当します。"
  },
  {
    "start": 5825938,
    "end": 5831290,
    "text": "ただ、get server side propsは、新しいappディレクトリではなく、pagesディレクトリで使用される。"
  },
  {
    "start": 5831410,
    "end": 5835498,
    "text": "この丸印は、静的なHTMLとして自動的にレンダリングされることを意味する。"
  },
  {
    "start": 5835554,
    "end": 5839470,
    "text": "基本的には、コンパイル時に。"
  },
  {
    "start": 5839770,
    "end": 5844220,
    "text": "では、これを始めてみて、まだ動作が変わらないかどうか見てみよう。"
  },
  {
    "start": 5844680,
    "end": 5849032,
    "text": "ダイナミック・ページを更新しても、新しい画像が表示されるはずです。"
  },
  {
    "start": 5849216,
    "end": 5855220,
    "text": "また、レート制限が適用されるので、あまり頻繁にはできないことに注意してください。"
  },
  {
    "start": 5855560,
    "end": 5863120,
    "text": "このページは動的にデータを取得します。"
  },
  {
    "start": 5863240,
    "end": 5867340,
    "text": "ページを更新するたびに、unsplash APIから新しい画像を取得します。"
  },
  {
    "start": 5870210,
    "end": 5874698,
    "text": "それから、このページのリンクをナバーに追加したい。"
  },
  {
    "start": 5874874,
    "end": 5884510,
    "text": "スタティック・リンクを複製し、これをダイナミック・インアクティブに変更し、テキストも変更した。"
  },
  {
    "start": 5886290,
    "end": 5891510,
    "text": "というわけで、NPM run devを使って再び開発モードで始めることにする。"
  },
  {
    "start": 5894140,
    "end": 5902540,
    "text": "さて、次に静的再生のインクリメンタルについて説明したい。"
  },
  {
    "start": 5902620,
    "end": 5906756,
    "text": "この時間経過後にページを更新すると、新しいレスポンスが返ってくる。"
  },
  {
    "start": 5906828,
    "end": 5910604,
    "text": "実際、私たちのページを開くすべてのユーザーが同じデータを受け取る。"
  },
  {
    "start": 5910692,
    "end": 5913436,
    "text": "もうお分かりだろう。"
  },
  {
    "start": 5913508,
    "end": 5917452,
    "text": "再バリデートにゼロ以上の値を設定すればいいだけだ。"
  },
  {
    "start": 5917556,
    "end": 5928420,
    "text": "このdynamicフォルダをもう一度SSRフォルダにコピーして、ISR（incorrect static regenerationの略）に名前を変えてみよう。"
  },
  {
    "start": 5930120,
    "end": 5941592,
    "text": "それからISRフォルダでページを開き、メタデータを静的再生のインクリメンタルに変更する。"
  },
  {
    "start": 5941696,
    "end": 5945320,
    "text": "これは削除するページのタイトルになる。"
  },
  {
    "start": 5945360,
    "end": 5949880,
    "text": "キャッシュとストアがないのは、我々のアプリにレスポンスをキャッシュしないように指示しているからだ。"
  },
  {
    "start": 5949920,
    "end": 5952634,
    "text": "ある一定期間キャッシュしたいんだよね？"
  },
  {
    "start": 5952752,
    "end": 5955670,
    "text": "revalidateオプションを使えば、まだ可能だ。"
  },
  {
    "start": 5955830,
    "end": 5963854,
    "text": "もしこれをフェッチ・レベルで行いたいのであれば、このコンフィギュレーションで、ページ全体に対して行うのであれば15秒としよう。"
  },
  {
    "start": 5963902,
    "end": 5967518,
    "text": "その代わりに、このルート・コンフィギュレーションで設定することができる。"
  },
  {
    "start": 5967694,
    "end": 5973610,
    "text": "試してみる前に、このアラートテキストを置き換えておく。"
  },
  {
    "start": 5974030,
    "end": 5983090,
    "text": "これを保存して、本番モードで試してみましょう。"
  },
  {
    "start": 5983990,
    "end": 5996170,
    "text": "rundevの実行を停止し、run buildを実行すると、ビルドのアイコンはこの丸のままで、ダイナミック・ページのようなラムダのアイコンではない。"
  },
  {
    "start": 5996630,
    "end": 6004644,
    "text": "これを始めて、イシュレンにナビゲートしよう。"
  },
  {
    "start": 6004842,
    "end": 6006392,
    "text": "私たちはこの映像を目にする。"
  },
  {
    "start": 6006496,
    "end": 6010808,
    "text": "ページを更新すると、新しい画像が生成される。"
  },
  {
    "start": 6010864,
    "end": 6018100,
    "text": "もう一度ページをリフレッシュすると、ウィルサストによって画像が表示されるはずだが、これは画像を読み込むのに時間がかかる。"
  },
  {
    "start": 6018840,
    "end": 6024408,
    "text": "ええ、でもページを更新すると、15秒が過ぎるまで同じ画像が表示されます。"
  },
  {
    "start": 6024584,
    "end": 6028180,
    "text": "それからさらに15秒間、別の映像を見る。"
  },
  {
    "start": 6028480,
    "end": 6035638,
    "text": "さて、先に説明したように、15秒後にページを更新しても、前の画像が背景に表示される。"
  },
  {
    "start": 6035694,
    "end": 6043830,
    "text": "つまり、15秒後に2回目の更新が行われたときだけ、新しいデータが表示される。"
  },
  {
    "start": 6043950,
    "end": 6050278,
    "text": "しかし、もう一度更新すると、新しい画像が表示される。"
  },
  {
    "start": 6050414,
    "end": 6059850,
    "text": "同じページがすべてのユーザーに提供されるので、15秒後に1人のユーザーが再検証のトリガーを引くまで、すべてのユーザーが同じ画像を見ることになる。"
  },
  {
    "start": 6060190,
    "end": 6064450,
    "text": "さらに、ナビバーにもうひとつエントリーを追加しよう。"
  },
  {
    "start": 6066060,
    "end": 6073520,
    "text": "これはISRにつながり、テキストにもISRと書かれる。"
  },
  {
    "start": 6076260,
    "end": 6085600,
    "text": "もう一度開発モードで実行すると、ナビバーに新しいエントリーが表示されるはずだ。"
  },
  {
    "start": 6087380,
    "end": 6094440,
    "text": "これで、これらの異なるページ間を移動することができ、それぞれのキャッシュ戦略がどのように機能するかを思い出すことができる。"
  },
  {
    "start": 6094940,
    "end": 6098612,
    "text": "さて、次は動的URLの作成方法を学びましょう。"
  },
  {
    "start": 6098716,
    "end": 6106324,
    "text": "動的URLとは、URLに変数を入れ、そこに好きなもの、たとえば特定のキーワードを入力できることを意味する。"
  },
  {
    "start": 6106412,
    "end": 6110700,
    "text": "この値をページで使用して、このキーワードのデータを取得することができます。"
  },
  {
    "start": 6110820,
    "end": 6117484,
    "text": "ローカルホスト3000のスラッシュ・トピックス・スラッシュが欲しい。"
  },
  {
    "start": 6117532,
    "end": 6122754,
    "text": "リンゴでも、靴でも、休日でも、何でも好きなものを入力できる。"
  },
  {
    "start": 6122882,
    "end": 6126418,
    "text": "このキーワードでunsplashから画像を取得します。"
  },
  {
    "start": 6126554,
    "end": 6129698,
    "text": "の場合、URLの最初の部分はスラッシュ・トピックとなる。"
  },
  {
    "start": 6129754,
    "end": 6131418,
    "text": "これはずっと同じだろう？"
  },
  {
    "start": 6131474,
    "end": 6133122,
    "text": "その方法はすでに分かっている。"
  },
  {
    "start": 6133266,
    "end": 6137442,
    "text": "SSRフォルダに入るが、ここでもURLは無視される。"
  },
  {
    "start": 6137626,
    "end": 6141706,
    "text": "ここに、URLの最初の部分であるtopicsフォルダを置く。"
  },
  {
    "start": 6141818,
    "end": 6144106,
    "text": "今度はこのダイナミックな部分が欲しい。"
  },
  {
    "start": 6144258,
    "end": 6148714,
    "text": "エントリーは、ここに別のフォルダを置くことで、このようなダイナミックなパートを作ることができる。"
  },
  {
    "start": 6148762,
    "end": 6154982,
    "text": "今回は角括弧の中に名前を入れ、ここに入力したものが変数名となる。"
  },
  {
    "start": 6155126,
    "end": 6158670,
    "text": "このトピックは、実際にはURLの一部ではない。"
  },
  {
    "start": 6158710,
    "end": 6161718,
    "text": "これはスラッシュ・トピックではない。"
  },
  {
    "start": 6161854,
    "end": 6165250,
    "text": "その代わり、トピックは実際のキーワードに置き換えられる。"
  },
  {
    "start": 6166310,
    "end": 6172734,
    "text": "古いpagesディレクトリでは角括弧も使ったが、そこではページのファイル名に入れた。"
  },
  {
    "start": 6172862,
    "end": 6187230,
    "text": "このフォルダに、いつものようにpage tsxと、pageと呼ぶデフォルトの非同期関数をエクスポートします。"
  },
  {
    "start": 6188570,
    "end": 6192310,
    "text": "そして、この下にUIを返したい。"
  },
  {
    "start": 6193450,
    "end": 6194698,
    "text": "ここにdivを入れよう。"
  },
  {
    "start": 6194714,
    "end": 6204374,
    "text": "とりあえず、URLからこの値を取り出すには、ここでページ・コンポーネントにプロップを追加しなければならない。"
  },
  {
    "start": 6204522,
    "end": 6209966,
    "text": "typescriptではいつものように、page propsと呼ぶインターフェースを作成する。"
  },
  {
    "start": 6209998,
    "end": 6212262,
    "text": "これも好きな名前をつけられる。"
  },
  {
    "start": 6212406,
    "end": 6216422,
    "text": "しかし、このページの小道具に何を入れるかは、あなた次第ではない。"
  },
  {
    "start": 6216526,
    "end": 6222970,
    "text": "私と同じスペルで書かないと、この値は次のj'sでは認識されない。"
  },
  {
    "start": 6223470,
    "end": 6233008,
    "text": "ここでparams propを取得し、paramsにこのトピック変数をオブジェクト内のフォルダ名に含めることができます。"
  },
  {
    "start": 6233144,
    "end": 6239640,
    "text": "中括弧を追加し、トピック・コロンを書くと、これは文字列型になる。"
  },
  {
    "start": 6239800,
    "end": 6245832,
    "text": "例えば、このURLパラメータをslackと呼ぶとしたら、これもslackとなる。"
  },
  {
    "start": 6245936,
    "end": 6249768,
    "text": "ここに入れるものは何でも、鍵としてここに得られるものだ。"
  },
  {
    "start": 6249904,
    "end": 6254456,
    "text": "URLから取得できる値はもう一つあり、それは検索パラメータだ。"
  },
  {
    "start": 6254608,
    "end": 6263720,
    "text": "Search paramsは、キャメルケースでこのように綴らなければならない。また、実行時にはどんな値も含むことができるので、このように型を宣言しなければならない。"
  },
  {
    "start": 6264220,
    "end": 6268040,
    "text": "ここでは検索パラメータは必要ないので、コメントアウトしておこう。"
  },
  {
    "start": 6268340,
    "end": 6272948,
    "text": "繰り返しになるが、検索パラメータはURLのクエスチョンマークの後に追加するものである。"
  },
  {
    "start": 6273044,
    "end": 6276628,
    "text": "これは通常、何らかのフィルタリングやクエリに使われる。"
  },
  {
    "start": 6276804,
    "end": 6280640,
    "text": "そして、これらのページ・プロップをページ・コンポーネントに追加することができる。"
  },
  {
    "start": 6281380,
    "end": 6288710,
    "text": "ページの小道具は、ここにある型がパラメータで、パラメータの中がトピックです。"
  },
  {
    "start": 6288750,
    "end": 6292958,
    "text": "カラムと中かっこをもう1つ使って、これをもう一度再構築したい。"
  },
  {
    "start": 6293054,
    "end": 6295570,
    "text": "ここにあるのは、私たちが気にかけているトピックの価値である。"
  },
  {
    "start": 6295950,
    "end": 6303810,
    "text": "diff内でテキストとしてレンダリングすることで、実際に正しい値が得られることを確認しよう。"
  },
  {
    "start": 6304190,
    "end": 6310172,
    "text": "スラッシュ・トピックス・スラッシュ・アップルに行くと、画面にリンゴが表示されているはずだ。"
  },
  {
    "start": 6310246,
    "end": 6311072,
    "text": "これだ。"
  },
  {
    "start": 6311176,
    "end": 6314808,
    "text": "この値を使って、unsplashから画像を取得してみよう。"
  },
  {
    "start": 6314984,
    "end": 6325260,
    "text": "繰り返しますが、これはサーバーコンポーネントなので、ここでフェッチするだけで、フェッチリクエストを待つconstレスポンスを再作成することができます。"
  },
  {
    "start": 6326080,
    "end": 6331456,
    "text": "今回は、ここに複数の変数を入れなければならないので、バックティック付きのテンプレート文字列を使用する。"
  },
  {
    "start": 6331528,
    "end": 6336424,
    "text": "ここで、実際に他のページと同じエンドポイントにリクエストを行いたい。"
  },
  {
    "start": 6336512,
    "end": 6339220,
    "text": "この部分を文字列からコピーしてみよう。"
  },
  {
    "start": 6340020,
    "end": 6342160,
    "text": "ここに貼り付けよう。"
  },
  {
    "start": 6342940,
    "end": 6345732,
    "text": "まだランダムフォトの終点だ。"
  },
  {
    "start": 6345916,
    "end": 6348700,
    "text": "アクセスキーを追加したい。"
  },
  {
    "start": 6348860,
    "end": 6354800,
    "text": "これはバックテキスト文字列なので、ドル記号と中括弧のブロックで変数を追加する。"
  },
  {
    "start": 6355460,
    "end": 6358080,
    "text": "ここにプロセスのenvを置く。"
  },
  {
    "start": 6358660,
    "end": 6360820,
    "text": "スペルが正しいことを確認しなければならない。"
  },
  {
    "start": 6360860,
    "end": 6363560,
    "text": "こっちからコピーするよ。"
  },
  {
    "start": 6364590,
    "end": 6375810,
    "text": "Unsplashのアクセスキーと、クエスチョンマークの後にあるランダムなエンドポイントに検索クエリを追加することができます。"
  },
  {
    "start": 6376590,
    "end": 6383170,
    "text": "クエスチョンマークの後にクエリー・イコールと書き、ここに別の変数プレースホルダーを追加する。"
  },
  {
    "start": 6384070,
    "end": 6391198,
    "text": "ここにトピックを入れるのは、このトピックを検索したいからだが、複数の画像も返したい。"
  },
  {
    "start": 6391374,
    "end": 6396410,
    "text": "URLに別の検索パラメータを追加するには、このようにアマゾンの記号を追加します。"
  },
  {
    "start": 6397110,
    "end": 6404570,
    "text": "そして、count equals 30と書き、最後の検索パラメタ（クライアントID）には別の大使館記号を書く。"
  },
  {
    "start": 6405190,
    "end": 6411422,
    "text": "これで、URLにどんなトピックを挿入しても、30枚のランダムな画像が返されるようになった。"
  },
  {
    "start": 6411566,
    "end": 6417144,
    "text": "これはランダムなので、何らかの方法でキャッシュしない限り、すべてのリクエストは新しい画像をフェッチすることになる。"
  },
  {
    "start": 6417262,
    "end": 6421340,
    "text": "ここでカウント値を追加したので、実際には画像は1枚も戻ってこない。"
  },
  {
    "start": 6421380,
    "end": 6423284,
    "text": "画像の配列が返ってくる。"
  },
  {
    "start": 6423412,
    "end": 6430316,
    "text": "再びunsplash image型のconst imagesを作成しますが、今回は配列です。"
  },
  {
    "start": 6430468,
    "end": 6437960,
    "text": "角括弧のペアを追加し、再びawait response dot JSONからこれを取得する。"
  },
  {
    "start": 6439740,
    "end": 6450342,
    "text": "そして、UIのこの下に、トピックをhに、見出しを1つ、そしてその下に画像をリストにレンダリングしたい。"
  },
  {
    "start": 6450526,
    "end": 6462678,
    "text": "これはJavaScriptの式なので、中カッコで囲んで、images配列の各画像をUI要素にしたいんだ。"
  },
  {
    "start": 6462814,
    "end": 6469030,
    "text": "リアクトではいつものようにドットマップの画像をカットする。"
  },
  {
    "start": 6469070,
    "end": 6474534,
    "text": "このマップカーでこの作業をしたことがないのなら、各画像を通過することになるよね？"
  },
  {
    "start": 6474582,
    "end": 6477446,
    "text": "それらを画像要素にしたい。"
  },
  {
    "start": 6477598,
    "end": 6484190,
    "text": "ここに括弧を1つ入れたので、これを改行しても1つの戻り値とみなされる。"
  },
  {
    "start": 6484350,
    "end": 6486210,
    "text": "ここでのセミコロンは間違っている。"
  },
  {
    "start": 6486630,
    "end": 6491730,
    "text": "そして、次の画像を通常通り使いたい。これで画像のサイズが適切に変更されるからだ。"
  },
  {
    "start": 6493990,
    "end": 6502770,
    "text": "srゼロは、このマップカーの画像ドットURLの生、右の画像である。"
  },
  {
    "start": 6505070,
    "end": 6507750,
    "text": "今回は幅と高さを固定にする。"
  },
  {
    "start": 6507870,
    "end": 6511570,
    "text": "すべて250ピクセルの正方形になる。"
  },
  {
    "start": 6512990,
    "end": 6518570,
    "text": "また、次のjsはこれらの画像を自動的にサイズ変更してくれる。"
  },
  {
    "start": 6519870,
    "end": 6528830,
    "text": "altテキストを再びimage dot descriptionに設定したい。これは配列なので、キーも設定しなければならない。"
  },
  {
    "start": 6529850,
    "end": 6535910,
    "text": "これにより、リアクトのレンダリングは、どのデータがリストのどの要素に属しているかがわかるので、より効率的になる。"
  },
  {
    "start": 6536330,
    "end": 6538830,
    "text": "繰り返しになるが、これは初心者向けのチュートリアルで説明した。"
  },
  {
    "start": 6539890,
    "end": 6548350,
    "text": "それぞれの画像は異なるURLから来ているので、キーとして画像のURLを使用することができます。"
  },
  {
    "start": 6549050,
    "end": 6558794,
    "text": "最後に、画像を正方形にリサイズしているため、元の画像が正方形でない場合、画像が歪んでしまう可能性があるので、これらの画像にスタイルを追加したい。"
  },
  {
    "start": 6558922,
    "end": 6565670,
    "text": "というのも、このCSSモジュールはこの1つのページにしか属さないからだ。"
  },
  {
    "start": 6566050,
    "end": 6570210,
    "text": "トピックページのドット・モジュール、ドットCSSと呼ぼう。"
  },
  {
    "start": 6570370,
    "end": 6575470,
    "text": "繰り返しになるが、ドット・モジュールが重要なのは、これによってこのファイルがCSSモジュールに変わるからだ。"
  },
  {
    "start": 6575770,
    "end": 6581150,
    "text": "ここでは、imageと呼ぶタグを1つ、クラス名を1つ付けたい。"
  },
  {
    "start": 6581950,
    "end": 6584490,
    "text": "オブジェクト・フィットをカバーに設定したい。"
  },
  {
    "start": 6584950,
    "end": 6589930,
    "text": "この中央のトリミングは、画像が歪むことなく正方形に収まるようにする。"
  },
  {
    "start": 6590870,
    "end": 6600558,
    "text": "0.25レムのマージンとボーダー半径を追加して、4ピクセルの見た目が少し良くなるようにしたい。"
  },
  {
    "start": 6600614,
    "end": 6601610,
    "text": "それだけだ。"
  },
  {
    "start": 6602870,
    "end": 6605222,
    "text": "そしてトピックのページに戻る。"
  },
  {
    "start": 6605366,
    "end": 6612240,
    "text": "CSSモジュールをインポートし、通常はstylesという変数を呼びますが、これは命名規則のようです。"
  },
  {
    "start": 6612660,
    "end": 6618756,
    "text": "dotsからスタイルをインポートして、トピックフォルダである親フォルダに入る。"
  },
  {
    "start": 6618908,
    "end": 6627740,
    "text": "ここでは、トピック・ページ、ドット・モジュール、ドット・CSS、そして画像クラスを画像に適用します。"
  },
  {
    "start": 6627860,
    "end": 6629560,
    "text": "クラス名を追加する。"
  },
  {
    "start": 6630500,
    "end": 6644600,
    "text": "これを中括弧で囲んだ式に設定し、ここにスタイル・ドットと、imageで設定したのと同じクラス名を渡し、スラッシュと閉じ角括弧でimageタグを閉じる。"
  },
  {
    "start": 6646020,
    "end": 6658172,
    "text": "このウィンドウを小さくすると、変更を保存すると自動的に適用され、URLのダイナミック部分がリンゴに設定されるため、実際にはすでにここに画像が表示されている。"
  },
  {
    "start": 6658356,
    "end": 6661120,
    "text": "では、ページを更新して何が起こるか見てみよう。"
  },
  {
    "start": 6661870,
    "end": 6664790,
    "text": "実際、また同じ映像が出てくる。"
  },
  {
    "start": 6664950,
    "end": 6669290,
    "text": "これらのページは、私たちが最初にアクセスしたときにレンダリングされる。"
  },
  {
    "start": 6669670,
    "end": 6673250,
    "text": "休日を試してみよう。"
  },
  {
    "start": 6673670,
    "end": 6675238,
    "text": "読み込みに時間がかかります。"
  },
  {
    "start": 6675294,
    "end": 6686006,
    "text": "しかし、ページを更新するとまた同じ画像が表示されるはずなので、最初のアクセスでレンダリングされ、その後静的にキャッシュされる。"
  },
  {
    "start": 6686158,
    "end": 6695682,
    "text": "ページを更新するたびに新しい画像を生成したい場合は、export constでrevalidateをゼロに設定します。"
  },
  {
    "start": 6695866,
    "end": 6697830,
    "text": "再検証はゼロに等しい。"
  },
  {
    "start": 6698330,
    "end": 6699794,
    "text": "もう一度試してみよう。"
  },
  {
    "start": 6699922,
    "end": 6708550,
    "text": "ページを更新すると新しい画像が表示されますが、やはり1時間あたり50枚というレート制限があるので、これを超えるとエラーが出始めます。"
  },
  {
    "start": 6708850,
    "end": 6726800,
    "text": "また、next jsにこれらのページのいくつかを事前にレンダリングするように指示することもできる。例えば、health、fitness、codingというキーワードのページをレンダリングしたいことがわかっていて、ユーザーが初めてアクセスしたときにはレンダリングしたくないとしよう。"
  },
  {
    "start": 6726840,
    "end": 6729260,
    "text": "プロジェクトを構築する際にレンダリングしたい。"
  },
  {
    "start": 6729640,
    "end": 6733740,
    "text": "そして、このファイルから別の関数をエクスポートすることができる。"
  },
  {
    "start": 6734320,
    "end": 6735860,
    "text": "エクスポート機能。"
  },
  {
    "start": 6736520,
    "end": 6745768,
    "text": "これはstatic paramsの生成と呼ばれ、スペルが正しいことを確認する。"
  },
  {
    "start": 6745944,
    "end": 6755056,
    "text": "この関数は、ここにあるデータをフェッチする必要がある場合、ダイナミックにすることができ、これは古いページ・ルーターにおける静的パスの取得に相当する。"
  },
  {
    "start": 6755168,
    "end": 6759060,
    "text": "戻り値の型がシンプルになったので、構文もシンプルになった。"
  },
  {
    "start": 6759960,
    "end": 6764980,
    "text": "ここでは、オブジェクトのキーを含む配列を返すだけでよい。"
  },
  {
    "start": 6765280,
    "end": 6769952,
    "text": "キーワードはあらかじめわかっているので、文字列の配列を作成しよう。"
  },
  {
    "start": 6770056,
    "end": 6775570,
    "text": "健康が欲しい、フィットネスが欲しい、コーディングが欲しいと言ったんだ。"
  },
  {
    "start": 6775610,
    "end": 6782274,
    "text": "ここにどんなキーワードを入れても構わないが、この関数から返されるものは次のようなものでなければならない。"
  },
  {
    "start": 6782402,
    "end": 6789910,
    "text": "トピックを含むJavaScriptオブジェクトでなければならない。"
  },
  {
    "start": 6790250,
    "end": 6797430,
    "text": "このように書く代わりに、この配列のすべての要素について、この値をこの値にマッピングすればいい。"
  },
  {
    "start": 6797880,
    "end": 6807528,
    "text": "各トピックをトピック・キーを含むオブジェクトにマッピングすると、次のようになる。"
  },
  {
    "start": 6807704,
    "end": 6818408,
    "text": "そうしないと、この関数はこれを中括弧のついた関数本体として認識してしまうからだ。"
  },
  {
    "start": 6818544,
    "end": 6822592,
    "text": "これは関数本体ではなく、返すJavaScriptオブジェクトである。"
  },
  {
    "start": 6822736,
    "end": 6826552,
    "text": "そのため、括弧でくくる必要がある。"
  },
  {
    "start": 6826736,
    "end": 6829420,
    "text": "試してみよう。"
  },
  {
    "start": 6830320,
    "end": 6837860,
    "text": "というのも、このデータはビルド時に取得され、その後キャッシュされるだけだからだ。"
  },
  {
    "start": 6838480,
    "end": 6850460,
    "text": "NPMを実行し、もう一度起動すると、この3つのページのいずれかを開いたときに、読み込み中のインジケーターは表示されないはずだ。"
  },
  {
    "start": 6851170,
    "end": 6857634,
    "text": "私はこれをコーディングに設定し、このページはローディング・インジケータなしでかなり即座にロードされるようにした。"
  },
  {
    "start": 6857682,
    "end": 6858522,
    "text": "そこが重要なんだ。"
  },
  {
    "start": 6858546,
    "end": 6863602,
    "text": "UIにスピナーは表示されないはずだし、スピナーもなかったよね？"
  },
  {
    "start": 6863786,
    "end": 6869070,
    "text": "では、配列に追加していないトピックを開こうとしたらどうなるだろうか？"
  },
  {
    "start": 6869730,
    "end": 6895214,
    "text": "例えば、ビーチでこれを入力するとしよう。このページにアクセスすることはできるが、最初にアクセスしたときに、配列の一部ではないため、このページが生成される。そして、静的パラメーターを生成して返すときにのみ、どのようなキーワードでデータを取得しなければならないかを事前に知ることはできない。"
  },
  {
    "start": 6895382,
    "end": 6903758,
    "text": "ビーチのページを開いたとき、ローディング・インジケータは表示されなかった。"
  },
  {
    "start": 6903854,
    "end": 6907646,
    "text": "これは、最初にアクセスするときに動的に生成されなければならない。"
  },
  {
    "start": 6907758,
    "end": 6916390,
    "text": "もし、この3つのパラメータだけを許可し、他のパラメータは許可しないのであれば、別の値をエクスポートすることも可能です。"
  },
  {
    "start": 6917250,
    "end": 6919642,
    "text": "const dynamic params をエクスポートします。"
  },
  {
    "start": 6919706,
    "end": 6922230,
    "text": "ラクダの場合は、これをfalseに設定できる。"
  },
  {
    "start": 6922770,
    "end": 6930630,
    "text": "これで、プロジェクトを再度ビルドしても、ここにある3つのトピック・ページ以外にはアクセスできなくなる。"
  },
  {
    "start": 6931050,
    "end": 6937568,
    "text": "もう一度プロジェクトを開始し、ビーチのページを更新しよう。"
  },
  {
    "start": 6937704,
    "end": 6945940,
    "text": "しかし、フィットネスやコーディングといった他のキーワードにアクセスすることはできる。"
  },
  {
    "start": 6946560,
    "end": 6949576,
    "text": "コメントアウトすることで、これを再び無効にするつもりだ。"
  },
  {
    "start": 6949648,
    "end": 6952688,
    "text": "それなら、ここにも警告メッセージを入れたい。"
  },
  {
    "start": 6952864,
    "end": 6954944,
    "text": "Hの上に置いた。"
  },
  {
    "start": 6955112,
    "end": 6962700,
    "text": "ここでも、bootstrapからではなく、私たち自身のフォルダからアラートをインポートします。"
  },
  {
    "start": 6962840,
    "end": 6971760,
    "text": "インポートを変更し、コンポーネント・スラッシュ oops bootstrap を追加します。"
  },
  {
    "start": 6972740,
    "end": 6983040,
    "text": "もう一度、ここにテキストを貼り付けて、もう一度devモードで実行し、変更を確認する。"
  },
  {
    "start": 6985060,
    "end": 6992664,
    "text": "このページはgenerate static paramsを使い、URLに動的なパラメータがあっても、ビルド時に静的なページをレンダリングしてキャッシュします。"
  },
  {
    "start": 6992772,
    "end": 6995904,
    "text": "これは、静的パラメータを生成して返すものである。"
  },
  {
    "start": 6996032,
    "end": 7003712,
    "text": "静的パラメーターの生成に含まれていないページは、最初のアクセス時にフェッチされ、レンダリングされ、その後のリクエストのためにキャッシュされます。"
  },
  {
    "start": 7003816,
    "end": 7008752,
    "text": "これは無効にすることができ、この場合もdynamic paramsをfalseに設定することで無効にすることができる。"
  },
  {
    "start": 7008856,
    "end": 7012584,
    "text": "データをキャッシュしたくない場合は、revalidateをゼロに設定することができる。"
  },
  {
    "start": 7012752,
    "end": 7016680,
    "text": "他のページと同じように、このページのタイトルも変更したい。"
  },
  {
    "start": 7016760,
    "end": 7019712,
    "text": "今回はハードコードされた文字列を設定したくない。"
  },
  {
    "start": 7019816,
    "end": 7023760,
    "text": "その代わり、どんなキーワードでもタイトルに入れたい。"
  },
  {
    "start": 7023880,
    "end": 7030060,
    "text": "ここでは、このメタデータの値をエクスポートする代わりに、タイトルを動的に生成したい。"
  },
  {
    "start": 7031880,
    "end": 7034792,
    "text": "これは、別の関数をエクスポートすることで実現できる。"
  },
  {
    "start": 7034936,
    "end": 7039140,
    "text": "静的パラメーターの生成の上に置くつもりだが、どこに置いても構わない。"
  },
  {
    "start": 7040240,
    "end": 7047780,
    "text": "エクスポート機能はメタデータを生成し、ここでもスペルとケーシングは正しくなければならない。"
  },
  {
    "start": 7048430,
    "end": 7051806,
    "text": "これは実際にはページと同じパラメータを取ることができる。"
  },
  {
    "start": 7051998,
    "end": 7060970,
    "text": "このページの小道具の中にparamsの値があり、その中にタイトルに入れたいトピックがありますね。"
  },
  {
    "start": 7062230,
    "end": 7067130,
    "text": "この関数は、次のメタデータ型のオブジェクトを返さなければならない。"
  },
  {
    "start": 7069310,
    "end": 7071770,
    "text": "このインポートをここに追加する必要がある。"
  },
  {
    "start": 7072590,
    "end": 7081226,
    "text": "ここでオブジェクトを返すことができ、このオブジェクトの中にタイトル、説明、その他設定可能なメタデータ値がある。"
  },
  {
    "start": 7081418,
    "end": 7088298,
    "text": "タイトルを設定したいが、ここではトピックを用意しているので、この値から動的にタイトルを設定できる。"
  },
  {
    "start": 7088434,
    "end": 7091474,
    "text": "例えば、ここに検索パラメータを使うこともできる。"
  },
  {
    "start": 7091602,
    "end": 7099394,
    "text": "トピック・プラスと書いて、ここにあるのと同じ部分を追加したい。"
  },
  {
    "start": 7099562,
    "end": 7105250,
    "text": "マイナスの次のjs画像ギャラリーはこんな感じ。"
  },
  {
    "start": 7105950,
    "end": 7109390,
    "text": "これで保存すると、ダイナミック・タイトルが表示されるはずだ。"
  },
  {
    "start": 7109470,
    "end": 7112118,
    "text": "ああ、キーワードはURLのここにある。"
  },
  {
    "start": 7112294,
    "end": 7114486,
    "text": "フィットネス......コーディングをしてみよう。"
  },
  {
    "start": 7114678,
    "end": 7116478,
    "text": "URLにコーディングがあります。"
  },
  {
    "start": 7116614,
    "end": 7120990,
    "text": "メタデータを非同期で生成し、ここでデータをフェッチすることもできる。"
  },
  {
    "start": 7121030,
    "end": 7128398,
    "text": "例えば、APIレスポンスの値をメタデータに使いたい場合は、このチュートリアルの次のセクションで説明する。"
  },
  {
    "start": 7128534,
    "end": 7134610,
    "text": "とりあえず、これらのトピック・ページのエントリーをナビバーに入れ、プロジェクトの見栄えを良くしたい。"
  },
  {
    "start": 7134950,
    "end": 7145198,
    "text": "最後のナフ・リンクの下に、ブートストラップからインポートしたナフ・ドロップダウンを角括弧で囲む。"
  },
  {
    "start": 7145374,
    "end": 7149170,
    "text": "ここでもクライアント・コンポーネントの中だからできることだ。"
  },
  {
    "start": 7151070,
    "end": 7160296,
    "text": "トピックにはタイトルを、トピックにはアイデアを設定できる。"
  },
  {
    "start": 7160448,
    "end": 7162660,
    "text": "おっと、ドロップダウンだ。"
  },
  {
    "start": 7163480,
    "end": 7165100,
    "text": "そして、これを閉じる。"
  },
  {
    "start": 7165760,
    "end": 7169440,
    "text": "アクセシビリティのために必要なアイデアだと思う。"
  },
  {
    "start": 7169480,
    "end": 7171016,
    "text": "だからここに加えたんだ。"
  },
  {
    "start": 7171128,
    "end": 7172300,
    "text": "損をすることはない。"
  },
  {
    "start": 7173600,
    "end": 7179820,
    "text": "ここには、事前に作成した3つのトピックのドロップダウン項目を3つ並べる。"
  },
  {
    "start": 7180970,
    "end": 7184430,
    "text": "通常通り、次のリンクとしてレンダリングしたい。"
  },
  {
    "start": 7184890,
    "end": 7186790,
    "text": "次にhrefを設定する。"
  },
  {
    "start": 7187410,
    "end": 7193310,
    "text": "最初の1本は、スラッシュ・トピックス・スラッシュ・ヘルスにつながる。"
  },
  {
    "start": 7194410,
    "end": 7196962,
    "text": "そう、これが最初の1枚だ。"
  },
  {
    "start": 7196986,
    "end": 7201590,
    "text": "静的パラメータを生成し、テキストには健康と表示される。"
  },
  {
    "start": 7203250,
    "end": 7216600,
    "text": "これを2回繰り返し、フィットネスとスラッシュ・コーディングを行う。"
  },
  {
    "start": 7220740,
    "end": 7227720,
    "text": "これで、異なるトピック・ページ間をナビゲートするUIのドロップダウンができた。"
  },
  {
    "start": 7230420,
    "end": 7231200,
    "text": "完璧だ。"
  },
  {
    "start": 7232560,
    "end": 7238792,
    "text": "さて、トピック・ページですでに使ったメタデータの生成を使うページをもうひとつ作りたい。"
  },
  {
    "start": 7238896,
    "end": 7244040,
    "text": "APIから戻ってきたレスポンスから値を設定したい。"
  },
  {
    "start": 7244120,
    "end": 7246112,
    "text": "それをこのページに取り込む。"
  },
  {
    "start": 7246216,
    "end": 7249088,
    "text": "この値をメタデータに反映させるにはどうすればいいか？"
  },
  {
    "start": 7249184,
    "end": 7250824,
    "text": "それが今回の質問だ。"
  },
  {
    "start": 7250872,
    "end": 7258728,
    "text": "別のページを立ち上げて、ユーザー名でユーザーを取得し、基本的なプロフィール・データを表示することにしよう。"
  },
  {
    "start": 7258904,
    "end": 7263440,
    "text": "しかし、これらの値のほとんどは無視することにする。"
  },
  {
    "start": 7263480,
    "end": 7268540,
    "text": "姓、名、そしてユーザー名のみに注目します。"
  },
  {
    "start": 7269160,
    "end": 7274472,
    "text": "プロジェクトに戻って、このunsplashユーザーの新しいモデルを作成しましょう。"
  },
  {
    "start": 7274616,
    "end": 7288390,
    "text": "modelsフォルダにunsplash user tsを新規作成し、unsplash userというインターフェイスをエクスポートする。"
  },
  {
    "start": 7289850,
    "end": 7305630,
    "text": "ここにも文字列であるユーザー名を入れる。これらのキーはAPIのリターン・タイプ、最初のアンダースコアの名前と最後のアンダースコアの名前と一致しなければならない。"
  },
  {
    "start": 7306530,
    "end": 7315878,
    "text": "トピックページと同じように、任意のユーザー名を挿入できるようにしたいからだ。"
  },
  {
    "start": 7316014,
    "end": 7320534,
    "text": "SSRの中にuserというフォルダを作りましょう。"
  },
  {
    "start": 7320582,
    "end": 7322770,
    "text": "これはURLの最初の部分である。"
  },
  {
    "start": 7324110,
    "end": 7331250,
    "text": "そしてここに、ユーザー名をリコールする動的URLパラメーターを持つ別のフォルダを置く。"
  },
  {
    "start": 7333430,
    "end": 7337690,
    "text": "最後に、私たちの古き良きページであるTSXを紹介しよう。"
  },
  {
    "start": 7338400,
    "end": 7349780,
    "text": "ここでは、いつものようにdefaultasync関数をエクスポートし、その関数のページを呼び出して、パラメータを受け取るようにしている。"
  },
  {
    "start": 7350520,
    "end": 7357780,
    "text": "インターフェイスページpropsを作成し、ここでもparamsの値を取得します。"
  },
  {
    "start": 7358080,
    "end": 7367560,
    "text": "これは動的URL要素の変数と呼ばれるものだからです。"
  },
  {
    "start": 7368500,
    "end": 7378240,
    "text": "これらのパラメータをページ・コンポーネントに渡すのだが、ここにあるのがparamsで、その中にユーザー名がある。"
  },
  {
    "start": 7378980,
    "end": 7382492,
    "text": "次に、unsplash APIからユーザーを取得したい。"
  },
  {
    "start": 7382636,
    "end": 7395876,
    "text": "constレスポンスに等しいawait fetchを作成し、バックテキスト文字列を使用する。"
  },
  {
    "start": 7396028,
    "end": 7398684,
    "text": "そして、ユーザーにリクエストを出す。"
  },
  {
    "start": 7398812,
    "end": 7401852,
    "text": "次に、paramsから得たユーザー名を挿入する。"
  },
  {
    "start": 7401956,
    "end": 7407160,
    "text": "そして、いつものようにクライアントIDを渡すので、ビデオを一時停止して、これを手入力することができる。"
  },
  {
    "start": 7409940,
    "end": 7421820,
    "text": "そして、レスポンスJSONからユーザー値を取り出し、ユーザーデータをuiheに表示したい。"
  },
  {
    "start": 7422790,
    "end": 7430174,
    "text": "divの中にuser dotのユーザー名をレンダリングするhを入れよう。"
  },
  {
    "start": 7430222,
    "end": 7432742,
    "text": "ここでユーザーのタイプを設定しなければならない。"
  },
  {
    "start": 7432766,
    "end": 7439050,
    "text": "モデルフォルダからunsplashユーザーへの自動補完を取得します。"
  },
  {
    "start": 7439990,
    "end": 7442970,
    "text": "これでユーザー名がオートコンプリートされる。"
  },
  {
    "start": 7444790,
    "end": 7459050,
    "text": "その下に、姓のコロナイゼーションという段落があり、これがユーザーの姓をレンダリングする。"
  },
  {
    "start": 7462790,
    "end": 7467118,
    "text": "unsplashのプロフィールにリンクを貼りたい。"
  },
  {
    "start": 7467254,
    "end": 7474210,
    "text": "このリンクは自分たちのウェブサイト内を移動するために使うわけではないので、次のリンクの代わりに通常のアンカータグを使うことができる。"
  },
  {
    "start": 7474710,
    "end": 7494252,
    "text": "このリンクのhrefを中括弧で囲んだ式に設定し、ここにHTTPへのリンクにしたい文字列を入れる。コロン・スラッシュ・スラッシュ・unsplash.com、今回はAPIを前に付けずにスラッシュ、そしてユーザー・ユーザー名を追加する。"
  },
  {
    "start": 7494396,
    "end": 7502480,
    "text": "これにより、このユーザーのunsplashプロフィールが表示され、リンクのテキストにはunsplashプロフィールと表示されます。"
  },
  {
    "start": 7503500,
    "end": 7505012,
    "text": "試してみよう。"
  },
  {
    "start": 7505076,
    "end": 7505756,
    "text": "これを保存しておいた。"
  },
  {
    "start": 7505788,
    "end": 7513860,
    "text": "まだ開発モードなので、静的ページに移動して、先ほど追加した画像とプロファイリングを見てみよう。"
  },
  {
    "start": 7514160,
    "end": 7515920,
    "text": "これがこの新しいルートにつながる。"
  },
  {
    "start": 7515960,
    "end": 7523840,
    "text": "ユーザー名とプロフィールを作成し、このリンクからUnsplashのプロフィールを見ることができます。"
  },
  {
    "start": 7523960,
    "end": 7525976,
    "text": "今はそれほど重要なことではない。"
  },
  {
    "start": 7526008,
    "end": 7530184,
    "text": "存在しないユーザーのプロフィールページを開こうとしたらどうなるのか？"
  },
  {
    "start": 7530232,
    "end": 7532808,
    "text": "私はここにランダムにキャラクターを加えるだけだ。"
  },
  {
    "start": 7532944,
    "end": 7539840,
    "text": "デフォルトでは、fetchは400や500のレスポンスに対してエラーを投げないので、データが表示されない。"
  },
  {
    "start": 7539920,
    "end": 7543064,
    "text": "もしこれがエラーを投げたら、代わりにエラー・ページが表示される。"
  },
  {
    "start": 7543152,
    "end": 7545272,
    "text": "どちらのケースも良くない。"
  },
  {
    "start": 7545376,
    "end": 7547824,
    "text": "エラーページや空のページは見たくない。"
  },
  {
    "start": 7547912,
    "end": 7549912,
    "text": "その代わりに、\"not found \"ページにアクセスしたい。"
  },
  {
    "start": 7549976,
    "end": 7550464,
    "text": "そうだろう？"
  },
  {
    "start": 7550592,
    "end": 7559664,
    "text": "ログを見てみると、このリクエストに対してunsplash APIから404レスポンスが返ってきていることがわかる。"
  },
  {
    "start": 7559792,
    "end": 7565328,
    "text": "この404レスポンスは、not foundページに自動的にリダイレクトされるため、next jsのコストはかからない。"
  },
  {
    "start": 7565384,
    "end": 7566980,
    "text": "これは手動でできる。"
  },
  {
    "start": 7568390,
    "end": 7583934,
    "text": "レスポンス・ステータスが404（見つからない）であれば、見つからないページにリダイレクトする。"
  },
  {
    "start": 7584062,
    "end": 7589070,
    "text": "私たちの \"not found \"ページというのは、この \"not minus found \"Txファイルのことです。"
  },
  {
    "start": 7589230,
    "end": 7592598,
    "text": "旧ページのディレクトリにリダイレクトしたい。"
  },
  {
    "start": 7592654,
    "end": 7598214,
    "text": "私たちはこれをget static propsまたはget server side propsの特別な戻り値で行いました。"
  },
  {
    "start": 7598302,
    "end": 7606810,
    "text": "新しいアプリのディレクターでは、このnot found関数を呼び出すだけでよい。"
  },
  {
    "start": 7607470,
    "end": 7609694,
    "text": "そうすると \"not found \"のページが表示される。"
  },
  {
    "start": 7609822,
    "end": 7610998,
    "text": "もう一度やってみよう。"
  },
  {
    "start": 7611054,
    "end": 7618330,
    "text": "このユーザは存在しないが、前のユーザは存在する。"
  },
  {
    "start": 7618670,
    "end": 7623118,
    "text": "このレスポンスからメタデータを生成する方法も学びたいよね？"
  },
  {
    "start": 7623214,
    "end": 7631720,
    "text": "URLにはユーザー名しかありませんが、ユーザー名をページタイトルに入れる代わりに、ユーザーのフルネームをページタイトルに入れたいと思います。"
  },
  {
    "start": 7631800,
    "end": 7635192,
    "text": "APIからのレスポンスからこれらの値を得るだけである。"
  },
  {
    "start": 7635256,
    "end": 7636480,
    "text": "彼らを待つしかない。"
  },
  {
    "start": 7636560,
    "end": 7647500,
    "text": "一方、トピックス・ページでは、paramsの値を使ってメタデータを生成するだけである。"
  },
  {
    "start": 7648680,
    "end": 7656098,
    "text": "同じメタデータ生成関数をもう一度エクスポートしなければならないが、今回は非同期にする。"
  },
  {
    "start": 7656234,
    "end": 7662190,
    "text": "非同期関数をエクスポートし、メタデータを生成し、スペルが正しいことを再度確認する。"
  },
  {
    "start": 7662730,
    "end": 7668990,
    "text": "ここまでのページで受け取ったのと同じパラメータを受け取ることができる。"
  },
  {
    "start": 7671530,
    "end": 7674026,
    "text": "この場合も、関数はメタデータを返さなければならない。"
  },
  {
    "start": 7674098,
    "end": 7682960,
    "text": "なぜなら、非同期関数はプロミスを返すからだ。"
  },
  {
    "start": 7683820,
    "end": 7688676,
    "text": "ここでメタデータ・オブジェクトを返し、タイトルを変更したい。"
  },
  {
    "start": 7688828,
    "end": 7693132,
    "text": "また、レスポンスから戻ってきた値からタイトルを設定したい。"
  },
  {
    "start": 7693236,
    "end": 7695540,
    "text": "私たちの回答はこのページの下にあります。"
  },
  {
    "start": 7695620,
    "end": 7698532,
    "text": "メタデータを生成する内部でこれらの値を取得するにはどうすればいいのか？"
  },
  {
    "start": 7698636,
    "end": 7700076,
    "text": "答えは簡単だ。"
  },
  {
    "start": 7700148,
    "end": 7704764,
    "text": "ここでは、同じURLにまったく同じフェッチ・リクエストをするだけだ。"
  },
  {
    "start": 7704892,
    "end": 7707404,
    "text": "待ってくれ、これは無駄ではないのか？"
  },
  {
    "start": 7707452,
    "end": 7724184,
    "text": "つまり、このフェッチ・リクエストを2回実行しても、実行されるのは1回だけで、2回目に実行されるフェッチ・コールでは、1回目に実行されたフェッチ・コールの値が自動的に使用されます。"
  },
  {
    "start": 7724272,
    "end": 7726040,
    "text": "これはnext jsで処理される。"
  },
  {
    "start": 7726160,
    "end": 7734024,
    "text": "同じnot foundロジックや同じURLトライを書く代わりに、整理のためにこれを別の関数に抽出したい。"
  },
  {
    "start": 7734192,
    "end": 7746370,
    "text": "ユーザー名を文字列として受け取り、APIにリクエストする。"
  },
  {
    "start": 7746710,
    "end": 7751410,
    "text": "この3行を切り取ってここに入れた。"
  },
  {
    "start": 7752230,
    "end": 7758930,
    "text": "constユーザーを作成する代わりに、レスポンスJSONを返したい。"
  },
  {
    "start": 7759670,
    "end": 7764770,
    "text": "関数の返り値の型を設定し、適切な順序の補完を得る。"
  },
  {
    "start": 7765110,
    "end": 7771250,
    "text": "なぜならこれは非同期関数であり、ここにはunsplashのユーザーが入るからだ。"
  },
  {
    "start": 7771710,
    "end": 7773526,
    "text": "そして、この関数を使う。"
  },
  {
    "start": 7773558,
    "end": 7781650,
    "text": "constユーザーを作成し、getuserを呼び出し、ユーザー名を渡す。"
  },
  {
    "start": 7782270,
    "end": 7787730,
    "text": "ここでこの戻り値の型を追加したので、このユーザはunsplash user型になりました。"
  },
  {
    "start": 7788510,
    "end": 7793570,
    "text": "そしてこの行をコピーして、URLを繰り返す代わりにここで使うことができる。"
  },
  {
    "start": 7794070,
    "end": 7797494,
    "text": "その場合、どちらのケースでも4つまたは4つの回答を処理する。"
  },
  {
    "start": 7797622,
    "end": 7800330,
    "text": "また、これは自動的に重複排除される。"
  },
  {
    "start": 7800910,
    "end": 7806262,
    "text": "これで、APIからユーザーから取得したデータからタイトルを設定できるようになった。"
  },
  {
    "start": 7806406,
    "end": 7810838,
    "text": "例えば、ユーザー・ドット・ファースト・ネーム・プラスに設定することができる。"
  },
  {
    "start": 7810894,
    "end": 7818206,
    "text": "そして、スペースとユーザードットの姓を追加するが、姓が存在しないこともある。"
  },
  {
    "start": 7818278,
    "end": 7820214,
    "text": "それなら、ここにスペースはいらない。"
  },
  {
    "start": 7820262,
    "end": 7824574,
    "text": "実際には、これをもう少し複雑な表現に変えている。"
  },
  {
    "start": 7824662,
    "end": 7825886,
    "text": "怖がることはない。"
  },
  {
    "start": 7825918,
    "end": 7830278,
    "text": "基本的には、先ほどと同じことをするのだが、不要なスペースがないだけだ。"
  },
  {
    "start": 7830414,
    "end": 7834970,
    "text": "ここには姓と名を含む配列がある。"
  },
  {
    "start": 7835270,
    "end": 7838806,
    "text": "この部分は、定義されていない要素をフィルタリングする。"
  },
  {
    "start": 7838878,
    "end": 7842638,
    "text": "ファーストネームがない場合は、ラストネームのみを使用し、その逆も同様である。"
  },
  {
    "start": 7842734,
    "end": 7847620,
    "text": "そして、この2つの値を結合し、その間にスペースを追加する。"
  },
  {
    "start": 7847790,
    "end": 7855912,
    "text": "ファーストネームもラストネームもまったくない場合は、ユーザーネームに戻る。"
  },
  {
    "start": 7856056,
    "end": 7857176,
    "text": "こんなことをする必要はない。"
  },
  {
    "start": 7857208,
    "end": 7860416,
    "text": "先ほどお見せしたシンプルなバージョンを使うこともできる。"
  },
  {
    "start": 7860528,
    "end": 7864420,
    "text": "これはあなた次第だから、これを保存して試してみよう。"
  },
  {
    "start": 7865120,
    "end": 7874120,
    "text": "現在、ページのタイトルにユーザーのフルネームが表示されているが、いずれにしてもマイナス・ネクスト・Jのイメージ・ギャラリーを表示させたい。"
  },
  {
    "start": 7874200,
    "end": 7881030,
    "text": "この部分を括弧で囲むと、タイトルの一部になる。"
  },
  {
    "start": 7881110,
    "end": 7882090,
    "text": "オーケー、いいね。"
  },
  {
    "start": 7882710,
    "end": 7893822,
    "text": "ここでフェッチ機能を使わず、例えばアクシオスのようなものを使ったり、別の方法でデータをフェッチしている場合、これらのカードは自動的に重複排除されない。"
  },
  {
    "start": 7893886,
    "end": 7898278,
    "text": "これはネイティブ・フェッチ関数の場合のみだが、手動でこれを行うこともできる。"
  },
  {
    "start": 7898374,
    "end": 7901548,
    "text": "そのためにreactivalには特別な機能が用意されています。"
  },
  {
    "start": 7901674,
    "end": 7907704,
    "text": "getuserがfetchの代わりにaxiosを使い、自動的に重複排除されなかったとしよう。"
  },
  {
    "start": 7907832,
    "end": 7917872,
    "text": "次に、ユーザーをキャッシュするconst carを作成し、reactからのインポートであるこのキャッシュ関数を呼び出す。"
  },
  {
    "start": 7918016,
    "end": 7920300,
    "text": "これは反応そのものから来るものだ。"
  },
  {
    "start": 7921160,
    "end": 7925000,
    "text": "ここでget user関数を渡すことができる。"
  },
  {
    "start": 7925160,
    "end": 7933278,
    "text": "ここで、get userの代わりにキャッシュされたgetuserを両方の場所で呼び出すと、これも重複排除される。"
  },
  {
    "start": 7933454,
    "end": 7937078,
    "text": "繰り返しになるが、これが必要なのはフェッチを使わない場合だけだ。"
  },
  {
    "start": 7937214,
    "end": 7949370,
    "text": "ネイティブ・フェッチを使用していない場合はキャッシュを使用するよう、備忘録としてここにコメントを書いておく。"
  },
  {
    "start": 7950030,
    "end": 7957396,
    "text": "このページで、リクエストのたびに再検証するか、リクエストを現金化するか、決めることができます。"
  },
  {
    "start": 7957478,
    "end": 7959040,
    "text": "この仕組みはもうお分かりだろう。"
  },
  {
    "start": 7959080,
    "end": 7968976,
    "text": "revalidateフィールドを追加したり、静的再生のインクリメンタルのためにゼロまたは数値を設定したり、フェッチ・カーでno catchまたはno storeオプションを使用したりすることができる。"
  },
  {
    "start": 7969128,
    "end": 7973500,
    "text": "最後に、ここにもdivの中にアラートを入れたい。"
  },
  {
    "start": 7974640,
    "end": 7993240,
    "text": "もう一度、ブートストラップ・フォルダーからインポートして、スラッシュ・コンポーネント・スラッシュ・ブートストラップを追加し、ここにテキストを追加します。"
  },
  {
    "start": 7993940,
    "end": 8000180,
    "text": "このプロフィールページでは、生成メタデータを使用して、APIレスポンスから動的にページタイトルを設定します。"
  },
  {
    "start": 8000300,
    "end": 8002092,
    "text": "これが私たちがここでやったことだ。"
  },
  {
    "start": 8002276,
    "end": 8011894,
    "text": "古いページ・ディレクトリでは、このメタデータをページ・コンポーネントのheadタグに直接設定していたが、現在はメタデータの生成によって完全に置き換えられている。"
  },
  {
    "start": 8012012,
    "end": 8016154,
    "text": "このチュートリアルの次のセクションでは、クライアント側フェッチの方法を学びます。"
  },
  {
    "start": 8016202,
    "end": 8020090,
    "text": "そのためには、次のj'sでAPIルート・ハンドラをセットアップする必要がある。"
  },
  {
    "start": 8020170,
    "end": 8024578,
    "text": "バックエンドのエンドポイントを少し作ってから、プロジェクトをデプロイしよう。"
  },
  {
    "start": 8024674,
    "end": 8027626,
    "text": "このチュートリアルを最後まで見てください。"
  },
  {
    "start": 8027778,
    "end": 8046444,
    "text": "つまり、サーバー・コンポーネントの内部でAPIリクエストを実行し、ページにアクセスしたときに動的に、あるいはプロジェクトをビルドしたときに静的に、データをすでに取り込んだ準備のできたHTMLを返すということだ。"
  },
  {
    "start": 8046572,
    "end": 8058388,
    "text": "つまり、まず空のHTMLページを取得し、それからAPIからデータを取得してUIに表示するJavaScriptを実行する。"
  },
  {
    "start": 8058444,
    "end": 8062516,
    "text": "これは、サーバー・サイドでフェッチするのではなく、ユーザーのブラウザーで起こる。"
  },
  {
    "start": 8062588,
    "end": 8070480,
    "text": "これは、動的にデータを取得し、ページの更新を待つことでUIをブロックすることなくレスポンスを待ちたい場合に便利である。"
  },
  {
    "start": 8070560,
    "end": 8077392,
    "text": "というのも、クライアント・コンポーネントが必要になるため、より多くのJavaScriptコードをユーザーに送ることになり、最適とは言えないからだ。"
  },
  {
    "start": 8077456,
    "end": 8083064,
    "text": "検索エンジンのクローラーはまずこの空のページを見るからだ。"
  },
  {
    "start": 8083152,
    "end": 8089336,
    "text": "とはいえ、クライアント・サイド・フェッチを使いたい状況もあるので、ここでもその方法を学ぶ。"
  },
  {
    "start": 8089448,
    "end": 8096502,
    "text": "そのために、キーワードを入力して、そのキーワードに該当する画像を検索できる入力フィールドがある検索ページを作りたい。"
  },
  {
    "start": 8096616,
    "end": 8101730,
    "text": "このページではサーバーサイドレンダリングはしないので、SSRフォルダには入れません。"
  },
  {
    "start": 8101770,
    "end": 8107530,
    "text": "その代わりに、アプリの中にCSRという新しいフォルダを作り、クライアント・サイド・レンダリングに使いたい。"
  },
  {
    "start": 8107690,
    "end": 8113110,
    "text": "ここでも、実際のURLの一部にならないように、括弧の間に名前を入れている。"
  },
  {
    "start": 8113690,
    "end": 8117482,
    "text": "URLはsearchで始まるようにしたいよね？"
  },
  {
    "start": 8117586,
    "end": 8128046,
    "text": "CSRの中にsearchフォルダを作り、searchフォルダの中にTSXというページを作り、このページをここで利用できるようにする。"
  },
  {
    "start": 8128078,
    "end": 8131686,
    "text": "いつものように、pageというデフォルトの関数をエクスポートする。"
  },
  {
    "start": 8131838,
    "end": 8136246,
    "text": "今回は、ここでデータを取得するわけではないので、非同期である必要はない。"
  },
  {
    "start": 8136358,
    "end": 8138970,
    "text": "その代わりに、クライアント側でデータを取得する。"
  },
  {
    "start": 8139510,
    "end": 8142210,
    "text": "ここでメタデータもエクスポートしたい。"
  },
  {
    "start": 8143190,
    "end": 8157030,
    "text": "エクスポートconstメタデータと私は検索マイナスにタイトルを設定し、他のページのように再び次のJS 13.4画像ギャラリーにしたい。"
  },
  {
    "start": 8158050,
    "end": 8163130,
    "text": "クライアント側で検索を実行するには、use stateとuseeffectが必要だ。"
  },
  {
    "start": 8163210,
    "end": 8166954,
    "text": "これはクライアント・コンポーネントの中でしか使えないんですよね？"
  },
  {
    "start": 8167122,
    "end": 8175190,
    "text": "useclientディレクティブを使って、これをクライアント・コンポーネントにしてみましょう。"
  },
  {
    "start": 8175620,
    "end": 8181796,
    "text": "スラッシュサーチに移動すると、ページを開くことができる。"
  },
  {
    "start": 8181908,
    "end": 8184684,
    "text": "メタデータのタイトルが見当たらない。"
  },
  {
    "start": 8184772,
    "end": 8190740,
    "text": "というのも、メタデータは実際にはクライアント・コンポーネントではなく、サーバー・コンポーネントからエクスポートされなければならないからだ。"
  },
  {
    "start": 8190860,
    "end": 8195324,
    "text": "クライアントを削除すれば、タイトルに表示されるはずだ。"
  },
  {
    "start": 8195452,
    "end": 8199740,
    "text": "use clientディレクティブは、常にファイルの一番上になければならないよね？"
  },
  {
    "start": 8199860,
    "end": 8202954,
    "text": "この下の部分だけをクライアント・コンポーネントにしたい。"
  },
  {
    "start": 8203052,
    "end": 8205726,
    "text": "つまり、これを別のファイルに入れなければならない。"
  },
  {
    "start": 8205878,
    "end": 8214158,
    "text": "searchフォルダーの中に新しいファイルを作成し、好きな名前をつけることができる。"
  },
  {
    "start": 8214294,
    "end": 8217130,
    "text": "この検索ページをTsXと呼ぶことにする。"
  },
  {
    "start": 8218230,
    "end": 8243858,
    "text": "ここでは、search pageという同じ名前のデフォルトの関数をエクスポートして、search用のテキストを含むdiffを返そう。クライアント・コンポーネントにして、ここでクライアント機能を使い、サーバー・コンポーネントからこれを返すことができる。"
  },
  {
    "start": 8243994,
    "end": 8246670,
    "text": "ここでは検索ページをレンダリングしたい。"
  },
  {
    "start": 8247610,
    "end": 8250186,
    "text": "さて、本文をご覧いただこう。"
  },
  {
    "start": 8250338,
    "end": 8255034,
    "text": "サーバー・コンポーネントは、クライアント・コンポーネントのラッパーである。"
  },
  {
    "start": 8255082,
    "end": 8260080,
    "text": "usクライアント指令は常に最上位になければならないからだ。"
  },
  {
    "start": 8260210,
    "end": 8265340,
    "text": "というのも、メタデータを宣言するにはサーバー・コンポーネントが必要だからだ。"
  },
  {
    "start": 8265500,
    "end": 8274460,
    "text": "このように、クライアント・コンポーネントをサーバー・コンポーネントの中に置くことで、サーバー・コンポーネントでデータを取得し、クライアント・コンポーネントにpropsとして渡すこともできる。"
  },
  {
    "start": 8274540,
    "end": 8275804,
    "text": "これも可能だ。"
  },
  {
    "start": 8275972,
    "end": 8278812,
    "text": "では、検索ページ・コンポーネントに入ってみよう。"
  },
  {
    "start": 8278956,
    "end": 8283308,
    "text": "まず最初に、このdivの中に入力フォームを置きたい。"
  },
  {
    "start": 8283444,
    "end": 8288064,
    "text": "このために、react bootstrapのブートストラップフォームを使うことができます。"
  },
  {
    "start": 8288192,
    "end": 8296380,
    "text": "我々はいずれにせよクライアント・コンポーネントの中にいるので、再エクスポートされたバージョンを使う必要はない。"
  },
  {
    "start": 8297560,
    "end": 8307540,
    "text": "実際の入力値を受け取る関数であるsubmitを処理するために、on submit propを設定します。"
  },
  {
    "start": 8308000,
    "end": 8324310,
    "text": "return文の上に同じ名前のhandle submitという非同期関数を置き、この関数は通常e（eventの略）と呼ばれる値を受け取る。"
  },
  {
    "start": 8324730,
    "end": 8339696,
    "text": "そして、このように2つの角括弧を追加し、タイプをHTMLフォーム要素に設定する。"
  },
  {
    "start": 8339738,
    "end": 8354956,
    "text": "より複雑なフォームがある場合は、代わりにreact hook formライブラリを使うべきです。より多くの入力フィールドを持つより複雑なフォームを簡単に扱うことができます。"
  },
  {
    "start": 8355108,
    "end": 8357100,
    "text": "ここでフォームを完成させよう。"
  },
  {
    "start": 8357140,
    "end": 8365280,
    "text": "開始タグと終了タグの間に入って、ここにフォームグループを配置します。"
  },
  {
    "start": 8365950,
    "end": 8377450,
    "text": "クラス名をMB threeに設定し、この入力フィールドの下に少し余白を加え、コントロールのアイデアを検索入力にリセットする。"
  },
  {
    "start": 8378190,
    "end": 8381166,
    "text": "コントロールIDはアクセシビリティのために必要です。"
  },
  {
    "start": 8381358,
    "end": 8388094,
    "text": "例えば、入力フィールドのラベルと入力フィールドそのものを結びつけ、ラベルをクリックすると入力フィールドが選択されるようにする。"
  },
  {
    "start": 8388222,
    "end": 8391366,
    "text": "これはreact bootstrapによって自動的に処理される。"
  },
  {
    "start": 8391438,
    "end": 8399830,
    "text": "このコントロールIDをここに設定すれば、検索クエリであるフォーム・ドット・ラベルを貼ることができる。"
  },
  {
    "start": 8400130,
    "end": 8407990,
    "text": "これは入力フィールドの上に見えるテキストだけで、実際の入力フィールドはフォーム・ドット・コントロールを使って下に追加する。"
  },
  {
    "start": 8410570,
    "end": 8416058,
    "text": "入力フィールドには名前が必要で、後で値を取り出して呼び出すことができる。"
  },
  {
    "start": 8416114,
    "end": 8419220,
    "text": "クエリでも検索クエリでも何でもいい。"
  },
  {
    "start": 8419370,
    "end": 8423940,
    "text": "入力フィールドが空のときに表示されるプレースホルダー・テキストも設定しよう。"
  },
  {
    "start": 8424480,
    "end": 8433648,
    "text": "私は猫、ホットドッグ、ドット・ドット・ドットと書く。"
  },
  {
    "start": 8433824,
    "end": 8437860,
    "text": "これは、ユーザーが何を入力できるかを知るためのものだ。"
  },
  {
    "start": 8438480,
    "end": 8444288,
    "text": "そしてこのフォーム・コントロールを閉じ、入力フィールドとラベルを表示する。"
  },
  {
    "start": 8444424,
    "end": 8447074,
    "text": "ラベルをクリックすると、入力フィールドが選択される。"
  },
  {
    "start": 8447232,
    "end": 8449462,
    "text": "これはここのコントロールIDで処理される。"
  },
  {
    "start": 8449566,
    "end": 8450862,
    "text": "ただ、知っておいてよかった。"
  },
  {
    "start": 8451006,
    "end": 8457050,
    "text": "そして、フォームグループの下、まだフォームタグの中に、ブートストラップボタンを設置します。"
  },
  {
    "start": 8458430,
    "end": 8465850,
    "text": "このボタンをクリックすると、このボタンがあるフォームが自動的に送信されるように、タイプをsubmitに設定します。"
  },
  {
    "start": 8466510,
    "end": 8473848,
    "text": "もう一度、下にmb 3で余白を追加し、ボタンのテキストを検索とする。"
  },
  {
    "start": 8474014,
    "end": 8479360,
    "text": "このボタンをクリックすると、このフォームが送信され、submitハンドルが実行されます。"
  },
  {
    "start": 8479660,
    "end": 8484760,
    "text": "では、このフォーム・イベントから、フォームから入力を取り出したい。"
  },
  {
    "start": 8485380,
    "end": 8492236,
    "text": "そうしないと、フォームを送信したときにページがリフレッシュされてしまうからだ。"
  },
  {
    "start": 8492308,
    "end": 8499322,
    "text": "これは自動的なHTMLの動作ですが、通常はJavaScriptで値を送信したいので、このようなことはしたくありません。"
  },
  {
    "start": 8499436,
    "end": 8503822,
    "text": "次に、このフォーム・イベントからクエリを通して入力値を取得する必要があります。"
  },
  {
    "start": 8503926,
    "end": 8507734,
    "text": "繰り返しになるが、手動でこれを行う場合、これは少し冗長で複雑になる。"
  },
  {
    "start": 8507862,
    "end": 8512330,
    "text": "Reactのフック・フォームを使えばもっと簡単だが、入力フィールドがひとつだけならこれで十分だ。"
  },
  {
    "start": 8512910,
    "end": 8518570,
    "text": "フォーム・データを作成し、新しいフォーム・データで初期化する必要があります。"
  },
  {
    "start": 8519470,
    "end": 8523690,
    "text": "ここに、このフォーム・イベントのドット・ターゲットを渡します。"
  },
  {
    "start": 8523990,
    "end": 8530860,
    "text": "タイプスクリプトでは、これをSdHeキーワードでHTMLフォーム要素にキャストしなければならない。"
  },
  {
    "start": 8531600,
    "end": 8535864,
    "text": "これは、入力フィールドをフォーム・データに変換するものだ。"
  },
  {
    "start": 8535952,
    "end": 8550056,
    "text": "フォーム・データからクエリー・コンスqueryイコール・フォーム・データ・ドットgetを取得し、値のキーを文字列として渡す必要があります。"
  },
  {
    "start": 8550248,
    "end": 8558620,
    "text": "フォーム・データからこの値を取得したいのですが、この値の型は文字列ではなく、フォーム・データの入力値かnullです。"
  },
  {
    "start": 8559840,
    "end": 8563288,
    "text": "これをセーフ・コール演算子を使って文字列に変換したい。"
  },
  {
    "start": 8563384,
    "end": 8575940,
    "text": "クエスチョンマーク、そしてこの値をトリミングする。つまり、文字列の先頭や末尾にある空白を検索クエリの一部として使用したくないので、取り除くのだ。"
  },
  {
    "start": 8576240,
    "end": 8580500,
    "text": "これで、クエリーは文字列になるか、何も入力しなければ未定義になる。"
  },
  {
    "start": 8581690,
    "end": 8586194,
    "text": "とりあえず、これらの値を示すダイアログを画面に表示してみよう。"
  },
  {
    "start": 8586242,
    "end": 8588150,
    "text": "これが実際に機能することがわかる。"
  },
  {
    "start": 8588850,
    "end": 8592670,
    "text": "クエリに値があるかどうかをチェックする。"
  },
  {
    "start": 8593090,
    "end": 8598470,
    "text": "もし何かを入力したら、このクエリーでアラート・ダイアログを表示したい。"
  },
  {
    "start": 8599250,
    "end": 8602962,
    "text": "ユーザーが何も入力しなかった場合は、何もしない。"
  },
  {
    "start": 8603026,
    "end": 8610280,
    "text": "空の入力フィールドで検索しようとしても、何もしないことは明らかなので、エラーメッセージは必要ないと思う。"
  },
  {
    "start": 8611020,
    "end": 8615764,
    "text": "試しにdocsと入力して、アラートダイアログで確認してみよう。"
  },
  {
    "start": 8615852,
    "end": 8617596,
    "text": "入力フィールドが機能する。"
  },
  {
    "start": 8617708,
    "end": 8623800,
    "text": "もちろん、このダイアログを表示するだけではなく、unsplash APIに検索クエリをリクエストしたい。"
  },
  {
    "start": 8624140,
    "end": 8629980,
    "text": "今問題になっているのは、私たちがブラウザ内のフロントエンドにいることだ。"
  },
  {
    "start": 8630060,
    "end": 8635188,
    "text": "つまり、認証情報はブラウザに漏れてしまうので、ここでは使えないということですね？"
  },
  {
    "start": 8635244,
    "end": 8638770,
    "text": "誰かがソースコードを調べれば見つかるだろう。"
  },
  {
    "start": 8638850,
    "end": 8650510,
    "text": "先に説明したように、環境変数の前にnext publicをつけない限り、フロントエンドに公開しようとしても公開されない。"
  },
  {
    "start": 8650970,
    "end": 8652178,
    "text": "試してみよう。"
  },
  {
    "start": 8652234,
    "end": 8658602,
    "text": "envのunsplashアクセスキーをアラートダイアログに表示してみよう。"
  },
  {
    "start": 8658746,
    "end": 8660794,
    "text": "これをクリックすると、未定義が表示される。"
  },
  {
    "start": 8660922,
    "end": 8665786,
    "text": "このキーを誤ってクライアントに公開したくないからだ。"
  },
  {
    "start": 8665938,
    "end": 8680458,
    "text": "というのも、バックエンドサーバーはこれを実行し、クライアントに公開することなくキーを使用することができるからだ。"
  },
  {
    "start": 8680594,
    "end": 8684994,
    "text": "例えば、エクスプレス・サーバーのように独自のバックエンドを構築することもできる。"
  },
  {
    "start": 8685042,
    "end": 8692058,
    "text": "すでに説明したように、next JSにはデフォルトでAPIルートがあり、next JSDで直接バックエンドを構築することができます。"
  },
  {
    "start": 8692144,
    "end": 8698490,
    "text": "このようなAPIルートを作成し、アクセスキーを使って検索リクエストをしてみよう。"
  },
  {
    "start": 8699470,
    "end": 8709718,
    "text": "これらのAPIルートもappフォルダーに置き、この中にAPIフォルダーを作る。"
  },
  {
    "start": 8709854,
    "end": 8723262,
    "text": "実際にはこのようにする必要はないが、これは慣例である。なぜなら、通常ルートハンドラをスラッシュAPIエンドポイントの後ろに置きたいからだ。"
  },
  {
    "start": 8723446,
    "end": 8729054,
    "text": "このリクエストをlocalhostの3000 API検索で行いたい。"
  },
  {
    "start": 8729142,
    "end": 8742830,
    "text": "ここに検索フォルダを追加し、ここにTSXというページではなく、ドットtsxというルートを追加する。"
  },
  {
    "start": 8742950,
    "end": 8744454,
    "text": "ここでも名前が重要だ。"
  },
  {
    "start": 8744542,
    "end": 8751778,
    "text": "そうでなければAPIルートハンドラとして認識されないからだ。"
  },
  {
    "start": 8751914,
    "end": 8760790,
    "text": "さて、ここでは大文字でgetと呼ぶ非同期関数をエクスポートする。"
  },
  {
    "start": 8761930,
    "end": 8768030,
    "text": "このget関数に、リクエスト・オブジェクトを次のように渡す。"
  },
  {
    "start": 8768570,
    "end": 8775104,
    "text": "このリクエスト・オブジェクトは、JavaScriptまたはnode jsでデフォルトで利用できるため、インポートを持たない。"
  },
  {
    "start": 8775202,
    "end": 8784708,
    "text": "古いページ・ディレクトリでは、一つのハンドラ関数があり、このハンドラ関数でリクエストのメソッドをチェックしなければならなかった。"
  },
  {
    "start": 8784804,
    "end": 8789180,
    "text": "こうすることで、getリクエストとpostリクエストなどを区別することができる。"
  },
  {
    "start": 8789300,
    "end": 8795172,
    "text": "新しいアプリのルート・ハンドラでは、HTTPメソッドごとに異なる関数が用意されている。"
  },
  {
    "start": 8795276,
    "end": 8807890,
    "text": "他のHTTPメソッドについても、非同期関数post patch deleteなどをエクスポートすることができる。"
  },
  {
    "start": 8808310,
    "end": 8811850,
    "text": "ここで、このルートへのgetリクエストを処理できるよね？"
  },
  {
    "start": 8812190,
    "end": 8817850,
    "text": "検索ページからの検索クエリを検索パラメータとして渡します。"
  },
  {
    "start": 8818470,
    "end": 8826382,
    "text": "URLは次のようになる。 APIスラッシュ検索、クエスチョンマーク検索、そして実際の検索クエリ。"
  },
  {
    "start": 8826526,
    "end": 8829960,
    "text": "このURLからこの値を取得したい。"
  },
  {
    "start": 8830580,
    "end": 8836108,
    "text": "そのためにコンストラクタを作成し、新しいURLに代入する。"
  },
  {
    "start": 8836284,
    "end": 8838920,
    "text": "ここでもimport文は必要ない。"
  },
  {
    "start": 8839620,
    "end": 8855440,
    "text": "そして中括弧の中には、URLの検索パラメータであるsearch paramsがあるはずだ。"
  },
  {
    "start": 8855850,
    "end": 8858306,
    "text": "そして、そこからクエリー値を取り出したい。"
  },
  {
    "start": 8858378,
    "end": 8865670,
    "text": "ここでは、const queryを作成し、search params getとpassqueryに文字列として代入している。"
  },
  {
    "start": 8866810,
    "end": 8871630,
    "text": "もちろん、この値がNULLになることもある。検索パラメータが欠けている可能性があるからだ。"
  },
  {
    "start": 8871970,
    "end": 8880470,
    "text": "queryがundefinedかどうか、レスポンスを返すかどうかをチェックしよう。"
  },
  {
    "start": 8880980,
    "end": 8886200,
    "text": "今回はネクスト・スラッシュ・サーバーからのインポートであるネクスト・レスポンスを使用する。"
  },
  {
    "start": 8886500,
    "end": 8892920,
    "text": "次のレスポンスは、我々が用意しているこの通常のレスポンス値だ。"
  },
  {
    "start": 8893340,
    "end": 8906774,
    "text": "nextレスポンスは、これをいくつかの便利な関数で拡張したものである。同様にnextリクエストもあり、これはこのリクエストタイプと同じで、いくつかのユーティリティ関数が追加されているだけである。"
  },
  {
    "start": 8906932,
    "end": 8912562,
    "text": "この次のレスポンスでJSONを呼び出し、JSONレスポンスの括弧を作成することができる。"
  },
  {
    "start": 8912626,
    "end": 8921098,
    "text": "ここには、エラー・カラム、クエリーなし、単なるレスポンスであるボディを置いた。"
  },
  {
    "start": 8921114,
    "end": 8921730,
    "text": "送り返す。"
  },
  {
    "start": 8921770,
    "end": 8926910,
    "text": "このエンドポイントに検索クエリーを送信せずにアクセスしようとすると、次のようになる。"
  },
  {
    "start": 8927730,
    "end": 8930434,
    "text": "コンマの後に設定を追加できる。"
  },
  {
    "start": 8930602,
    "end": 8939370,
    "text": "ここでは、ステータスを400に設定したい。これは、検索クエリーなしの無効なリクエストなので、バッドリクエストを意味する。"
  },
  {
    "start": 8941830,
    "end": 8945718,
    "text": "次に、unsplashにフェッチリクエストをしたい。"
  },
  {
    "start": 8945814,
    "end": 8950822,
    "text": "フェッチ待ちと等しいレスポンスを作成します。"
  },
  {
    "start": 8951006,
    "end": 8956734,
    "text": "今回は、ランダムな画像を返さないこの検索エンドポイントにリクエストしたい。"
  },
  {
    "start": 8956862,
    "end": 8960256,
    "text": "同じ検索リクエストに対して同じ画像を返す。"
  },
  {
    "start": 8960438,
    "end": 8965676,
    "text": "リターン・タイプは依然として結果の配列を含むが、今回はそれをこのようにラップしている。"
  },
  {
    "start": 8965788,
    "end": 8967276,
    "text": "新しい型を作らなければならない。"
  },
  {
    "start": 8967308,
    "end": 8975600,
    "text": "そのために、すでに持っているunsplashの画像タイプに、以下のラッパー・タイプを追加しよう。"
  },
  {
    "start": 8976340,
    "end": 8984920,
    "text": "unsplash検索レスポンスと呼ぶ別のインターフェイスをエクスポートします。"
  },
  {
    "start": 8985260,
    "end": 8987160,
    "text": "ここでも名前はあなた次第だ。"
  },
  {
    "start": 8987680,
    "end": 8995264,
    "text": "結果以外の値は無視する。"
  },
  {
    "start": 8995352,
    "end": 9004260,
    "text": "私たちはこれらの他の値を気にしないし、結果は単にunsplash画像の配列であり、それだけである。"
  },
  {
    "start": 9005120,
    "end": 9022270,
    "text": "そしてルート・ハンドラに戻り、フェッチ・リクエストを行い、バックティック文字列を渡して、前と同じようにHTTPs colon slash slash API unsplash.comにリクエストを行う。"
  },
  {
    "start": 9023810,
    "end": 9029630,
    "text": "今、エンドポイントはスラッシュ検索写真である。"
  },
  {
    "start": 9030250,
    "end": 9035754,
    "text": "検索クエリは検索パラメータとして渡される。"
  },
  {
    "start": 9035882,
    "end": 9038830,
    "text": "クエリーイコールにクエスチョンマークを追加する。"
  },
  {
    "start": 9039300,
    "end": 9043120,
    "text": "ここで、バックエンドに送信したクエリーを追加する。"
  },
  {
    "start": 9044860,
    "end": 9057720,
    "text": "その後、再びアンバサダー・クライアントのアンダースコアのアイデアを使用し、いつものプロセスenv unsplashアクセスキーにリセットします。"
  },
  {
    "start": 9059340,
    "end": 9065032,
    "text": "ここでもサーバーサイドで実行されるので、API認証情報を使っても大丈夫だ。"
  },
  {
    "start": 9065196,
    "end": 9069184,
    "text": "そして、このデータをフロントエンドのクライアントに送り返す。"
  },
  {
    "start": 9069352,
    "end": 9071700,
    "text": "ここから結果を出したい。"
  },
  {
    "start": 9074120,
    "end": 9077540,
    "text": "レスポンスJSONを渡す。"
  },
  {
    "start": 9078600,
    "end": 9086064,
    "text": "ここではこのオブジェクトのタイプをunsplash search responseに設定し、自動補完が行われるようにしている。"
  },
  {
    "start": 9086192,
    "end": 9088300,
    "text": "さて、ここで私たちの結果を見つけることができる。"
  },
  {
    "start": 9089200,
    "end": 9093392,
    "text": "つまり、これを削除することもできるが、その場合、結果はany型になる。"
  },
  {
    "start": 9093576,
    "end": 9096060,
    "text": "これはタイプスクリプトにはちょっと良い。"
  },
  {
    "start": 9096400,
    "end": 9098300,
    "text": "であれば、これを返したい。"
  },
  {
    "start": 9098720,
    "end": 9104552,
    "text": "もう一度、次のレスポンス・ドットJSONをリコールする。"
  },
  {
    "start": 9104656,
    "end": 9111456,
    "text": "ここまでのようなエラーの代わりに、単に結果をフロントエンドに送り返す。"
  },
  {
    "start": 9111568,
    "end": 9113736,
    "text": "これがAPIルートハンドラだ。"
  },
  {
    "start": 9113848,
    "end": 9118256,
    "text": "これは、次のJSプロジェクトの中にある小さなサーバー・エンドポイントだ。"
  },
  {
    "start": 9118408,
    "end": 9123504,
    "text": "繰り返しますが、これらのAPIルート・ハンドラを次のJ'sプロジェクトのバックエンドとして使う必要はありません。"
  },
  {
    "start": 9123592,
    "end": 9127132,
    "text": "例えば、エクスプレス・バックエンドに接続することもできる。"
  },
  {
    "start": 9127236,
    "end": 9135292,
    "text": "というのも、大規模なプロジェクトでは、バックエンドを分離した方が便利なことが多いからだ。"
  },
  {
    "start": 9135396,
    "end": 9138932,
    "text": "小規模なプロジェクトでは、これらのAPIルート・ハンドラは素晴らしい。"
  },
  {
    "start": 9139036,
    "end": 9141940,
    "text": "さて、検索ページに戻ろう。"
  },
  {
    "start": 9142020,
    "end": 9144068,
    "text": "では、実際にこのデータをフェッチしてみよう。"
  },
  {
    "start": 9144204,
    "end": 9148640,
    "text": "さて、リアクト・アプリでクライアント・サイドからデータをフェッチする場合、それをステートに入れる必要がある。"
  },
  {
    "start": 9149540,
    "end": 9153260,
    "text": "一番上にクズ括弧でconstを作る。"
  },
  {
    "start": 9154200,
    "end": 9157328,
    "text": "最初の値は検索結果である。"
  },
  {
    "start": 9157424,
    "end": 9160740,
    "text": "これは検索結果を保存する状態である。"
  },
  {
    "start": 9161920,
    "end": 9176700,
    "text": "もし、これが何なのかわからないのであれば、私のマーン初心者コースをもう一度チェックしてほしい。"
  },
  {
    "start": 9177050,
    "end": 9194098,
    "text": "このページを開いたときにはまだ検索結果がないので、nullの値で初期化したい。しかし、typescriptにunsplashの画像の配列を期待していることを伝えたい。"
  },
  {
    "start": 9194194,
    "end": 9200230,
    "text": "日付の後に角括弧を追加し、ここで明示的に型を設定することができる。"
  },
  {
    "start": 9200810,
    "end": 9207904,
    "text": "これをunsplashの画像配列、角括弧、または初期値であるnullに設定したい。"
  },
  {
    "start": 9207992,
    "end": 9211992,
    "text": "縦棒を作り、2番目の型としてNULLを加える。"
  },
  {
    "start": 9212096,
    "end": 9216540,
    "text": "検索結果が常にunsplash画像配列またはnull型になるようになりました。"
  },
  {
    "start": 9216880,
    "end": 9222220,
    "text": "それから、リクエストの実行中に表示されるローディングインジケータのステートが必要です。"
  },
  {
    "start": 9222760,
    "end": 9245110,
    "text": "キャメルケースでは、検索結果のロードとゼータZの検索結果のロードという別の状態を作り、これをuse state falseで初期化する。falseはブーリアンなので、ブーリアン型はタイプスクリプトによって自動的に推測され、明示的に設定する必要はない。"
  },
  {
    "start": 9245650,
    "end": 9257070,
    "text": "そしてこの行を複製し、検索結果の読み込みがエラーになるように変更して、検索結果の読み込みがエラーになるように設定する。"
  },
  {
    "start": 9257840,
    "end": 9265496,
    "text": "その名の通り、フェッチリクエストに何か問題があり、代わりにエラーメッセージを表示したい場合、このステートはtrueに設定される。"
  },
  {
    "start": 9265608,
    "end": 9287312,
    "text": "このような小さなプロジェクトでは、読み込み状態や配列などの状態を自分たちで管理しても構わないが、本番アプリケーションでは、クライアント側のフェッチにSWRのようなライブラリを使うべきだ。このライブラリには、クライアント側のレスポンスの自動キャッシュ、自動競合状態防止、重複排除など、多くの機能が追加されている。"
  },
  {
    "start": 9287376,
    "end": 9299712,
    "text": "SWRは、next JSがサーバーサイドで行っていることの多くをクライアントサイドで行うもので、ここでは簡単のためにクライアントサイドのフェッチはクライアントサイドで行う。"
  },
  {
    "start": 9299816,
    "end": 9304784,
    "text": "私はYouTubeでSWRのチュートリアルを公開しています。"
  },
  {
    "start": 9304912,
    "end": 9306752,
    "text": "ただ、これをチェックしたいのならね。"
  },
  {
    "start": 9306896,
    "end": 9313516,
    "text": "そして、フォームを送信したときにアラート・ダイアログを表示する代わりに、データを取得して状態を管理したい。"
  },
  {
    "start": 9313688,
    "end": 9325560,
    "text": "新しい検索クエリを送信する場合、まず、既存の検索結果をnullに設定し、結果リストが再び空になるようにします。"
  },
  {
    "start": 9326820,
    "end": 9346650,
    "text": "前回のリクエストにエラーメッセージがあり、新しいリクエストを送信した場合、エラーメッセージのエントリーを削除したいので、エラーもfalseに戻します。"
  },
  {
    "start": 9347190,
    "end": 9351770,
    "text": "次に、先ほど設定したエンドポイントにフェッチ・リクエストを行う。"
  },
  {
    "start": 9352630,
    "end": 9373676,
    "text": "const response equals await fetch 私たちはこれをスラッシュAPIにしたい。ここにルートハンドラsearchを置き、フォルダの名前にし、検索クエリをURL検索パラメータとして送信しなければならないことを忘れない。"
  },
  {
    "start": 9373788,
    "end": 9382280,
    "text": "クエリー・イコールに疑問符を付け、入力フィールドに入力したクエリーを追加する。"
  },
  {
    "start": 9383020,
    "end": 9391918,
    "text": "クライアント・コードにはAPI認証情報を入れることができないので、バックエンドのルートを迂回する必要がある。"
  },
  {
    "start": 9392004,
    "end": 9394106,
    "text": "これは自分たちのバックエンドでしかできない。"
  },
  {
    "start": 9394218,
    "end": 9398914,
    "text": "unsplashAPIへの実際のリクエストは、私たちのサーバーで行わなければなりません。"
  },
  {
    "start": 9399042,
    "end": 9402098,
    "text": "そして、レスポンスから記事の値を取り出したい。"
  },
  {
    "start": 9402154,
    "end": 9408270,
    "text": "ここでは、unsplash画像の配列である検索結果を返すことを覚えておいてください。"
  },
  {
    "start": 9410250,
    "end": 9425980,
    "text": "responseの下に、unsplashの画像配列エントリ型となるconst imagesを作成し、これをweightを前につけて通常通りresponse JSONに代入します。"
  },
  {
    "start": 9427440,
    "end": 9436460,
    "text": "そうすれば、検索結果の状態をこの画像配列に設定するだけで、それらをUIに表示することができる。"
  },
  {
    "start": 9436880,
    "end": 9444592,
    "text": "さて、これは非同期リクエストであり、エラーを投げる可能性があるので、これをすべてtry catchブロックにまとめたい。"
  },
  {
    "start": 9444656,
    "end": 9446620,
    "text": "これをtryブロックに入れる。"
  },
  {
    "start": 9449330,
    "end": 9456390,
    "text": "catchブロックの中でエラーをロックしたいので、console dot errorを使い、ここにエラーを渡す。"
  },
  {
    "start": 9457530,
    "end": 9464510,
    "text": "エントリー・ワンは、検索結果のロードがエラーとなり、UIにエラー・メッセージを表示できるようにするためにtrueを指定することである。"
  },
  {
    "start": 9465210,
    "end": 9479556,
    "text": "finallyブロックでは、リクエストが成功したかどうかにかかわらず、検索結果の読み込みをfalseに戻して読み込みスピナーを非表示にします。"
  },
  {
    "start": 9479628,
    "end": 9482880,
    "text": "さて、これをUIにも反映させたい。"
  },
  {
    "start": 9483180,
    "end": 9498360,
    "text": "入力フォームの下にd flexというクラス名のdivを置き、フレックスボックスのフレックスカラムにして、すべての要素を下に並べたい。"
  },
  {
    "start": 9498660,
    "end": 9505900,
    "text": "ここに入れるときはいつでも、中央に水平に線を引き、align item centerとしたい。"
  },
  {
    "start": 9506560,
    "end": 9509980,
    "text": "ここには、ローディング・スピナーとエラー・メッセージを入れたい。"
  },
  {
    "start": 9510720,
    "end": 9517816,
    "text": "ここに中括弧のブロックを入れ、アマゾン・サイエンスへの検索結果の読み込みをチェックする。"
  },
  {
    "start": 9517928,
    "end": 9520584,
    "text": "これについては、私の初心者コースで説明した。"
  },
  {
    "start": 9520672,
    "end": 9522408,
    "text": "これは単なるリアクトの構文だ。"
  },
  {
    "start": 9522584,
    "end": 9529440,
    "text": "検索結果のローディングがtrueの場合、アニメーションの境界線を持つリアクトスピナーをレンダリングしたい。"
  },
  {
    "start": 9530980,
    "end": 9538732,
    "text": "エラーメッセージがある場合、これはクライアントコンポーネントなので、ここでもreactブートストラップコンポーネントを使うことができます。"
  },
  {
    "start": 9538836,
    "end": 9542588,
    "text": "以下では、検索結果の読み込みがエラーになっていることを確認する。"
  },
  {
    "start": 9542724,
    "end": 9550640,
    "text": "もしそうなら、段落の中に何か間違ったことを書いているテキストを表示したい。"
  },
  {
    "start": 9551420,
    "end": 9553320,
    "text": "もう一度お試しください。"
  },
  {
    "start": 9554230,
    "end": 9568730,
    "text": "もし、サーバーからレスポンスが返ってきて成功したが、そこに結果がない場合、レスポンスがない限り、レスポンスにはnullがセットされるというメッセージを表示したいですよね？"
  },
  {
    "start": 9569110,
    "end": 9574010,
    "text": "もし空のレスポンスが返ってきたら、これはもうnullではなく、空の配列になります。"
  },
  {
    "start": 9574470,
    "end": 9577490,
    "text": "検索結果を確認することができます。"
  },
  {
    "start": 9577830,
    "end": 9581050,
    "text": "そして、nullになる可能性があるので、セーブ・コール演算子を使う。"
  },
  {
    "start": 9581700,
    "end": 9594240,
    "text": "この配列の長さがゼロに等しい場合は、何も見つからなかったので別のクエリーを試してください、という別のテキストをレンダリングしたい。"
  },
  {
    "start": 9595580,
    "end": 9598764,
    "text": "では、その下に実際の検索結果をレンダリングしてみましょうか？"
  },
  {
    "start": 9598812,
    "end": 9603300,
    "text": "私はこれをブロックの外に置いた。"
  },
  {
    "start": 9603340,
    "end": 9606756,
    "text": "まず、検索結果がNULLでなくなっているかどうかをチェックする。"
  },
  {
    "start": 9606828,
    "end": 9608760,
    "text": "今回もこの大使館と一緒だ。"
  },
  {
    "start": 9610000,
    "end": 9614320,
    "text": "もしそうなら、検索結果をここにマッピングしたい。"
  },
  {
    "start": 9614480,
    "end": 9621536,
    "text": "というのも、ここに中括弧のブロックをもうひとつ入れられるからだ。"
  },
  {
    "start": 9621688,
    "end": 9625660,
    "text": "このような空のフラグメント要素がなければ機能しない。"
  },
  {
    "start": 9626800,
    "end": 9634168,
    "text": "ここでは、トピックのページで行ったのと同じように、検索結果を画像にマッピングしたい。"
  },
  {
    "start": 9634264,
    "end": 9639048,
    "text": "ただ、現時点では、サーバーから実際にレスポンスがあったときだけにしています。"
  },
  {
    "start": 9639224,
    "end": 9643900,
    "text": "ここでは検索結果をドットマップと呼ぶ。"
  },
  {
    "start": 9645000,
    "end": 9648440,
    "text": "再び、このマップ呼び出しで渡された各画像を取得する。"
  },
  {
    "start": 9648600,
    "end": 9655340,
    "text": "再び戻り値を括弧に書き直し、それぞれを次の画像にしたい。"
  },
  {
    "start": 9658080,
    "end": 9665020,
    "text": "SRZは、例によってイメージ・ドットURLの生である。"
  },
  {
    "start": 9665840,
    "end": 9673580,
    "text": "ここでも、トピックのページと同じように、幅と高さを250ピクセルにハードコードする。"
  },
  {
    "start": 9676080,
    "end": 9684500,
    "text": "再びaltをimage dot descriptionに設定し、ここでもキーを定義しなければならない。"
  },
  {
    "start": 9684800,
    "end": 9690060,
    "text": "この場合も、image dot URL's dot romにリセットする。"
  },
  {
    "start": 9692000,
    "end": 9701260,
    "text": "その場合、トピックのページで使ったのと同じクラス名を画像に使いたい。"
  },
  {
    "start": 9702360,
    "end": 9705344,
    "text": "これはトピックページモジュールの中に含まれている。"
  },
  {
    "start": 9705432,
    "end": 9711760,
    "text": "もちろん、このスタイルをappフォルダーの外にあるstylesフォルダーに入れて、両方の場所で使うこともできる。"
  },
  {
    "start": 9711880,
    "end": 9718296,
    "text": "このソースコードでは、各ページにCSSファイルを配置できることを明確にしておきたい。"
  },
  {
    "start": 9718408,
    "end": 9730216,
    "text": "代わりに、このCSSモジュールをコピー・ペーストして検索フォルダに貼り付け、名前を検索ページ・ドット・モジュール・ドット・CSSに変更する。"
  },
  {
    "start": 9730368,
    "end": 9732620,
    "text": "ここでは同じクラスを維持している。"
  },
  {
    "start": 9733400,
    "end": 9757200,
    "text": "検索ページでは、このCSSモジュールをインポートし、ドット・スラッシュ検索ページ・モジュールCSSからスタイルをインポートし、この下の画像クラス名styles imageでこのクラスを使用します。"
  },
  {
    "start": 9758100,
    "end": 9765520,
    "text": "そして、この画像タグをスラッシュと閉じアンカーブラケットで閉じ、この位置を正しく合わせます。"
  },
  {
    "start": 9766220,
    "end": 9768580,
    "text": "これを試す前にもうひとつ。"
  },
  {
    "start": 9768700,
    "end": 9775490,
    "text": "また、現在レスポンスをロードしている間はこのボタンを無効にし、連続して2回クリックできないようにしたい。"
  },
  {
    "start": 9775910,
    "end": 9782490,
    "text": "ボタンのdisabledプロパティを検索結果のローディングに設定します。"
  },
  {
    "start": 9783670,
    "end": 9785210,
    "text": "試してみよう。"
  },
  {
    "start": 9785910,
    "end": 9790918,
    "text": "例えばハンバーガー。"
  },
  {
    "start": 9791054,
    "end": 9793430,
    "text": "これをクリックすると、ボタンは無効になるはずだ。"
  },
  {
    "start": 9793470,
    "end": 9797090,
    "text": "進捗スピナーが表示され、結果のリストが表示されるはずだ。"
  },
  {
    "start": 9797730,
    "end": 9810450,
    "text": "このデータはクライアント・サイドでフェッチされ、JavaScriptでステートを使ってフェッチされる。"
  },
  {
    "start": 9810530,
    "end": 9812482,
    "text": "今日はハンバーガーにしようかな。"
  },
  {
    "start": 9812626,
    "end": 9822410,
    "text": "とにかく、いつものように、このページで起こっていることを説明するアラートメッセージをここに入れたいと思う。"
  },
  {
    "start": 9822530,
    "end": 9829942,
    "text": "このページはAPIクレデンシャルを漏らさないためにクライアントサイドでデータをフェッチし、リクエストは次のハンドラーに送られる。"
  },
  {
    "start": 9830046,
    "end": 9833094,
    "text": "これがサーバー上で実行されるバックエンド・ハンドラーだ。"
  },
  {
    "start": 9833262,
    "end": 9838374,
    "text": "このルートハンドラは、unsplash APIからデータを取得し、クライアントに返します。"
  },
  {
    "start": 9838502,
    "end": 9839758,
    "text": "もうひとつだけ。"
  },
  {
    "start": 9839894,
    "end": 9844250,
    "text": "ナビバーに別のエントリーを追加したい。"
  },
  {
    "start": 9844790,
    "end": 9856580,
    "text": "このようにドロップダウンの後ろに別のナビリンクを置きたい。"
  },
  {
    "start": 9857400,
    "end": 9859980,
    "text": "このメニューはこうなった。"
  },
  {
    "start": 9861160,
    "end": 9867136,
    "text": "これで、より新しいnext JS 13アプリ・ルーターにおけるさまざまなフェッチとキャッシュの戦略をすべて学んだことになる。"
  },
  {
    "start": 9867208,
    "end": 9871480,
    "text": "これであなたは、最新のネクストJ'sウェブサイトを構築する能力を身につけたことになる。"
  },
  {
    "start": 9871560,
    "end": 9874264,
    "text": "もうひとつ、ここで飛ばしたくないことが残っている。"
  },
  {
    "start": 9874312,
    "end": 9879736,
    "text": "私たちはこのプロジェクト全体を展開したいのですが、ただ展開するだけでなく、ソーシャルメディアの画像も追加します。"
  },
  {
    "start": 9879808,
    "end": 9886140,
    "text": "長方形の画像は、例えばツイッターやフェイスブックで当社のウェブサイトへのリンクを貼り付ける際に表示されます。"
  },
  {
    "start": 9886660,
    "end": 9892524,
    "text": "さて、ウェブサイトを構築する際、通常はソーシャルメディア用のプレビュー画像を掲載する。"
  },
  {
    "start": 9892572,
    "end": 9894636,
    "text": "基本的には、あなたのウェブサイトへのリンクを掲載します。"
  },
  {
    "start": 9894788,
    "end": 9898972,
    "text": "タイトルと説明文はメタデータ・タグで設定済みだ。"
  },
  {
    "start": 9899076,
    "end": 9900948,
    "text": "あなたもイメージを持ちたいでしょう？"
  },
  {
    "start": 9901044,
    "end": 9903276,
    "text": "リンクの見栄えが良くなるようにね。"
  },
  {
    "start": 9903348,
    "end": 9906540,
    "text": "このソーシャルメディアのプレビュー画像は私が作成した。"
  },
  {
    "start": 9906580,
    "end": 9909076,
    "text": "もう一度言うが、これは拡大したのでとても大きい。"
  },
  {
    "start": 9909188,
    "end": 9915568,
    "text": "実際のサイズはもっと小さいが、これは問題ではなく、ソーシャルメディアのプレビューにこの画像を使いたいのだ。"
  },
  {
    "start": 9915664,
    "end": 9921488,
    "text": "スタート地点プロジェクトをダウンロードしたのなら、この画像はすでにプロジェクトの中にあるはずだ。"
  },
  {
    "start": 9921624,
    "end": 9932600,
    "text": "そうでなければ、ビデオの説明にあるGitHubのリポジトリからダウンロードして、次のJのアプリ・ルーターでこれを使うのはとても簡単だ。"
  },
  {
    "start": 9932720,
    "end": 9940702,
    "text": "この画像をGitHubからダウンロードして、アプリのフォルダにドラッグ・アンド・ドロップすればいい。"
  },
  {
    "start": 9940856,
    "end": 9953490,
    "text": "もしこの画像がopen graph image pngという正確な名前を持っていれば、次のJSは自動的にこの画像を古いページディレクトリのソーシャルメディアプレビュー画像として使用する。"
  },
  {
    "start": 9953530,
    "end": 9963314,
    "text": "次のJSでは、headタグにOG画像のURLを渡して、これを手動で設定しなければならなかった。"
  },
  {
    "start": 9963442,
    "end": 9965858,
    "text": "新しいアプリ・ルーターでは、これが簡素化された。"
  },
  {
    "start": 9965994,
    "end": 9968514,
    "text": "正確な名前の画像が必要なのだ。"
  },
  {
    "start": 9968642,
    "end": 9982698,
    "text": "Fufアイコンの場合も同様で、アプリのフォルダに直接favicon icoファイルを置くだけで、次のJ'sは自動的にそれをFufアイコンとして使用します。"
  },
  {
    "start": 9982754,
    "end": 9988226,
    "text": "また、これを別のファフィコンに置き換えることも可能で、そのためのさまざまなジェネレーターがオンラインで入手できる。"
  },
  {
    "start": 9988298,
    "end": 9994146,
    "text": "fav アイコン・ジェネレーターで検索すれば、好きなグラフィックから小さなアイコンを作ることができる。"
  },
  {
    "start": 9994258,
    "end": 9999670,
    "text": "さて、このプロジェクトをデプロイする前に、ホームページにテキストを追加したい。"
  },
  {
    "start": 10000130,
    "end": 10003930,
    "text": "このプレースホルダーdivの代わりに、ここにコピーペーストする。"
  },
  {
    "start": 10003970,
    "end": 10017670,
    "text": "GitHubのリンクからこのレイアウト全体をコピーペーストして、componentsフォルダからalertをインポートしてください。"
  },
  {
    "start": 10018330,
    "end": 10025730,
    "text": "コンポーネントにスラッシュbootstrapを追加し、ここにアラートを追加する。"
  },
  {
    "start": 10026390,
    "end": 10032262,
    "text": "トップページがもう少し見やすくなるように、また、このプロジェクトについての説明をここに追加した。"
  },
  {
    "start": 10032366,
    "end": 10035486,
    "text": "であれば、このプロジェクトをVerzelにデプロイするのはとても簡単だ。"
  },
  {
    "start": 10035598,
    "end": 10038438,
    "text": "これをGitHubのリポジトリに公開したい。"
  },
  {
    "start": 10038494,
    "end": 10048828,
    "text": "これはGitHubのプライベート・リポジトリーにすることができ、サイドバーのソース・コントロールからGitHubのリポジトリーを初期化して、そこにプロジェクトをプッシュすることができる。"
  },
  {
    "start": 10049014,
    "end": 10054056,
    "text": "プロジェクト全体をGitHubにプッシュし、vesell.comにアクセスする。"
  },
  {
    "start": 10054208,
    "end": 10059056,
    "text": "ここでは、プロジェクトと同じ GitHub アカウントを作成します。"
  },
  {
    "start": 10059128,
    "end": 10068536,
    "text": "すでにVeselアカウントをお持ちで、GitHubアカウントに接続していない場合は、設定からログイン接続を更新してGitHubアカウントに接続することもできます。"
  },
  {
    "start": 10068728,
    "end": 10072808,
    "text": "そしてダッシュボードに入り、ここで新しいプロジェクトを追加できる。"
  },
  {
    "start": 10072944,
    "end": 10074202,
    "text": "これはとてもシンプルなことだ。"
  },
  {
    "start": 10074296,
    "end": 10076934,
    "text": "GitHub アカウントにあるすべてのプロジェクトが表示されます。"
  },
  {
    "start": 10077062,
    "end": 10081278,
    "text": "また、プライベートでは、次のJのイメージギャラリーがある。"
  },
  {
    "start": 10081374,
    "end": 10082810,
    "text": "これを輸入することができる。"
  },
  {
    "start": 10083270,
    "end": 10086158,
    "text": "このプロジェクトに名前をつけて、そのままにしておくこともできる。"
  },
  {
    "start": 10086254,
    "end": 10089770,
    "text": "これはネクストJのプロジェクトだと自動的に認識する。"
  },
  {
    "start": 10090110,
    "end": 10092890,
    "text": "ルート・ディレクトリはそのままにしておく。"
  },
  {
    "start": 10093190,
    "end": 10098450,
    "text": "ここでは何も変更する必要はないが、環境変数を設定したいんだよね？"
  },
  {
    "start": 10098870,
    "end": 10101770,
    "text": "unsplashのキーが必要だからだ。"
  },
  {
    "start": 10102660,
    "end": 10107320,
    "text": "同じキー名を使い、この値をここに貼り付ける。"
  },
  {
    "start": 10108660,
    "end": 10126428,
    "text": "Unsplashのアクセスキーを入力し、[追加]をクリックすると、ワンクリックでプロジェクトをデプロイできます。"
  },
  {
    "start": 10126564,
    "end": 10128188,
    "text": "今は少し待たなければならない。"
  },
  {
    "start": 10128244,
    "end": 10130642,
    "text": "おそらく1分もかからないだろう。"
  },
  {
    "start": 10130796,
    "end": 10136214,
    "text": "NPM run buildを実行したときと同じように、プロジェクトがビルドされる。"
  },
  {
    "start": 10136342,
    "end": 10141062,
    "text": "静的にキャッシュしたいデータをフェッチし、すべてのページを生成する。"
  },
  {
    "start": 10141206,
    "end": 10151486,
    "text": "ログインが完了すると、紙吹雪が舞い、おめでとうございます、あなたのプロジェクトはデプロイされました、と表示されます。"
  },
  {
    "start": 10151598,
    "end": 10156530,
    "text": "このウェブサイトを開くためのプレビューURLがあります。"
  },
  {
    "start": 10156830,
    "end": 10163358,
    "text": "これはVerzelのURLだが、実際にインターネット上でこのURLにアクセスすることができるので、試してみるのもいいだろう。"
  },
  {
    "start": 10163454,
    "end": 10167598,
    "text": "HTTPや必要なものはすべて備えているし、他の人たちもこれを使うことができる。"
  },
  {
    "start": 10167734,
    "end": 10170302,
    "text": "今、私たちのソーシャルメディアのイメージも機能するはずだ。"
  },
  {
    "start": 10170366,
    "end": 10182296,
    "text": "URLをコピーして、ソーシャルシェアプレビューに貼り付けましょう。ソーシャルシェアプレビューは、ソーシャルメディア上であなたのウェブサイトがどのように見えるかをチェックするのに使えるウェブサイトです。"
  },
  {
    "start": 10182398,
    "end": 10189308,
    "text": "このベゼルのURLをここに貼り付けると、ソーシャルメディアのプレビュー画像が表示されるはずだ。"
  },
  {
    "start": 10189404,
    "end": 10190364,
    "text": "これだ。"
  },
  {
    "start": 10190492,
    "end": 10194836,
    "text": "これが設定したメタデータのタイトルで、これが説明文だ。"
  },
  {
    "start": 10195028,
    "end": 10204004,
    "text": "スラッシュ・スタティックで別のタイトルをつけてみることもできる。"
  },
  {
    "start": 10204092,
    "end": 10206660,
    "text": "次のjs画像ギャラリーの静的フェッチ。"
  },
  {
    "start": 10206780,
    "end": 10207480,
    "text": "いいね。"
  },
  {
    "start": 10207830,
    "end": 10211010,
    "text": "さて、我々のウェブサイトがまだ機能しているかどうかチェックしてみよう。"
  },
  {
    "start": 10211550,
    "end": 10216650,
    "text": "ここで静止画像を手に入れよう。"
  },
  {
    "start": 10216990,
    "end": 10220606,
    "text": "ページを更新すると、また同じ画像が表示される。"
  },
  {
    "start": 10220798,
    "end": 10222614,
    "text": "プロフィールのページに行こう。"
  },
  {
    "start": 10222742,
    "end": 10226414,
    "text": "ここでは、姓と名のダイナミック・データを見ることができる。"
  },
  {
    "start": 10226502,
    "end": 10236204,
    "text": "ここでデータをフェッチしているにもかかわらず、このページがこれほど速く開くのは、次のJSが、これらのリンクがページに表示された場合、実際に先に進んでリフェッチするからである。"
  },
  {
    "start": 10236332,
    "end": 10241540,
    "text": "これは、次のjsで箱から出して使える、もうひとつの素晴らしい最適化だ。"
  },
  {
    "start": 10241700,
    "end": 10244404,
    "text": "よし、木にぶら下がった男でも何でもいい。"
  },
  {
    "start": 10244492,
    "end": 10250652,
    "text": "このページをリフレッシュすれば、新しい画像と静的再生のインクリメントが得られるはずだ。"
  },
  {
    "start": 10250756,
    "end": 10254080,
    "text": "他のページも同様に機能するはずだ。"
  },
  {
    "start": 10254700,
    "end": 10255892,
    "text": "私たちは新しいイメージを得る。"
  },
  {
    "start": 10255956,
    "end": 10259160,
    "text": "同じ画像をリフレッシュ同じ画像をリフレッシュ"
  },
  {
    "start": 10259700,
    "end": 10262720,
    "text": "15秒待つと、新しい画像が表示される。"
  },
  {
    "start": 10264590,
    "end": 10267022,
    "text": "トピックページも同様に機能する。"
  },
  {
    "start": 10267126,
    "end": 10269374,
    "text": "プリレンダリングは本当にクールだ。"
  },
  {
    "start": 10269542,
    "end": 10273490,
    "text": "もう一度、サルを探してみよう。"
  },
  {
    "start": 10274350,
    "end": 10276150,
    "text": "かわいい猿だ。"
  },
  {
    "start": 10276270,
    "end": 10294002,
    "text": "つまり、プロジェクトに変更を加え、その変更をGitHubのメインブランチにプッシュすると、Vesellが自動的にその変更を再デプロイしてくれるのだ。"
  },
  {
    "start": 10294106,
    "end": 10299350,
    "text": "手動で行う必要はありません。プロジェクトのメインブランチに変更をプッシュするだけです。"
  },
  {
    "start": 10300210,
    "end": 10313610,
    "text": "この無料next J'sコースを楽しんでいただけたら幸いです。もし楽しんでいただけたなら、このビデオに「いいね！」を残してください。まだチャンネル登録をしていない方は、ぜひ登録してください。"
  },
  {
    "start": 10313730,
    "end": 10317498,
    "text": "また、次のJSの上級コースもありますので、そちらもチェックしてみてください。"
  },
  {
    "start": 10317554,
    "end": 10322014,
    "text": "こちらは有料だが、そちらではより高度な機能を備えた、より大規模なプロジェクトを構築した。"
  },
  {
    "start": 10322102,
    "end": 10326270,
    "text": "このコースは、codinginflow.com next jsで見つけることができる。"
  },
  {
    "start": 10326390,
    "end": 10329054,
    "text": "このリンクは、下のビデオの説明にも載せておく。"
  },
  {
    "start": 10329182,
    "end": 10333702,
    "text": "また、定期的にウェブ開発のヒントをニュースレターに送り始めた。"
  },
  {
    "start": 10333806,
    "end": 10338406,
    "text": "私は1週間から2週間に1回メールを送り、そこにいくつかのヒントを書いている。"
  },
  {
    "start": 10338438,
    "end": 10345654,
    "text": "例えば、前回のニュースレターでは、次のJSページディレクトリとアプリディレクトリの間で私が発見したことをまとめた。"
  },
  {
    "start": 10345742,
    "end": 10348014,
    "text": "このニュースレターにご登録いただければ幸いです。"
  },
  {
    "start": 10348062,
    "end": 10352184,
    "text": "codingandflow.comスラッシュ・ニュースレターでご覧いただけます。"
  },
  {
    "start": 10352312,
    "end": 10358560,
    "text": "また、ビデオの説明にもリンクを貼ります。"
  },
  {
    "start": 10358640,
    "end": 10359504,
    "text": "ハッピーなコーディングだ。"
  },
  {
    "start": 10359592,
    "end": 10359920,
    "text": "気をつけて。"
  }
]