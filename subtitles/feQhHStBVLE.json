[
  {
    "start": 640,
    "end": 4000,
    "text": "皆さん、こんにちは！ Apps from Scratchへようこそ。"
  },
  {
    "start": 4000,
    "end": 11200,
    "text": "本日は、YouTube APIとのやり取り、データのページ分割、動画の再生方法について学びます。"
  },
  {
    "start": 11200,
    "end": 19400,
    "text": "私たちのアプリでは、ユーザーのプロフィール画像、名前、サブカウント、最新の動画リストを表示しています。"
  },
  {
    "start": 19400,
    "end": 26480,
    "text": "リストの一番下までスクロールすると、YouTube APIから次の動画のバッチをリクエストし、動画のリストを更新する。"
  },
  {
    "start": 26480,
    "end": 31600,
    "text": "セルをタップすると新しい画面が表示され、ビデオが再生される。"
  },
  {
    "start": 31600,
    "end": 35840,
    "text": "初めての方は、「いいね！」と「購読」をお願いします。"
  },
  {
    "start": 35840,
    "end": 44680,
    "text": "その前に、Flutterで美しいUIをステップ・バイ・ステップで構築することに焦点を当てた新しいコースをUdemyで開始したことをお知らせします。"
  },
  {
    "start": 44680,
    "end": 49160,
    "text": "私のYouTubeチャンネルで配信している「Apps from Scratch」シリーズがお好きなら、このコースもきっと気に入るはずだ。"
  },
  {
    "start": 49160,
    "end": 57240,
    "text": "このコースでは、フードデリバリーアプリ、格安アプリ、ソーシャルメディアアプリのUIを構築し、スキルを向上させます。"
  },
  {
    "start": 57240,
    "end": 59022,
    "text": "この新しいコースには本当に多くのことを考えた。"
  },
  {
    "start": 59022,
    "end": 61120,
    "text": "ぜひチェックしてほしい。"
  },
  {
    "start": 61120,
    "end": 64420,
    "text": "クーポンコードのリンクは下の説明文に書いておく。"
  },
  {
    "start": 64420,
    "end": 67720,
    "text": "始めよう。"
  },
  {
    "start": 67720,
    "end": 75720,
    "text": "最初にすることは、pubspec.yamlファイルに飛び込んで、依存関係のHTTPとYouTubePlayerFlutterを追加することだ。"
  },
  {
    "start": 75720,
    "end": 86280,
    "text": "YouTubePlayerFlutterプラグインはYouTubeの公式iframeプレーヤーAPIを使ってYouTubeの動画を再生できる。"
  },
  {
    "start": 86280,
    "end": 98400,
    "text": "iOSデバイスのYouTubePlayerFlutterプラグインで行う唯一の設定は、info.plistファイルにio.flutter.embedded-views-previewというキーを追加し、値をyesに設定することだ。"
  },
  {
    "start": 98400,
    "end": 102960,
    "text": "一方、アンドロイド端末はセットアップが不要だ。"
  },
  {
    "start": 102960,
    "end": 109080,
    "text": "YouTubeData APIとやりとりするには、HTTPリクエストを認証するためのAPIキーが必要です。"
  },
  {
    "start": 109480,
    "end": 120240,
    "text": "console.developers.google.comにアクセスし、左上のProjectボタンを選択し、New Projectをクリックします。"
  },
  {
    "start": 120240,
    "end": 127320,
    "text": "プロジェクト名をYouTube APIとし、Createを選択する。"
  },
  {
    "start": 127320,
    "end": 140120,
    "text": "プロジェクトがセットアップされたら、「Go to APIs Overview」を開き、「Enable APIs and Services」を選択する。"
  },
  {
    "start": 140120,
    "end": 149840,
    "text": "ここでYouTubeを検索し、YouTubeDataAPIV3を選択する。"
  },
  {
    "start": 149840,
    "end": 155680,
    "text": "Enable]をクリックし、[Create Credentials]をクリックします。"
  },
  {
    "start": 155680,
    "end": 160880,
    "text": "ここではYouTubeDataAPIV3を選択しよう。"
  },
  {
    "start": 160880,
    "end": 165519,
    "text": "iOSまたはAndroidのいずれかを選択し、パブリックデータを選択する。"
  },
  {
    "start": 165519,
    "end": 170720,
    "text": "What Credentials Do I Needをクリックすると、APIキーが表示される。"
  },
  {
    "start": 170720,
    "end": 176079,
    "text": "これを選択してコピーし、さらに「キーの制限」をクリックする。"
  },
  {
    "start": 176079,
    "end": 181519,
    "text": "ここで下にスクロールし、「キーの制限」を選択する。"
  },
  {
    "start": 181519,
    "end": 188320,
    "text": "APIを選択し、YouTubeDataAPIにチェックを入れ、Saveを押す。"
  },
  {
    "start": 188320,
    "end": 196720,
    "text": "IDEに戻って、「Utilities」という新しいフォルダと、「Keys.dart」という新しいファイルを作りましょう。"
  },
  {
    "start": 196720,
    "end": 204079,
    "text": "Keys.dart内でAPIキー定数を作成し、先ほどコピーしたAPIキーと等しい値に設定する。"
  },
  {
    "start": 204079,
    "end": 213280,
    "text": "プロジェクトをGitHubにプッシュする前に、Keys.dartファイルをプロジェクトの.gitignoreファイルに追加することがとても重要です。"
  },
  {
    "start": 213280,
    "end": 222960,
    "text": "Keys.dartファイルを右クリックし、相対パスのコピーを選択し、.gitignoreに貼り付けることでこれを行うことができます。"
  },
  {
    "start": 222960,
    "end": 228080,
    "text": "プロジェクトをGitHubに追加する際、Keys.dartファイルはインクルードされません。"
  },
  {
    "start": 228080,
    "end": 237040,
    "text": "libディレクトリの下にModelsという新しいフォルダを作り、その中にChannelModel.dartを作る。"
  },
  {
    "start": 237040,
    "end": 249240,
    "text": "チャンネルモデルは8つの異なるプロパティで構成され、APIから受け取ったデコードされたJSONデータを渡すと、チャンネルのインスタンスを返すファクトリーchannel.fromMapメソッドを持っています。"
  },
  {
    "start": 249240,
    "end": 255760,
    "text": "fromMap関数のパースとJSONデータを比較すると、データからどのように値を取得しているかがよくわかる。"
  },
  {
    "start": 255760,
    "end": 267680,
    "text": "例えば、プロフィール画像のURLを取得するには、「スニペット」→「サムネイル」→「デフォルト」→「URL」と進み、文字列としてURLを返す。"
  },
  {
    "start": 267680,
    "end": 277640,
    "text": "UploadPlaylistIdについては、ContentDetails、RelatedPlaylists、Uploadsの順に進み、PlaylistIdを文字列として返します。"
  },
  {
    "start": 277640,
    "end": 281920,
    "text": "次にVideoModel.dartを作ってみよう。"
  },
  {
    "start": 281920,
    "end": 289200,
    "text": "VideoModelは4つの異なるプロパティを持ち、ChannelModelと同様にfactoryのfromMapメソッドを持つ。"
  },
  {
    "start": 289200,
    "end": 296720,
    "text": "デコードしたJSONデータを渡し、VideoId、VideoTitle、Thumbnail、ChannelTitleの値を取得します。"
  },
  {
    "start": 296760,
    "end": 304600,
    "text": "VideoIdを取得したい場合は、ResourceIdからVideoIdに入り、VideoのIDを文字列として返します。"
  },
  {
    "start": 304600,
    "end": 311800,
    "text": "ChannelModel.dartに戻って、VideoModel.dartをインポートして、Videosリストがエラーにならないようにしてください。"
  },
  {
    "start": 311800,
    "end": 318600,
    "text": "次に、ServicesフォルダとAPIService.dartファイルを作成します。"
  },
  {
    "start": 318600,
    "end": 323240,
    "text": "ファイルの一番上に、これらのインポートがすべてあることを確認してください。"
  },
  {
    "start": 323240,
    "end": 329600,
    "text": "APIServiceは2つのプライベート変数、BaseUrlとNextPageTokenを持ちます。"
  },
  {
    "start": 329600,
    "end": 333600,
    "text": "BaseUrlは、データをリクエストするURLの最初の部分である。"
  },
  {
    "start": 333600,
    "end": 337449,
    "text": "NextPageToken には、次の動画のバッチを識別するための文字列値が格納されます。"
  },
  {
    "start": 337449,
    "end": 339560,
    "text": "データをページ分割するとき。"
  },
  {
    "start": 339560,
    "end": 346506,
    "text": "アプリのライフタイムを通してNextPageTokenを追跡するために、APIServiceクラスをシングルトンにします、"
  },
  {
    "start": 346506,
    "end": 357920,
    "text": "というメソッドを定義し、apiservice.underscoreInstantiate と等しい静的な最終インスタンス変数を作成します。"
  },
  {
    "start": 357920,
    "end": 369280,
    "text": "データを取得する関数を書く前にYouTube APIを調べたい場合は、developers.google.com.youtube.v3.docsに行けばいい。"
  },
  {
    "start": 369280,
    "end": 374740,
    "text": "ChannelsとPlaylistItemsのエンドポイントからデータをフェッチします。"
  },
  {
    "start": 374740,
    "end": 382440,
    "text": "最初に書く関数はFetchChannelで、これはChannelIdを受け取り、非同期なので未来のChannelを返す。"
  },
  {
    "start": 382440,
    "end": 389280,
    "text": "上で定義したBaseUrlからなるURIを作成し、ヒットさせたいChannelエンドポイントを指定する。"
  },
  {
    "start": 389280,
    "end": 396640,
    "text": "パラメータは、スニペット、コンテンツの詳細、統計情報など、APIから受け取りたいデータを指定します。"
  },
  {
    "start": 396640,
    "end": 403120,
    "text": "これは、表示したいチャンネルのIDと、GETリクエストを認証するためのAPIキーを含んでいます。"
  },
  {
    "start": 403120,
    "end": 409000,
    "text": "ヘッダー変数の内容は、GETリクエストがJSONオブジェクトを返すことを保証する。"
  },
  {
    "start": 409000,
    "end": 416000,
    "text": "GETリクエストのレスポンスを得るには、HTTP.GETを待ち、URIとヘッダーを渡す。"
  },
  {
    "start": 416000,
    "end": 422080,
    "text": "次に、レスポンスのステータスコードが200かどうかをチェックする。"
  },
  {
    "start": 422080,
    "end": 430760,
    "text": "レスポンスのボディをデコードし、アイテムリストの最初の値をJSONに格納する。"
  },
  {
    "start": 430760,
    "end": 439756,
    "text": "ファクトリー・メソッドを使ってマップをChannelオブジェクトに変換した後、FetchVideosFromPlaylistと呼ばれる次の関数を使って、Channelのアップロードされた動画の最初のバッチをフェッチする、"
  },
  {
    "start": 439756,
    "end": 444360,
    "text": "動画をChannelのvideosプロパティに割り当て、Channelを返す。"
  },
  {
    "start": 444360,
    "end": 452240,
    "text": "レスポンスが失敗して200以外のステータスコードを返した場合は、レスポンスのボディをデコードしてエラーメッセージを投げる。"
  },
  {
    "start": 452240,
    "end": 458280,
    "text": "FetchVideosFromPlaylist 関数は、アップロードされた動画のプレイリスト ID を受け取ります。"
  },
  {
    "start": 458280,
    "end": 464360,
    "text": "FetchChannel関数と同じように、パラメータ、URI、ヘッダーを定義する。"
  },
  {
    "start": 464360,
    "end": 469040,
    "text": "パラメータとしては、プレイリストIDのスニペットデータのみを要求する。"
  },
  {
    "start": 469040,
    "end": 476240,
    "text": "各リクエストで返される動画の最大数を 8 に設定し、ページ トークンをアプリの現在の nextPageToken に設定します。"
  },
  {
    "start": 476240,
    "end": 480680,
    "text": "私たちのURIでは、プレイリスト・アイテムのエンドポイントをヒットしている。"
  },
  {
    "start": 480680,
    "end": 488940,
    "text": "getリクエストからのレスポンスを受け取ったら、リクエストが成功したかどうかをチェックし、レスポンスのボディをJSONオブジェクトにデコードする。"
  },
  {
    "start": 488940,
    "end": 497320,
    "text": "nextPageTokenを保存し、もしnextPageTokenが存在しないかNULLであれば、nextPageTokenを空文字列に設定する。"
  },
  {
    "start": 497320,
    "end": 503080,
    "text": "データ項目にあるJSONビデオオブジェクトのリストを変数videosJSONに格納する。"
  },
  {
    "start": 503080,
    "end": 511200,
    "text": "次に、videosJSONを繰り返し処理し、各JSONスニペットをvideosオブジェクトに変換し、videosリストに追加して返す。"
  },
  {
    "start": 511200,
    "end": 520360,
    "text": "レスポンスが失敗して200以外のステータスコードを返した場合は、レスポンスのボディをデコードしてエラーメッセージを投げます。"
  },
  {
    "start": 520360,
    "end": 524159,
    "text": "これで、データを表示するホーム画面を作る準備ができた。"
  },
  {
    "start": 524159,
    "end": 529120,
    "text": "screensフォルダを作り、homescreen.dartを作成しよう。"
  },
  {
    "start": 529120,
    "end": 535719,
    "text": "homescreen.dartの中で、ステートフルウィジェットのhomescreenを作成し、雛形を返します。"
  },
  {
    "start": 535719,
    "end": 548319,
    "text": "main.dartに戻って、定型的なコードをすべて削除し、デバッグ・バナーを削除し、アプリの原色をcolors.redに変更し、ホームをhomescreenに設定する。"
  },
  {
    "start": 548319,
    "end": 551880,
    "text": "homescreen.dartには2つのインスタンス変数がある。"
  },
  {
    "start": 551880,
    "end": 558320,
    "text": "1つ目はchannel、2つ目はisLoadingで、ページネーション時に使用する。"
  },
  {
    "start": 558320,
    "end": 563280,
    "text": "initState関数を追加し、非同期関数initChannelを呼び出してみよう。"
  },
  {
    "start": 563280,
    "end": 569860,
    "text": "initChannelはチャンネルIDに基づいてチャンネルをフェッチし、ホームスクリーンのチャンネル変数の状態をセットする。"
  },
  {
    "start": 569860,
    "end": 577720,
    "text": "私のチャンネルIDは、私のチャンネルにアクセスし、チャンネルのフォワードスラッシュの後の文字の流れをコピーすることで見つけることができます。"
  },
  {
    "start": 577720,
    "end": 583360,
    "text": "ビルド・メソッドには、YouTubeチャンネルというタイトルのアプリ・バーを含む雛形がある。"
  },
  {
    "start": 583360,
    "end": 590580,
    "text": "雛形の本体には、アイテム数が 1 に等しい ListViewBuilder と、チャンネルの動画リストの動画数を指定します。"
  },
  {
    "start": 590580,
    "end": 594440,
    "text": "チャンネル情報にはもう一つ項目が必要なので、1を加える。"
  },
  {
    "start": 594440,
    "end": 598520,
    "text": "インデックスが 0 の場合、関数 buildProfileInfo を返します。"
  },
  {
    "start": 598520,
    "end": 607000,
    "text": "そうでない場合は、channel.videosのindexマイナス1から動画を取得し、buildVideo関数に渡します。"
  },
  {
    "start": 607000,
    "end": 610480,
    "text": "initChannelの下にbuildProfileInfoを書こう。"
  },
  {
    "start": 610480,
    "end": 615680,
    "text": "これは、コンテナのマージン、パディング、高さ、ボックスシャドウを返す。"
  },
  {
    "start": 615680,
    "end": 626360,
    "text": "コンテナの子ウィジェットは、チャンネルのプロフィール画像をロードするサークルアバター、幅12.0のサイズボックス、2つのテキストウィジェットを持つ拡張カラムウィジェットを持つ行ウィジェットです。"
  },
  {
    "start": 626360,
    "end": 630576,
    "text": "チャンネルタイトルと購読者数のテキストウィジェットは、プロパティのoverflowを持っています。"
  },
  {
    "start": 630576,
    "end": 635320,
    "text": "textOverflow.ellipsisは、非常に長いテキストが画面外に出るのを防ぐ。"
  },
  {
    "start": 635320,
    "end": 641160,
    "text": "buildVideo メソッドは動画を取り込み、buildProfileInfo と同様のプロパティを持つコンテナを返します。"
  },
  {
    "start": 641160,
    "end": 646940,
    "text": "コンテナの子は、動画のサムネイル画像とタイトル・テキストを表示する行ウィジェットです。"
  },
  {
    "start": 646940,
    "end": 652280,
    "text": "保存を押してアプリを再起動すると、チャンネルがNULLであるというエラーが点滅することに気づくかもしれません。"
  },
  {
    "start": 652280,
    "end": 658960,
    "text": "これは、非同期のinitChannel関数がチャンネル変数の状態を設定する前に、ビルド・メソッドが短時間実行されるためだ。"
  },
  {
    "start": 658960,
    "end": 664100,
    "text": "この問題は、scaffold本体の冒頭でchannelがnullと等しくないかどうかをチェックすることで解決できる。"
  },
  {
    "start": 664100,
    "end": 667780,
    "text": "チャンネルがNULLでなければ、ListViewBuilderをレンダリングする。"
  },
  {
    "start": 667780,
    "end": 672460,
    "text": "そうでない場合は、中央に赤い円形の進行状況を表示する。"
  },
  {
    "start": 672460,
    "end": 680300,
    "text": "アプリにスクロールページネーションを追加するために、NotificationListenerスクロール通知でListViewBuilderをラップします。"
  },
  {
    "start": 680300,
    "end": 685040,
    "text": "onNotification関数の中に、3つのことをチェックするif文がある。"
  },
  {
    "start": 685040,
    "end": 688100,
    "text": "1つ目は、まだビデオをロードしていない場合だ。"
  },
  {
    "start": 688100,
    "end": 695180,
    "text": "もう1つは、現在チャンネルの動画リストにある動画の数が、チャンネルが持つ動画の総数と等しくない場合です。"
  },
  {
    "start": 695180,
    "end": 701140,
    "text": "3つ目は、onNotificationのスクロール詳細を使用して、ListViewの一番下にいるかどうかをチェックします。"
  },
  {
    "start": 701140,
    "end": 705620,
    "text": "loadMoreVideos関数を呼び出し、falseを返す。"
  },
  {
    "start": 705620,
    "end": 710660,
    "text": "ビルド・メソッドのすぐ上に、非同期関数loadMoreVideosを作成しよう。"
  },
  {
    "start": 710660,
    "end": 716260,
    "text": "isLoadingをtrueに設定するのは、より多くの動画を何度も取得しないようにするためです。"
  },
  {
    "start": 716260,
    "end": 727300,
    "text": "次のバッチを取得したら、現在のチャンネルの動画リストと新しいバッチを結合し、setStateでチャンネルの動画の状態を更新して、アプリのUIを更新します。"
  },
  {
    "start": 727300,
    "end": 729071,
    "text": "そしてisLoadingをfalseに戻す。"
  },
  {
    "start": 729071,
    "end": 735660,
    "text": "クリックすると、リストの一番下まで来たときに、さらにビデオを読み込むことができます。"
  },
  {
    "start": 735660,
    "end": 739780,
    "text": "次に、videoscreen.dartをscreensフォルダに追加します。"
  },
  {
    "start": 739780,
    "end": 746740,
    "text": "これはvideoscreenというステートフルなウィジェットで、最終的にidという文字列を受け取ります。"
  },
  {
    "start": 746740,
    "end": 752100,
    "text": "ファイルの一番上にあるmaterial.dartとyoutubePlayer flutterパッケージを忘れずにインポートしてください。"
  },
  {
    "start": 752100,
    "end": 759540,
    "text": "videoScreenState クラスには、youtubePlayerController 型のコントローラがあり、initState メソッド内でインスタンス化します。"
  },
  {
    "start": 759540,
    "end": 764700,
    "text": "ビデオプレーヤーをミュートしないように設定し、ビデオを読み込んだら自動再生するようにします。"
  },
  {
    "start": 764700,
    "end": 769380,
    "text": "ビルド・メソッドの内部にはアプリ・バーがあり、戻るボタンでホーム画面に戻ることができる。"
  },
  {
    "start": 769380,
    "end": 775140,
    "text": "雛形の本体には、動画を表示するyoutubePlayerウィジェットが含まれています。"
  },
  {
    "start": 775140,
    "end": 780220,
    "text": "homeScreen.dartでは、ビデオ・コンテナをタップしたときにビデオ・スクリーンに移動するようにしています。"
  },
  {
    "start": 780220,
    "end": 792939,
    "text": "buildVideoメソッドでコンテナをジェスチャ検出器でラップし、onTap関数でnavigator.pushを使用してビデオIDをvideoscreenに渡します。"
  },
  {
    "start": 792939,
    "end": 798180,
    "text": "ビデオをタップすると、ビデオスクリーンが表示され、ビデオが自動再生される。"
  },
  {
    "start": 798180,
    "end": 802000,
    "text": "これでYouTube APIとビデオ・プレーヤー・アプリが完成した。"
  },
  {
    "start": 802000,
    "end": 808160,
    "text": "いつものように、「いいね！」を残すこと、購読すること、このビデオを共有すること、GitHubでリポジトリを立ち上げることを忘れないでほしい。"
  },
  {
    "start": 808160,
    "end": 810850,
    "text": "私の新しいFlutter UI Udemyコースをチェックするのをお忘れなく。"
  },
  {
    "start": 810850,
    "end": 814760,
    "text": "UIスキルを向上させたい方は、また次回。"
  }
]