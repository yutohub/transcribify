[
  {
    "start": 570,
    "end": 8602,
    "text": "このビデオでは、NanoGBTと、NanoGBTを使ってソングライターを構築するための独自のデータ・セットについて説明します。"
  },
  {
    "start": 8746,
    "end": 17914,
    "text": "今朝、アンドレ・カパルティの伝説的なビデオを見ていたからだ。"
  },
  {
    "start": 18042,
    "end": 20350,
    "text": "コードでゼロからGPTを構築してみよう。"
  },
  {
    "start": 20420,
    "end": 21326,
    "text": "スペルダウン。"
  },
  {
    "start": 21508,
    "end": 23374,
    "text": "とても素晴らしい映像だ。"
  },
  {
    "start": 23492,
    "end": 31858,
    "text": "彼は基本的に、ゼロから数百行のコードでGPTモデル全体を構築した。"
  },
  {
    "start": 31954,
    "end": 36850,
    "text": "その後、彼はすべてのコードをNanogbTというリポジトリに整理した。"
  },
  {
    "start": 36930,
    "end": 40842,
    "text": "今日はビデオを見たばかりなので、試してみたいと思います。"
  },
  {
    "start": 40896,
    "end": 41846,
    "text": "とても興奮している。"
  },
  {
    "start": 41958,
    "end": 44138,
    "text": "さて、このレポを一緒に見てみよう。"
  },
  {
    "start": 44224,
    "end": 50686,
    "text": "このリポジトリは、最初にいくつかの依存関係をインストールする必要があります。"
  },
  {
    "start": 50868,
    "end": 53230,
    "text": "なるほど、いくつか例がある。"
  },
  {
    "start": 53890,
    "end": 55760,
    "text": "これから一緒に見ていこう。"
  },
  {
    "start": 56370,
    "end": 63314,
    "text": "最初の例は、シェイクスピア・テキストを対象としたGPTモデルの構築である。"
  },
  {
    "start": 63512,
    "end": 71534,
    "text": "最初のステップは、シェイクスピアデータを検証用とトレーニング用にデータディレクトリに準備することである。"
  },
  {
    "start": 71662,
    "end": 74274,
    "text": "第二段階はモデルの訓練である。"
  },
  {
    "start": 74472,
    "end": 82482,
    "text": "3番目のステップは、このサンプルpyファイルを使ってテキストを生成することです。"
  },
  {
    "start": 82626,
    "end": 86390,
    "text": "生成されたテキストの例をご覧ください。"
  },
  {
    "start": 86540,
    "end": 91500,
    "text": "著者は、このためにGPUが必要かもしれないと述べている。"
  },
  {
    "start": 91870,
    "end": 100118,
    "text": "gpuがなくても、MacBookがあれば、このモデルのもっとシンプルなバージョンを走らせることができる。"
  },
  {
    "start": 100224,
    "end": 105950,
    "text": "Apple M one MacBookがあれば、デバイスmpsができる。"
  },
  {
    "start": 106690,
    "end": 112800,
    "text": "このReadmeの次のセクションは、GBD 2の再現方法について述べている。"
  },
  {
    "start": 115030,
    "end": 119220,
    "text": "最初の例と似ているようだ。"
  },
  {
    "start": 119910,
    "end": 127122,
    "text": "ただひとつ違うのは、今回はオープンウェブのテキストという、よりリッチなデータセットを使っていることだ。"
  },
  {
    "start": 127256,
    "end": 133270,
    "text": "このモデルを走らせるには、多くのコンピューターパワーと4日間が必要だ。"
  },
  {
    "start": 133340,
    "end": 137080,
    "text": "このビデオでは、4日間必要なことは説明しない。"
  },
  {
    "start": 139310,
    "end": 146502,
    "text": "さて、GBTの2つのモデルの深度のベースラインがいくつか出揃ったところで、次のセクションは微調整だ。"
  },
  {
    "start": 146646,
    "end": 153840,
    "text": "私たちは、GBTの2つの脳で訓練されたモデルに基づいて、シェイクスピア・ライターを微調整することができる。"
  },
  {
    "start": 156450,
    "end": 157950,
    "text": "ああ、それで終わりだ。"
  },
  {
    "start": 158020,
    "end": 161134,
    "text": "手短に見ておきたいファイルがいくつかある。"
  },
  {
    "start": 161252,
    "end": 163046,
    "text": "PYの準備もある。"
  },
  {
    "start": 163178,
    "end": 165282,
    "text": "ここでデータを準備する。"
  },
  {
    "start": 165416,
    "end": 169058,
    "text": "データをダウンロードしているのがわかるだろう。"
  },
  {
    "start": 169144,
    "end": 178898,
    "text": "Txtファイルをオンラインにアップロードし、データを少し加工して、トレーニング用と検証用にデータを分ける。"
  },
  {
    "start": 178994,
    "end": 196010,
    "text": "90％をトレーニングに、10％を検証に割り当て、データをトークン化し、最後にデータをtrain binとval binに保存する。"
  },
  {
    "start": 196350,
    "end": 199206,
    "text": "Train Pyはモデルをトレーニングする場所だ。"
  },
  {
    "start": 199318,
    "end": 204202,
    "text": "興味深いのは、ここで上書きできるすべてのパラメータを見ることができることだ。"
  },
  {
    "start": 204346,
    "end": 210430,
    "text": "このファイルを見てみると、このファイルには直接引数パーサーは存在しない。"
  },
  {
    "start": 210850,
    "end": 221250,
    "text": "76と77は、このコンフィギュレーターPIにあるのだろう。"
  },
  {
    "start": 222150,
    "end": 223218,
    "text": "見てみよう。"
  },
  {
    "start": 223304,
    "end": 228854,
    "text": "コンフィギュレーターPy、右。"
  },
  {
    "start": 228892,
    "end": 232520,
    "text": "ここですべてのアークを見ることができる。"
  },
  {
    "start": 233930,
    "end": 236040,
    "text": "アークで始めることができる。"
  },
  {
    "start": 239310,
    "end": 240506,
    "text": "これは興味深い。"
  },
  {
    "start": 240608,
    "end": 242140,
    "text": "こんなの初めて見たよ。"
  },
  {
    "start": 242910,
    "end": 254190,
    "text": "基本的に、このファイルは引数パーサーを書くのに役立つので、train Pyにすべてのアーク引数パーサーの構文を含める必要はない。"
  },
  {
    "start": 255090,
    "end": 256222,
    "text": "これは私にとって新しいことだ。"
  },
  {
    "start": 256276,
    "end": 259600,
    "text": "後で自分のプロジェクトに使いたいかもしれない。"
  },
  {
    "start": 261170,
    "end": 263620,
    "text": "そう、それでいいんだ。"
  },
  {
    "start": 265670,
    "end": 267502,
    "text": "Pyのサンプルもあります。"
  },
  {
    "start": 267566,
    "end": 273620,
    "text": "ここでは、テキストを生成する訓練モデルからデータ・サンプルを生成する。"
  },
  {
    "start": 274630,
    "end": 278630,
    "text": "ここでも、上書きできるパラメーターがたくさんある。"
  },
  {
    "start": 283230,
    "end": 290490,
    "text": "もうひとつ興味深いのは、モデルをトレーニングするとき、実際にはconfigフォルダからこのファイルを呼び出していることだ。"
  },
  {
    "start": 290650,
    "end": 295630,
    "text": "ご覧の通り、ここにはパラメーター以外は何もない。"
  },
  {
    "start": 295970,
    "end": 309118,
    "text": "python、train pyを実行し、configフォルダ内のこのファイルに存在するすべてのパラメータをリストアップしても同じだと思います。"
  },
  {
    "start": 309214,
    "end": 314290,
    "text": "これは、さまざまなパラメーターやコンフィギュレーションを整理する興味深い方法だと思う。"
  },
  {
    "start": 315370,
    "end": 317574,
    "text": "よし、始めよう。"
  },
  {
    "start": 317612,
    "end": 318920,
    "text": "コードを見てみよう。"
  },
  {
    "start": 319290,
    "end": 321750,
    "text": "このリポジトリをクローンしてください。"
  },
  {
    "start": 326020,
    "end": 328400,
    "text": "では、このリポジトリに行ってみよう。"
  },
  {
    "start": 328920,
    "end": 333108,
    "text": "最初の例では、シェイクスピアのデータを用意する。"
  },
  {
    "start": 333194,
    "end": 344970,
    "text": "まず、トレーニング・データで100万トークンが生成され、検証データでは10万以上のトークンが生成されていることがわかる。"
  },
  {
    "start": 348030,
    "end": 359710,
    "text": "私のコンピューターで直接実行しているので、モデルをトレーニングすることができる。"
  },
  {
    "start": 360210,
    "end": 366678,
    "text": "その前に、デバイスをmpsに変更することができる。"
  },
  {
    "start": 366794,
    "end": 379634,
    "text": "私はアップルのM1コンピューターで動いているので、普通のラップトップで動いているのであれば、CPUを使うことができるが、それは本当に遅い。"
  },
  {
    "start": 379682,
    "end": 382150,
    "text": "MPSでさえ本当に遅い。"
  },
  {
    "start": 382890,
    "end": 392380,
    "text": "繰り返しているのがわかるだろう。"
  },
  {
    "start": 393310,
    "end": 397866,
    "text": "見ての通り、かなりゆっくり走っている。"
  },
  {
    "start": 397888,
    "end": 406240,
    "text": "実際、かなり遅いし、今はただ殺して結果を見るだけだよ。"
  },
  {
    "start": 414000,
    "end": 420770,
    "text": "サンプルpyを実行してテキストを生成します。"
  },
  {
    "start": 421460,
    "end": 426320,
    "text": "さて、デフォルトではCUDAを使用しているため、トーチが実装された。"
  },
  {
    "start": 426740,
    "end": 432000,
    "text": "デバイスはmpsに等しいと定義しなければならない。"
  },
  {
    "start": 434680,
    "end": 443812,
    "text": "あるいは、M1コンピューターを持っていない場合は、device equal cpuを使うこともできるね。"
  },
  {
    "start": 443946,
    "end": 447668,
    "text": "結果はまるで印象に残らない。"
  },
  {
    "start": 447764,
    "end": 456456,
    "text": "まだ200回しか反復訓練していないから驚かないが、もう少し訓練すれば、かなり良くなるだろう。"
  },
  {
    "start": 456638,
    "end": 458052,
    "text": "私はgpuを持っている。"
  },
  {
    "start": 458116,
    "end": 462300,
    "text": "同じ例をGPUで実行し、どのように見えるかをお見せしよう。"
  },
  {
    "start": 462450,
    "end": 464110,
    "text": "最初の一歩だ。"
  },
  {
    "start": 465440,
    "end": 468972,
    "text": "ああ、コピー＆ペーストするときは、ドル記号を消すべきだね。"
  },
  {
    "start": 469106,
    "end": 485540,
    "text": "最初のステップはデータを準備することで、前と同じ結果が得られる。"
  },
  {
    "start": 492400,
    "end": 497988,
    "text": "ああ、損失額が大幅に下がったように見えるね。"
  },
  {
    "start": 498104,
    "end": 502450,
    "text": "4.26、そして2.31だった。"
  },
  {
    "start": 502980,
    "end": 503984,
    "text": "かなりいいと思う。"
  },
  {
    "start": 504022,
    "end": 505890,
    "text": "殺してしまおう。"
  },
  {
    "start": 506740,
    "end": 515396,
    "text": "オーケー、これはモデルのチェックポイントだね？"
  },
  {
    "start": 515498,
    "end": 529700,
    "text": "コピー＆ペーストするとドル記号が付き、16となる。"
  },
  {
    "start": 533340,
    "end": 534090,
    "text": "クールだ。"
  },
  {
    "start": 535660,
    "end": 536890,
    "text": "では、やってみよう。"
  },
  {
    "start": 554570,
    "end": 555590,
    "text": "オーケー、クールだ。"
  },
  {
    "start": 555740,
    "end": 557240,
    "text": "うまくいっているようだ。"
  },
  {
    "start": 557610,
    "end": 558840,
    "text": "かなりクールだよ。"
  },
  {
    "start": 564170,
    "end": 570090,
    "text": "この3つ目の例では、ソングライターを訓練するために外部のデータセットを使おうと思います。"
  },
  {
    "start": 573150,
    "end": 578710,
    "text": "まず、dataフォルダの中にlyricsという新しいフォルダを作りましょう。"
  },
  {
    "start": 578870,
    "end": 583566,
    "text": "そこで、私が使いたいSpotifyのミリオン・サウンド・データセットを見つけた。"
  },
  {
    "start": 583748,
    "end": 588750,
    "text": "このデータセットをフォルダにダウンロードしてみよう。"
  },
  {
    "start": 600540,
    "end": 603160,
    "text": "このCSVファイルを開いてみよう。"
  },
  {
    "start": 604780,
    "end": 610510,
    "text": "テキスト欄には、トレーニングに使える歌詞がすべて表示されている。"
  },
  {
    "start": 611600,
    "end": 613550,
    "text": "さて、これでデータが揃った。"
  },
  {
    "start": 614400,
    "end": 623120,
    "text": "同様の準備されたPIを作成し、トレーニングや検証のためのデータを準備したい。"
  },
  {
    "start": 623700,
    "end": 625308,
    "text": "ただ、フォーマットは同じだ。"
  },
  {
    "start": 625404,
    "end": 630448,
    "text": "これをコピーして貼り付けるだけだ。"
  },
  {
    "start": 630534,
    "end": 632560,
    "text": "パイを用意する。"
  },
  {
    "start": 633220,
    "end": 633824,
    "text": "クールだ。"
  },
  {
    "start": 633942,
    "end": 635556,
    "text": "これをコピーして貼り付けるだけだ。"
  },
  {
    "start": 635738,
    "end": 639360,
    "text": "これがCSVファイルであることはわかっている。"
  },
  {
    "start": 639520,
    "end": 642100,
    "text": "このテキスト・カラムだけが欲しい。"
  },
  {
    "start": 642440,
    "end": 646360,
    "text": "まずpandasをインポートする必要がある。"
  },
  {
    "start": 648380,
    "end": 651044,
    "text": "ところで、あなたの環境にはパンダも必要だ。"
  },
  {
    "start": 651172,
    "end": 655400,
    "text": "あなたの環境にpandasがインストールされていることを確認してください。"
  },
  {
    "start": 656540,
    "end": 659660,
    "text": "これはもう必要ない。"
  },
  {
    "start": 660720,
    "end": 662700,
    "text": "データセットをダウンロードする必要はない。"
  },
  {
    "start": 662770,
    "end": 666510,
    "text": "データセットはすでにローカル・フォルダにある。"
  },
  {
    "start": 666880,
    "end": 669020,
    "text": "リクエストは必要ない。"
  },
  {
    "start": 670100,
    "end": 670850,
    "text": "クールだ。"
  },
  {
    "start": 672260,
    "end": 678850,
    "text": "さて、基本的には、すべてのテキストを提供するデータファイルが必要だ。"
  },
  {
    "start": 681380,
    "end": 684644,
    "text": "まずデータフレームを読んでみよう。"
  },
  {
    "start": 684842,
    "end": 694100,
    "text": "PDはCSV、Spotify、millsoundata CSVを読み込む。"
  },
  {
    "start": 695580,
    "end": 699050,
    "text": "data equals df textとしよう。"
  },
  {
    "start": 699420,
    "end": 701720,
    "text": "ストリングスにしたい。"
  },
  {
    "start": 702620,
    "end": 705400,
    "text": "すべての文字列を連結したい。"
  },
  {
    "start": 705820,
    "end": 714332,
    "text": "改行で区切りましょう。"
  },
  {
    "start": 714466,
    "end": 717070,
    "text": "よし、これでうまくいくといいな。"
  },
  {
    "start": 724760,
    "end": 727060,
    "text": "PDとしてpandasをインポートする。"
  },
  {
    "start": 733920,
    "end": 737420,
    "text": "うーん、ちょっと変だね。"
  },
  {
    "start": 738080,
    "end": 742160,
    "text": "なぜデータファイルが見つからないのか？"
  },
  {
    "start": 744340,
    "end": 745836,
    "text": "それはとても奇妙なことだ。"
  },
  {
    "start": 746028,
    "end": 752790,
    "text": "道を完全に定義する必要があるのかもしれない。"
  },
  {
    "start": 763900,
    "end": 764776,
    "text": "走っているか？"
  },
  {
    "start": 764878,
    "end": 765544,
    "text": "よく分からない。"
  },
  {
    "start": 765582,
    "end": 766490,
    "text": "走っているか？"
  },
  {
    "start": 766860,
    "end": 767720,
    "text": "イェーイ。"
  },
  {
    "start": 769100,
    "end": 770650,
    "text": "それは簡単だった。"
  },
  {
    "start": 771200,
    "end": 771852,
    "text": "そうだね。"
  },
  {
    "start": 771986,
    "end": 775260,
    "text": "新しいデータファイルがあればわかるように。"
  },
  {
    "start": 776160,
    "end": 785200,
    "text": "元の例に基づいたこの準備されたパイに、かなり簡単にフィットさせることができる。"
  },
  {
    "start": 787380,
    "end": 790268,
    "text": "ここでもCSVファイルがある。"
  },
  {
    "start": 790444,
    "end": 814644,
    "text": "すべてのテキスト列を1つの大きなテキストにまとめ、トレーニングデータと検証データにフィードし、このtick token APIでトークンを取得して、トレンドビンとバルドビンを作成することができました。"
  },
  {
    "start": 814772,
    "end": 823660,
    "text": "データの歌詞を見ると、トレンドビンとベロビンがあることがわかる。"
  },
  {
    "start": 824560,
    "end": 829308,
    "text": "さて、データの準備はできた。"
  },
  {
    "start": 829394,
    "end": 832110,
    "text": "これでトレーニングを開始できる。"
  },
  {
    "start": 833200,
    "end": 842000,
    "text": "さて、データをトレーニングするために、このファイルをコピーしよう。"
  },
  {
    "start": 843300,
    "end": 844050,
    "text": "いや。"
  },
  {
    "start": 844580,
    "end": 845330,
    "text": "オーケー。"
  },
  {
    "start": 846020,
    "end": 857344,
    "text": "電車の歌詞をコピーしよう。"
  },
  {
    "start": 857472,
    "end": 871120,
    "text": "歌詞、歌詞、歌詞になりたい。"
  },
  {
    "start": 871780,
    "end": 872288,
    "text": "オーケー。"
  },
  {
    "start": 872374,
    "end": 874050,
    "text": "他に変更したい点はあるか？"
  },
  {
    "start": 877350,
    "end": 878900,
    "text": "もう大丈夫だと思う。"
  },
  {
    "start": 879270,
    "end": 883890,
    "text": "電車の歌詞にしよう。"
  },
  {
    "start": 904600,
    "end": 907012,
    "text": "よし、しばらく走らせてみよう。"
  },
  {
    "start": 907066,
    "end": 907990,
    "text": "また来るよ。"
  },
  {
    "start": 908760,
    "end": 914692,
    "text": "あまりに動作が遅いので、500セル反復で止めました。"
  },
  {
    "start": 914836,
    "end": 919380,
    "text": "シンボル py を実行して歌詞を生成します。"
  },
  {
    "start": 919540,
    "end": 925656,
    "text": "ジェネレーターが何を与えてくれるのか、私は愛を込めて歌詞を書き始めた。"
  },
  {
    "start": 925838,
    "end": 926616,
    "text": "オーケー。"
  },
  {
    "start": 926798,
    "end": 931352,
    "text": "愛が私を照らし出す。"
  },
  {
    "start": 931486,
    "end": 937970,
    "text": "あまり意味はないが、500回の反復トレーニングだけなら問題ない。"
  },
  {
    "start": 940980,
    "end": 944160,
    "text": "今日のコーディングはここまで。"
  },
  {
    "start": 944900,
    "end": 946160,
    "text": "ご視聴ありがとうございました。"
  },
  {
    "start": 946310,
    "end": 946620,
    "text": "さようなら。"
  }
]