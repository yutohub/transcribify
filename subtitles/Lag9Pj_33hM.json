[
  {
    "start": 250,
    "end": 1054,
    "text": "どうしたんだ？"
  },
  {
    "start": 1092,
    "end": 2186,
    "text": "クーパー・コードだ。"
  },
  {
    "start": 2218,
    "end": 4906,
    "text": "このビデオでは、このチャットボットを構築します。"
  },
  {
    "start": 4938,
    "end": 9278,
    "text": "新しいチャットGPT APIでは、チャットボットに質問できるようになります。"
  },
  {
    "start": 9364,
    "end": 12330,
    "text": "例えば、APIエンドポイントとは何か？"
  },
  {
    "start": 12410,
    "end": 15066,
    "text": "そうすれば、チャットGPTが返事をくれるだろう。"
  },
  {
    "start": 15178,
    "end": 20714,
    "text": "このプロジェクトは、リアクト・アプリケーション全体でこのAPIを使いたいと思っている人にとって、素晴らしい入門書となる。"
  },
  {
    "start": 20762,
    "end": 25074,
    "text": "通常のチャットGPTインターフェイスと同じように、質問を続けることができます。"
  },
  {
    "start": 25162,
    "end": 29334,
    "text": "例えば、なぜAPIエンドポイントが重要なのか？"
  },
  {
    "start": 29452,
    "end": 31410,
    "text": "それは私たちに回答を与え続けるだろう。"
  },
  {
    "start": 31490,
    "end": 37926,
    "text": "このビデオではGPT-3の5ターボモデルを使用しているが、これはまさに速報だ。"
  },
  {
    "start": 38028,
    "end": 48054,
    "text": "これは、以前のGPT-3 Fiveモデルよりも10倍安く、反応するアプリケーションにAIを追加するのが信じられないほど手頃になり始めていることを意味する。"
  },
  {
    "start": 48102,
    "end": 51162,
    "text": "このアプリケーションのフロントエンドを構築することから始めよう。"
  },
  {
    "start": 51296,
    "end": 56842,
    "text": "Visual Studioの空のフォルダに移動して、VEATを使ってアプリケーションを作成します。"
  },
  {
    "start": 56906,
    "end": 60490,
    "text": "遅くともNPMがVEATを作ると言いたい。"
  },
  {
    "start": 60570,
    "end": 62862,
    "text": "アプリケーションの名前は、ここではAppと呼ぶことにする。"
  },
  {
    "start": 62916,
    "end": 65898,
    "text": "では、パラメーターを始めるためにダッシュと言おう。"
  },
  {
    "start": 65994,
    "end": 68990,
    "text": "となると、次に使いたいパラメータはテンプレートだ。"
  },
  {
    "start": 69070,
    "end": 71198,
    "text": "ここではreactテンプレートを使用する。"
  },
  {
    "start": 71294,
    "end": 75022,
    "text": "それからEnterキーを押して、アプリケーションにCDを入れることができる。"
  },
  {
    "start": 75176,
    "end": 77782,
    "text": "で、今すぐNPMですべてをインストールする。"
  },
  {
    "start": 77836,
    "end": 80290,
    "text": "その後、NPMで別のパッケージをインストールする。"
  },
  {
    "start": 80370,
    "end": 87410,
    "text": "これはチャットスコープchatuikitreactで行われます。"
  },
  {
    "start": 87490,
    "end": 91282,
    "text": "このパッケージを使って、チャット・インターフェースを簡単に構築していこう。"
  },
  {
    "start": 91346,
    "end": 93514,
    "text": "でEnterキーを押せばOKだ。"
  },
  {
    "start": 93552,
    "end": 98598,
    "text": "フォルダ構造に入って、ソース・フォルダに入り、アプリJSXに入る。"
  },
  {
    "start": 98694,
    "end": 102238,
    "text": "ここにあるものをすべて削除して、この一番外側のdivだけを残すことにする。"
  },
  {
    "start": 102324,
    "end": 107898,
    "text": "このように、chatscopeライブラリからスタイリングとコンポーネントをインポートすることができます。"
  },
  {
    "start": 107994,
    "end": 113070,
    "text": "まずはchatscope UIキットをインポートします。"
  },
  {
    "start": 113140,
    "end": 115710,
    "text": "そして最後にスタイルを追加する。"
  },
  {
    "start": 115780,
    "end": 121486,
    "text": "diskフォルダに入り、defaultに入り、styles min CSSに入る。"
  },
  {
    "start": 121598,
    "end": 124110,
    "text": "これでコンポーネントのスタイリングができる。"
  },
  {
    "start": 124190,
    "end": 126062,
    "text": "これで実際にコンポーネントをインポートできるようになった。"
  },
  {
    "start": 126126,
    "end": 129910,
    "text": "このビデオをシンプルにするために、必要なものすべてをフロントでインポートするだけだ。"
  },
  {
    "start": 129980,
    "end": 132806,
    "text": "オブジェクトの括弧をいくつかインポートしようと思う。"
  },
  {
    "start": 132828,
    "end": 136326,
    "text": "すると、チャットUIキットからこのように反応する。"
  },
  {
    "start": 136428,
    "end": 148454,
    "text": "メイン・コンテナ、チャット・コンテナ、メッセージ・リスト、メッセージ、メッセージ入力、そして最後にタイピング・インジケータが必要だ。"
  },
  {
    "start": 148582,
    "end": 152294,
    "text": "これで、すべてのチャット機能を持つコンポーネントを構築することができます。"
  },
  {
    "start": 152342,
    "end": 157342,
    "text": "このコンポーネントの外側にdivを作り、そこにスタイルを追加することができる。"
  },
  {
    "start": 157396,
    "end": 165690,
    "text": "例えば、位置は相対的で、高さは800ピクセル、幅は700ピクセルになる。"
  },
  {
    "start": 165770,
    "end": 171074,
    "text": "すべてのコンポーネントは、このように大きなメイン・コンテナに包まれる。"
  },
  {
    "start": 171192,
    "end": 175838,
    "text": "そのメイン・コンテナの中に、チャット・ロジックのためのチャット・コンテナを用意する。"
  },
  {
    "start": 175934,
    "end": 179474,
    "text": "チャット・コンテナの中にはメッセージ・リストを入れる。"
  },
  {
    "start": 179592,
    "end": 182998,
    "text": "これで、私たちが持っているさまざまなメッセージをすべて表示することができる。"
  },
  {
    "start": 183084,
    "end": 188806,
    "text": "このようにメッセージを配列に格納するために、一番上に行き、いくつかのユース・ステートを追加することができる。"
  },
  {
    "start": 188908,
    "end": 195110,
    "text": "例えば、このuse stateをmessagesに変更し、messagesをセットすると配列になる。"
  },
  {
    "start": 195190,
    "end": 199722,
    "text": "実際のオブジェクトがどのようなものかを皆さんにお見せするために、1つのメッセージでこれを初期化しようと思います。"
  },
  {
    "start": 199776,
    "end": 203230,
    "text": "メッセージ・プロパティは、実際のメッセージそのものである。"
  },
  {
    "start": 203300,
    "end": 210954,
    "text": "こんにちは、私はチャットGPTで、それからチャットGPTになるだけの送信者です。"
  },
  {
    "start": 211082,
    "end": 222258,
    "text": "メッセージ・リスト内のメッセージ・マップに移動して、配列内の現在のメッセージ、つまり現在のオブジェクトを取得し、そのメッセージのインデックスを取得することができます。"
  },
  {
    "start": 222344,
    "end": 226226,
    "text": "を返せば、メッセージ・コンポーネントをレンダリングできる。"
  },
  {
    "start": 226328,
    "end": 228062,
    "text": "これはインポートしたコンポーネントだ。"
  },
  {
    "start": 228126,
    "end": 236278,
    "text": "そのキーはインデックスに等しく、そのモデルは探しているメッセージで、ループしている現在のメッセージ・オブジェクトに等しくなります。"
  },
  {
    "start": 236364,
    "end": 239490,
    "text": "これで、配列内のすべてのメッセージがメッセージ・コンポーネントを取得することになる。"
  },
  {
    "start": 239570,
    "end": 243578,
    "text": "また、このリストの下にメッセージ入力も欲しい。"
  },
  {
    "start": 243664,
    "end": 248390,
    "text": "リストの一番下には、ユーザーがテキストを入力してメッセージを送信するための入力を用意します。"
  },
  {
    "start": 248470,
    "end": 252586,
    "text": "ここにメッセージを入力するだけのプレースホルダーを用意します。"
  },
  {
    "start": 252688,
    "end": 256622,
    "text": "ここで、送信イベントをヒットさせるロジックを作ることもできる。"
  },
  {
    "start": 256676,
    "end": 259886,
    "text": "ユーザーがメッセージを送ったら、ある関数を呼び出すようにしたい。"
  },
  {
    "start": 259988,
    "end": 265342,
    "text": "例えば、今からhandle sendという関数を作って、handle sendを定義する。"
  },
  {
    "start": 265396,
    "end": 275522,
    "text": "上ではconst構文で、const handle sendという矢印構文の配列を作って、非同期メッセージと言えるようにしている。"
  },
  {
    "start": 275656,
    "end": 279690,
    "text": "そして、中かっこを追加することで、この矢印関数をあるロジックに向けることができる。"
  },
  {
    "start": 279790,
    "end": 293194,
    "text": "メッセージが送信されたら、メッセージ・オブジェクトを作成し、const new message is equal toと言えるようにする。"
  },
  {
    "start": 293312,
    "end": 302782,
    "text": "このメッセージは実際に入力から取得したテキストで、送信者は新しいメッセージのユーザーと同じになる。"
  },
  {
    "start": 302916,
    "end": 311674,
    "text": "メッセージの状態を更新し、最終的にはGPTのチャットにメッセージを処理したい。"
  },
  {
    "start": 311802,
    "end": 314778,
    "text": "送って反応を見る。"
  },
  {
    "start": 314874,
    "end": 318190,
    "text": "メッセージを処理する場所が2つあるからだ。"
  },
  {
    "start": 318270,
    "end": 323742,
    "text": "new messagesという定数を作り、これが新しいメッセージの配列になる。"
  },
  {
    "start": 323806,
    "end": 327598,
    "text": "配列を作り、ドット・ドット、ドット・メッセージと言うんだ。"
  },
  {
    "start": 327694,
    "end": 334326,
    "text": "これは、すでにステートに入っているすべてのメッセージ、つまりステートの現在の値を受け取り、その上に新しいメッセージを追加する。"
  },
  {
    "start": 334428,
    "end": 334854,
    "text": "ああ、申し訳ない。"
  },
  {
    "start": 334892,
    "end": 339530,
    "text": "これが新しいメッセージで、その上に新しいメッセージを追加する。"
  },
  {
    "start": 339600,
    "end": 345114,
    "text": "これを見る簡単な方法は、すべての古いメッセージと新しいメッセージである。"
  },
  {
    "start": 345232,
    "end": 351878,
    "text": "だから、メッセージの状態を更新するには、set messages equal to new messagesと言えばいい。"
  },
  {
    "start": 352054,
    "end": 352986,
    "text": "超シンプルだ。"
  },
  {
    "start": 353088,
    "end": 353766,
    "text": "私の悪者たちだ。"
  },
  {
    "start": 353808,
    "end": 360782,
    "text": "直接フォローしている場合は、この小さなダッシュが反応しないので、このようなチャットUIキットのスタイルになります。"
  },
  {
    "start": 360916,
    "end": 367258,
    "text": "もうひとつ、このライブラリーを使う場合、方向はoutgoingと同じにしなければならない。"
  },
  {
    "start": 367354,
    "end": 369362,
    "text": "つまり、右側に表示されるということだ。"
  },
  {
    "start": 369416,
    "end": 371202,
    "text": "それは私たちが発信しているメッセージだ。"
  },
  {
    "start": 371256,
    "end": 380786,
    "text": "NPMでもう一度devを実行すると、うまくいっているようだ。メッセージを入力すると、右側に表示される。"
  },
  {
    "start": 380888,
    "end": 388326,
    "text": "さて、チュートリアルでは実際にチャットGBT APIをセットアップするところまで来ているが、その前にいくつかセットアップしておこうと思う。"
  },
  {
    "start": 388348,
    "end": 389510,
    "text": "僕らは本当に仲がいいんだ。"
  },
  {
    "start": 389580,
    "end": 396806,
    "text": "APIで実際にメッセージの処理を始める前に、タイピング・インディケータを設定することができる。"
  },
  {
    "start": 396918,
    "end": 399718,
    "text": "例えば、チャットGPTはタイピングしている。"
  },
  {
    "start": 399814,
    "end": 403322,
    "text": "これを実現するには、一番上まで行って状態を作る。"
  },
  {
    "start": 403456,
    "end": 408666,
    "text": "constタイピングとsetタイピングは、最初はfalseになる。"
  },
  {
    "start": 408698,
    "end": 410954,
    "text": "それは偽りの使用状態になるだろう。"
  },
  {
    "start": 411082,
    "end": 414878,
    "text": "30行目でリクエストを送信するとき、ここでいくつかのロジックを実行する。"
  },
  {
    "start": 414964,
    "end": 423490,
    "text": "DPTがタイピングしているところや考えていることが想像できるだろう。"
  },
  {
    "start": 423640,
    "end": 434374,
    "text": "これがtrueの場合、reactアプリケーションにコンポーネントを表示し、メッセージリストに移動できるようにする。"
  },
  {
    "start": 434412,
    "end": 446150,
    "text": "もしそうなら、このようにタイピング・インディケーター要素を表示し、内容はGPTがタイピングしているチャットになります。"
  },
  {
    "start": 446230,
    "end": 449142,
    "text": "typingがfalseの場合、nullを表示する。"
  },
  {
    "start": 449206,
    "end": 450474,
    "text": "それは何の意味もない。"
  },
  {
    "start": 450592,
    "end": 453434,
    "text": "このアプリケーションを保存して、どのように見えるか見てみましょう。"
  },
  {
    "start": 453552,
    "end": 455566,
    "text": "ここにメッセージを送るべきだ。"
  },
  {
    "start": 455668,
    "end": 457150,
    "text": "挨拶だけするよ。"
  },
  {
    "start": 457300,
    "end": 460714,
    "text": "そうすれば、チャットGBTが永遠にタイプし続けることがわかるだろう。"
  },
  {
    "start": 460842,
    "end": 467770,
    "text": "APIリクエストが完了したら、このタイピングをfalseに戻すことができる。"
  },
  {
    "start": 467850,
    "end": 472770,
    "text": "一度trueに設定するだけで、その後は何もしないからだ。"
  },
  {
    "start": 472840,
    "end": 479638,
    "text": "Openai.comにアクセスして、チャットGPT APIのセットアップを始めましょう。"
  },
  {
    "start": 479724,
    "end": 481634,
    "text": "普通にログインしてください。"
  },
  {
    "start": 481762,
    "end": 485650,
    "text": "右上に移動し、APIキーの表示を押す。"
  },
  {
    "start": 485730,
    "end": 489650,
    "text": "見てわかるように、私はこのAPIのビデオを作るので、いろいろなキーを持っている。"
  },
  {
    "start": 489730,
    "end": 493194,
    "text": "ここを押して、新しい秘密鍵を作成します。"
  },
  {
    "start": 493312,
    "end": 496122,
    "text": "一度生成されたら、二度と表示されることはない。"
  },
  {
    "start": 496176,
    "end": 498058,
    "text": "必ずここにコピーしてください。"
  },
  {
    "start": 498224,
    "end": 506830,
    "text": "アプリケーションに移動し、上にスクロールして、const API key is equal to that string right there（APIキーはこの文字列と等しい）とだけ書いてください。"
  },
  {
    "start": 506900,
    "end": 512574,
    "text": "APIキーによって、OpenAIに呼び出すことができ、OpenAIはそれが私たちのアカウントから来ていることを認識します。"
  },
  {
    "start": 512692,
    "end": 517854,
    "text": "よし、みんな、これからGPTのチャットにメッセージを送ろう。"
  },
  {
    "start": 517982,
    "end": 522062,
    "text": "ロジックを分離するために、別の関数を作ろうと思う。"
  },
  {
    "start": 522126,
    "end": 531554,
    "text": "ここでは、非同期関数process message to chat GPTとし、入力はチャットメッセージとする。"
  },
  {
    "start": 531602,
    "end": 543482,
    "text": "そして33行目でこの関数を呼び出すために、await process message to chat GPTと言って、新しいメッセージをここに入れます。"
  },
  {
    "start": 543616,
    "end": 546614,
    "text": "メッセージではなく、新着メッセージであることを確認してください。"
  },
  {
    "start": 546742,
    "end": 549610,
    "text": "ちょっと深い話になってしまうが、メッセージはここで。"
  },
  {
    "start": 549680,
    "end": 554458,
    "text": "私たちが使っている実際の状態は、まだこの新しい値で更新されていない。"
  },
  {
    "start": 554544,
    "end": 558638,
    "text": "だから、このAPIコールをするときは、ここで新しいメッセージを使用していることを確認したい。"
  },
  {
    "start": 558724,
    "end": 560874,
    "text": "だから、これを参考にするつもりだ。"
  },
  {
    "start": 560922,
    "end": 564446,
    "text": "ただ、ここでやっていることの論理的な背景を説明したいんだ。"
  },
  {
    "start": 564548,
    "end": 571902,
    "text": "このAPIエンドポイント、チャット完了エンドポイントは、チャットGPT機能を使用するためのものです。"
  },
  {
    "start": 571966,
    "end": 577750,
    "text": "JavaScriptで、このcurlリクエストとよく似たロジックのフェッチ・リクエストを行う。"
  },
  {
    "start": 577900,
    "end": 581558,
    "text": "ひとつ重要なのは、このメッセージ・オブジェクトを見てほしいということだ。"
  },
  {
    "start": 581644,
    "end": 586514,
    "text": "OpenAIのミッションであるユーザーとコンテンツの役割を担っている。"
  },
  {
    "start": 586642,
    "end": 592954,
    "text": "このオブジェクトは、フロントエンドでのオブジェクトの構造とは異なっているのがわかるだろう。"
  },
  {
    "start": 593072,
    "end": 598586,
    "text": "つまり、我々のオブジェクトをOpenAIが理解できるように翻訳する必要があるということだ。"
  },
  {
    "start": 598768,
    "end": 611258,
    "text": "チャット・メッセージの入力には、送信者がユーザーかチャットGPTになるオブジェクトがたくさんある。"
  },
  {
    "start": 611434,
    "end": 616122,
    "text": "そして、そのメッセージは、ここでのメッセージ・コンテンツとなる。"
  },
  {
    "start": 616196,
    "end": 620942,
    "text": "APIにデータを送信するには、新しいAPIメッセージ配列を作成する必要がある。"
  },
  {
    "start": 621006,
    "end": 629362,
    "text": "APIが理解できるようにこれらのメッセージを翻訳し、ユーザーかアシスタントになるロールの形式にする必要がある。"
  },
  {
    "start": 629426,
    "end": 631366,
    "text": "それが何を意味するかについては、また後ほど話そう。"
  },
  {
    "start": 631468,
    "end": 637670,
    "text": "その場合、メッセージの代わりに、コンテンツがメッセージの内容に等しいと言わなければならない。"
  },
  {
    "start": 637820,
    "end": 642678,
    "text": "ちょっと煩わしいが、これはAPIリクエスト用にデータをフォーマットしなければならない場合によくあることだ。"
  },
  {
    "start": 642774,
    "end": 644954,
    "text": "君たちが思っているより簡単なことなんだ。"
  },
  {
    "start": 645072,
    "end": 649110,
    "text": "letのAPIメッセージを配列と等しくすることができる。"
  },
  {
    "start": 649190,
    "end": 653450,
    "text": "チャットメッセージマップと言えば、この配列を作ることができる。"
  },
  {
    "start": 653530,
    "end": 661214,
    "text": "これにより、チャット・メッセージのひとつひとつを調べ、例えば次のような新しいプロパティを持つ新しいオブジェクトを作成することができる。"
  },
  {
    "start": 661332,
    "end": 668450,
    "text": "今いるメッセージ・オブジェクトを受け取り、そのメッセージで行いたいロジックを指す矢印関数を作ることができます。"
  },
  {
    "start": 668600,
    "end": 671442,
    "text": "例えば、ここでは役割が非常に重要だ。"
  },
  {
    "start": 671496,
    "end": 675618,
    "text": "であれば、roleを空文字列に等しくすることができる。"
  },
  {
    "start": 675714,
    "end": 685154,
    "text": "メッセージ・オブジェクトの送信者がチャットGPTに等しい場合、この役割をアシスタントとして定義するようにしたい。"
  },
  {
    "start": 685282,
    "end": 689858,
    "text": "そうでなければ、ユーザーと同じロールを定義することになる。"
  },
  {
    "start": 689954,
    "end": 695130,
    "text": "そうすれば、コンテンツがどのように見えるかを期待するのと同じようなオブジェクトを返すことができる。"
  },
  {
    "start": 695200,
    "end": 709550,
    "text": "roleプロパティは、上でlet align 41で定義したroleと等しくなり、contentはメッセージ・オブジェクトのmessageと等しくなります。"
  },
  {
    "start": 709620,
    "end": 712282,
    "text": "40行目には、APIメッセージとすべきである。"
  },
  {
    "start": 712346,
    "end": 715262,
    "text": "これは実際に構築されているアレイなので、申し訳ない。"
  },
  {
    "start": 715316,
    "end": 718482,
    "text": "このようなオブジェクトの配列になる。"
  },
  {
    "start": 718616,
    "end": 722878,
    "text": "これでAPIメッセージが揃ったので、次はフェッチ・ステートメントを作ることができる。"
  },
  {
    "start": 722974,
    "end": 725442,
    "text": "フェッチ待ちと言おう。"
  },
  {
    "start": 725506,
    "end": 735174,
    "text": "次に、httpsapi openai.com?"
  },
  {
    "start": 735372,
    "end": 740290,
    "text": "V onechatcopletionsとコンマを入れる。"
  },
  {
    "start": 740370,
    "end": 743142,
    "text": "次に、すべての異なるプロパティを持つオブジェクトを作ります。"
  },
  {
    "start": 743206,
    "end": 745830,
    "text": "このリクエストを指定したい。"
  },
  {
    "start": 745910,
    "end": 749850,
    "text": "例えば、データを投稿するので、そのメソッドはpostになる。"
  },
  {
    "start": 749920,
    "end": 754158,
    "text": "これらのメッセージをAPIに投稿し、ここにいくつかのヘッダーを用意する。"
  },
  {
    "start": 754244,
    "end": 756318,
    "text": "これらのヘッダーはここで定義されている。"
  },
  {
    "start": 756404,
    "end": 761326,
    "text": "これは、認証とアプリケーションのJSONコンテンツ・タイプを要求している。"
  },
  {
    "start": 761428,
    "end": 763518,
    "text": "ただ、私がどこからこの情報を得ているのか、君たちに示しただけだ。"
  },
  {
    "start": 763604,
    "end": 773218,
    "text": "ここでは、authorizationはbearerにAPIのアンダースコア・キーを足したものに等しいとする。"
  },
  {
    "start": 773304,
    "end": 778510,
    "text": "それなら、コンテンツ・タイプはアプリケーションJSONに等しいと言うことにしよう。"
  },
  {
    "start": 778590,
    "end": 781826,
    "text": "つまり、リクエストのボディにJSONを送信することになる。"
  },
  {
    "start": 781938,
    "end": 786070,
    "text": "というわけで、この下の本体はJSONの文字列化になる。"
  },
  {
    "start": 786410,
    "end": 792282,
    "text": "APIリクエスト・ボディの変数を作ってみよう。"
  },
  {
    "start": 792336,
    "end": 801370,
    "text": "APIメッセージの後で、const API request body is equal to an object（APIリクエスト・ボディはオブジェクトと等しい）と言えば、それができる。"
  },
  {
    "start": 801520,
    "end": 813978,
    "text": "このリクエストに使いたいAIモデルはGPT-3ファイブターボで、メッセージも要求する。"
  },
  {
    "start": 814074,
    "end": 817790,
    "text": "これは、ドット、ドット、ドット、APIメッセージと言えばできる。"
  },
  {
    "start": 817870,
    "end": 824030,
    "text": "これは40行目で作ったもので、API用にフォーマットされたチャットメッセージだ。"
  },
  {
    "start": 824110,
    "end": 825778,
    "text": "ドット、ドット、ドット......。"
  },
  {
    "start": 825864,
    "end": 831538,
    "text": "メッセージ1、メッセージ2、メッセージ3......といった具合だ。"
  },
  {
    "start": 831634,
    "end": 834678,
    "text": "しかし、今ひとつ重要なことがある。"
  },
  {
    "start": 834764,
    "end": 837238,
    "text": "ここに役割分担があるだろう？"
  },
  {
    "start": 837324,
    "end": 838482,
    "text": "とても重要なことなんだ。"
  },
  {
    "start": 838636,
    "end": 839942,
    "text": "役割は3つある。"
  },
  {
    "start": 840006,
    "end": 850618,
    "text": "ユーザーからのメッセージを意味するユーザー・ロールと、チャットGBTからの応答を意味するアシスタント・ロールがあります。"
  },
  {
    "start": 850714,
    "end": 854302,
    "text": "そして、最後の重要な役割がシステムということになる。"
  },
  {
    "start": 854436,
    "end": 862238,
    "text": "これは通常、チャットGBTにどのように話してほしいかを定義する最初のメッセージだ。"
  },
  {
    "start": 862324,
    "end": 869426,
    "text": "ここで、システム・メッセージはオブジェクトに等しいとする。"
  },
  {
    "start": 869608,
    "end": 875338,
    "text": "その役割はシステムに等しく、その内容はプロンプトに等しい。"
  },
  {
    "start": 875454,
    "end": 880050,
    "text": "このプロンプトは、チャットGBTから実際の言語がどのように出てくるかを定義します。"
  },
  {
    "start": 880130,
    "end": 886438,
    "text": "例えば、「私は10歳です。"
  },
  {
    "start": 886524,
    "end": 890502,
    "text": "そのため、このコンテンツを変更して別の情報を表示させることができる。"
  },
  {
    "start": 890636,
    "end": 896438,
    "text": "チュートリアルの最後には、海賊のように話すなど、他のことに切り替える方法をお見せします。"
  },
  {
    "start": 896534,
    "end": 897818,
    "text": "文字通りそうなる。"
  },
  {
    "start": 897904,
    "end": 904470,
    "text": "私は10年の経験を持つソフトウェア・エンジニアです。"
  },
  {
    "start": 904550,
    "end": 909098,
    "text": "これは、チャットGBTにどのような反応をさせたいかというコンテキストを与えているので、かなりクールだ。"
  },
  {
    "start": 909194,
    "end": 921810,
    "text": "例えば、あなたが旅行代理店のようなもので、AIを使って人々のフライトを予約しようとしているのであれば、旅行代理店のように話し、旅行に関するあらゆることをはっきりと言うことができるだろう？"
  },
  {
    "start": 921960,
    "end": 927250,
    "text": "このプロンプトは、あなたのシステムで定義されている。"
  },
  {
    "start": 927320,
    "end": 933254,
    "text": "というのも、このシステム・メッセージを常にメッセージの先頭に置くことになるからだ。"
  },
  {
    "start": 933372,
    "end": 934646,
    "text": "それは常にそこにある。"
  },
  {
    "start": 934668,
    "end": 936902,
    "text": "何があっても一貫してそこにある。"
  },
  {
    "start": 936956,
    "end": 944950,
    "text": "チャットGBTに正しく送信され、私たちが望むように応答するためには、このメッセージ配列になければなりません。"
  },
  {
    "start": 945030,
    "end": 947242,
    "text": "みんな、一度にたくさんのことをしなければならないのは分かっている。"
  },
  {
    "start": 947296,
    "end": 949754,
    "text": "考えてみれば、これは膨大なデータ管理だ。"
  },
  {
    "start": 949792,
    "end": 953786,
    "text": "私たちは、APIが私たちに望んでいる方法で正確にAPIを操作することを確認しなければならない。"
  },
  {
    "start": 953888,
    "end": 956618,
    "text": "さて、楽しいのはこのフェッチ・ステートメントだ。"
  },
  {
    "start": 956714,
    "end": 959694,
    "text": "やり方もいいし、ヘッダーもいいし、ボディもいい。"
  },
  {
    "start": 959812,
    "end": 967150,
    "text": "これで、実際のOpenAI APIから返されるデータを取得するdotと言うことができる。"
  },
  {
    "start": 967230,
    "end": 972302,
    "text": "最初に、return data JSONと言って、このデータをJSON形式にしようと思う。"
  },
  {
    "start": 972366,
    "end": 978990,
    "text": "次に、JavaScriptで実際に処理できる新しいJSONデータを取得できるように、もう1つのthenステートメントを実行できる。"
  },
  {
    "start": 979070,
    "end": 982550,
    "text": "とりあえず、コンソールのログデータということにしておく。"
  },
  {
    "start": 982700,
    "end": 985394,
    "text": "よし、アプリケーションに移動して、この動きを見てみよう。"
  },
  {
    "start": 985442,
    "end": 987814,
    "text": "つまり、コンソールのログデータがあることが前提だ。"
  },
  {
    "start": 987852,
    "end": 990950,
    "text": "ここに入ってメッセージを入力すればいいんだ。"
  },
  {
    "start": 991020,
    "end": 993594,
    "text": "ウェブサイトって何？"
  },
  {
    "start": 993712,
    "end": 997018,
    "text": "こっちで反響があったのがわかるだろう。"
  },
  {
    "start": 997104,
    "end": 1001222,
    "text": "実際のレスポンスは、このChoices配列の最初の部分に入る。"
  },
  {
    "start": 1001286,
    "end": 1007150,
    "text": "Choices（選択肢）」から「Message（メッセージ）」、そして「Content（コンテンツ）」へと進みます。"
  },
  {
    "start": 1007300,
    "end": 1013822,
    "text": "なぜOpenAIがこのAPIを設計したのかわからない。"
  },
  {
    "start": 1013876,
    "end": 1020782,
    "text": "このデータ・オブジェクトに入り、ここにあるコンテンツを取得し、それをユーザーに表示しなければならない。"
  },
  {
    "start": 1020846,
    "end": 1026150,
    "text": "ウェブサイトは、インターネット上でさまざまなものを見つけたり見たりできる場所です。"
  },
  {
    "start": 1026220,
    "end": 1029654,
    "text": "ウェブサイトとは何か？"
  },
  {
    "start": 1029772,
    "end": 1036722,
    "text": "コンソール・ログにデータの選択肢を記録してみよう。"
  },
  {
    "start": 1036866,
    "end": 1041542,
    "text": "それは最初の選択肢の配列にあり、次にメッセージにあり、そしてコンテンツにある。"
  },
  {
    "start": 1041676,
    "end": 1046362,
    "text": "最初の配列、message、そしてcontentに移動する。"
  },
  {
    "start": 1046496,
    "end": 1050410,
    "text": "これで実行すると、77行目からの文字列が表示されるはずだ。"
  },
  {
    "start": 1050480,
    "end": 1052074,
    "text": "アプリケーションを更新したところだ。"
  },
  {
    "start": 1052192,
    "end": 1055946,
    "text": "プログラミング言語とは何か？"
  },
  {
    "start": 1056058,
    "end": 1062638,
    "text": "77行目に文字列があり、それをメッセージとしてユーザーに表示することができる。"
  },
  {
    "start": 1062724,
    "end": 1068462,
    "text": "ひとつは、ユーザーに新しいメッセージを表示するために、メッセージを設定することだ。"
  },
  {
    "start": 1068526,
    "end": 1071954,
    "text": "つのものからなる配列を作ろうと思う。"
  },
  {
    "start": 1072072,
    "end": 1077906,
    "text": "当初は、これまで見てきたようなドット、ドット、ドットのチャットメッセージが表示される。"
  },
  {
    "start": 1078008,
    "end": 1082934,
    "text": "そしてその上に新しいメッセージを置く。"
  },
  {
    "start": 1083052,
    "end": 1088246,
    "text": "この新しいメッセージは、メッセージはここにあるデータと等しいと言うことになる。"
  },
  {
    "start": 1088268,
    "end": 1093302,
    "text": "メッセージの実際の文字列と、送信者がチャットGPTに等しいことを示す。"
  },
  {
    "start": 1093446,
    "end": 1103354,
    "text": "みんな、チャットGPTの大文字と小文字を間違えないように気をつけてくれ。"
  },
  {
    "start": 1103392,
    "end": 1108894,
    "text": "チャットのGPTが常に正しい大文字であることを確認してください。"
  },
  {
    "start": 1108932,
    "end": 1112874,
    "text": "これでユーザーはチャットGPTからの応答を見ることができる。"
  },
  {
    "start": 1113002,
    "end": 1122530,
    "text": "というのも、最初にタイピングをtrueに設定したのを覚えているだろうからだ。"
  },
  {
    "start": 1122600,
    "end": 1126382,
    "text": "というわけで、ようやくAPIレスポンスを得たので、これをfalseに戻すことができる。"
  },
  {
    "start": 1126446,
    "end": 1128130,
    "text": "よし、実際に見てみよう。"
  },
  {
    "start": 1128210,
    "end": 1131570,
    "text": "JavaScriptはどのように学べばいいのでしょうか？"
  },
  {
    "start": 1131650,
    "end": 1137702,
    "text": "私たちのためにタイピングしてくれるし、ドカンとかなり大きな手応えを与えてくれる。"
  },
  {
    "start": 1137756,
    "end": 1140038,
    "text": "まずJavaScriptとは何かを理解する必要がある。"
  },
  {
    "start": 1140204,
    "end": 1142246,
    "text": "よし、みんな、そろそろメモを取ろうか。"
  },
  {
    "start": 1142278,
    "end": 1149002,
    "text": "これは実際、かなり良い反応であり、今言われたことについて具体的な質問をすることもできる。"
  },
  {
    "start": 1149056,
    "end": 1154862,
    "text": "チャットGPTのように、メッセージを正しく設定することで、こちらが言ったことの文脈をすべて理解してくれる。"
  },
  {
    "start": 1154916,
    "end": 1156202,
    "text": "実際に覚えている。"
  },
  {
    "start": 1156266,
    "end": 1158090,
    "text": "JavaScriptをどのように学ぶべきか？"
  },
  {
    "start": 1158170,
    "end": 1160634,
    "text": "だから、このプロンプトに特化した質問をすることもできる。"
  },
  {
    "start": 1160682,
    "end": 1168318,
    "text": "例えば、インターンシップを2回経験した開発者にとって、具体的にどのようなプロジェクトが良いのでしょうか？"
  },
  {
    "start": 1168494,
    "end": 1169410,
    "text": "驚くべきことだ。"
  },
  {
    "start": 1169480,
    "end": 1172930,
    "text": "これで、アプリケーションでチャットGPTが完全に初期化されました。"
  },
  {
    "start": 1173080,
    "end": 1181986,
    "text": "もしこれをポートフォリオに載せたりするのであれば、アプリのJSXに戻って、メッセージ・リストを表示することができます。"
  },
  {
    "start": 1182018,
    "end": 1183702,
    "text": "93行目あたりになるはずだ。"
  },
  {
    "start": 1183836,
    "end": 1187138,
    "text": "で、スクロールの動作をsmoothに設定する。"
  },
  {
    "start": 1187234,
    "end": 1191314,
    "text": "なぜデフォルトでこのような動作になっていないのかはわからないが、デフォルトではなんだかぎこちない。"
  },
  {
    "start": 1191362,
    "end": 1194138,
    "text": "そうすれば、スクロールしているときの見栄えがよくなる。"
  },
  {
    "start": 1194224,
    "end": 1206090,
    "text": "この最初のシステム・メッセージが持つパワーをお見せするために、53行目あたりで、海賊らしく言ってやろう。"
  },
  {
    "start": 1206170,
    "end": 1211290,
    "text": "アプリケーションに戻って、APIエンドポイントとは何か？"
  },
  {
    "start": 1211370,
    "end": 1213658,
    "text": "マチが教えてくれるよ。"
  },
  {
    "start": 1213754,
    "end": 1220546,
    "text": "じゃあ、僕の声が気に入らなくて海賊に習いたいなら、こうすればいい。"
  },
  {
    "start": 1220728,
    "end": 1224062,
    "text": "これは実際に、まったく馬鹿げたことではない応用が利く。"
  },
  {
    "start": 1224126,
    "end": 1226434,
    "text": "例えば海賊とかね。"
  },
  {
    "start": 1226552,
    "end": 1229230,
    "text": "私は10年の経験を持つソフトウェア・エンジニアです。"
  },
  {
    "start": 1229310,
    "end": 1232854,
    "text": "私たちへの説明の仕方も変わるだろうし、私たちはこれを見ることができる。"
  },
  {
    "start": 1232892,
    "end": 1234454,
    "text": "これを救いに行こう"
  },
  {
    "start": 1234492,
    "end": 1237506,
    "text": "私は10年の経験を持つソフトウェア・エンジニアです。"
  },
  {
    "start": 1237618,
    "end": 1239282,
    "text": "必ずアプリケーションを更新してください。"
  },
  {
    "start": 1239436,
    "end": 1242230,
    "text": "APIとは何ですか？"
  },
  {
    "start": 1242310,
    "end": 1244502,
    "text": "を見れば、実際には違う言葉を使っていることがわかるだろう。"
  },
  {
    "start": 1244566,
    "end": 1249430,
    "text": "ほら、スケーラビリティ、セキュリティ、メンテナンス・ソフトウェア・コンポーネントの話だ。"
  },
  {
    "start": 1249510,
    "end": 1262938,
    "text": "だから、もう一度戻って、私はコンピューターについて学んだばかりの7歳の子どもです。"
  },
  {
    "start": 1263034,
    "end": 1267006,
    "text": "セキュリティやおかしなことを教えているのではないことがわかるだろう。"
  },
  {
    "start": 1267188,
    "end": 1270442,
    "text": "APIはレストランのウェイターのようなものだ。"
  },
  {
    "start": 1270506,
    "end": 1274522,
    "text": "このシステム・プロンプトに基づいて、話し方を完全に変えているんだ。"
  },
  {
    "start": 1274586,
    "end": 1276678,
    "text": "よし、みんな、これでビデオの内容はだいたいわかった。"
  },
  {
    "start": 1276764,
    "end": 1282694,
    "text": "全く新しいAPIを使うことができるので、このプロジェクトがみなさんにとって楽しいものになることを願っています。"
  },
  {
    "start": 1282812,
    "end": 1291090,
    "text": "これは正直なところ、素晴らしいポートフォリオ・プロジェクトである。"
  },
  {
    "start": 1291170,
    "end": 1293126,
    "text": "その点で参考になれば幸いだ。"
  },
  {
    "start": 1293228,
    "end": 1295542,
    "text": "ここまで来たら、遠慮なくチャンネルを登録してほしい。"
  },
  {
    "start": 1295596,
    "end": 1296500,
    "text": "ご視聴ありがとうございました。"
  }
]