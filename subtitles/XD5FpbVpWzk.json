[
  {
    "start": 280,
    "end": 10478,
    "text": "このチュートリアルでは、next JSのサーバーアクションについて知る必要があることをすべて学び、その過程で完全に機能する素晴らしい求人掲示板アプリケーションを構築します。"
  },
  {
    "start": 10574,
    "end": 12998,
    "text": "まず、サーバーアクションとは何ですか？"
  },
  {
    "start": 13054,
    "end": 19310,
    "text": "サーバー・アクションは、次のJSでは比較的新しい機能であることを明確にした方がいいかもしれない。"
  },
  {
    "start": 19390,
    "end": 30882,
    "text": "このビデオを作成した時点の最新バージョンであるnext JS 14では安定版とされており、サーバー・ポスト・エンドポイントを通常の関数として記述する方法を提供している。"
  },
  {
    "start": 30986,
    "end": 35154,
    "text": "投稿リクエストは、主にデータベース内の何かを更新するために使用されます。"
  },
  {
    "start": 35202,
    "end": 42194,
    "text": "例えば、ユーザーが当社のウェブサイトを通じて新しいコメントやブログ記事、その他のリソースを作成した場合などです。"
  },
  {
    "start": 42322,
    "end": 49106,
    "text": "そして、フロントエンドからバックエンドにpostリクエストを送り、サーバーがこの新しいデータでデータベースを更新する。"
  },
  {
    "start": 49178,
    "end": 54396,
    "text": "例えば、データベースやブログ記事などに新しいコメントを挿入することで。"
  },
  {
    "start": 54508,
    "end": 58244,
    "text": "通常は、このために本格的なサーバー・エンドポイントを作成しなければならない。"
  },
  {
    "start": 58332,
    "end": 71564,
    "text": "バックエンドにnext JSを使用する場合、これはルートハンドラで、投稿エンドポイントを設定し、フロントエンドからこの投稿エンドポイントを呼び出すには、フェッチリクエストを送信する必要がある。"
  },
  {
    "start": 71652,
    "end": 83440,
    "text": "ルートハンドラの代わりに、通常の関数であるサブアクションを書くことができ、フェッチリクエストを作る代わりに、フロントエンドのコードから他の関数と同じようにこの関数を直接呼び出すことができます。"
  },
  {
    "start": 83540,
    "end": 91128,
    "text": "裏側では、next JSは自動的にこれをpostリクエストに変えるが、コードがより簡潔になるという利点がある。"
  },
  {
    "start": 91264,
    "end": 95288,
    "text": "もうひとつの大きな利点は、JavaScriptを必要としないことだ。"
  },
  {
    "start": 95384,
    "end": 106832,
    "text": "JavaScriptがブラウザーで有効になっていなくても、あるいはユーザーのインターネット接続が遅く、JavaScriptがまだロードされていない場合でも、サーバーアクションを呼び出すことができます。"
  },
  {
    "start": 106936,
    "end": 109808,
    "text": "これがプログレッシブ・エンハンスメントの考え方だ。"
  },
  {
    "start": 109864,
    "end": 115028,
    "text": "このチュートリアルを通して、ステップ・バイ・ステップで学ぶことができる。"
  },
  {
    "start": 115144,
    "end": 122692,
    "text": "さて、リアクトのサーバーコンポーネントとサーバーアクションの違いは何なのか、いつどちらを使えばいいのか、という疑問もあるかもしれない。"
  },
  {
    "start": 122796,
    "end": 129380,
    "text": "違いは、リアクト・サーバー・コンポーネントでは、サーバーからデータを取得してページをレンダリングするだけだということだ。"
  },
  {
    "start": 129460,
    "end": 144288,
    "text": "サーバー・コンポーネントはサーバー上で実行されるため、サーバー・コンポーネントで直接データベースにリクエストすることができる。"
  },
  {
    "start": 144384,
    "end": 151288,
    "text": "サーバーコンポーネントは、それ自体では、ポストリクエストを送信するためにサーバー上のデータを更新する方法を提供しません。"
  },
  {
    "start": 151384,
    "end": 161040,
    "text": "これは、前に説明したように、通常はfetchリクエストでpostエンドポイントにフォールバックするところだが、今はサーバーアクションでもっと簡単にできる。"
  },
  {
    "start": 161120,
    "end": 164944,
    "text": "このチュートリアルでは、サーバーコンポーネントとサーバーアクションの両方を使用します。"
  },
  {
    "start": 164992,
    "end": 167600,
    "text": "まだわからなくても心配しないで。"
  },
  {
    "start": 167680,
    "end": 169962,
    "text": "これが終われば、あなたはそれを理解するだろう。"
  },
  {
    "start": 170056,
    "end": 172350,
    "text": "このチュートリアルには前提条件がひとつある。"
  },
  {
    "start": 172430,
    "end": 176022,
    "text": "次のJSアプリ・ルーターについての基本を知っておく必要がある。"
  },
  {
    "start": 176086,
    "end": 186790,
    "text": "右上の情報カードボックスに、このビデオへのリンクを貼っておきます。"
  },
  {
    "start": 186870,
    "end": 189574,
    "text": "これを先に見てから、このビデオに戻ってきてもいい。"
  },
  {
    "start": 189702,
    "end": 193742,
    "text": "さて、ここでこれから作るプロジェクトを見てみよう。"
  },
  {
    "start": 193846,
    "end": 196954,
    "text": "それでは、とてもクールなジョブボット・アプリケーションを作りましょう。"
  },
  {
    "start": 197062,
    "end": 200642,
    "text": "ここでは、現在募集中のさまざまな仕事についてご紹介します。"
  },
  {
    "start": 200746,
    "end": 202138,
    "text": "ページネーションもある。"
  },
  {
    "start": 202234,
    "end": 206226,
    "text": "仕事の詳細を表示することができ、ここではリッチテキストフォーマットが用意されている。"
  },
  {
    "start": 206298,
    "end": 215698,
    "text": "太字やリスト、イタリック体で書くようなものがあり、これらのエントリーをマークダウン形式でフロントページに保存することでこれを実現している。"
  },
  {
    "start": 215754,
    "end": 217842,
    "text": "仕事を絞り込むこともできる。"
  },
  {
    "start": 217986,
    "end": 220066,
    "text": "例えば、検索語を入力することができる。"
  },
  {
    "start": 220138,
    "end": 223906,
    "text": "さまざまなタイプや利用可能な場所を探すことができる。"
  },
  {
    "start": 224018,
    "end": 231086,
    "text": "ロケーション・フィルタのクールなところは、ここに表示されているエントリーの中で、実際に存在するロケーションのリストだけが表示されることだ。"
  },
  {
    "start": 231158,
    "end": 232214,
    "text": "試してみよう。"
  },
  {
    "start": 232262,
    "end": 235970,
    "text": "クパチーノ、あるいはどう発音するかはわからないが、フィルターをかけてみよう。"
  },
  {
    "start": 236470,
    "end": 241810,
    "text": "クパチーノでの求人はこちらです。"
  },
  {
    "start": 242390,
    "end": 249366,
    "text": "タイトルは、ご覧のように、SEOとユーザーエクスペリエンスのために良い適用したフィルタにも適応します。"
  },
  {
    "start": 249518,
    "end": 252126,
    "text": "は、すべてのフィルタをURLに格納します。"
  },
  {
    "start": 252198,
    "end": 262038,
    "text": "ここにあるように、クパチーノという場所がURL検索のパラマウスになり、さらにフィルタを追加すると、ここにアップルという検索語が追加される。"
  },
  {
    "start": 262174,
    "end": 264574,
    "text": "そうすれば、URLにも追加される。"
  },
  {
    "start": 264702,
    "end": 274006,
    "text": "というのも、このURLをコピーして、誰かと共有したり、後で使うために保存しておけば、まったく同じ検索結果が得られるからだ。"
  },
  {
    "start": 274038,
    "end": 275630,
    "text": "もう一度、試してみよう。"
  },
  {
    "start": 275670,
    "end": 285192,
    "text": "同じURLで新しいウィンドウで開いてみよう。同じ見出しで同じフィルターが適用され、同じ結果が得られる。"
  },
  {
    "start": 285366,
    "end": 289108,
    "text": "また、当ウェブサイトから直接求人情報を掲載することも可能です。"
  },
  {
    "start": 289244,
    "end": 303700,
    "text": "そしてフォームのバリデーションにはリアクトのフックフォームを使います。リアクトのフックフォームは今リアクトで最も人気のあるフォームライブラリです。"
  },
  {
    "start": 303740,
    "end": 305876,
    "text": "では、このバリデーションに記入しましょう。"
  },
  {
    "start": 305908,
    "end": 310440,
    "text": "ダミーデータを使えば、どのような仕事なのかを選択することができる。"
  },
  {
    "start": 310790,
    "end": 312510,
    "text": "私たちは会社を提供しなければならない。"
  },
  {
    "start": 312670,
    "end": 314630,
    "text": "ロゴをアップロードすることもできる。"
  },
  {
    "start": 314750,
    "end": 321150,
    "text": "このロゴは、Vercelが直接提供するファイルストレージサービスであるVerzel blobに保存されます。"
  },
  {
    "start": 321230,
    "end": 326038,
    "text": "もちろん、これを例えばアマゾンの「3」に置き換えることもできる。"
  },
  {
    "start": 326134,
    "end": 328310,
    "text": "ベルサイユのブロブは本当に使いやすい。"
  },
  {
    "start": 328350,
    "end": 330310,
    "text": "だから、ここでこれを使いたいんだ。"
  },
  {
    "start": 330470,
    "end": 333966,
    "text": "ここではとりあえず、以前のプロジェクトのロゴを使ってみよう。"
  },
  {
    "start": 334118,
    "end": 339798,
    "text": "このフォームにはダイナミック・バリデーションがあります。"
  },
  {
    "start": 339894,
    "end": 344434,
    "text": "どういうことかというと、ここでリモートを選択すれば、オフィスの場所は必要ない。"
  },
  {
    "start": 344482,
    "end": 346714,
    "text": "オフィスの所在地は問わない。"
  },
  {
    "start": 346842,
    "end": 357682,
    "text": "現場またはハイブリッドを選択してこれを提出しようとすると、オフィスの所在地が必要になる。"
  },
  {
    "start": 357786,
    "end": 361058,
    "text": "ここでは都市のリストから検索することができる。"
  },
  {
    "start": 361194,
    "end": 367042,
    "text": "例えば、ドイツのベルリンを検索してみよう。"
  },
  {
    "start": 367106,
    "end": 368202,
    "text": "それはここに置かれる。"
  },
  {
    "start": 368266,
    "end": 376412,
    "text": "勤務地を選択し、ユーザーが応募できるメールアドレスかウェブサイトを入力する。"
  },
  {
    "start": 376476,
    "end": 380364,
    "text": "ここに何か入力すれば、もうEメールを提供する必要はない。"
  },
  {
    "start": 380452,
    "end": 384620,
    "text": "ウェブサイトのURLを提供しない場合、代わりにEメールを提供しなければなりません。"
  },
  {
    "start": 384700,
    "end": 386660,
    "text": "どちらか、あるいは両方だ。"
  },
  {
    "start": 386780,
    "end": 390532,
    "text": "例えばapplicationsla.com。"
  },
  {
    "start": 390596,
    "end": 392084,
    "text": "これは有効なEメールだろう。"
  },
  {
    "start": 392212,
    "end": 396916,
    "text": "ここでは、さまざまなフォーマットをサポートするリッチテキストエディタを使用します。"
  },
  {
    "start": 397028,
    "end": 399580,
    "text": "例えば、このテキストを太字にすることができる。"
  },
  {
    "start": 399740,
    "end": 403092,
    "text": "その場合、給与の数字も記入しなければならない。"
  },
  {
    "start": 403276,
    "end": 406720,
    "text": "これはサーバーのアクションで処理されます。"
  },
  {
    "start": 409860,
    "end": 416996,
    "text": "そしてこの確認ページにリダイレクトされ、さらにこのプロジェクトに独自の管理バックエンドを追加する。"
  },
  {
    "start": 417108,
    "end": 425400,
    "text": "フロントページを見ると、新しい仕事はまだ承認されていない。"
  },
  {
    "start": 426260,
    "end": 430092,
    "text": "ここで、管理者アカウント（Florian）でサインインしなければならない。"
  },
  {
    "start": 430156,
    "end": 432400,
    "text": "それはcodinginflow.comだ。"
  },
  {
    "start": 435140,
    "end": 443084,
    "text": "さて、ログインして管理者のバックエンドに行くと、新しい仕事が承認されていないことがわかります。"
  },
  {
    "start": 443212,
    "end": 446004,
    "text": "クリックすると、再び詳細ページが表示される。"
  },
  {
    "start": 446092,
    "end": 447180,
    "text": "これがマークダウンだ。"
  },
  {
    "start": 447260,
    "end": 456050,
    "text": "ここに提供したすべてのメタ情報があります。そして、ジョブを削除するか承認するかを選択します。"
  },
  {
    "start": 456130,
    "end": 470506,
    "text": "サーバーコンポーネント、クライアントコンポーネント、リアクトフックフォーム、リアクトフックフォームなしなど、さまざまな組み合わせでサーバーアクションを使用する方法を学びます。"
  },
  {
    "start": 470618,
    "end": 474930,
    "text": "この仕事を承認すると、このトップページに表示されます。"
  },
  {
    "start": 474970,
    "end": 476748,
    "text": "削除すれば消えてしまう。"
  },
  {
    "start": 476834,
    "end": 479860,
    "text": "ちんぷんかんぷんなので削除しましょう。"
  },
  {
    "start": 480320,
    "end": 485712,
    "text": "削除すると、しばらくしてデータベースから削除されます。"
  },
  {
    "start": 485816,
    "end": 489944,
    "text": "ウェブサイトも可能な限り、順次充実させていく。"
  },
  {
    "start": 490072,
    "end": 504472,
    "text": "プログレッシブ・エンハンスメントとは、JavaScriptが無効になっていたり、まだ読み込まれていなかったりしても、特定の機能が動作することを意味します。これは、インターネット接続が悪いユーザーにとって重要なことです。"
  },
  {
    "start": 504536,
    "end": 507256,
    "text": "JavaScriptの機能はまだ利用できない。"
  },
  {
    "start": 507368,
    "end": 515016,
    "text": "多くの人がJavaScriptに依存したフォームを作るので、JavaScriptがまだ使えないとフォームを送信できない。"
  },
  {
    "start": 515088,
    "end": 521352,
    "text": "プログレッシブ・エンハンスメントの考え方は、JavaScriptがまだ読み込まれていなくてもフォームを送信できるというものです。"
  },
  {
    "start": 521456,
    "end": 532416,
    "text": "というのも、これにはステートが必要で、ステートにはJavaScriptが必要だからです。"
  },
  {
    "start": 532528,
    "end": 533628,
    "text": "試してみよう。"
  },
  {
    "start": 533744,
    "end": 545716,
    "text": "クロームの開発ツールを開き、ctrl shift pを押し、JavaScriptを無効にする。"
  },
  {
    "start": 545828,
    "end": 547884,
    "text": "まずページを更新しなければならない。"
  },
  {
    "start": 548012,
    "end": 553300,
    "text": "現在、JavaScriptは無効になっていますが、こちらのフィルター・フォームは機能しています。"
  },
  {
    "start": 553460,
    "end": 562300,
    "text": "唯一の違いは、ボタンにローディング・スピナーが表示されないことです。"
  },
  {
    "start": 562460,
    "end": 565420,
    "text": "これがプログレッシブ・エンハンスメントの考え方だ。"
  },
  {
    "start": 565500,
    "end": 568532,
    "text": "最小限の要件で機能的なウェブサイトを作りましょう。"
  },
  {
    "start": 568636,
    "end": 575540,
    "text": "JavaScriptがロードされる前に、JavaScriptが利用可能な場合は、さらに見栄えを良くします。"
  },
  {
    "start": 575700,
    "end": 585116,
    "text": "この場合、JavaScriptとノードJavaScriptの唯一の違いは、JavaScriptが利用可能な場合にフィルター・ボタンにローディング・スピナーがあることです。"
  },
  {
    "start": 585268,
    "end": 589648,
    "text": "あとはJavaScriptがあってもなくても同じように動作する。"
  },
  {
    "start": 589694,
    "end": 601508,
    "text": "しかし、インターネット接続が遅く、JavaScriptの読み込みに時間がかかっている可能性の方がはるかに高い。"
  },
  {
    "start": 601604,
    "end": 610988,
    "text": "プログレッシブ・エンハンスメントでは、ユーザーがページを見ることができるようになると同時に、ページがインタラクティブになり、JavaScriptが読み込まれるまで待つ必要がなくなります。"
  },
  {
    "start": 611084,
    "end": 617222,
    "text": "これは理想的な状況だが、もちろん、新しいジョブ・フォームでは常にこれが可能というわけではない。"
  },
  {
    "start": 617286,
    "end": 626078,
    "text": "例えば、このページでは動的検証やJavaScriptのロジックがたくさんあるので、これをJavaScriptで動作させるのは本当に難しい。"
  },
  {
    "start": 626174,
    "end": 631614,
    "text": "例えば、他の入力フィールドに依存する入力フィールドや、位置検索などです。"
  },
  {
    "start": 631702,
    "end": 638878,
    "text": "これはJavaScriptなしでは不可能であり、このリッチテキストエディタもJavaScriptなしでは動作しない。"
  },
  {
    "start": 638974,
    "end": 642446,
    "text": "このフォームが徐々に強化されることはない。"
  },
  {
    "start": 642518,
    "end": 655186,
    "text": "これはJavaScriptを動作させるために必要ですが、これは私たちのウェブサイトの中核機能ではないし、誰かがJavaScriptを無効にして、このフォーム全体に入力し、送信しようとする可能性は非常に低いので、これでいいと思います。"
  },
  {
    "start": 655258,
    "end": 661882,
    "text": "これは非常にあり得ないことで、インターネット上でJavaScriptをまったく有効にしていないユーザーは1％程度しかいない。"
  },
  {
    "start": 661946,
    "end": 669602,
    "text": "これらの人々は、インターネットのほとんどがJなしでは機能しないことをすでに知っているので、このフォームはプログレッシブ・エンハンスメントにとってそれほど重要ではない。"
  },
  {
    "start": 669706,
    "end": 679956,
    "text": "フロントのフィルターが機能することのほうがはるかに重要です。なぜなら、これはユーザーがウェブサイトを開いたときにすぐに目にする、ウェブサイトの中核的な機能だからです。"
  },
  {
    "start": 680108,
    "end": 683356,
    "text": "これがOJSで動くようになったのは大きな収穫だ。"
  },
  {
    "start": 683468,
    "end": 694916,
    "text": "このウェブサイトは完全なレスポンシブにも対応しており、画面が小さくなると、このフィルター・ツァイト・バーはトップ・バーに変わるが、上部に張り付いているので、常に画面上に表示される。"
  },
  {
    "start": 694948,
    "end": 699684,
    "text": "必要であればこれを変更することもできるし、他の要素も反応する。"
  },
  {
    "start": 699732,
    "end": 703540,
    "text": "このタイムスタンプと右上のバッチに注目してほしい。"
  },
  {
    "start": 703700,
    "end": 715676,
    "text": "大きな画面では右側に表示されますが、画面が小さくなると、他のアイコンと一緒にこのリストに移動します。"
  },
  {
    "start": 715788,
    "end": 720900,
    "text": "また、適切なメタデータを表示します。たとえば、ここではタブのタイトルに表示します。"
  },
  {
    "start": 721020,
    "end": 723132,
    "text": "私たちがすべてを引き受けます。"
  },
  {
    "start": 723276,
    "end": 727388,
    "text": "さて、このプロジェクトで使う他のテクノロジーについて手短に話そう。"
  },
  {
    "start": 727524,
    "end": 734180,
    "text": "ブラジルから直接提供されたpostgresデータベースであるZell postgresにデータを保存します。"
  },
  {
    "start": 734260,
    "end": 737048,
    "text": "次のJのプロジェクトに加えるのはとても簡単だ。"
  },
  {
    "start": 737184,
    "end": 743416,
    "text": "PostgresでもMySQLでもMongoDBでも構いません。"
  },
  {
    "start": 743528,
    "end": 748680,
    "text": "私はずっとMongoDBを使ってきたので、チュートリアルにバリエーションを持たせたいと思っています。"
  },
  {
    "start": 748760,
    "end": 754288,
    "text": "今回はpostgresを使用するが、データベースとのやり取りにはPrisma ormも使用する。"
  },
  {
    "start": 754384,
    "end": 758656,
    "text": "のコードは、MongoDbや他のものを使う場合とほとんど同じです。"
  },
  {
    "start": 758728,
    "end": 771668,
    "text": "Prismaは低レベルのデータベース・コードのほとんどを抽象化しているため、ご覧のように会社のロゴをアップロードすることもでき、Verzelが再び提供するファイル・ストレージであるVercel blobに保存します。"
  },
  {
    "start": 771764,
    "end": 776412,
    "text": "スタイリングにはtailwind CSSを使用し、コンポーネントライブラリにはshed Cnを使用します。"
  },
  {
    "start": 776476,
    "end": 782844,
    "text": "また、Tailwind CSSでprettierを設定する方法もご紹介します。"
  },
  {
    "start": 782972,
    "end": 791098,
    "text": "Prettierはコード整形ツールで、特にtailwindと一緒に使うと便利だ。"
  },
  {
    "start": 791204,
    "end": 795774,
    "text": "このチュートリアルでは、さらにいくつかのライブラリを使用し、多くの重要なトピックを学びます。"
  },
  {
    "start": 795822,
    "end": 802134,
    "text": "最終的には、このプロジェクト全体をデプロイして、実際のURLで開くことができるようにするつもりだ。"
  },
  {
    "start": 802222,
    "end": 804958,
    "text": "このチュートリアルを楽しんでください。"
  },
  {
    "start": 805054,
    "end": 806638,
    "text": "このビデオに「いいね！」をお願いします。"
  },
  {
    "start": 806734,
    "end": 818670,
    "text": "まずはコマンドラインを開き、node minus vanでインストールしたnodeのバージョンを確認する。"
  },
  {
    "start": 818820,
    "end": 827938,
    "text": "このプロジェクトでは、ノート20以上が必要です。そうでないと、バックエンドのコードで使用するファイル・タイプが使用できないからです。"
  },
  {
    "start": 828074,
    "end": 830170,
    "text": "ノード20に追加された。"
  },
  {
    "start": 830290,
    "end": 833082,
    "text": "少なくともノード20を使うように。"
  },
  {
    "start": 833186,
    "end": 843322,
    "text": "nodejs.orgにアクセスして最新のLTSバージョンをダウンロードしても更新されない場合は、いつものようにこのプロジェクトの開始コードを用意した。"
  },
  {
    "start": 843426,
    "end": 847362,
    "text": "このレポジトリへのリンクを、下のビデオの説明に貼っておこう。"
  },
  {
    "start": 847466,
    "end": 855078,
    "text": "このスタートコードでは、使用する他のパッケージをインストールし、後で使用するロゴのようなファイルを追加している。"
  },
  {
    "start": 855174,
    "end": 862766,
    "text": "この開始コードの利点は、すべてのパッケージが、私がこのチュートリアルで使っているのとまったく同じバージョン番号になることだ。"
  },
  {
    "start": 862838,
    "end": 864902,
    "text": "すべてがまったく同じように機能する。"
  },
  {
    "start": 864966,
    "end": 869678,
    "text": "このチュートリアルを2年先の未来に見たとしても、私はあなたに選択肢を与える。"
  },
  {
    "start": 869734,
    "end": 873886,
    "text": "スタイリングコードをダウンロードするか、ゼロからプロジェクトを作成することができます。"
  },
  {
    "start": 873958,
    "end": 876014,
    "text": "その方法をすぐにお見せしよう。"
  },
  {
    "start": 876102,
    "end": 890226,
    "text": "スタイリングコードを使いたい場合は、リポジトリをクローンし、Bのコードでプロジェクトを開き、NPm installを実行する必要があります。"
  },
  {
    "start": 890338,
    "end": 895290,
    "text": "Npm installを実行すればOKだ。"
  },
  {
    "start": 895450,
    "end": 899370,
    "text": "自分でプロジェクトを立ち上げたい場合は、こうすることもできる。"
  },
  {
    "start": 899410,
    "end": 911360,
    "text": "このチュートリアルでは、必要なファイルとパッケージをすべて提供しますが、新しいバージョンのパッケージを使用している場合は、バージョン番号が異なり、コードを変更する必要があるかもしれません。"
  },
  {
    "start": 911490,
    "end": 913436,
    "text": "自分でプロジェクトを立ち上げたい場合は？"
  },
  {
    "start": 913508,
    "end": 916388,
    "text": "次に、このプロジェクトを置くフォルダを開く。"
  },
  {
    "start": 916524,
    "end": 919236,
    "text": "ここでは、ウィンドウズでコマンドラインを開きたい。"
  },
  {
    "start": 919268,
    "end": 920540,
    "text": "それがパワーシェルだ。"
  },
  {
    "start": 920700,
    "end": 925880,
    "text": "ここでいつものように、NPXを使って新しい次のJのプロジェクトを作成する。"
  },
  {
    "start": 926380,
    "end": 931400,
    "text": "遅くとも次のアプリを作成する。"
  },
  {
    "start": 932580,
    "end": 936548,
    "text": "それをワイヤーで確認し、このプロジェクトを立ち上げる。"
  },
  {
    "start": 936724,
    "end": 938560,
    "text": "プロジェクト名は何ですか？"
  },
  {
    "start": 938660,
    "end": 943420,
    "text": "これを次のJSジョブボードと呼ぶことにしよう。"
  },
  {
    "start": 944280,
    "end": 946472,
    "text": "タイプスクリプトを使ってみたい？"
  },
  {
    "start": 946536,
    "end": 948536,
    "text": "そう、私たちは狂人ではないからだ。"
  },
  {
    "start": 948648,
    "end": 950360,
    "text": "Eslintを使いたいですか？"
  },
  {
    "start": 950440,
    "end": 951528,
    "text": "そうだね。"
  },
  {
    "start": 951664,
    "end": 953696,
    "text": "Tailwind cssも。"
  },
  {
    "start": 953808,
    "end": 961776,
    "text": "また、SrCディレクトリも使いたい。SrCディレクトリはコードを整理するのに便利だし、アプリ・ルーターも使いたい。"
  },
  {
    "start": 961968,
    "end": 964688,
    "text": "デフォルトのインポートエイリアスをカスタマイズしますか？"
  },
  {
    "start": 964744,
    "end": 965340,
    "text": "いや。"
  },
  {
    "start": 965820,
    "end": 967860,
    "text": "そして、新しいプロジェクトを立ち上げる。"
  },
  {
    "start": 968020,
    "end": 971948,
    "text": "これも、スタートコードをダウンロードしていない場合にのみ必要です。"
  },
  {
    "start": 972004,
    "end": 974360,
    "text": "これにより、まったく新しいプロジェクトが立ち上がる。"
  },
  {
    "start": 974860,
    "end": 979516,
    "text": "これが終わると、このフォルダーがどこかに表示されるはずだ。"
  },
  {
    "start": 979708,
    "end": 981868,
    "text": "次ページJのジョブボードはそこだ。"
  },
  {
    "start": 982004,
    "end": 987652,
    "text": "これを対コードで開き、いくつかのパッケージをインストールしなければならない。"
  },
  {
    "start": 987756,
    "end": 991264,
    "text": "ただし、これはスターティング・コードを使用しない場合にのみ必要である。"
  },
  {
    "start": 991332,
    "end": 992200,
    "text": "スターティングコードでは"
  },
  {
    "start": 992240,
    "end": 994720,
    "text": "これらのパッケージはすでにインストールされている。"
  },
  {
    "start": 994800,
    "end": 997280,
    "text": "先にNPMインストールを実行した場合。"
  },
  {
    "start": 997440,
    "end": 1003620,
    "text": "しかし、もし自分でプロジェクトを立ち上げるのであれば、ここで使用するさまざまなパッケージをすべてインストールしなければならない。"
  },
  {
    "start": 1004160,
    "end": 1006504,
    "text": "そのすべてをリストアップしなければならない。"
  },
  {
    "start": 1006552,
    "end": 1007880,
    "text": "1つ目はプリズマ。"
  },
  {
    "start": 1007920,
    "end": 1016672,
    "text": "これは、データベースとPrismaのやりとりに使用するOrmで、Prismaスラッシュクライアントを追加します。"
  },
  {
    "start": 1016816,
    "end": 1019016,
    "text": "スペルを間違えないように。"
  },
  {
    "start": 1019208,
    "end": 1027992,
    "text": "そしてZelleブロブを追加し、後で画像ファイルを保存するZellブロブとのやりとりに使用する。"
  },
  {
    "start": 1028176,
    "end": 1036056,
    "text": "それから、リアクト・ドラフトからウィジウィグを除いたものが必要だ。"
  },
  {
    "start": 1036208,
    "end": 1039408,
    "text": "これは \"What you see is what you get \"の略である。"
  },
  {
    "start": 1039464,
    "end": 1045970,
    "text": "このように、入力フィールド・スペースで直接テキスト・スタイルを変更できるエディターを淘汰するのだ。"
  },
  {
    "start": 1046430,
    "end": 1052254,
    "text": "次はマークダウン・マイナス・ドラフト・マイナス・j・sだ。"
  },
  {
    "start": 1052382,
    "end": 1059726,
    "text": "これは、このWhat you see is what you get LDの2つの入力をマークダウンに変換し、データベースに保存できるようにする役割を担っている。"
  },
  {
    "start": 1059918,
    "end": 1066690,
    "text": "さらにreact markdownをインストールし、マークダウンを画面に表示できるように整形する。"
  },
  {
    "start": 1066990,
    "end": 1072494,
    "text": "ユニークなIDを作成するためのナノのアイデアも必要だ。"
  },
  {
    "start": 1072622,
    "end": 1080410,
    "text": "次は日付の書式を設定するdate fnsで、最後に店員を追加する。"
  },
  {
    "start": 1081150,
    "end": 1084950,
    "text": "次のJSクラークは、認証に使うものだ。"
  },
  {
    "start": 1085110,
    "end": 1091454,
    "text": "他にもいくつか使用するパッケージがあるが、後でSchedzynをセットアップする際に自動的にインストールされる。"
  },
  {
    "start": 1091542,
    "end": 1095890,
    "text": "とりあえずEnterキーを押して、これらのパッケージをすべてインストールする。"
  },
  {
    "start": 1096960,
    "end": 1102300,
    "text": "これが完了すると、パッケージJSONにこれらのパッケージが表示されるはずだ。"
  },
  {
    "start": 1102600,
    "end": 1104544,
    "text": "プリズマ......あなたが見たものは、あなたが得たものです。"
  },
  {
    "start": 1104592,
    "end": 1105872,
    "text": "すべてのものはこの中にある。"
  },
  {
    "start": 1105976,
    "end": 1109080,
    "text": "ここで、いくつかの開発依存ファイルもインストールする必要がある。"
  },
  {
    "start": 1109200,
    "end": 1113880,
    "text": "デフォルトの依存関係は、開発でのみ使用されるため、別にインストールされる。"
  },
  {
    "start": 1114040,
    "end": 1116976,
    "text": "これらはプロダクション・コードには含まれない。"
  },
  {
    "start": 1117168,
    "end": 1121622,
    "text": "もう一度npm Iと入力する。"
  },
  {
    "start": 1121736,
    "end": 1126594,
    "text": "次に、ダッシュ・ダッシュ・セーブ・デバックをこのように入力する。"
  },
  {
    "start": 1126722,
    "end": 1135666,
    "text": "ダッシュを2つ加えて、dev dependenciesをインストールしよう。"
  },
  {
    "start": 1135738,
    "end": 1143450,
    "text": "最初のタイプは、スラッシュマークダウンマイナスドラフトマイナスjを追加する。"
  },
  {
    "start": 1143610,
    "end": 1173610,
    "text": "次に、add types slash react minus draft minus what you see is what you get space then prettier without types this time space eslint config prettier space prettier minus plugin minus tailwind css これらは必要なものすべてなので、同様にインストールする。"
  },
  {
    "start": 1173770,
    "end": 1176114,
    "text": "なるほど、tailwind cssのスペルを間違えていた。"
  },
  {
    "start": 1176202,
    "end": 1178578,
    "text": "なぜか追い風勝利と打ってしまった。"
  },
  {
    "start": 1178634,
    "end": 1181460,
    "text": "これを修正してからインストールしよう。"
  },
  {
    "start": 1182240,
    "end": 1192600,
    "text": "さて、コマンドラインを閉じて、エディターの設定をしよう。ここではtailwindとprettierを使っているので、ideがちゃんと動くことを確認したい。"
  },
  {
    "start": 1192680,
    "end": 1200176,
    "text": "これはあなたのidEのコンフィギュレーションなので、たとえスタートコードをダウンロードしたとしても、これらのステップを踏まなければなりません。"
  },
  {
    "start": 1200328,
    "end": 1206312,
    "text": "まず最初に、この公式の tailwind CSS intellisense エクステンションがインストールされていることを確認します。"
  },
  {
    "start": 1206376,
    "end": 1212624,
    "text": "利用可能なクラスを確認できる自動補完を提供してくれるからだ。"
  },
  {
    "start": 1212712,
    "end": 1217180,
    "text": "これが正しく機能するようにするには、ちょっとした設定が必要だ。"
  },
  {
    "start": 1217640,
    "end": 1228420,
    "text": "ファイル環境設定の設定に入り、ここでファイルの関連付けを検索する。"
  },
  {
    "start": 1229080,
    "end": 1236748,
    "text": "ここで、star dot cssという値とtailwind cssという値を持つ項目を追加したい。"
  },
  {
    "start": 1236824,
    "end": 1240924,
    "text": "これにより、CSSファイル内でtailwindがサポートされるようになる。"
  },
  {
    "start": 1241052,
    "end": 1254800,
    "text": "このようにすることで、クラス名の文字列の中にあるtailwindクラスのオートコンプリートを得ることができるからです。"
  },
  {
    "start": 1255140,
    "end": 1261220,
    "text": "このチュートリアルではprettierも使います。prettierは素晴らしいコード整形ツールだからです。"
  },
  {
    "start": 1261300,
    "end": 1265108,
    "text": "意見にとても敏感で、私たちのためにすべての決断を下すということだ。"
  },
  {
    "start": 1265164,
    "end": 1266412,
    "text": "セミコロンはどこにつけるのか？"
  },
  {
    "start": 1266476,
    "end": 1267692,
    "text": "どこに改行を入れるのか？"
  },
  {
    "start": 1267756,
    "end": 1268976,
    "text": "括弧はどこにつけるのか。"
  },
  {
    "start": 1269108,
    "end": 1272040,
    "text": "Prettierがすべてやってくれるので、心配はない。"
  },
  {
    "start": 1272160,
    "end": 1278392,
    "text": "さらに重要なのは、すべてのクラス名を自動的にソートしてくれるtailwind prettierプラグインがあることだ。"
  },
  {
    "start": 1278416,
    "end": 1281456,
    "text": "そうでなければ、簡単に失ってしまうからだ。"
  },
  {
    "start": 1281528,
    "end": 1285768,
    "text": "これらのクラスの概要 私たちはすでに依存関係をインストールしました。"
  },
  {
    "start": 1285904,
    "end": 1288496,
    "text": "必要なのはこの小さなコードだけだ。"
  },
  {
    "start": 1288568,
    "end": 1290168,
    "text": "これは手書きで入力できる。"
  },
  {
    "start": 1290264,
    "end": 1293392,
    "text": "これをコピーして、プロジェクトに入れます。"
  },
  {
    "start": 1293576,
    "end": 1296904,
    "text": "次に、プロジェクトのルートにファイルを作成する。"
  },
  {
    "start": 1296992,
    "end": 1306860,
    "text": "ここに新しいファイルを作成し、prettier config jsと命名する。"
  },
  {
    "start": 1307360,
    "end": 1312500,
    "text": "次に、このコードを貼り付けるか、ここにあるように手書きで入力する。"
  },
  {
    "start": 1313040,
    "end": 1314840,
    "text": "よし、あと少しだ。"
  },
  {
    "start": 1315000,
    "end": 1321880,
    "text": "次に、新しい次のJSプロジェクトに付属しているEslint rz JSONファイルに入ります。"
  },
  {
    "start": 1321960,
    "end": 1328270,
    "text": "デフォルトでは、この値を配列に変更し、Prettierと書かれた2番目の文字列を追加する。"
  },
  {
    "start": 1328610,
    "end": 1332042,
    "text": "これにより、エス・センドとプリティアが干渉しないようになる。"
  },
  {
    "start": 1332186,
    "end": 1336810,
    "text": "それから、プリティアの対コード拡張機能をインストールすることもお勧めする。"
  },
  {
    "start": 1336890,
    "end": 1339522,
    "text": "繰り返しますが、これは公式のものですから、信頼してください。"
  },
  {
    "start": 1339586,
    "end": 1343682,
    "text": "こうすることで、コマンドラインを介さずにコード整形を実行することができる。"
  },
  {
    "start": 1343746,
    "end": 1347554,
    "text": "これは、対コードでフォーマットのショートカットを使えばいい。"
  },
  {
    "start": 1347642,
    "end": 1349658,
    "text": "これをインストールすることをお勧めする。"
  },
  {
    "start": 1349714,
    "end": 1354350,
    "text": "また、設定で少し変更しなければならないことがある。"
  },
  {
    "start": 1354810,
    "end": 1371990,
    "text": "デフォルトのフォーマッターを検索し、Windowsのデフォルトではshift Alt Fであるフォーマットコードのショートカットを押したときに、これをデフォルトのフォーマッターとして使用するために、ここでprettierにリセットする。"
  },
  {
    "start": 1372450,
    "end": 1377914,
    "text": "MacやLinuxでは異なるかもしれないので、この拡張機能をインストールすることをお勧めする。"
  },
  {
    "start": 1378002,
    "end": 1387126,
    "text": "また、Prisma拡張機能をインストールすることをお勧めします。こうすることで、Prismaスキーマファイルでオートコンプリートやコードフォーマット、シンタックスハイライトが使えるようになるからです。"
  },
  {
    "start": 1387238,
    "end": 1390046,
    "text": "絶対に必要というわけではないが、とても便利だ。"
  },
  {
    "start": 1390118,
    "end": 1393334,
    "text": "ここでは何も設定する必要はない。"
  },
  {
    "start": 1393422,
    "end": 1402342,
    "text": "最後に、もしまだインストールしていないのであれば、eslintエクステンションをインストールするのも便利です。"
  },
  {
    "start": 1402486,
    "end": 1412290,
    "text": "これらの拡張機能、eslintやprettierは、私たちがインストールしたパッケージを自動的にピックアップし、基本的にこれらのパッケージと一緒に動作する。"
  },
  {
    "start": 1412330,
    "end": 1422590,
    "text": "通常、prettierやeslintはコマンドラインから実行されるが、これらの対コード拡張機能をインストールすることで、エディターでより簡単に直接使用できるようになる。"
  },
  {
    "start": 1423170,
    "end": 1434786,
    "text": "このassetsフォルダには、プロジェクトで使用する2つの画像が含まれている。"
  },
  {
    "start": 1434938,
    "end": 1440370,
    "text": "スタイリング・コードを使用していない場合は、以下のビデオの説明にこれらのファイルへのリンクを貼ります。"
  },
  {
    "start": 1440490,
    "end": 1447834,
    "text": "そこからコピーして、2つのpngをsrc assetsに入れて、このフォルダに入れる。"
  },
  {
    "start": 1447922,
    "end": 1453130,
    "text": "FUFアイコンは、既存のfavアイコンを置き換えるアプリフォルダに直接属します。"
  },
  {
    "start": 1453170,
    "end": 1455914,
    "text": "古いものを削除して、ここに新しいものを追加してください。"
  },
  {
    "start": 1456002,
    "end": 1458790,
    "text": "これらのファイルはビデオの説明にあります。"
  },
  {
    "start": 1459170,
    "end": 1462834,
    "text": "さて、次は小屋のCNコンポーネントをセットアップする。"
  },
  {
    "start": 1462922,
    "end": 1468406,
    "text": "Schedzynは今、次のJSで最も人気のあるコンポーネントだ。"
  },
  {
    "start": 1468478,
    "end": 1472862,
    "text": "これらのコンポーネントのクールな点は、パッケージとしてインストールしないことだ。"
  },
  {
    "start": 1472966,
    "end": 1478774,
    "text": "その代わりに、基本的にコードをプロジェクトにコピーペーストするコマンドを実行する。"
  },
  {
    "start": 1478942,
    "end": 1482134,
    "text": "何も隠されていないのだから。"
  },
  {
    "start": 1482182,
    "end": 1487238,
    "text": "我々はすべてのコードにアクセスすることができ、いつでも変更し、更新することができる。"
  },
  {
    "start": 1487334,
    "end": 1497788,
    "text": "これらのコンポーネントは、基本的にすべての基本コンポーネントを提供するライブラリであるRedx UIをベースにしており、Chessynはその上にスタイリングを追加します。"
  },
  {
    "start": 1497854,
    "end": 1503224,
    "text": "繰り返しになるが、ここにある追い風クラスを変更し、これらのコンポーネントのコードを変更することができる。"
  },
  {
    "start": 1503312,
    "end": 1506136,
    "text": "これが今、このライブラリーが人気を博している理由だ。"
  },
  {
    "start": 1506208,
    "end": 1510904,
    "text": "私たちは、これらのコンポーネントをたくさん使うつもりだ。"
  },
  {
    "start": 1511032,
    "end": 1529068,
    "text": "特にフォーム・コンポーネントは、ラベルが入力フィールドに適切に接続されていることを確認する必要があり、またエラー・メッセージや説明メッセージも、アクセシビリティのために入力フィールドに接続する必要があるため、自分で正しく設定するのは本当に難しい。"
  },
  {
    "start": 1529144,
    "end": 1534004,
    "text": "shed Cnのような優れたフォームコンポーネントライブラリを使えば、これらすべてを代行してくれる。"
  },
  {
    "start": 1534092,
    "end": 1540084,
    "text": "また、次のJのために、ここにインストレーションの説明がある。"
  },
  {
    "start": 1540212,
    "end": 1547876,
    "text": "すでにschedcnコンポーネントをスタート・コードに追加しているので、スタート・プロジェクトをダウンロードした場合は、この手順を踏む必要はない。"
  },
  {
    "start": 1547948,
    "end": 1553060,
    "text": "なぜすでに追加したかというと、ここでのコマンドは時間の経過とともに変更される可能性があるからだ。"
  },
  {
    "start": 1553140,
    "end": 1560108,
    "text": "生成されるコンポーネント・コードは変更される可能性があるし、2年後とかにこのプロジェクトを見ても壊れないようにしたいんだ。"
  },
  {
    "start": 1560244,
    "end": 1564960,
    "text": "これらのコンポーネントは、スタートコードをダウンロードしていない場合にのみインストールしてください。"
  },
  {
    "start": 1565540,
    "end": 1567316,
    "text": "その方法をお見せしよう。"
  },
  {
    "start": 1567388,
    "end": 1568804,
    "text": "このコマンドが必要だ。"
  },
  {
    "start": 1568852,
    "end": 1575080,
    "text": "NpXは最新のinitでNUIを削除するので、プロジェクトでこれを実行する必要がある。"
  },
  {
    "start": 1575420,
    "end": 1582828,
    "text": "コマンドラインを開き、これをここに貼り付けて実行すると、いくつかの質問をしてくる。"
  },
  {
    "start": 1582964,
    "end": 1585788,
    "text": "おっと、最初のものはすでに確認したが、これは正しい。"
  },
  {
    "start": 1585844,
    "end": 1587396,
    "text": "タイプスクリプトを使いたい？"
  },
  {
    "start": 1587468,
    "end": 1588184,
    "text": "そうだ。"
  },
  {
    "start": 1588372,
    "end": 1590208,
    "text": "どのスタイルにしますか？"
  },
  {
    "start": 1590264,
    "end": 1592856,
    "text": "デフォルトのスタイルはどの色ですか？"
  },
  {
    "start": 1592928,
    "end": 1594440,
    "text": "ベースカラーのスレートとして。"
  },
  {
    "start": 1594480,
    "end": 1595704,
    "text": "好きなものを選べばいい。"
  },
  {
    "start": 1595752,
    "end": 1598072,
    "text": "これはデフォルトの色を変えるだけです。"
  },
  {
    "start": 1598216,
    "end": 1600536,
    "text": "グローバルCSSファイルはどこにありますか？"
  },
  {
    "start": 1600728,
    "end": 1615416,
    "text": "SRZMと入力しなければならないのは、このsRZディレクトリのアプリglobalsがあり、CSSの末尾にsがついているため、CnをこのグローバルCSSファイルに向けるためである。"
  },
  {
    "start": 1615448,
    "end": 1617300,
    "text": "アプリのフォルダの中にあります。"
  },
  {
    "start": 1617620,
    "end": 1621076,
    "text": "CSS変数を使いたいのですが？"
  },
  {
    "start": 1621148,
    "end": 1621800,
    "text": "そうだ。"
  },
  {
    "start": 1622100,
    "end": 1624636,
    "text": "カスタムtailwindプレフィックスを使用していますか？"
  },
  {
    "start": 1624748,
    "end": 1626640,
    "text": "いや、だから空白のままだ。"
  },
  {
    "start": 1626940,
    "end": 1630084,
    "text": "追い風コンフィグJの位置は？"
  },
  {
    "start": 1630212,
    "end": 1635932,
    "text": "追い風のコンフィグTのファイルはjのファイルではないので、ここでも自分で入力しなければならない。"
  },
  {
    "start": 1636116,
    "end": 1644020,
    "text": "tailwind config t's enterと入力し、インポートエリアを設定する。"
  },
  {
    "start": 1644100,
    "end": 1645720,
    "text": "デフォルトのままでいい。"
  },
  {
    "start": 1646200,
    "end": 1649020,
    "text": "utilsもデフォルトのままにしておく。"
  },
  {
    "start": 1649320,
    "end": 1651392,
    "text": "reactサーバーコンポーネントを使用していますか？"
  },
  {
    "start": 1651456,
    "end": 1652100,
    "text": "そうだ。"
  },
  {
    "start": 1652640,
    "end": 1654240,
    "text": "コンフィギュレーションを書け、書け、書け。"
  },
  {
    "start": 1654280,
    "end": 1660500,
    "text": "我々はこれをワイヤーに確認し、いくつかのファイルを生成し、既存のファイルを更新する。"
  },
  {
    "start": 1660960,
    "end": 1664472,
    "text": "生成されたファイルのいくつかを見てみよう。"
  },
  {
    "start": 1664536,
    "end": 1673190,
    "text": "そして、このコンポーネントのJSONを作成し、新しいシェッドCNコンポーネントをプロジェクトに追加するたびに、この設定ファイルを読み込みます。"
  },
  {
    "start": 1673280,
    "end": 1679066,
    "text": "このコンポーネントをどのようにセットアップするか、どこに置くか、どこに関連ファイルがあるかなどを知っている。"
  },
  {
    "start": 1679098,
    "end": 1681234,
    "text": "これがその責任である。"
  },
  {
    "start": 1681402,
    "end": 1688950,
    "text": "また、このヘルパーパッケージやCLSXなど、いくつかの追加依存パッケージもインストールする。"
  },
  {
    "start": 1689330,
    "end": 1692362,
    "text": "追い風のコンフィグが更新された。"
  },
  {
    "start": 1692506,
    "end": 1694802,
    "text": "ここに色の変数を加える。"
  },
  {
    "start": 1694906,
    "end": 1698550,
    "text": "このすべてを詳しく理解する必要はないが、これだけでうまくいく。"
  },
  {
    "start": 1698860,
    "end": 1701532,
    "text": "ここではグローバルCSSも変更されている。"
  },
  {
    "start": 1701556,
    "end": 1709276,
    "text": "異なる色の変数が追加され、デフォルトでは黒っぽい色であるプライマリーカラーがあり、ミュートカラーとセカンダリーカラーがある。"
  },
  {
    "start": 1709388,
    "end": 1715876,
    "text": "また、デフォルトでダーク・モード・カラーが用意されており、後ほどコード内でこれらのカラーにアクセスする方法を説明する。"
  },
  {
    "start": 1716068,
    "end": 1722180,
    "text": "その後、このutils関数が追加された。"
  },
  {
    "start": 1722220,
    "end": 1728800,
    "text": "繰り返しになるが、これは内部的に使用されるものであり、後ほど、独自のコンポーネントを作成する際にこれを使用する方法を説明する。"
  },
  {
    "start": 1729210,
    "end": 1745794,
    "text": "サードパーティのコードを大量に使いたくないからだ。他の人のコードをコピー・ペーストしてもあまり身につかないからね。"
  },
  {
    "start": 1745842,
    "end": 1746146,
    "text": "そうだね。"
  },
  {
    "start": 1746218,
    "end": 1748722,
    "text": "とはいえ、何人か必要だろう。"
  },
  {
    "start": 1748866,
    "end": 1750470,
    "text": "このボタンが必要だ。"
  },
  {
    "start": 1751490,
    "end": 1757898,
    "text": "小屋のcnコンポーネントを選択し、このインストールコマンドをコピーします。"
  },
  {
    "start": 1758034,
    "end": 1760870,
    "text": "繰り返すが、これはすでにスタートコードに含まれている。"
  },
  {
    "start": 1761810,
    "end": 1767890,
    "text": "コマンドラインでこれを実行すると、このボタン・コンポーネントが追加される。"
  },
  {
    "start": 1768050,
    "end": 1771210,
    "text": "これをコンポーネントUIフォルダに入れる。"
  },
  {
    "start": 1771250,
    "end": 1779794,
    "text": "ここでもコンフィギュレーション・ファイルから読み込まれ、ここにボタン・コードがある。"
  },
  {
    "start": 1779962,
    "end": 1782242,
    "text": "さて、ドキュメントに戻ろう。"
  },
  {
    "start": 1782426,
    "end": 1784290,
    "text": "あと2人必要だ。"
  },
  {
    "start": 1784370,
    "end": 1788306,
    "text": "このスタイルの入力フィールドが必要です。"
  },
  {
    "start": 1788498,
    "end": 1790790,
    "text": "もう一度、インストール・コマンドを説明しよう。"
  },
  {
    "start": 1791410,
    "end": 1793750,
    "text": "ここでもコマンドラインで実行する。"
  },
  {
    "start": 1794130,
    "end": 1796554,
    "text": "ここでもまた、新たな要素が加わった。"
  },
  {
    "start": 1796722,
    "end": 1797710,
    "text": "あれだ。"
  },
  {
    "start": 1798570,
    "end": 1803810,
    "text": "もうひとつは、ここにあるフォームだ。"
  },
  {
    "start": 1803970,
    "end": 1817280,
    "text": "これによって、リアクトのフックフォームでcnコンポーネントを流せるようになります。"
  },
  {
    "start": 1817580,
    "end": 1819500,
    "text": "これも追加する。"
  },
  {
    "start": 1819660,
    "end": 1836920,
    "text": "コピーのコマンドラインでこれを実行し、ここにあるフォームファイルを編集すると、たくさんのコードが含まれ、さらにいくつかのパッケージ、つまりreact hook formとsoがインストールされる。"
  },
  {
    "start": 1837460,
    "end": 1840510,
    "text": "これで必要なパッケージはすべて揃ったはずだ。"
  },
  {
    "start": 1840700,
    "end": 1844402,
    "text": "よし、この時点でスタート・コード・ブランチをプッシュしよう。"
  },
  {
    "start": 1844466,
    "end": 1844914,
    "text": "今すぐだ。"
  },
  {
    "start": 1844962,
    "end": 1848178,
    "text": "ここで追加したファイルには、あとから必要になるものがいくつかある。"
  },
  {
    "start": 1848234,
    "end": 1854818,
    "text": "プロジェクトを手動でセットアップする場合は、ビデオの説明文にこれらのファイルをすべてリンクし、必要なときに参照できるようにします。"
  },
  {
    "start": 1854914,
    "end": 1860546,
    "text": "次のステップは、postgresデータベース、blobストレージ、prismaのセットアップだ。"
  },
  {
    "start": 1860738,
    "end": 1862770,
    "text": "次にプリズマを初期化する。"
  },
  {
    "start": 1862810,
    "end": 1871084,
    "text": "そのために、もう一度コマンドラインを開き、npx prisma initと書いて実行する。"
  },
  {
    "start": 1871252,
    "end": 1876724,
    "text": "これはPrismaのドキュメントに記載されており、2つのファイルが作成される。"
  },
  {
    "start": 1876892,
    "end": 1892554,
    "text": "このスキーマ・ドットprismaファイルを作成し、そこにテーブルとカラムを含むデータベース・スキーマを置きます。ご覧のように、Prisma対コード拡張子を使用しているため、シンタックス・ハイライトや自動補完などの機能があります。"
  },
  {
    "start": 1892692,
    "end": 1897010,
    "text": "そうでなければ、ただのプレーンテキストにしか見えないだろう。"
  },
  {
    "start": 1897350,
    "end": 1902550,
    "text": "そして、このドットenvファイルも作成され、ここに後でデータベースのURLを入れる。"
  },
  {
    "start": 1902630,
    "end": 1904510,
    "text": "これは単なるプレースホルダーだ。"
  },
  {
    "start": 1904630,
    "end": 1919528,
    "text": "このプロジェクトをGitHubにプッシュするときに、データベースの認証情報をプッシュしたくないので、dot envファイルをプッシュしないようにします。"
  },
  {
    "start": 1919694,
    "end": 1922164,
    "text": "次はvezel.comだ。"
  },
  {
    "start": 1922292,
    "end": 1935236,
    "text": "vezelはnext j'sを作ったホスティングプロバイダーで、彼ら自身がデータベースを提供している。"
  },
  {
    "start": 1935348,
    "end": 1938148,
    "text": "ベゼル・ダッシュボードの収納をクリックする。"
  },
  {
    "start": 1938284,
    "end": 1941360,
    "text": "ここではpostgresデータベースを作成したい。"
  },
  {
    "start": 1941740,
    "end": 1943000,
    "text": "私たちは受諾をクリックする。"
  },
  {
    "start": 1943300,
    "end": 1944996,
    "text": "このデータベースに名前をつける。"
  },
  {
    "start": 1945028,
    "end": 1947372,
    "text": "また同じ名前を使うつもりだ。"
  },
  {
    "start": 1947516,
    "end": 1950052,
    "text": "次のj'sジョブボード。"
  },
  {
    "start": 1950236,
    "end": 1960900,
    "text": "リージョンを選択し、デフォルトのcreateのままにしておくと、新しいデータベースが作成されます。"
  },
  {
    "start": 1960980,
    "end": 1964040,
    "text": "まずは、このドットエヌローカルをクリック。"
  },
  {
    "start": 1964660,
    "end": 1965972,
    "text": "そして、これをコピーする。"
  },
  {
    "start": 1966036,
    "end": 1973116,
    "text": "これにはデータベースの認証情報が含まれており、これをdot envファイルに貼り付ける。"
  },
  {
    "start": 1973188,
    "end": 1976080,
    "text": "ここにある既存のものを置き換えることができる。"
  },
  {
    "start": 1976620,
    "end": 1984052,
    "text": "繰り返しますが、このデータは機密なので、データベースのパスワードが含まれているため、信頼できない人とは共有しないでください。"
  },
  {
    "start": 1984196,
    "end": 1991364,
    "text": "このページに戻ると、プリズマの接続コードも表示される。"
  },
  {
    "start": 1991492,
    "end": 2001684,
    "text": "この部分をコピーしてプロジェクトに戻り、Prismaスキーマ・ファイルのエントリに移動して、この部分をここに置き換えます。"
  },
  {
    "start": 2001732,
    "end": 2009126,
    "text": "プロバイダーは実際には同じだが、URLはここでn番目の変数に置き換えられる。"
  },
  {
    "start": 2009278,
    "end": 2014090,
    "text": "不要なコメントなので削除することもできる。"
  },
  {
    "start": 2015150,
    "end": 2021850,
    "text": "Prisma対コードエクステンションをインストールした場合のみ、コードフォーマットが機能します。"
  },
  {
    "start": 2022270,
    "end": 2024950,
    "text": "そして、ここにデータベース・テーブルを作成する。"
  },
  {
    "start": 2024990,
    "end": 2029544,
    "text": "Prismaでは、ジョブをリコールするモデルを定義することでこれを行う。"
  },
  {
    "start": 2029702,
    "end": 2033396,
    "text": "これは、私たちのデータベースに1つのジョブ・エントリーを含むことになります。"
  },
  {
    "start": 2033588,
    "end": 2038180,
    "text": "次に、データベースが持つべきさまざまなカラムのフィールドを追加する。"
  },
  {
    "start": 2038260,
    "end": 2041004,
    "text": "まず第一に、どのエントリーにもユニークなアイデアが必要だ。"
  },
  {
    "start": 2041092,
    "end": 2049452,
    "text": "int型のideaを書くと、これらの型は自動的に適切なpostgresの型に変換されます。"
  },
  {
    "start": 2049516,
    "end": 2051348,
    "text": "プリズマがこれを引き受けてくれる。"
  },
  {
    "start": 2051444,
    "end": 2058057,
    "text": "通常、postgresではSQLコマンド、create table jobなどでテーブルを作成します。"
  },
  {
    "start": 2058113,
    "end": 2061785,
    "text": "Prismaでは、このようなスキーマファイルを定義することでこれを行う。"
  },
  {
    "start": 2061897,
    "end": 2064729,
    "text": "では、id int space。"
  },
  {
    "start": 2064809,
    "end": 2069789,
    "text": "次に、このテーブルのユニークIDを作成するidを入力する。"
  },
  {
    "start": 2070169,
    "end": 2072473,
    "text": "であれば、デフォルトで入力する。"
  },
  {
    "start": 2072641,
    "end": 2075193,
    "text": "ここでは自動インクリメント機能と呼んでいる。"
  },
  {
    "start": 2075281,
    "end": 2078681,
    "text": "プリズマ・エクステンションのおかげで自動補完ができるようになった。"
  },
  {
    "start": 2078745,
    "end": 2081199,
    "text": "ぜひ導入することをお勧めする。"
  },
  {
    "start": 2081369,
    "end": 2085240,
    "text": "これはエントリーごとに自動的にインクリメントされるIDである。"
  },
  {
    "start": 2085620,
    "end": 2089680,
    "text": "各エントリーは文字列型のスラッグも持つ必要がある。"
  },
  {
    "start": 2090060,
    "end": 2092700,
    "text": "postgresでは、これはtext型になります。"
  },
  {
    "start": 2092780,
    "end": 2095240,
    "text": "これもプリズマが自動的に変換してくれる。"
  },
  {
    "start": 2095580,
    "end": 2099556,
    "text": "ここではユニークな広告を追加しているので、各スラッグはユニークでなければならない。"
  },
  {
    "start": 2099668,
    "end": 2102080,
    "text": "それなら、もう少し弦が必要だ。"
  },
  {
    "start": 2102860,
    "end": 2113870,
    "text": "タイトル文字列 タイプ文字列 これは、各求人場所に属するデータであり、タイプも文字列である。"
  },
  {
    "start": 2115210,
    "end": 2118610,
    "text": "ロケ地は都市そのものであり、文字列でもある。"
  },
  {
    "start": 2118650,
    "end": 2124586,
    "text": "リモートの仕事には勤務地は必要ないからです。"
  },
  {
    "start": 2124698,
    "end": 2128250,
    "text": "クエスチョンマークを付けなかった場合、ここでの他のフィールドはオプションではない。"
  },
  {
    "start": 2128290,
    "end": 2135106,
    "text": "新しいエントリーを作成するには、これらの文字列を指定しなければならない。"
  },
  {
    "start": 2135178,
    "end": 2138638,
    "text": "理屈の上では、説明がなくてもそこに仕事を入れることはできる。"
  },
  {
    "start": 2138754,
    "end": 2139006,
    "text": "本当に？"
  },
  {
    "start": 2139038,
    "end": 2140958,
    "text": "あなたは持ちたいだろうが、私は任意にしている。"
  },
  {
    "start": 2141014,
    "end": 2149410,
    "text": "ここでは、給与を9桁までの数字をサポートするIntとして格納している。"
  },
  {
    "start": 2150150,
    "end": 2163718,
    "text": "次に、会社名（文字列）。アプリケーションのURLも指定できるので、アプリケーションのEメール（オプションの文字列）。"
  },
  {
    "start": 2163774,
    "end": 2167902,
    "text": "その代わり、どちらかのツアーを提供しなければならないので、両方ともオプションにしている。"
  },
  {
    "start": 2168046,
    "end": 2173342,
    "text": "書式のショートカットを押して、これをすべて配置すれば、ほぼ完成だ。"
  },
  {
    "start": 2173526,
    "end": 2180250,
    "text": "会社のロゴが保存されているURLで、任意の文字列です。"
  },
  {
    "start": 2180870,
    "end": 2188862,
    "text": "次に、approvedというブール値を追加し、デフォルト値としてfalseを設定する。"
  },
  {
    "start": 2188966,
    "end": 2191814,
    "text": "新しいジョブを作成すると、この値はfalseに設定される。"
  },
  {
    "start": 2191902,
    "end": 2198870,
    "text": "明示的にfalseを渡す必要はなく、フロントエンドに表示する前にこのエントリーを承認しなければならない。"
  },
  {
    "start": 2199290,
    "end": 2209434,
    "text": "最後に、このnow関数にデフォルト値を設定した日付時刻型のタイムスタンプを2つ作成する必要がある。"
  },
  {
    "start": 2209482,
    "end": 2215858,
    "text": "これは自分で説明して、日付が変わる頃に更新されると思う。"
  },
  {
    "start": 2215914,
    "end": 2223550,
    "text": "ここで、updated atに設定すると、エントリーを作成または更新するときに、これらの値が自動的に設定されます。"
  },
  {
    "start": 2224260,
    "end": 2230612,
    "text": "もうひとつ、このモデルはjobという名前になっているが、これはコードの中でjobという単数形の名前を使いたいからだ。"
  },
  {
    "start": 2230716,
    "end": 2235988,
    "text": "SQLテーブルの命名規則は通常小文字の複数形です。"
  },
  {
    "start": 2236124,
    "end": 2239804,
    "text": "テーブルを大文字のjでjobと呼びたくないからだ。"
  },
  {
    "start": 2239892,
    "end": 2242772,
    "text": "小文字のジョブズと呼んでほしい。"
  },
  {
    "start": 2242956,
    "end": 2246204,
    "text": "モデル名を変えることもできるが、これはあまりよくない。"
  },
  {
    "start": 2246332,
    "end": 2252718,
    "text": "その代わりに、モデル名を別のテーブル名にマッピングすることもできる。"
  },
  {
    "start": 2252774,
    "end": 2259690,
    "text": "最後のフィールドの下には、2つの広告記号マップと、テーブル・ジョブにつけたい名前を書く。"
  },
  {
    "start": 2260390,
    "end": 2276806,
    "text": "もう一つ、このクライアント・ブロックにプレビュー機能フィールドを追加し、ここに全文検索と入力します。後でpostgresの全文検索を使用して仕事を検索できるようにしたいからです。"
  },
  {
    "start": 2276878,
    "end": 2279770,
    "text": "これがプリズマでアクティベートする方法だ。"
  },
  {
    "start": 2280090,
    "end": 2283778,
    "text": "では、実際にデータベースにこのテーブルを作成しよう。"
  },
  {
    "start": 2283834,
    "end": 2295230,
    "text": "このために、コマンドラインをもう一度開き、NpX Prisma db pushを実行する。"
  },
  {
    "start": 2296170,
    "end": 2307830,
    "text": "その後、NPX Prisma generatesを再実行し、この新しいテーブルからPrismaクライアントを生成する。"
  },
  {
    "start": 2309350,
    "end": 2317814,
    "text": "データベーススキーマを変更するたびに、SQLデータベースを生成して新しいPrismaクライアントを作成する必要があります。"
  },
  {
    "start": 2317902,
    "end": 2323294,
    "text": "また、スキーマが変更された場合は、データベースを消去するか、マイグレーションを提供しなければならない。"
  },
  {
    "start": 2323422,
    "end": 2327550,
    "text": "もうスキーマを変更するつもりはないので、ここではその必要はない。"
  },
  {
    "start": 2327630,
    "end": 2333742,
    "text": "すでに本番稼動しているデータベースのスキーマを変更したい場合は、マイグレーションを提供しなければならない。"
  },
  {
    "start": 2333846,
    "end": 2336532,
    "text": "これについては、Prismaのドキュメントに記載されている。"
  },
  {
    "start": 2336686,
    "end": 2337624,
    "text": "オーケー、素晴らしい。"
  },
  {
    "start": 2337712,
    "end": 2350344,
    "text": "次に、shed CNによって自動的に作成されたlibフォルダに入り、ここに初期化されたPrismaクライアントを含むPrisma tsという新しいファイルを作成します。"
  },
  {
    "start": 2350512,
    "end": 2354792,
    "text": "さて、次のjsでは、Prismaクライアントを特定の方法でセットアップしなければならない。"
  },
  {
    "start": 2354856,
    "end": 2361080,
    "text": "そうしないと、開発中のアプリを再起動するたびに新しいクライアントが作成されるため、エラーメッセージが表示される。"
  },
  {
    "start": 2361240,
    "end": 2365904,
    "text": "Prismaのドキュメントに、このようなクライアントのコードを提供するページがあります。"
  },
  {
    "start": 2365952,
    "end": 2367980,
    "text": "ここにコピーペーストしておこう。"
  },
  {
    "start": 2368470,
    "end": 2373942,
    "text": "これは基本的に、アプリ全体で再利用できるPrismaクライアントのシングルトンを作成する。"
  },
  {
    "start": 2374046,
    "end": 2381254,
    "text": "今すぐビデオを一時停止して、これを手書きでタイプしてください。"
  },
  {
    "start": 2381342,
    "end": 2384550,
    "text": "これをただコピーペーストするよりは、少しは役に立つと思う。"
  },
  {
    "start": 2384630,
    "end": 2386730,
    "text": "ビデオを一時停止して、こう入力してください。"
  },
  {
    "start": 2387030,
    "end": 2394296,
    "text": "それから、データベースにダミーのデータを入れたいので、このscriptsフォルダを開始コードに追加した。"
  },
  {
    "start": 2394398,
    "end": 2398252,
    "text": "このスクリプト・フォルダは、ビデオの説明の下にリンクしておく。"
  },
  {
    "start": 2398316,
    "end": 2400028,
    "text": "この2つのファイルをコピーすることができる。"
  },
  {
    "start": 2400124,
    "end": 2403932,
    "text": "プロジェクトのルートに直接scriptsフォルダを作成するだけです。"
  },
  {
    "start": 2404116,
    "end": 2412044,
    "text": "このスクリプトには、いくつかのプレースホルダー・ジョブ・データと、このプレースホルダー・データをデータベースに挿入するシード・スクリプトが含まれています。"
  },
  {
    "start": 2412172,
    "end": 2416520,
    "text": "スタイリングコードを使用しない場合は、この2つのファイルをコピーしてください。"
  },
  {
    "start": 2417180,
    "end": 2424458,
    "text": "そしてパッケージのJSONに入り、このCJファイルを実行するシード・スクリプトを追加する。"
  },
  {
    "start": 2424634,
    "end": 2436030,
    "text": "そしてコマンドラインを開き、NPXではなくNpMを実行する。今度はnpm run zで、ここで設定したスクリプトを実行する。"
  },
  {
    "start": 2436570,
    "end": 2438070,
    "text": "試してみよう。"
  },
  {
    "start": 2438570,
    "end": 2442138,
    "text": "これで、すべてのダミーデータがデータベースに挿入されるはずだ。"
  },
  {
    "start": 2442314,
    "end": 2456300,
    "text": "ここでエラーが発生した場合は、プレースホルダ・データのフィールド名が、データベース・スキーマで使用したカラム名と実際に一致していることを確認してください。"
  },
  {
    "start": 2456380,
    "end": 2460252,
    "text": "エラーメッセージを確認し、エラーが発生していれば、それがヒントになるはずだ。"
  },
  {
    "start": 2460356,
    "end": 2463580,
    "text": "今、私たちのウェブサイトにはまだUIがありませんよね？"
  },
  {
    "start": 2463740,
    "end": 2470160,
    "text": "データを見るには、NPXとともに動作するPrisma studioを使うことができる。"
  },
  {
    "start": 2470860,
    "end": 2472720,
    "text": "プリズマスタジオ"
  },
  {
    "start": 2473030,
    "end": 2475646,
    "text": "これはプリズマが提供する機能です。"
  },
  {
    "start": 2475798,
    "end": 2479350,
    "text": "このアドレス、localhost 5555にアクセスできる。"
  },
  {
    "start": 2479350,
    "end": 2486958,
    "text": "ここに、先ほど挿入した8つのプレースホルダー・エントリーを含むジョブ・テーブルがあるはずです。"
  },
  {
    "start": 2487054,
    "end": 2488006,
    "text": "そこにいる。"
  },
  {
    "start": 2488078,
    "end": 2491350,
    "text": "これらはすべて、スラッグ・タイトル・タイプなどを持っている。"
  },
  {
    "start": 2491510,
    "end": 2494330,
    "text": "後でUIに表示する。"
  },
  {
    "start": 2494710,
    "end": 2498998,
    "text": "このプリズマスタジオでは、レコードを変更したり、削除したりすることもできます。"
  },
  {
    "start": 2499094,
    "end": 2501502,
    "text": "ユーティリティーツールとしては素晴らしい。"
  },
  {
    "start": 2501686,
    "end": 2505550,
    "text": "それから、ブロブもセットアップしたいよね？"
  },
  {
    "start": 2505670,
    "end": 2514550,
    "text": "もう一度、ブラジル・バックエンドのストレージ・メニューに行き、ここでブロブ・ストレージも作成したい。"
  },
  {
    "start": 2514590,
    "end": 2518150,
    "text": "ここでブロブを選択し、ストアを作成しよう。"
  },
  {
    "start": 2518270,
    "end": 2521490,
    "text": "繰り返しになるが、私はこれを次のJSチョップボードと呼んでいる。"
  },
  {
    "start": 2522270,
    "end": 2526810,
    "text": "さて、ブロブストレージはpostgresデータベースとは別の名前が必要だ。"
  },
  {
    "start": 2527380,
    "end": 2529440,
    "text": "これをファイルと呼ぼう。"
  },
  {
    "start": 2529900,
    "end": 2532080,
    "text": "私たちはこれも作る。"
  },
  {
    "start": 2533180,
    "end": 2535532,
    "text": "ここでもセットアップの指示がある。"
  },
  {
    "start": 2535596,
    "end": 2541240,
    "text": "このn番目の変数もプロジェクトに貼り付ける。"
  },
  {
    "start": 2542340,
    "end": 2548276,
    "text": "これでデータベースが接続された。"
  },
  {
    "start": 2548388,
    "end": 2554748,
    "text": "Prismaと必要なパッケージのセットアップが完了し、いよいよコードを書き始める準備が整った。"
  },
  {
    "start": 2554924,
    "end": 2560760,
    "text": "さて、データベースにはすでにたくさんのジョブがあるので、それらを画面に表示してみよう。"
  },
  {
    "start": 2561100,
    "end": 2562908,
    "text": "コマンドラインを開く。"
  },
  {
    "start": 2563004,
    "end": 2567060,
    "text": "Prismaスタジオを起動したままにしておきたい場合は、新しいコマンドラインを開くことができます。"
  },
  {
    "start": 2567220,
    "end": 2570972,
    "text": "今のところ、必要ないから止めただけだよ。"
  },
  {
    "start": 2571116,
    "end": 2573640,
    "text": "それからnpMを走らせ、デベロッパーを走らせる。"
  },
  {
    "start": 2574500,
    "end": 2578148,
    "text": "そうすれば、localhost 3000でウェブサイトを開くことができる。"
  },
  {
    "start": 2578284,
    "end": 2584722,
    "text": "デフォルトでは、次のアプリを新規作成するプロジェクトにダミーのページが付属しています。"
  },
  {
    "start": 2584916,
    "end": 2588478,
    "text": "トップページに求人情報を表示したいんだ。"
  },
  {
    "start": 2588534,
    "end": 2594798,
    "text": "コマンドラインを閉じて、appフォルダ内のTxファイルを開いてみよう。"
  },
  {
    "start": 2594974,
    "end": 2598782,
    "text": "デフォルトのレイアウトで、このメイン・タグ全体を削除する。"
  },
  {
    "start": 2598846,
    "end": 2602942,
    "text": "これを自分たちのメインタグに置き換える。"
  },
  {
    "start": 2603126,
    "end": 2618202,
    "text": "私のnext J's app router beginner tutorialをご覧になった方は、next jsのコンポーネントがデフォルトでサーバー・コンポーネントであることを知っていると思う。"
  },
  {
    "start": 2618306,
    "end": 2619234,
    "text": "そうしよう"
  },
  {
    "start": 2619282,
    "end": 2624906,
    "text": "何人かのジョブを作り、プリズマを待とう。"
  },
  {
    "start": 2625018,
    "end": 2627830,
    "text": "これを手動でインポートしなければならない。"
  },
  {
    "start": 2628210,
    "end": 2637402,
    "text": "ここでimport prisma fromと入力し、これをlibフォルダにあるprismaファイルに入れる。"
  },
  {
    "start": 2637546,
    "end": 2639790,
    "text": "私たちはここからクライアントを得ている。"
  },
  {
    "start": 2640130,
    "end": 2644202,
    "text": "これでオートコンプリートが可能になり、このジョブ・タイプがここにある。"
  },
  {
    "start": 2644306,
    "end": 2657070,
    "text": "これは、スキーマにジョブ・モデルがあり、Prismaクライアントを生成したときに、このジョブ・フィールドが生成されたためです。"
  },
  {
    "start": 2658170,
    "end": 2661390,
    "text": "利用可能なすべての仕事を取得したい。"
  },
  {
    "start": 2662090,
    "end": 2672562,
    "text": "ここでは、find manyを呼び出し、中括弧が真であることを承認するフィルタを渡すことができる。"
  },
  {
    "start": 2672706,
    "end": 2677794,
    "text": "承認された仕事だけをコンマで表示し、順番もつけたい。"
  },
  {
    "start": 2677922,
    "end": 2680114,
    "text": "ここでオートコンプリートが表示されるはずです。"
  },
  {
    "start": 2680242,
    "end": 2691192,
    "text": "また、利用可能なフィールドのために、ジョブモデルに作成されたaddフィールドがあり、新しいものを先頭に降順に並べ替えたいのです。"
  },
  {
    "start": 2691386,
    "end": 2699396,
    "text": "よし、とりあえずこのデータをJSONドット文字列化して、実際に何かを取得していることを確認しよう。"
  },
  {
    "start": 2699588,
    "end": 2711180,
    "text": "ジョブの文字列化を行い、NPM run devを実行すると、ページを更新してデータベースからジョブを表示できるはずだ。"
  },
  {
    "start": 2711340,
    "end": 2714068,
    "text": "これは先ほど挿入したダミーデータである。"
  },
  {
    "start": 2714204,
    "end": 2718084,
    "text": "もちろん、このようなページは素晴らしいユーザーエクスペリエンスではない。"
  },
  {
    "start": 2718252,
    "end": 2722212,
    "text": "画面に表示できるジョブ・リストの項目を作ってみよう。"
  },
  {
    "start": 2722316,
    "end": 2725116,
    "text": "これをcomponentsフォルダに入れたい。"
  },
  {
    "start": 2725188,
    "end": 2732044,
    "text": "Srzフォルダの中にcomponentsフォルダがあり、ここにUIコンポーネントが入っています。"
  },
  {
    "start": 2732132,
    "end": 2738604,
    "text": "componentsフォルダを右クリックし、joblistitemと呼ぶ新規ファイルを作成する。"
  },
  {
    "start": 2738732,
    "end": 2740960,
    "text": "好きな名前をつけてください。"
  },
  {
    "start": 2741740,
    "end": 2747490,
    "text": "そして、同じ名前のデフォルト関数をエクスポートする。"
  },
  {
    "start": 2748790,
    "end": 2753126,
    "text": "ジョブリストの各項目を表示するには、データベースからのジョブが必要です。"
  },
  {
    "start": 2753198,
    "end": 2753814,
    "text": "そうだろう？"
  },
  {
    "start": 2753982,
    "end": 2760302,
    "text": "小道具のためのインターフェイスを作成します。"
  },
  {
    "start": 2760486,
    "end": 2766526,
    "text": "jobはプリズマ・クライアントからのインポートです。"
  },
  {
    "start": 2766638,
    "end": 2770832,
    "text": "ここでも、この型はデータベース・スキーマから自動的に生成される。"
  },
  {
    "start": 2770926,
    "end": 2775396,
    "text": "これは、すべてのフィールドを持つジョブテーブルの1つのエントリです。"
  },
  {
    "start": 2775588,
    "end": 2788404,
    "text": "そして、この仕事をpropとして、この下のjob list item propsという関数に渡します。"
  },
  {
    "start": 2788492,
    "end": 2795468,
    "text": "中括弧の後ろにコロンを追加することでできる。"
  },
  {
    "start": 2795644,
    "end": 2798878,
    "text": "ここで、必要なフィールドを1つだけ再構築することができる。"
  },
  {
    "start": 2799044,
    "end": 2801034,
    "text": "すべて手作業で入力している。"
  },
  {
    "start": 2801202,
    "end": 2818150,
    "text": "タイトル会社名タイプ勤務地タイプ勤務地給与、会社ロゴURL、作成された広告のタイムスタンプ。"
  },
  {
    "start": 2818770,
    "end": 2822602,
    "text": "次に、このファンクション・ブロックでレイアウトを返します。"
  },
  {
    "start": 2822666,
    "end": 2827460,
    "text": "それぞれの仕事について、これをHTMLの記事タグにまとめる。"
  },
  {
    "start": 2827500,
    "end": 2830980,
    "text": "divを使うこともできるが、articleの方が少しアイディアがいる。"
  },
  {
    "start": 2831060,
    "end": 2834140,
    "text": "適切なタグがあれば、SEO対策にもなる。"
  },
  {
    "start": 2834260,
    "end": 2845284,
    "text": "このコンポーネントをページのTsXファイルで使えるようにするために、ここにクラス名を追加します。"
  },
  {
    "start": 2845332,
    "end": 2847260,
    "text": "スタイリングは後で仕上げる。"
  },
  {
    "start": 2847420,
    "end": 2864850,
    "text": "データを文字列化したこの式を別の式に置き換えて、それぞれの仕事をジョブリスト項目のインスタンスにマッピングしてみましょう。"
  },
  {
    "start": 2865470,
    "end": 2867490,
    "text": "ここではジョブリストの項目を作成します。"
  },
  {
    "start": 2867910,
    "end": 2871214,
    "text": "このマップ・コールにジョブを渡す。"
  },
  {
    "start": 2871382,
    "end": 2881230,
    "text": "ここでリストを作成しているので、仕事のユニークなアイデア、もしくは同様にユニークなスラッグを使用できるユニークなキーも提供しなければなりません。"
  },
  {
    "start": 2882170,
    "end": 2887450,
    "text": "これを保存すると、すでに初歩的な仕事のリストが表示される。"
  },
  {
    "start": 2887530,
    "end": 2892554,
    "text": "ジョブ・リスト・アイテム・コンポーネントに戻って、このスタイリングを完成させよう。"
  },
  {
    "start": 2892722,
    "end": 2898738,
    "text": "では、記事のクラス名に移動して、テイルウィンドを使ってスタイルを整えます。"
  },
  {
    "start": 2898914,
    "end": 2901830,
    "text": "これをフレックスを使ってフレックスボックスにします。"
  },
  {
    "start": 2902210,
    "end": 2907710,
    "text": "ここにギャップを追加する。"
  },
  {
    "start": 2908640,
    "end": 2910820,
    "text": "ボーダーも追加する。"
  },
  {
    "start": 2911720,
    "end": 2914100,
    "text": "そして私たちはLGを丸めた。"
  },
  {
    "start": 2914520,
    "end": 2914896,
    "text": "そうだね。"
  },
  {
    "start": 2914928,
    "end": 2917660,
    "text": "これにより、その周りの要素にボーダーラインが与えられる。"
  },
  {
    "start": 2918680,
    "end": 2923648,
    "text": "また、p5でパディングを追加したい。"
  },
  {
    "start": 2923784,
    "end": 2927376,
    "text": "要素にカーソルを合わせたときに、背景色を変更したい。"
  },
  {
    "start": 2927408,
    "end": 2927712,
    "text": "そのためだ。"
  },
  {
    "start": 2927736,
    "end": 2930968,
    "text": "tailwindではhoverモディファイアを使っている。"
  },
  {
    "start": 2931104,
    "end": 2939628,
    "text": "これはCnをインストールしたカラー変数のひとつである。"
  },
  {
    "start": 2939804,
    "end": 2945732,
    "text": "色をハードコードする代わりに、これらの変数を使うほうがいい。"
  },
  {
    "start": 2945796,
    "end": 2948196,
    "text": "ダークモードのサポートも追加できる。"
  },
  {
    "start": 2948308,
    "end": 2951580,
    "text": "淡い色はこんな感じだが、ちょっと暗すぎる。"
  },
  {
    "start": 2951660,
    "end": 2957564,
    "text": "スラッシュと60という数字を使って透明性を加えたい。"
  },
  {
    "start": 2957732,
    "end": 2959560,
    "text": "今は少し軽くなった。"
  },
  {
    "start": 2959860,
    "end": 2969838,
    "text": "これで、フォーマットのショートカットを押すと、自動的にクラス名が適切に並びます。"
  },
  {
    "start": 2969894,
    "end": 2970302,
    "text": "そうだね。"
  },
  {
    "start": 2970406,
    "end": 2973310,
    "text": "試しに、実際に順番をめちゃくちゃにして並べてみよう。"
  },
  {
    "start": 2973350,
    "end": 2974774,
    "text": "ここにフレックスを置くつもりだ。"
  },
  {
    "start": 2974862,
    "end": 2980090,
    "text": "シフト・オルト・Fを押すと、正しい順番に並びます。"
  },
  {
    "start": 2980550,
    "end": 2983862,
    "text": "私たちはプロジェクト全体を通して一貫したスタイルを保っています。"
  },
  {
    "start": 2984006,
    "end": 2989326,
    "text": "prettierはまた、セミコロンや括弧のようなものを自動的に追加する。"
  },
  {
    "start": 2989358,
    "end": 2993466,
    "text": "コードをこのように書くことができるように、少し変更しようと思う。"
  },
  {
    "start": 2993598,
    "end": 2996906,
    "text": "書式設定のショートカットを押せば、すべてが元通りになる。"
  },
  {
    "start": 2997018,
    "end": 2999162,
    "text": "だから僕はプリティアが大好きなんだ。"
  },
  {
    "start": 2999306,
    "end": 3000750,
    "text": "よし、続けよう。"
  },
  {
    "start": 3001170,
    "end": 3003178,
    "text": "とりあえずタイトルを削除する。"
  },
  {
    "start": 3003354,
    "end": 3008470,
    "text": "ここでは最初の項目として、次の画像からインポートした画像を置いている。"
  },
  {
    "start": 3009010,
    "end": 3016042,
    "text": "ここでは、会社のロゴのURLか、私が追加したこのプレースホルダー画像を表示したい。"
  },
  {
    "start": 3016186,
    "end": 3019030,
    "text": "まずはこのプレースホルダー画像をインポートしてみよう。"
  },
  {
    "start": 3020250,
    "end": 3023346,
    "text": "会社ロゴのプレースホルダーをインポートする。"
  },
  {
    "start": 3023378,
    "end": 3037362,
    "text": "アセットを追加、会社のロゴのプレースホルダー、そして画像にsrzプロップを追加する。"
  },
  {
    "start": 3037506,
    "end": 3046030,
    "text": "ここでは、会社のロゴのURL、またはNULLの場合は会社のロゴのプレースホルダーを使用します。"
  },
  {
    "start": 3046510,
    "end": 3049290,
    "text": "また、アクセシビリティのためにaltテキストも追加します。"
  },
  {
    "start": 3050230,
    "end": 3060278,
    "text": "ここでは、会社名の後にロゴという単語が続くテンプレート文字列を追加する。"
  },
  {
    "start": 3060454,
    "end": 3062370,
    "text": "これは理にかなっていると思う。"
  },
  {
    "start": 3062910,
    "end": 3065370,
    "text": "また、幅と高さも定義する必要がある。"
  },
  {
    "start": 3066390,
    "end": 3068770,
    "text": "どちらも100に設定しよう。"
  },
  {
    "start": 3072280,
    "end": 3077976,
    "text": "ダミーデータには実際の企業ロゴが含まれていなかったため、プレースホルダーの画像がある。"
  },
  {
    "start": 3078168,
    "end": 3079940,
    "text": "後ほどアップする予定だ。"
  },
  {
    "start": 3080840,
    "end": 3083360,
    "text": "また、これを少しスタイリングしたい。"
  },
  {
    "start": 3083480,
    "end": 3087504,
    "text": "私たちはこれを丸みを帯びたLGにすることで、見栄えを良くしている。"
  },
  {
    "start": 3087552,
    "end": 3091740,
    "text": "画像が長方形の場合は、角が丸くなります。"
  },
  {
    "start": 3092320,
    "end": 3100820,
    "text": "そして、このアイテムが大きくなっても、この画像が縦方向の真ん中に留まるようにするセルフ・センター・クラスを追加する。"
  },
  {
    "start": 3101130,
    "end": 3101666,
    "text": "オーケー。"
  },
  {
    "start": 3101698,
    "end": 3109562,
    "text": "次に、記事内の画像の真下に、画像の横に残りのスペースを取るdivを作成する。"
  },
  {
    "start": 3109706,
    "end": 3112270,
    "text": "このdivにクラス名も追加する。"
  },
  {
    "start": 3113250,
    "end": 3118710,
    "text": "フレックス・グロウでは、今説明したように、利用可能なスペースを占有させる。"
  },
  {
    "start": 3119090,
    "end": 3125530,
    "text": "次に、スペースレイ3を追加して、ここに入れる単品アイテムがある程度の間隔を持つようにする。"
  },
  {
    "start": 3125690,
    "end": 3129470,
    "text": "次に、この分割の中に入り、別のdivを作成する。"
  },
  {
    "start": 3129630,
    "end": 3134102,
    "text": "ここには、この仕事のエントリーのタイトルを書きたい。"
  },
  {
    "start": 3134246,
    "end": 3138650,
    "text": "ここにタイトルを入れる。"
  },
  {
    "start": 3139230,
    "end": 3141770,
    "text": "また、このHを2つスタイリングしたい。"
  },
  {
    "start": 3142070,
    "end": 3146890,
    "text": "text xlで文字をもう少し大きくしたい。"
  },
  {
    "start": 3148950,
    "end": 3154650,
    "text": "それなら、フォントをミディアムにしてテキストをもう少し太くしたい。"
  },
  {
    "start": 3155450,
    "end": 3155882,
    "text": "オーケー。"
  },
  {
    "start": 3155906,
    "end": 3160818,
    "text": "このモニターではズームレベルを設定しているため、私の画面ではこのRは少し大きく見える。"
  },
  {
    "start": 3160914,
    "end": 3164270,
    "text": "あなたの画面では、おそらくこのくらいの大きさだろう。"
  },
  {
    "start": 3164770,
    "end": 3165330,
    "text": "オーケー。"
  },
  {
    "start": 3165370,
    "end": 3167538,
    "text": "同じ内側のdivにある。"
  },
  {
    "start": 3167674,
    "end": 3175190,
    "text": "この見出しのすぐ下に、会社名を示す段落タグを付けたい。"
  },
  {
    "start": 3178930,
    "end": 3185248,
    "text": "テキストをミュートした前景色（灰色がかった色）に設定したい。"
  },
  {
    "start": 3185304,
    "end": 3192072,
    "text": "これはジェットCnが作ってくれたカラー変数です。"
  },
  {
    "start": 3192136,
    "end": 3200780,
    "text": "この内側のdivの下に、仕事のタイプや場所のようなメタデータを含む別のdivを置きます。"
  },
  {
    "start": 3201760,
    "end": 3204504,
    "text": "この差分にもクラス名を設定する。"
  },
  {
    "start": 3204632,
    "end": 3211160,
    "text": "繰り返しになるが、これらのフィールドはすべてこの灰色がかった色をしているはずなので、このテキストは前景をミュートしている。"
  },
  {
    "start": 3211460,
    "end": 3218960,
    "text": "よし、ここに段落タグをたくさん入れて、それぞれに小さなアイコンとその横にテキストを表示しよう。"
  },
  {
    "start": 3219500,
    "end": 3226172,
    "text": "アイコンはSchatzienをセットアップしたときにインストールしたrosit reactが提供している。"
  },
  {
    "start": 3226316,
    "end": 3233960,
    "text": "さて、ここにブリーフケースのアイコンを入れたが、オートコンプリートが機能しないので、手動でインポートしなければならない。"
  },
  {
    "start": 3236180,
    "end": 3244360,
    "text": "ルシッド・リアクトからブリーフケースをインポートすればうまくいくはずだ。"
  },
  {
    "start": 3244900,
    "end": 3246000,
    "text": "ブリーフケース"
  },
  {
    "start": 3247860,
    "end": 3256400,
    "text": "ツァイスのプロップを16に設定し、このクラス名、シュリンク・ゼロを追加する。"
  },
  {
    "start": 3258140,
    "end": 3265112,
    "text": "これにより、使用可能なスペースが小さくなっても、アイコンが縮小されることはありません。"
  },
  {
    "start": 3265296,
    "end": 3268760,
    "text": "の隣に、型の値をレンダリングする。"
  },
  {
    "start": 3268880,
    "end": 3271392,
    "text": "フルタイム、パートタイムなど。"
  },
  {
    "start": 3271576,
    "end": 3273440,
    "text": "隣同士に並べたい。"
  },
  {
    "start": 3273480,
    "end": 3279180,
    "text": "この段落タグをフレックス・アイテム・センターでスタイルします。"
  },
  {
    "start": 3279560,
    "end": 3286660,
    "text": "1.5のギャップを加え、さらにSMを隠す。"
  },
  {
    "start": 3287080,
    "end": 3292192,
    "text": "十分な水平スペースがあるときにレスポンシブ・レイアウトにすることを忘れないでください。"
  },
  {
    "start": 3292256,
    "end": 3296748,
    "text": "小さな画面では、右上に一括して表示されるようにしたい。"
  },
  {
    "start": 3296844,
    "end": 3300640,
    "text": "このリストでタイプを表示したい。"
  },
  {
    "start": 3300940,
    "end": 3303356,
    "text": "十分なスペースがあれば隠したい。"
  },
  {
    "start": 3303468,
    "end": 3311600,
    "text": "スクリーンが640ピクセルより大きい場合、この要素は非表示になります。"
  },
  {
    "start": 3311940,
    "end": 3317060,
    "text": "それから、アイコンとテキストを使った段落がもっとたくさん必要だ。"
  },
  {
    "start": 3317100,
    "end": 3319572,
    "text": "これを4回繰り返そう。"
  },
  {
    "start": 3319676,
    "end": 3329528,
    "text": "コピー＆ペーストでもいいし、シフト・オルトを押しながら下キーを4回押してもいい。"
  },
  {
    "start": 3329704,
    "end": 3334688,
    "text": "次に、2つ目のブリーフケースのアイコンをマップピンに変更する。"
  },
  {
    "start": 3334784,
    "end": 3336584,
    "text": "これでオートコンプリートができるようになった。"
  },
  {
    "start": 3336752,
    "end": 3341500,
    "text": "そうでない場合は、このアイコンを手作業でインポートに追加しなければならない。"
  },
  {
    "start": 3342400,
    "end": 3343980,
    "text": "マップピン。"
  },
  {
    "start": 3344360,
    "end": 3347420,
    "text": "ここでは、ロケーション・タイプをレンダリングしたい。"
  },
  {
    "start": 3347930,
    "end": 3355818,
    "text": "こちらは大きな画面では非表示にせず、タイプだけ表示し、日付は一番下に表示する。"
  },
  {
    "start": 3355954,
    "end": 3361042,
    "text": "この非表示のSMを削除し、次のSMとこのSMも削除する。"
  },
  {
    "start": 3361146,
    "end": 3364402,
    "text": "ここに隠された3つのSMを取り除く。"
  },
  {
    "start": 3364506,
    "end": 3369570,
    "text": "ただ、それらを削除するだけで、一番下と一番上には残しておく。"
  },
  {
    "start": 3369650,
    "end": 3373284,
    "text": "もちろん、別のレイアウトを作りたいのであれば歓迎する。"
  },
  {
    "start": 3373482,
    "end": 3375552,
    "text": "じゃあ、このブリーフケースを変えよう。"
  },
  {
    "start": 3375616,
    "end": 3389380,
    "text": "Globeツアーに参加することができ、タイプはロケーションそのものに変更する。ロケーションがない場合は、代わりに世界中の文字列をレンダリングしたい。"
  },
  {
    "start": 3390320,
    "end": 3393992,
    "text": "都市を指定しなければ、ワールドワイドと表示される。"
  },
  {
    "start": 3394056,
    "end": 3398742,
    "text": "ここにまだ例があるかどうか見てみよう。場所を持たないリモートワークの仕事だ。"
  },
  {
    "start": 3398936,
    "end": 3408658,
    "text": "次にブリーフケースのアイコンを紙幣アイコンに変更し、給与をレンダリングします。"
  },
  {
    "start": 3408754,
    "end": 3413698,
    "text": "ドル表示で、適切な通貨フォーマットで表示したい。"
  },
  {
    "start": 3413834,
    "end": 3417074,
    "text": "そのために、ちょっとしたユーティリティ関数を作ろう。"
  },
  {
    "start": 3417202,
    "end": 3419882,
    "text": "もう一度utilsファイルを見てみよう。"
  },
  {
    "start": 3419946,
    "end": 3440880,
    "text": "シェッドCNは、このファイルをセットアップすると自動的に生成する。ここでは、format moneyという別の関数をエクスポートし、そこに金額を数値として渡す。"
  },
  {
    "start": 3441000,
    "end": 3446296,
    "text": "私たちがインストールしたパッケージではない、より新しいインターを返します。"
  },
  {
    "start": 3446328,
    "end": 3451740,
    "text": "これはJ'sではデフォルトで利用可能で、ここではこの数字フォーマットのクラスがある。"
  },
  {
    "start": 3453350,
    "end": 3463422,
    "text": "次に、ローカル文字列を渡す。この文字列には、このように大文字の \"us \"を渡す。"
  },
  {
    "start": 3463606,
    "end": 3469170,
    "text": "例えば、ユーロのような他の形式も利用可能ですが、私たちはドルを使用します。"
  },
  {
    "start": 3469710,
    "end": 3478330,
    "text": "第2引数にはJavaScriptの設定ブロックを指定し、通貨を渡すスタイルを指定する。"
  },
  {
    "start": 3480300,
    "end": 3483800,
    "text": "それから、USDを渡す通貨フィールドもある。"
  },
  {
    "start": 3485780,
    "end": 3497520,
    "text": "そして、この閉じ括弧の外側でドット・フォーマットを呼び出し、そのドット・フォーマットに金額を渡して、この値全体を返す。"
  },
  {
    "start": 3499180,
    "end": 3503996,
    "text": "さて、ここにいる間に、日付をフォーマットする別のユーティリティ関数も必要になるだろう。"
  },
  {
    "start": 3504068,
    "end": 3512260,
    "text": "では、これを今すぐ作ってみよう。エクスポート関数の相対日付に元日付を渡す。"
  },
  {
    "start": 3513880,
    "end": 3520200,
    "text": "ここでもすぐにこの値を返し、ここでは書式距離ブラブラを使っている。"
  },
  {
    "start": 3520240,
    "end": 3522304,
    "text": "ここでも自動インポートは機能しない。"
  },
  {
    "start": 3522472,
    "end": 3534550,
    "text": "というのも、このロジックを自分で書くと非常に冗長になるので、ここでは書きたくないのだ。"
  },
  {
    "start": 3535130,
    "end": 3546190,
    "text": "そしてこの中に、厳密な関数へのフォーマット距離を記述する必要がある。"
  },
  {
    "start": 3546970,
    "end": 3564866,
    "text": "そして、もうひとつのコンフィギュレーション・オブジェクトでは、add suffix接尾辞をtrueに設定する。"
  },
  {
    "start": 3564898,
    "end": 3568750,
    "text": "以前か、たぶんその前か、どちらかわからない。"
  },
  {
    "start": 3569370,
    "end": 3573190,
    "text": "では、ジョブ・リストの項目に戻ろう。"
  },
  {
    "start": 3573530,
    "end": 3577570,
    "text": "私たちがお金をフォーマットしたい紙幣があるところ。"
  },
  {
    "start": 3577730,
    "end": 3586150,
    "text": "フォーマット・マネー関数を呼び出し、データベースから給与の値を渡します。"
  },
  {
    "start": 3586860,
    "end": 3587900,
    "text": "これだ。"
  },
  {
    "start": 3588020,
    "end": 3593868,
    "text": "ドル記号を取得し、カンマを取得し、小数点はデータベースの正しい位置にある。"
  },
  {
    "start": 3593924,
    "end": 3596960,
    "text": "これは単なるintだが、適切にフォーマットしている。"
  },
  {
    "start": 3597620,
    "end": 3602520,
    "text": "そして最後のアイコンは、この時計のアイコンです。"
  },
  {
    "start": 3603380,
    "end": 3609676,
    "text": "ここでrelativedateユーティリティ関数を呼び出し、created elseのタイムスタンプを渡す。"
  },
  {
    "start": 3609828,
    "end": 3613048,
    "text": "こちらも大画面では見えない。"
  },
  {
    "start": 3613174,
    "end": 3616720,
    "text": "これは小さなスクリーンでしか見られないだろう。"
  },
  {
    "start": 3617500,
    "end": 3618520,
    "text": "あれだ。"
  },
  {
    "start": 3618860,
    "end": 3622160,
    "text": "51分前に全選手を追加した。"
  },
  {
    "start": 3622500,
    "end": 3628276,
    "text": "さて、これらのアイコンのうち2つは、右側に置きたいので、大きな画面では隠れている。"
  },
  {
    "start": 3628428,
    "end": 3635820,
    "text": "このために、最後のdiv閉じタグの下に、記事の閉じタグの上にもうひとつdivを作る。"
  },
  {
    "start": 3635940,
    "end": 3638000,
    "text": "ここにもう1つのディブを置く。"
  },
  {
    "start": 3638380,
    "end": 3639716,
    "text": "いくつかのクラス名を追加する。"
  },
  {
    "start": 3639748,
    "end": 3641540,
    "text": "これはデフォルトでは非表示になっている。"
  },
  {
    "start": 3641620,
    "end": 3647720,
    "text": "小さい画面では、この値をフラグに設定します。"
  },
  {
    "start": 3648260,
    "end": 3651780,
    "text": "SMは他のアイコンを隠す場所でもあるんだ。"
  },
  {
    "start": 3651940,
    "end": 3657684,
    "text": "SMの下にはこれらのアイコン、SMの上にはこれらのアイコンが表示される。"
  },
  {
    "start": 3657772,
    "end": 3661036,
    "text": "これが、追い風でこの反応性を実現する方法だ。"
  },
  {
    "start": 3661148,
    "end": 3663612,
    "text": "ここには他のクラスもたくさん必要だ。"
  },
  {
    "start": 3663796,
    "end": 3667640,
    "text": "これをフレックス・カラムにして、エレメントが互いの下に来るようにしたい。"
  },
  {
    "start": 3668090,
    "end": 3674070,
    "text": "スペースがないときにアイコンが縮小しないように、シュリンクゼロを追加したい。"
  },
  {
    "start": 3674770,
    "end": 3680058,
    "text": "これらのアイコンをこのエレメントの右側にすべて配置したい。"
  },
  {
    "start": 3680154,
    "end": 3684850,
    "text": "私たちは、アイテムの端と端の間でこれを行う。"
  },
  {
    "start": 3685010,
    "end": 3688234,
    "text": "ここに上と下に1つずつアイテムを置く。"
  },
  {
    "start": 3688322,
    "end": 3689990,
    "text": "すぐにわかるだろう。"
  },
  {
    "start": 3690290,
    "end": 3694606,
    "text": "さて、このタイプは見た目がいいので、少しバッチを作りたい。"
  },
  {
    "start": 3694718,
    "end": 3697054,
    "text": "そのためには新しいコンポーネントが必要だ。"
  },
  {
    "start": 3697222,
    "end": 3708530,
    "text": "componentsフォルダを右クリックして、tsx export default functionバッチを作りましょう。"
  },
  {
    "start": 3711590,
    "end": 3714878,
    "text": "もちろん、このバッチには小道具として子供たちが必要だ。"
  },
  {
    "start": 3714934,
    "end": 3717334,
    "text": "このバッチに入れるものは何でもいい。"
  },
  {
    "start": 3717502,
    "end": 3727432,
    "text": "ここでバッチプロップスというインターフェイスを作成し、リアクト・ドット・リアクト・ノード型の子プロップスを渡す。"
  },
  {
    "start": 3727576,
    "end": 3733540,
    "text": "こうすれば、テキストだけでなく、必要であれば別の種類の要素でも何でも入れることができる。"
  },
  {
    "start": 3734560,
    "end": 3749470,
    "text": "バッチプロップからこの子プロップを再構築し、これらの子プロップをレンダリングするシンプルなスパンを返し、スパンにスタイルを追加します。"
  },
  {
    "start": 3749930,
    "end": 3755802,
    "text": "もちろん、スパンを直接ジョブ・リストの項目に入れることもできるが、こうすることで再利用性を保つことができる。"
  },
  {
    "start": 3755986,
    "end": 3757426,
    "text": "今はこれを取っておこう。"
  },
  {
    "start": 3757458,
    "end": 3759314,
    "text": "スタイリングは一瞬で済ませる。"
  },
  {
    "start": 3759402,
    "end": 3763682,
    "text": "まず、このバッジをジョブ・リストの項目に追加しよう。"
  },
  {
    "start": 3763826,
    "end": 3775060,
    "text": "ここで、仕事の種類を表示する新しいバッチコンポーネントをレンダリングしたい。"
  },
  {
    "start": 3775600,
    "end": 3776232,
    "text": "そうしよう。"
  },
  {
    "start": 3776256,
    "end": 3781856,
    "text": "では、バッチTSXファイルに戻り、以下のクラス名を追加してみよう。"
  },
  {
    "start": 3781928,
    "end": 3786380,
    "text": "その周囲にボーダーを描く。"
  },
  {
    "start": 3786840,
    "end": 3788488,
    "text": "それならパディングが必要だ。"
  },
  {
    "start": 3788664,
    "end": 3796460,
    "text": "水平方向のパディングはpx 2、垂直方向のパディングはPY 0.5と小さく設定した。"
  },
  {
    "start": 3797130,
    "end": 3808990,
    "text": "背景はこのグレーがかった色であるBGミュートに設定し、テキストはより濃いグレーであるミュート前景に設定した。"
  },
  {
    "start": 3809610,
    "end": 3814990,
    "text": "次に、テキストを少し小さくするテキスト・スミを追加する。"
  },
  {
    "start": 3816090,
    "end": 3821442,
    "text": "次に、テキストを少し大きくするフォント・ミディアムを追加する。"
  },
  {
    "start": 3821546,
    "end": 3824030,
    "text": "必要なクラスはこれだけだ。"
  },
  {
    "start": 3824530,
    "end": 3828830,
    "text": "必要であれば、ビデオを一時停止して、それを入力することができます。"
  },
  {
    "start": 3830770,
    "end": 3833990,
    "text": "そして、ジョブ・リストの項目に戻り、これを終わらせる。"
  },
  {
    "start": 3834290,
    "end": 3839722,
    "text": "これがバッチで、その下に別のスパンを表示する。"
  },
  {
    "start": 3839866,
    "end": 3842870,
    "text": "今回はバッチではなく、普通のスパンだ。"
  },
  {
    "start": 3843850,
    "end": 3852240,
    "text": "ここで、グロックのアイコンを、ここでも使っているのと同じ16のサイズでもう一度表示したい。"
  },
  {
    "start": 3853820,
    "end": 3861080,
    "text": "このタグを閉じ、その横に再び相対日付を表示する。"
  },
  {
    "start": 3861660,
    "end": 3864440,
    "text": "私たちはこの禁止令をここでもスタイリングしたい。"
  },
  {
    "start": 3864740,
    "end": 3875286,
    "text": "フレックス・アイテムはセンター・ギャップ1.5、テキストはミュート・フォアグラウンド。"
  },
  {
    "start": 3875468,
    "end": 3877394,
    "text": "ああ、こんな感じだ。"
  },
  {
    "start": 3877562,
    "end": 3879550,
    "text": "また、これは手応えがある。"
  },
  {
    "start": 3879890,
    "end": 3884162,
    "text": "これは大画面では右側にしか表示されない。"
  },
  {
    "start": 3884306,
    "end": 3887990,
    "text": "画面が小さくなると、このリストに移動する。"
  },
  {
    "start": 3888450,
    "end": 3891790,
    "text": "さて、仕事リストの項目はかなりクールだと思う。"
  },
  {
    "start": 3892370,
    "end": 3895658,
    "text": "フロント・ページにはまだスタイリングを加える必要がある。"
  },
  {
    "start": 3895794,
    "end": 3901768,
    "text": "まず最初に、このページ全体の幅を最大にして、画面の中央に配置したい。"
  },
  {
    "start": 3901914,
    "end": 3904596,
    "text": "メイン・タグにいくつかのクラス名を追加する。"
  },
  {
    "start": 3904788,
    "end": 3908160,
    "text": "最大Wは5XLとした。"
  },
  {
    "start": 3908900,
    "end": 3916520,
    "text": "この場合、Mautoで水平方向の中央揃えを行い、margin auto CSS属性を追加する。"
  },
  {
    "start": 3917260,
    "end": 3925604,
    "text": "また、水平方向のパディングを3、垂直方向のマージンを10としたい。"
  },
  {
    "start": 3925652,
    "end": 3930080,
    "text": "ここには、後でフッターを追加する場所の上下にスペースがある。"
  },
  {
    "start": 3930740,
    "end": 3937564,
    "text": "このタグに入れる要素に影響を与える。"
  },
  {
    "start": 3937692,
    "end": 3942180,
    "text": "しかし、単発の仕事リストの項目間にこの10個のスペースはいらない。"
  },
  {
    "start": 3942260,
    "end": 3951560,
    "text": "これを別のdivにラップし、4つのスペース・ワイヤーを持たせる。"
  },
  {
    "start": 3951980,
    "end": 3954160,
    "text": "このギャップを小さくする。"
  },
  {
    "start": 3955180,
    "end": 3962506,
    "text": "そして、この内側のdivを、再びHTMLタグとしてsectionセクションにラップする。"
  },
  {
    "start": 3962618,
    "end": 3969890,
    "text": "検索エンジンのクローラーやアクセシビリティ・ツールに、この下にあるものはすべて別のセクションであることを伝える。"
  },
  {
    "start": 3969930,
    "end": 3971146,
    "text": "繰り返すが、これはそれほど重要なことではない。"
  },
  {
    "start": 3971218,
    "end": 3974218,
    "text": "これをデフにすることもできるが、少しはマシになる。"
  },
  {
    "start": 3974354,
    "end": 3977298,
    "text": "ここに別のセクションを設けたのは後のことだ。"
  },
  {
    "start": 3977394,
    "end": 3982058,
    "text": "サイドバーとページネーションバーだ。"
  },
  {
    "start": 3982194,
    "end": 3984590,
    "text": "ここで、この追加セクションを追加する。"
  },
  {
    "start": 3984990,
    "end": 3989090,
    "text": "このセクションの上に、もう1つのディブを置く。"
  },
  {
    "start": 3989510,
    "end": 3992646,
    "text": "このdivには、このページの見出しが入ります。"
  },
  {
    "start": 3992838,
    "end": 3999970,
    "text": "この新しいdivに、さらにいくつかのクラス名、今回はspace y fiveとtext centerを追加する。"
  },
  {
    "start": 4001310,
    "end": 4007646,
    "text": "ここでは、開発者の求人という見出しを1つだけ付けます。"
  },
  {
    "start": 4007798,
    "end": 4012144,
    "text": "後ほど、この見出しをさまざまな検索フィルターによって変化させ、躍動させる。"
  },
  {
    "start": 4012222,
    "end": 4014360,
    "text": "今のところ、これをハードコードするだけだ。"
  },
  {
    "start": 4015060,
    "end": 4018436,
    "text": "デフォルトでは、見出しはtailwind CSSでスタイルされていません。"
  },
  {
    "start": 4018548,
    "end": 4037908,
    "text": "エクセル・フォントのエクストラ・ボールド・トラッキング・タイトに独自のスタイリング・テキストを追加すると、一文字の間隔が狭くなり、見出しや大画面での見栄えが少し良くなる。"
  },
  {
    "start": 4038004,
    "end": 4041532,
    "text": "LGコロンでは文字をさらに大きくしている。"
  },
  {
    "start": 4041636,
    "end": 4043040,
    "text": "テキスト5 エクセル"
  },
  {
    "start": 4043760,
    "end": 4050032,
    "text": "スペースに余裕があるときは、小さい画面よりも文字が少し大きくなります。"
  },
  {
    "start": 4050216,
    "end": 4057296,
    "text": "LGにカーソルを合わせると、この値の1024ピクセル上にブレークポイントが表示される。"
  },
  {
    "start": 4057448,
    "end": 4063040,
    "text": "このクラスがアクティブになり、その下の修飾子なしのクラスがアクティブになる。"
  },
  {
    "start": 4063200,
    "end": 4073882,
    "text": "そして、このhの下に、まだこのdivの中に、夢の仕事を見つけようという段落を追加したい。"
  },
  {
    "start": 4073986,
    "end": 4081030,
    "text": "これは単なるサブタイトルなので、テキスト・カラーを再びテキスト・ミュート・フォアグラウンドに変更する。"
  },
  {
    "start": 4082290,
    "end": 4086234,
    "text": "ええ、私に言わせれば、かなりプロフェッショナルに見えますよ。"
  },
  {
    "start": 4086402,
    "end": 4086930,
    "text": "オーケー。"
  },
  {
    "start": 4086970,
    "end": 4099210,
    "text": "そして、レスポンシブ・レイアウトであっても、ある時点で読みづらくなってしまうので、このウェブサイト全体に最小幅を追加したい。"
  },
  {
    "start": 4099330,
    "end": 4104430,
    "text": "このレイアウトの最小幅を350ピクセルに設定したい。"
  },
  {
    "start": 4105210,
    "end": 4111042,
    "text": "ルート・レイアウトでこれを行うのが最適です。"
  },
  {
    "start": 4111226,
    "end": 4113946,
    "text": "このボディ・タグのクラス名を変更する。"
  },
  {
    "start": 4114058,
    "end": 4117442,
    "text": "ここではすでにフォントのクラス名を渡している。"
  },
  {
    "start": 4117546,
    "end": 4123150,
    "text": "これをバックスティックで囲み直し、アクティブな状態を維持するように式にラップする。"
  },
  {
    "start": 4123530,
    "end": 4126480,
    "text": "そして、木製のミンも加える。"
  },
  {
    "start": 4126550,
    "end": 4136756,
    "text": "固定値ではなく、任意の値を設定する。このように、括弧で囲んで350ピクセルとする。"
  },
  {
    "start": 4136948,
    "end": 4144800,
    "text": "これで、レイアウトがこの350ピクセルより小さくなることはない。"
  },
  {
    "start": 4146380,
    "end": 4149316,
    "text": "さて、次はフィルターのサイドバーを設定したい。"
  },
  {
    "start": 4149388,
    "end": 4152360,
    "text": "そこで最初のサーバーアクションを呼び出す。"
  },
  {
    "start": 4152810,
    "end": 4174490,
    "text": "componentsフォルダのjob filter sitebar tsxに新しいコンポーネントを作成し、このファイルを作成して、この関数をHTMLタグにエクスポートします。"
  },
  {
    "start": 4174530,
    "end": 4176842,
    "text": "ここで使いたいのはツァイトだ。"
  },
  {
    "start": 4176946,
    "end": 4182762,
    "text": "ここでも普通のdivを使うことができるが、サイドバーの場合はsideの方が少し慣用的である。"
  },
  {
    "start": 4182906,
    "end": 4188150,
    "text": "とりあえず、ここにテキストを入れてレイアウトに入れたい。"
  },
  {
    "start": 4188890,
    "end": 4191990,
    "text": "これを保存して、ルート・レイアウトに入りましょう。"
  },
  {
    "start": 4192530,
    "end": 4197430,
    "text": "ここではザイトバーをリストの上のセクションに入れた。"
  },
  {
    "start": 4197730,
    "end": 4204314,
    "text": "ジョブフィルター、ザイトバー、そこにある。"
  },
  {
    "start": 4204402,
    "end": 4206350,
    "text": "今はただのテキストだ。"
  },
  {
    "start": 4206670,
    "end": 4212118,
    "text": "次に、水平に整列させたいので、いくつかのクラスをセクションに追加する。"
  },
  {
    "start": 4212174,
    "end": 4215610,
    "text": "では、これをフレックスボックスにしてみよう。"
  },
  {
    "start": 4216230,
    "end": 4230490,
    "text": "デフォルトでは、小さな画面ではフレックス列となり、互いが下に並ぶが、MDブレークポイント以降はフレックス行に設定し、このように左右に並ぶようにする。"
  },
  {
    "start": 4230910,
    "end": 4233850,
    "text": "また、ギャップ4でスペーシングも加えている。"
  },
  {
    "start": 4234290,
    "end": 4238642,
    "text": "その場合、ジョブ・リストが残りの利用可能な幅を占めるようにしたい。"
  },
  {
    "start": 4238706,
    "end": 4239266,
    "text": "そうだろう？"
  },
  {
    "start": 4239418,
    "end": 4245546,
    "text": "このdivの中に入って、ジョブリストの項目をラップし、これをリセットして成長させます。"
  },
  {
    "start": 4245738,
    "end": 4250190,
    "text": "これがサイドバーだ。"
  },
  {
    "start": 4250890,
    "end": 4253618,
    "text": "サイドバーコンポーネントに戻ろう。"
  },
  {
    "start": 4253794,
    "end": 4263568,
    "text": "では、このziteタグをMDブレークポイントでクラス名でスタイルしてみましょう。"
  },
  {
    "start": 4263674,
    "end": 4269012,
    "text": "260ピクセルの固定幅を与えたい。"
  },
  {
    "start": 4269196,
    "end": 4271612,
    "text": "今はもう少しスペースが必要だ。"
  },
  {
    "start": 4271796,
    "end": 4276500,
    "text": "このベタベタとしたクラスを利用して、このベタベタを上にくっつけたい。"
  },
  {
    "start": 4276580,
    "end": 4283316,
    "text": "というのも、ポジションにトップゼロを追加しなければならないからだ。"
  },
  {
    "start": 4283508,
    "end": 4284700,
    "text": "そう、まだ動かない。"
  },
  {
    "start": 4284740,
    "end": 4286044,
    "text": "まだ何かが足りない。"
  },
  {
    "start": 4286132,
    "end": 4293648,
    "text": "これは、背景色を設定することで確認できるのだが、今現在は高さいっぱいに表示されているからだと思う。"
  },
  {
    "start": 4293744,
    "end": 4298872,
    "text": "コンテンツと同じ高さまでしか表示されないように、hフィットに設定したい。"
  },
  {
    "start": 4299016,
    "end": 4301020,
    "text": "これで粘着が効くようになった。"
  },
  {
    "start": 4301560,
    "end": 4305380,
    "text": "では、この背景色を消してみよう。"
  },
  {
    "start": 4306440,
    "end": 4314060,
    "text": "その代わりに、背景色をBG backgroundにリセットする。"
  },
  {
    "start": 4314560,
    "end": 4319758,
    "text": "背景色をハードコーディングしないことで、明るいテーマにも暗いテーマにも対応できる。"
  },
  {
    "start": 4319934,
    "end": 4327462,
    "text": "そして、この枠線に再び枠線をつけ、丸みを帯びたLGに設定する。"
  },
  {
    "start": 4327646,
    "end": 4330290,
    "text": "小さな画面では一番上に表示される。"
  },
  {
    "start": 4330870,
    "end": 4333398,
    "text": "大きな画面では左側にある。"
  },
  {
    "start": 4333574,
    "end": 4341638,
    "text": "次に、このziteタグの中でこのテキストを削除し、代わりに小文字のfを持つフォームを追加してみましょう。"
  },
  {
    "start": 4341774,
    "end": 4348878,
    "text": "ここではフォーム・フィールドを1つ置いているが、フォームはサーバー・コンポーネントの内部でもサーバー・アクションを起こすことができる。"
  },
  {
    "start": 4349014,
    "end": 4352486,
    "text": "覚えておいてほしいのは、サーバー・コンポーネントにはJavaScriptの機能はないということだ。"
  },
  {
    "start": 4352518,
    "end": 4365118,
    "text": "たとえば、ボタンに対してonclickハンドラを実行することはできませんが、formsアクションプロップはサーバーコンポーネントでも機能します。"
  },
  {
    "start": 4365214,
    "end": 4375930,
    "text": "この関数は自動的にポストエンドポイントに変換され、このフォームから呼び出されます。"
  },
  {
    "start": 4376430,
    "end": 4379090,
    "text": "この関数をフィルター・ジョブと呼ぶことにしよう。"
  },
  {
    "start": 4379510,
    "end": 4382966,
    "text": "まだ作っていないので、利用できない。"
  },
  {
    "start": 4383078,
    "end": 4384374,
    "text": "今すぐそうしよう。"
  },
  {
    "start": 4384462,
    "end": 4388086,
    "text": "これは、コンポーネント自体の上にある同じファイルで行う。"
  },
  {
    "start": 4388198,
    "end": 4395930,
    "text": "これを別のファイルに書くこともできるが、このファイルがクライアント・コンポーネントでなければ、ここに直接サーバー・アクションを書くことができる。"
  },
  {
    "start": 4397310,
    "end": 4402446,
    "text": "同じ名前をつけた非同期関数を作成する。"
  },
  {
    "start": 4402638,
    "end": 4414006,
    "text": "フォームから呼び出されるこれらのサーバーアクションは、フォームデータを入力として受け取ります。"
  },
  {
    "start": 4414198,
    "end": 4416958,
    "text": "このサーバー・アクションについては、すぐに対処する。"
  },
  {
    "start": 4417014,
    "end": 4418930,
    "text": "とりあえず、レイアウトを完成させよう。"
  },
  {
    "start": 4420190,
    "end": 4431764,
    "text": "このフォーム・タグの中にdivを入れ、このdivの上に、フォーム・フィールドの間にスペースy4の縦方向のスペースを追加します。"
  },
  {
    "start": 4431932,
    "end": 4448572,
    "text": "フォームそのものではなく、ここにスペーシングを追加する理由は、サーバーコンポーネントの中でサーバーアクションを使用すると、next jsが自動的にサーバーコンポーネントのIDを含む隠し入力フィールドをここに追加してしまうからです。"
  },
  {
    "start": 4448676,
    "end": 4451420,
    "text": "これが、この追加ラッパーを作った理由だ。"
  },
  {
    "start": 4451580,
    "end": 4454452,
    "text": "よし、ここに最初の入力フィールドを入れよう。"
  },
  {
    "start": 4454556,
    "end": 4459872,
    "text": "まず、dot slash UI dot labelからインポートしたラベルを追加する。"
  },
  {
    "start": 4459976,
    "end": 4464184,
    "text": "赤×のものはインポートしないことが重要だ。"
  },
  {
    "start": 4464232,
    "end": 4468288,
    "text": "自分のコンポーネント・フォルダーにあるものをインポートしたい。"
  },
  {
    "start": 4468424,
    "end": 4474500,
    "text": "このラベル・コンポーネントは、入力コンポーネントをインストールしたときにschedcnによって追加されたものだ。"
  },
  {
    "start": 4474880,
    "end": 4489388,
    "text": "このラベルを閉じて、ここにsearchと書き、これを保存してページを更新すると、next jsがこれがサーバーアクションであることを知らないため、エラーが発生する。"
  },
  {
    "start": 4489524,
    "end": 4490932,
    "text": "ネタバレ"
  },
  {
    "start": 4491076,
    "end": 4497116,
    "text": "関数の先頭にuse serverという文字列を追加して、サーバーアクションを宣言する。"
  },
  {
    "start": 4497308,
    "end": 4499444,
    "text": "こうすることで、これをサーバーのアクションに変えることができる。"
  },
  {
    "start": 4499532,
    "end": 4501200,
    "text": "これでうまくいくはずだ。"
  },
  {
    "start": 4501540,
    "end": 4506120,
    "text": "ラベルにスタイリングを施した。"
  },
  {
    "start": 4506620,
    "end": 4509820,
    "text": "以下に、大文字のIの入力を追加する。"
  },
  {
    "start": 4509900,
    "end": 4514040,
    "text": "繰り返しますが、これはUihe componentsフォルダからのインポートです。"
  },
  {
    "start": 4514540,
    "end": 4531860,
    "text": "このチュートリアルは、リアクトフックフォームや複雑なロジックを使わずに、フォームを作成して送信するという最もシンプルなアプローチから始めるように構成しました。"
  },
  {
    "start": 4531940,
    "end": 4536420,
    "text": "これは基本的に、フォーム・データを送信する通常のHTMLフォームである。"
  },
  {
    "start": 4536540,
    "end": 4539888,
    "text": "これは、この入力フィールドに名前をつけることで機能する。"
  },
  {
    "start": 4540084,
    "end": 4544744,
    "text": "私はこれをqueryの略であるqに設定したが、好きな名前をつけることができる。"
  },
  {
    "start": 4544832,
    "end": 4549936,
    "text": "このフォームを送信すると、このqフィールドはこのフォームデータの中に含まれることになります。"
  },
  {
    "start": 4550128,
    "end": 4553020,
    "text": "そして、このテキストにプレースホルダーを付けることもできる。"
  },
  {
    "start": 4553560,
    "end": 4558980,
    "text": "ここでは、タイトル、コンマ、会社のコンマなどを書く。"
  },
  {
    "start": 4559800,
    "end": 4564064,
    "text": "これは、何かを入力する前に表示されるものだ。"
  },
  {
    "start": 4564232,
    "end": 4571208,
    "text": "そして、ラベルをクリックすると入力フィールドが自動的に選択されるように、ラベルを入力フィールドに接続しなければならない。"
  },
  {
    "start": 4571304,
    "end": 4573500,
    "text": "これはアクセシビリティの面でも重要だ。"
  },
  {
    "start": 4573880,
    "end": 4582920,
    "text": "HTMLに4つの小道具を追加し、それをqに設定する。"
  },
  {
    "start": 4583040,
    "end": 4591128,
    "text": "このHTMLの4つとこのidは一致しなければならない。こうすることで、ブラウザはこのラベルがこの入力フィールドに属していることを知ることができるからだ。"
  },
  {
    "start": 4591184,
    "end": 4597098,
    "text": "このラベルをクリックすると、入力フィールドが選択される。"
  },
  {
    "start": 4597274,
    "end": 4601870,
    "text": "このように、ラベルと入力フィールドを別のdivで囲む。"
  },
  {
    "start": 4603210,
    "end": 4608470,
    "text": "そして、このdivをflex、flex Col、gap 2でスタイルする。"
  },
  {
    "start": 4609170,
    "end": 4611470,
    "text": "今、彼らは互いに近づいている。"
  },
  {
    "start": 4611890,
    "end": 4616150,
    "text": "次に、サイドバーにパディングを追加しよう。"
  },
  {
    "start": 4616530,
    "end": 4619630,
    "text": "サイドのタグに「4」を加える。"
  },
  {
    "start": 4620620,
    "end": 4622476,
    "text": "よし、だいぶ良くなったようだ。"
  },
  {
    "start": 4622668,
    "end": 4625276,
    "text": "となると、もう少しフォーム・フィールドが必要だ。"
  },
  {
    "start": 4625308,
    "end": 4629028,
    "text": "他のものは入力ではなく、セレクト・フィールドである。"
  },
  {
    "start": 4629084,
    "end": 4632940,
    "text": "Schatcnはそのような厳選されたコンポーネントを提供する。"
  },
  {
    "start": 4633020,
    "end": 4639548,
    "text": "問題は、このフォームがJavaScriptで動作しないことだ。"
  },
  {
    "start": 4639604,
    "end": 4641564,
    "text": "これが、今回追加しなかった理由だ。"
  },
  {
    "start": 4641652,
    "end": 4648196,
    "text": "このドロップダウンメニューには、このような素敵なスタイリングはありませんが、独自のセレクトコンポーネントを作成します。"
  },
  {
    "start": 4648228,
    "end": 4653008,
    "text": "見た目は少し悪くなるが、Jがなくても機能する。"
  },
  {
    "start": 4653144,
    "end": 4656904,
    "text": "私はセレクト・コンポーネント自体のスタイルを保存しているだけです。"
  },
  {
    "start": 4656992,
    "end": 4661820,
    "text": "ああ、チェジン・コンポーネントからコピーペーストすれば、こんなことができる。"
  },
  {
    "start": 4662320,
    "end": 4665640,
    "text": "セレクト・コンポーネントを作るのだ。"
  },
  {
    "start": 4665720,
    "end": 4673480,
    "text": "これはかなり低レベルのコンポーネントだと思うので、今回はcomponentsフォルダのUIフォルダに入れた。"
  },
  {
    "start": 4673560,
    "end": 4677366,
    "text": "私はこの入れ子になったフォルダーに入れているが、これは個人的な好みだ。"
  },
  {
    "start": 4677528,
    "end": 4682762,
    "text": "このUIフォルダは先ほどSchedzynが作成したものなので、ここにセレクトを入れる。"
  },
  {
    "start": 4682826,
    "end": 4690230,
    "text": "今回、小文字の名前をつけたのは、schedcnもこのようにコンポーネントに名前をつけており、一貫性を保ちたいからだ。"
  },
  {
    "start": 4690690,
    "end": 4695710,
    "text": "ここではselectというデフォルトの関数をエクスポートしている。"
  },
  {
    "start": 4697050,
    "end": 4701830,
    "text": "ここでは、セレクト・コンポーネントをレンダリングしたい。"
  },
  {
    "start": 4702450,
    "end": 4708730,
    "text": "とりあえず、これを保存してサイドバーに入れ、どのように見えるか見てみよう。"
  },
  {
    "start": 4709390,
    "end": 4717050,
    "text": "ラベルと入力のあるこの内側のdivの下に、同じスタイリングの別のdivを置く。"
  },
  {
    "start": 4717630,
    "end": 4722530,
    "text": "またもやフレックス・コル、そして2度のギャップ。"
  },
  {
    "start": 4723150,
    "end": 4726970,
    "text": "ここでもラベルに大文字のlをつける。"
  },
  {
    "start": 4727990,
    "end": 4732770,
    "text": "今回はHTMLの4つをlocationに設定した。"
  },
  {
    "start": 4734610,
    "end": 4737190,
    "text": "ラベルのテキストはロケーションとなる。"
  },
  {
    "start": 4737850,
    "end": 4741230,
    "text": "ここにセレクト・フィールドを置く。"
  },
  {
    "start": 4742730,
    "end": 4744950,
    "text": "どう見えるか見てみよう。"
  },
  {
    "start": 4745330,
    "end": 4747950,
    "text": "ああ、デフォルトではまったくスタイルがない。"
  },
  {
    "start": 4748570,
    "end": 4750430,
    "text": "さあ、スタイリッシュにいこう"
  },
  {
    "start": 4750770,
    "end": 4753762,
    "text": "を選択したTSXファイルに戻す。"
  },
  {
    "start": 4753866,
    "end": 4761854,
    "text": "まず第一に、通常のHTMLセレクトと同じ小道具を使いたい。"
  },
  {
    "start": 4762002,
    "end": 4773010,
    "text": "このために、今回は構造化しないpropsをここに渡し、typeをreact dot HTML propsに設定する。"
  },
  {
    "start": 4773470,
    "end": 4775878,
    "text": "次に、2つの角括弧を加える。"
  },
  {
    "start": 4775934,
    "end": 4781958,
    "text": "ここでは、型としてHTMLのselect要素を持っている。"
  },
  {
    "start": 4782134,
    "end": 4797494,
    "text": "こうすることで、セレクト・コンポーネントは、通常のセレクト・コンポーネントと同じ小道具を受け取ることができる。"
  },
  {
    "start": 4797662,
    "end": 4801726,
    "text": "ラベルがセレクト・フィールドに接続される。"
  },
  {
    "start": 4801918,
    "end": 4804654,
    "text": "さて、セレクト・コンポーネントに戻ろう。"
  },
  {
    "start": 4804822,
    "end": 4814630,
    "text": "ここで、いくつかのクラス名を使ってスタイルを決めたいが、このコンポーネントを呼び出すときに、外部からクラス名を追加できるようにもしたい。"
  },
  {
    "start": 4814670,
    "end": 4818690,
    "text": "スタイリングを変更したい場合、完全にハードコードすることは避けたい。"
  },
  {
    "start": 4819150,
    "end": 4829214,
    "text": "そのために、クラス名を式に変えて、Cn関数を使用する。"
  },
  {
    "start": 4829302,
    "end": 4835574,
    "text": "これは、互いにインテリジェントにオーバーライドするさまざまな追い風クラスを渡す役割を担っている。"
  },
  {
    "start": 4835662,
    "end": 4844646,
    "text": "そうでなければ、外から別の色を設定しても、実際にはこれらの追い風クラスの順番は重要ではないため、適用されないという問題が発生する。"
  },
  {
    "start": 4844718,
    "end": 4854586,
    "text": "クラス名の文字列で他のクラスの右側にクラスを渡したからといって、そのクラスが他のクラスを上書きするわけではありません。"
  },
  {
    "start": 4854698,
    "end": 4859898,
    "text": "Cnは、2番目に渡した値が最初の値を上書きするようにする。"
  },
  {
    "start": 4860074,
    "end": 4865162,
    "text": "Cnの最初の値は、ここでハードコードしたデフォルトのスタイリングになります。"
  },
  {
    "start": 4865346,
    "end": 4869834,
    "text": "コンマの後の2番目の値は、プロップス・ドット・クラス名です。"
  },
  {
    "start": 4869962,
    "end": 4873556,
    "text": "これらは外部からセレクトに渡すクラス名である。"
  },
  {
    "start": 4873698,
    "end": 4876580,
    "text": "こうすることで、このコンポーネントをカスタマイズ可能に保つことができる。"
  },
  {
    "start": 4877280,
    "end": 4880608,
    "text": "この最初の文字列で、デフォルトのスタイリングを追加したい。"
  },
  {
    "start": 4880744,
    "end": 4894424,
    "text": "高さは10で固定とし、ラム値とピクセル値は通常通り設定する。ボーダーは丸みを帯びたMDで丸くする。"
  },
  {
    "start": 4894592,
    "end": 4897672,
    "text": "このスタイリングはシェジンのものを真似たんだ。"
  },
  {
    "start": 4897776,
    "end": 4906448,
    "text": "デフォルトではパディングを追加できないので、この下向きカラットのアイコンを非表示にしたい。"
  },
  {
    "start": 4906584,
    "end": 4909192,
    "text": "これを自分たちのものに置き換える。"
  },
  {
    "start": 4909376,
    "end": 4913300,
    "text": "これで、外観上の問題はなくなった。"
  },
  {
    "start": 4913880,
    "end": 4922504,
    "text": "そして、truncateクラスを追加し、この中のテキストが長くなりすぎた場合、テキストが切り落とされ、最後に省略記号が付くようにする。"
  },
  {
    "start": 4922592,
    "end": 4925024,
    "text": "これはtruncateが処理してくれる。"
  },
  {
    "start": 4925192,
    "end": 4930220,
    "text": "次に、背景をBGに設定し、透明にならないようにする。"
  },
  {
    "start": 4931390,
    "end": 4937838,
    "text": "そして、ボーダーの色を変更するボーダー入力クラスを追加する。"
  },
  {
    "start": 4938014,
    "end": 4940054,
    "text": "もう少しクラスが必要だ。"
  },
  {
    "start": 4940102,
    "end": 4942690,
    "text": "見やすいように大きくします。"
  },
  {
    "start": 4944070,
    "end": 4946610,
    "text": "縦に2つ並ぶ。"
  },
  {
    "start": 4947190,
    "end": 4961422,
    "text": "PL3で左側にパディングを追加し、pr8で右側に大きめのパディングを追加します。右側に大きめのパディングを追加するのは、ドロップダウンのアイコンがあり、テキストがそれに重ならないようにするためです。"
  },
  {
    "start": 4961526,
    "end": 4965330,
    "text": "そして、テキストをsmに設定する。"
  },
  {
    "start": 4966310,
    "end": 4971010,
    "text": "それから、外側にフォーカス・リングを追加するクラスがもう少し必要だ。"
  },
  {
    "start": 4972030,
    "end": 4981810,
    "text": "もし追加しなければならないクラスがたくさんあって混乱するようなら、このプロジェクトのGitHubリポジトリからコピーすることもできるが、手書きで入力したほうがいいだろう。"
  },
  {
    "start": 4982390,
    "end": 4990540,
    "text": "リングオフセットの背景スペースとフォーカスカラムを追加する。"
  },
  {
    "start": 4990700,
    "end": 4996160,
    "text": "セレクト・フィールドにフォーカスが当たっているときだけ、アウトラインを「なし」にしたい。"
  },
  {
    "start": 4997420,
    "end": 4998980,
    "text": "次にフォーカス・カラムを追加する。"
  },
  {
    "start": 4999020,
    "end": 5003120,
    "text": "ここでもツアーのリングをセットしたい。"
  },
  {
    "start": 5003420,
    "end": 5005972,
    "text": "そしてまた宇宙へ。"
  },
  {
    "start": 5006076,
    "end": 5012960,
    "text": "次にフォーカスコロン、リング、リング......これは何をするものかというと、リングの色をスタイリングするものだと思う。"
  },
  {
    "start": 5013980,
    "end": 5018040,
    "text": "その後、コロンリングのオフセット2にピントを合わせる。"
  },
  {
    "start": 5019820,
    "end": 5025580,
    "text": "そして、カーソルを変更するコロン・カーソル・ノット・アドバンテージを無効にする。"
  },
  {
    "start": 5025660,
    "end": 5029332,
    "text": "Schedcnの入力フィールドとの整合性を保ちたいんだ。"
  },
  {
    "start": 5029516,
    "end": 5036480,
    "text": "最後の1つは不透明度50を無効にして、少し透明にしている。"
  },
  {
    "start": 5036900,
    "end": 5039200,
    "text": "そして、これらのクラスを並べ替えることができる。"
  },
  {
    "start": 5039800,
    "end": 5045660,
    "text": "これは、同じフォーカスリングを持つこの入力フィールドとよく似ている。"
  },
  {
    "start": 5046080,
    "end": 5052460,
    "text": "また、このクラス名のプロップも渡しているので、必要であれば外部からカスタマイズすることができる。"
  },
  {
    "start": 5052840,
    "end": 5058740,
    "text": "背景色を赤にしたい場合は、内部背景色を上書きします。"
  },
  {
    "start": 5059080,
    "end": 5061328,
    "text": "私たちはまだ終わっていない。"
  },
  {
    "start": 5061504,
    "end": 5065688,
    "text": "まず、ドロップダウン・アイコンをここに置きたい。"
  },
  {
    "start": 5065784,
    "end": 5071424,
    "text": "というのも、その位置は変えられないので、既存のものを取り除いたからだ。"
  },
  {
    "start": 5071592,
    "end": 5080736,
    "text": "その代わりに、lucid reactから独自のシェブロン・ダウン・アイコンを追加し、これをいくつかのクラス名でスタイル変更する。"
  },
  {
    "start": 5080768,
    "end": 5082740,
    "text": "そして、このタグをここで閉じる。"
  },
  {
    "start": 5083480,
    "end": 5091780,
    "text": "右3つ、上3つの絶対配置にしたい。"
  },
  {
    "start": 5092420,
    "end": 5096628,
    "text": "そして、幅と高さをh4とwidth4で設定する。"
  },
  {
    "start": 5096804,
    "end": 5100444,
    "text": "これは、先ほど使用したツァイスのプロップを使用する代替案である。"
  },
  {
    "start": 5100532,
    "end": 5103308,
    "text": "CSSで幅と高さを変更することもできる。"
  },
  {
    "start": 5103444,
    "end": 5104640,
    "text": "そんなことはどうでもいい。"
  },
  {
    "start": 5105940,
    "end": 5109320,
    "text": "それに透明性を加えたい。"
  },
  {
    "start": 5109820,
    "end": 5121450,
    "text": "さて、ここでは絶対ポジショニングを使用しているので、このセレクト全体をdivにラップし、そこに子要素の相対ポジショニングを追加しなければならない。"
  },
  {
    "start": 5122630,
    "end": 5126774,
    "text": "また、入力フィールドにwフル・クラスを追加する必要がある。"
  },
  {
    "start": 5126822,
    "end": 5129290,
    "text": "そのため、使用可能なスペースがいっぱいになってしまう。"
  },
  {
    "start": 5130470,
    "end": 5132590,
    "text": "私はここでちょっとしたミスを犯した。"
  },
  {
    "start": 5132630,
    "end": 5136846,
    "text": "このシェフのアイコンはセレクトの中にあってはならない。"
  },
  {
    "start": 5136998,
    "end": 5138230,
    "text": "下にあるはずだ。"
  },
  {
    "start": 5138390,
    "end": 5141630,
    "text": "実際には、selectは自己終了タグを得ることができる。"
  },
  {
    "start": 5141750,
    "end": 5145450,
    "text": "この閉じタグを削除して、このように自分で閉じるようにする。"
  },
  {
    "start": 5145830,
    "end": 5147038,
    "text": "今はうまくいっている。"
  },
  {
    "start": 5147134,
    "end": 5148838,
    "text": "これがダウンアイコンだ。"
  },
  {
    "start": 5148974,
    "end": 5154806,
    "text": "そして、ここで渡したプロップスが実際にセレクトフィールドに適用されることも確認しなければならない。"
  },
  {
    "start": 5154878,
    "end": 5161406,
    "text": "そう、今はクラス名しか使っていないけど、このアイデアを応用して他のものも追加したいんだ。"
  },
  {
    "start": 5161438,
    "end": 5162198,
    "text": "パスする。"
  },
  {
    "start": 5162374,
    "end": 5167930,
    "text": "これらの小道具をこのコンポーネントに広げることによって、これを行う。"
  },
  {
    "start": 5168830,
    "end": 5171050,
    "text": "もうひとつ変更しなければならないことがある。"
  },
  {
    "start": 5171430,
    "end": 5179182,
    "text": "こうすることで、外部からクラス名を渡してもこのクラス名が上書きされ、デフォルトのスタイルが適用されなくなる。"
  },
  {
    "start": 5179326,
    "end": 5182330,
    "text": "これが、クラス名を別に必要とする理由である。"
  },
  {
    "start": 5182630,
    "end": 5184422,
    "text": "私たちはここでプロップスに上がる。"
  },
  {
    "start": 5184486,
    "end": 5186530,
    "text": "これを中括弧で囲む。"
  },
  {
    "start": 5186990,
    "end": 5190478,
    "text": "ここでは、クラス名のコンマを再構築したい。"
  },
  {
    "start": 5190574,
    "end": 5193134,
    "text": "ドット、ドット、ドット、プロップスと書く。"
  },
  {
    "start": 5193262,
    "end": 5195502,
    "text": "これが残りの小道具の構文である。"
  },
  {
    "start": 5195646,
    "end": 5202360,
    "text": "こうすることで、クラス名はこれらのプロップに含まれず、この下に適用されない。"
  },
  {
    "start": 5202900,
    "end": 5208080,
    "text": "というのも、このクラスは別に構造化されているからだ。"
  },
  {
    "start": 5209060,
    "end": 5217916,
    "text": "これで、外部から異なるスタイルを渡しても、デフォルトのスタイルを上書きすることはない。"
  },
  {
    "start": 5218028,
    "end": 5218800,
    "text": "完璧だ。"
  },
  {
    "start": 5219300,
    "end": 5219756,
    "text": "オーケー。"
  },
  {
    "start": 5219788,
    "end": 5222996,
    "text": "もうひとつ、このコンポーネントに加えなければならない変更がある。"
  },
  {
    "start": 5223108,
    "end": 5227524,
    "text": "サードパーティーのコンポーネント・ライブラリを使うのが便利な理由は、もうお分かりだろう。"
  },
  {
    "start": 5227612,
    "end": 5234076,
    "text": "というのも、コンポーネントを設定し、適切に再利用可能でアクセス可能なものにするのは、実はそれほど簡単ではないからだ。"
  },
  {
    "start": 5234228,
    "end": 5240924,
    "text": "後ほど、このセレクトフィールドをリアクトフックフォームでも使うことになるが、リアクトフックフォームはこのコンポーネントを参照する必要がある。"
  },
  {
    "start": 5241012,
    "end": 5245300,
    "text": "refは、このコンポーネントにアクセスできる直接参照である。"
  },
  {
    "start": 5245340,
    "end": 5247060,
    "text": "これは特別な構文である。"
  },
  {
    "start": 5247140,
    "end": 5249428,
    "text": "reactの構文を見てみよう。"
  },
  {
    "start": 5249484,
    "end": 5259698,
    "text": "小屋のcnコンポーネントのひとつを覗いてみると、このどこかに4つのワイルドなrefがあり、このrefをこの中に入れるためにこのフォワードrefラッパーが必要である。"
  },
  {
    "start": 5259794,
    "end": 5261258,
    "text": "普通のプロップではない。"
  },
  {
    "start": 5261394,
    "end": 5264130,
    "text": "ここでも、そのようなフォワードレフを加えたい。"
  },
  {
    "start": 5264250,
    "end": 5272266,
    "text": "ほんの少し変更するだけだが、正しい場所に変更しないとコンパイルできない。"
  },
  {
    "start": 5272458,
    "end": 5276350,
    "text": "我々は、関数の前にエクスポート・デフォルトの後ろに行く。"
  },
  {
    "start": 5276890,
    "end": 5278710,
    "text": "ここでは、前方参照と書く。"
  },
  {
    "start": 5279210,
    "end": 5281390,
    "text": "次に、2つの角括弧を加える。"
  },
  {
    "start": 5282340,
    "end": 5293640,
    "text": "この角括弧の間の第一引数がHTMLのselect要素で、第二引数がここですでに使ったこのprops型である。"
  },
  {
    "start": 5294220,
    "end": 5298480,
    "text": "これを切り取って、カンマの後に入れよう。"
  },
  {
    "start": 5299540,
    "end": 5302524,
    "text": "これで、2つの閉じ角括弧ができたはずだ。"
  },
  {
    "start": 5302572,
    "end": 5306284,
    "text": "このアングル・ブラケットを閉じる。"
  },
  {
    "start": 5306452,
    "end": 5316932,
    "text": "そして、このコンポーネント全体をファイルの最後まで括弧でくくる。"
  },
  {
    "start": 5317076,
    "end": 5322948,
    "text": "そして、この列を削除し、代わりにカンマを書く。"
  },
  {
    "start": 5323124,
    "end": 5326116,
    "text": "ここでは、第2引数としてレフを取得している。"
  },
  {
    "start": 5326228,
    "end": 5337960,
    "text": "この構文全体はこうなっている。以前のようにプロップを取得し、別にこのrefを取得して、このrefをプロップとしてこのコンポーネントに渡す。"
  },
  {
    "start": 5338780,
    "end": 5344724,
    "text": "通常のセレクト・コンポーネント、デフォルトのセレクト・コンポーネントは、すでにこのrefを処理してくれている。"
  },
  {
    "start": 5344852,
    "end": 5355116,
    "text": "問題は、このセレクト・コンポーネントを私たち自身のコンポーネントにラップし、この参照をそのまま維持するために、この前方参照構文で自分自身を渡さなければならないことだ。"
  },
  {
    "start": 5355228,
    "end": 5365818,
    "text": "これでセレクト・コンポーネントの作成は終わり、見栄えもよく、正しく動作するセレクト・コンポーネントが手に入った。"
  },
  {
    "start": 5365964,
    "end": 5373374,
    "text": "さて、ジョブ・フィルターのサイドバーに戻り、このセレクトを値で埋めることができる。"
  },
  {
    "start": 5373502,
    "end": 5379006,
    "text": "通常のセレクトと同じように、ここに小文字のoでさまざまなオプションを入れることができる。"
  },
  {
    "start": 5379118,
    "end": 5387014,
    "text": "これは、セレクト・コンポーネントが通常のセレクトと同じプロップをすべて取り、子プロップがこれらのプロップの1つであるためです。"
  },
  {
    "start": 5387062,
    "end": 5388930,
    "text": "私たちはここで子供たちを追い越すことができる。"
  },
  {
    "start": 5389710,
    "end": 5394310,
    "text": "最初のオプションを追加してみよう。"
  },
  {
    "start": 5395090,
    "end": 5398290,
    "text": "今はドロップダウンメニューに含まれている。"
  },
  {
    "start": 5398450,
    "end": 5404322,
    "text": "ここでも、ドロップダウンメニューにはched Cnのような素敵なスタイリングはない。"
  },
  {
    "start": 5404346,
    "end": 5408698,
    "text": "このプレーンなものはJavaScriptなしで動くので、これを使うしかない。"
  },
  {
    "start": 5408754,
    "end": 5413178,
    "text": "チャドCNが使っているものは、厳密には本当のHTMLセレクトではない。"
  },
  {
    "start": 5413234,
    "end": 5415266,
    "text": "これはカスタム・ドロップダウン・コンポーネントです。"
  },
  {
    "start": 5415378,
    "end": 5418506,
    "text": "さて、ラベルはすでにセレクト・ライトに接続されている。"
  },
  {
    "start": 5418538,
    "end": 5422670,
    "text": "これをクリックすると、アクセシビリティのための選択フィールドがフォーカスされる。"
  },
  {
    "start": 5423570,
    "end": 5435074,
    "text": "また、セレクトにデフォルト値を設定したいので、これを空文字列に設定し、最初のオプションの値も空文字列に設定する。"
  },
  {
    "start": 5435242,
    "end": 5439442,
    "text": "これはデフォルト値で、フィルターは適用されません。"
  },
  {
    "start": 5439626,
    "end": 5454034,
    "text": "しかし、全ロケーションの巨大なリストをここに入れるのではなく、実際にデータセットにあるロケーションだけを表示したい。"
  },
  {
    "start": 5454122,
    "end": 5460306,
    "text": "これはまだサーバー・コンポーネントなので、これを非同期関数にして、必要なデータをフェッチすることができる。"
  },
  {
    "start": 5460338,
    "end": 5466310,
    "text": "ここでは、distinct locationsというコンサを作ろう。"
  },
  {
    "start": 5467730,
    "end": 5470250,
    "text": "そしてプリズマを待つ。"
  },
  {
    "start": 5470330,
    "end": 5473992,
    "text": "ここでも輸入しなければならない。"
  },
  {
    "start": 5474136,
    "end": 5482780,
    "text": "アドリブPrismaからPrismaをインポート。"
  },
  {
    "start": 5484400,
    "end": 5490660,
    "text": "プリズマドット、ジョブ、ドット、たくさん見つける。"
  },
  {
    "start": 5491320,
    "end": 5493020,
    "text": "再びフィルターを追加する。"
  },
  {
    "start": 5494480,
    "end": 5497940,
    "text": "今回も承認されたものだけを見せたい。"
  },
  {
    "start": 5498850,
    "end": 5507250,
    "text": "承認された場合、これらの仕事のデータはほとんど必要ない。"
  },
  {
    "start": 5507330,
    "end": 5511750,
    "text": "セレクト・フィールドを追加するために、場所だけが必要なのだ。"
  },
  {
    "start": 5512410,
    "end": 5514722,
    "text": "ここではlocationをtrueに設定している。"
  },
  {
    "start": 5514866,
    "end": 5523510,
    "text": "こうすることで、Prismaはデータベース内のこの1つのカラムだけを返し、他のどうでもいいデータは返しません。"
  },
  {
    "start": 5523980,
    "end": 5527360,
    "text": "そして、ここにはこの明確な修飾語がある。"
  },
  {
    "start": 5528380,
    "end": 5531964,
    "text": "ここでは、角括弧で囲んだ配列を追加している。"
  },
  {
    "start": 5532132,
    "end": 5535508,
    "text": "この配列の中に、ロケーションを文字列として入れる。"
  },
  {
    "start": 5535644,
    "end": 5545956,
    "text": "Prismaのクールなところは、このようなユーティリティ関数やフィルターが使えることで、生のSQLクエリを書くよりも簡単に使えることだ。"
  },
  {
    "start": 5546108,
    "end": 5552364,
    "text": "これは文字列の配列ではなく、気になる場所を含むオブジェクトの配列である。"
  },
  {
    "start": 5552452,
    "end": 5557590,
    "text": "また、これを文字列の配列にマッピングしなければならないので、別の変数を作ることができる。"
  },
  {
    "start": 5557670,
    "end": 5565422,
    "text": "これをより簡潔にするために、この約束が解決したときに何かをするように、ここで直接チェーンすることもできる。"
  },
  {
    "start": 5565526,
    "end": 5572262,
    "text": "括弧を閉じた後、\"then \"と書く。"
  },
  {
    "start": 5572406,
    "end": 5574650,
    "text": "これらの場所をマッピングしたい。"
  },
  {
    "start": 5575070,
    "end": 5581010,
    "text": "右矢印は、読みやすくするために次の行に続けます。"
  },
  {
    "start": 5582180,
    "end": 5590320,
    "text": "それぞれのロケーション・オブジェクトを通常の文字列に変換したいからだ。"
  },
  {
    "start": 5590940,
    "end": 5600372,
    "text": "括弧を2つ、中括弧を1つ作っているのは、こうすることでこのオブジェクトを再構築できるからだ。"
  },
  {
    "start": 5600476,
    "end": 5602548,
    "text": "ここが私たちの場所であることを忘れないでほしい。"
  },
  {
    "start": 5602684,
    "end": 5608240,
    "text": "ここにはオートコンプリートはありませんが、このフィールドはあります。"
  },
  {
    "start": 5609340,
    "end": 5613092,
    "text": "そして、このオブジェクトを場所そのものにマッピングしたい。"
  },
  {
    "start": 5613236,
    "end": 5620380,
    "text": "もしこれが分かりにくいようなら、最初にこのデータを取得し、次にそれをマッピングするというように、別々のステートメントとして書くこともできる。"
  },
  {
    "start": 5620460,
    "end": 5628680,
    "text": "これは、各オブジェクトからこの場所を取り出し、この配列を文字列の配列に変えるだけである。"
  },
  {
    "start": 5628980,
    "end": 5631212,
    "text": "もう1つ、私たちはここに電話をかける。"
  },
  {
    "start": 5631356,
    "end": 5634840,
    "text": "また、filterを呼び出し、ブール値を渡している。"
  },
  {
    "start": 5635590,
    "end": 5636934,
    "text": "これは何をするものなのか？"
  },
  {
    "start": 5637062,
    "end": 5643470,
    "text": "すべての仕事に場所があるわけではないからだ。"
  },
  {
    "start": 5643630,
    "end": 5646862,
    "text": "の場合、場所のタイプは文字列またはNULLです。"
  },
  {
    "start": 5646966,
    "end": 5651090,
    "text": "このフィルター呼び出しで、すべてのヌル値を削除する。"
  },
  {
    "start": 5651910,
    "end": 5653438,
    "text": "我々はこのようにフォーマットしている。"
  },
  {
    "start": 5653534,
    "end": 5656910,
    "text": "ビデオを一時停止して、コードが一致していることを確認することができる。"
  },
  {
    "start": 5657030,
    "end": 5664866,
    "text": "このフィルターカードの唯一の問題は、typescriptsがヌル値を削除することを認識していないことだ。"
  },
  {
    "start": 5664938,
    "end": 5669602,
    "text": "の場合、distinct locationの型は文字列かNULL配列のままです。"
  },
  {
    "start": 5669786,
    "end": 5675090,
    "text": "これは少し残念なことだが、必要なことなのだ。"
  },
  {
    "start": 5675210,
    "end": 5678710,
    "text": "ここでは、この閉じのセミコロンを削除する。"
  },
  {
    "start": 5679170,
    "end": 5688550,
    "text": "awaitの前から最後の閉じ括弧の後まで、このawaitカー全体を別の括弧で囲む。"
  },
  {
    "start": 5689420,
    "end": 5699040,
    "text": "というのも、ここでtypescriptにdistinct locationsの型が文字列配列であることを伝えているからだ。"
  },
  {
    "start": 5699740,
    "end": 5707780,
    "text": "さて、これで明確な場所の文字列配列ができ、そこからドロップダウンメニューのオプションを作成できるようになった。"
  },
  {
    "start": 5707900,
    "end": 5710600,
    "text": "ここに中括弧で式を追加する。"
  },
  {
    "start": 5711180,
    "end": 5718902,
    "text": "私たちは明確なロケーションを、オプションのオブジェクトにマッピングしたい。"
  },
  {
    "start": 5719086,
    "end": 5726190,
    "text": "ここで各ロケーションを通過し、各ロケーションごとにオプションを作成する。"
  },
  {
    "start": 5726350,
    "end": 5729990,
    "text": "オプションをもう一度書くには、キーが必要だ。"
  },
  {
    "start": 5730110,
    "end": 5739692,
    "text": "リストを作成するので、キーは場所そのものになります。場所は一意であり、値も場所です。"
  },
  {
    "start": 5739806,
    "end": 5745020,
    "text": "ここに表示されている文字列もロケーションである。"
  },
  {
    "start": 5746200,
    "end": 5750608,
    "text": "さて、これでドロップダウンメニューにそれぞれのロケーションが表示された。"
  },
  {
    "start": 5750744,
    "end": 5751940,
    "text": "クールだろ？"
  },
  {
    "start": 5752680,
    "end": 5758728,
    "text": "では、パートタイム、フルタイムなど、職種別のドロップダウンメニューが必要ですね。"
  },
  {
    "start": 5758784,
    "end": 5762096,
    "text": "今回はデータベースからデータを取得する必要はない。"
  },
  {
    "start": 5762168,
    "end": 5766900,
    "text": "これらの値はハードコードされるが、別のファイルに入れたい。"
  },
  {
    "start": 5767440,
    "end": 5770536,
    "text": "この中のlibフォルダに入れたい。"
  },
  {
    "start": 5770568,
    "end": 5774180,
    "text": "jobtypes TSというファイルを作ってみよう。"
  },
  {
    "start": 5776520,
    "end": 5783300,
    "text": "ここでは、単純な文字列配列であるjob typesという定数をエクスポートしたいと思います。"
  },
  {
    "start": 5784040,
    "end": 5787224,
    "text": "オーケー、ここにまた違う値を貼り付ける。"
  },
  {
    "start": 5787272,
    "end": 5791312,
    "text": "ビデオを一時停止して入力することもできるが、ここに何を加えるかはあなた次第だ。"
  },
  {
    "start": 5791376,
    "end": 5793982,
    "text": "お好みで別の値を使うこともできる。"
  },
  {
    "start": 5794096,
    "end": 5797362,
    "text": "データベースに文字列として保存するだけだ。"
  },
  {
    "start": 5797546,
    "end": 5805110,
    "text": "ここにもうひとつ配列を追加したい。"
  },
  {
    "start": 5805770,
    "end": 5808914,
    "text": "後で新しい仕事を作るときに必要になる。"
  },
  {
    "start": 5809042,
    "end": 5818270,
    "text": "ここには、リモート、オンサイト、ハイブリッドの3つの値を入れた。"
  },
  {
    "start": 5819130,
    "end": 5822160,
    "text": "さて、ジョブフィルターのサイドバーに戻ろう。"
  },
  {
    "start": 5822290,
    "end": 5828412,
    "text": "タイプフィルターは、実際にはロケーションフィルターの上に置きたいのですが、検索入力の下に置きたいのです。"
  },
  {
    "start": 5828516,
    "end": 5838920,
    "text": "ここでもまた、他のツアーで使用したのと同じスタイルでdivを作成しました。"
  },
  {
    "start": 5840980,
    "end": 5846080,
    "text": "ここには、タイプに対応する別のラベルHTMLを貼り付ける。"
  },
  {
    "start": 5847500,
    "end": 5850030,
    "text": "ラベルもzタイプになる。"
  },
  {
    "start": 5850220,
    "end": 5854390,
    "text": "の下にもうひとつ、大文字をselectとして置く。"
  },
  {
    "start": 5855450,
    "end": 5857550,
    "text": "idはtypeに設定されている。"
  },
  {
    "start": 5858490,
    "end": 5860150,
    "text": "名前はタイプ。"
  },
  {
    "start": 5861210,
    "end": 5865190,
    "text": "ここでもデフォルト値を空文字列に設定している。"
  },
  {
    "start": 5865810,
    "end": 5870042,
    "text": "デフォルト値は「すべての場所」となります。"
  },
  {
    "start": 5870226,
    "end": 5872098,
    "text": "そしてまた、地図を作る必要がある。"
  },
  {
    "start": 5872234,
    "end": 5878996,
    "text": "これをコピーして、ここに貼り付けよう。"
  },
  {
    "start": 5879148,
    "end": 5882640,
    "text": "我々は今、ジョブ・タイプからマップが欲しい。"
  },
  {
    "start": 5883180,
    "end": 5892520,
    "text": "ジョブの型は、変数名を2つの型に変更するだけで、あとは同じである。"
  },
  {
    "start": 5892980,
    "end": 5893476,
    "text": "そうだね。"
  },
  {
    "start": 5893548,
    "end": 5895880,
    "text": "では、それぞれの職種を紹介しよう。"
  },
  {
    "start": 5896740,
    "end": 5900428,
    "text": "さて、もうひとつ追加したいフィールドがあり、それはチェックボックスだ。"
  },
  {
    "start": 5900564,
    "end": 5905750,
    "text": "このdivの下に、別のdivを作成する。"
  },
  {
    "start": 5907610,
    "end": 5910034,
    "text": "もう一度、クラス名を追加する。"
  },
  {
    "start": 5910162,
    "end": 5915346,
    "text": "今回は、チェックボックスとラベルが水平に並んでいるので、少し違っている。"
  },
  {
    "start": 5915498,
    "end": 5924346,
    "text": "ラベルを右側に表示させたいので、フレックス・アイテム・センター・ギャップ2に設定します。"
  },
  {
    "start": 5924458,
    "end": 5936330,
    "text": "チェックボックスは単なる入力フィールドで、いつものようにリモートになるアイデアを与える。"
  },
  {
    "start": 5937110,
    "end": 5939566,
    "text": "名前もリモートにした。"
  },
  {
    "start": 5939758,
    "end": 5944450,
    "text": "typeをcheckboxに設定することで、チェックボックス・フィールドが作成される。"
  },
  {
    "start": 5945990,
    "end": 5946970,
    "text": "見てみよう。"
  },
  {
    "start": 5947270,
    "end": 5948558,
    "text": "これだ。"
  },
  {
    "start": 5948694,
    "end": 5950350,
    "text": "ええ、デフォルトでは青です。"
  },
  {
    "start": 5950430,
    "end": 5954330,
    "text": "色を変えて、クラス名を少し大きくしてみよう。"
  },
  {
    "start": 5954750,
    "end": 5960846,
    "text": "スケール125では、幅と高さを使うことができないので、より大きくすることができる。"
  },
  {
    "start": 5960958,
    "end": 5962742,
    "text": "チェックボックスでは動作しません。"
  },
  {
    "start": 5962926,
    "end": 5969330,
    "text": "黒をアクセントにすると、このアクセント・カラー属性によってチェックボックスが黒くなります。"
  },
  {
    "start": 5969950,
    "end": 5972598,
    "text": "これも好きなようにスタイリングできる。"
  },
  {
    "start": 5972774,
    "end": 5980770,
    "text": "その右側に、HTMLの4つのリモートで大文字のラベルを付けたい。"
  },
  {
    "start": 5981590,
    "end": 5983770,
    "text": "リモートジョブと表示されます。"
  },
  {
    "start": 5984560,
    "end": 5986128,
    "text": "これだ。"
  },
  {
    "start": 5986304,
    "end": 5992540,
    "text": "これでラベルをクリックすれば、他のラベルと同じように入力フィールドに正しく接続される。"
  },
  {
    "start": 5993000,
    "end": 5993472,
    "text": "オーケー。"
  },
  {
    "start": 5993496,
    "end": 5996648,
    "text": "最後に、このフォームを送信するためのボタンが必要です。"
  },
  {
    "start": 5996784,
    "end": 5999536,
    "text": "まだサーバー・コンポーネントの中にいることを忘れないでほしい。"
  },
  {
    "start": 5999608,
    "end": 6002672,
    "text": "ここにはonclickハンドラはない。"
  },
  {
    "start": 6002736,
    "end": 6011652,
    "text": "フォームがある場合、それを送信するためのonclickハンドラは必要ありません。"
  },
  {
    "start": 6011776,
    "end": 6020320,
    "text": "ここでもUIからインポートして、適切なスタイリングを持つボタンにしている。"
  },
  {
    "start": 6021300,
    "end": 6030652,
    "text": "このボタンをクリックすると、このフォームが送信され、サーバーのアクションが開始されます。"
  },
  {
    "start": 6030756,
    "end": 6033840,
    "text": "ここでもJavaScriptは必要ない。"
  },
  {
    "start": 6034300,
    "end": 6039800,
    "text": "ここで追加する唯一のクラスは、使用可能な全幅を与えるためのw fullである。"
  },
  {
    "start": 6040960,
    "end": 6043180,
    "text": "これはジョブのフィルタリングを意味する。"
  },
  {
    "start": 6043760,
    "end": 6045580,
    "text": "これが我々のボタンだ。"
  },
  {
    "start": 6046240,
    "end": 6047020,
    "text": "いいね。"
  },
  {
    "start": 6047760,
    "end": 6055568,
    "text": "このフォームを送信すると、すべての値がこのフォーム・データに取り込まれ、サーバー・アクションに渡されます。"
  },
  {
    "start": 6055664,
    "end": 6058648,
    "text": "これらの値は、その名前から得ることができる。"
  },
  {
    "start": 6058744,
    "end": 6063340,
    "text": "各フィールドには名前があり、ここから値を取得することができる。"
  },
  {
    "start": 6063840,
    "end": 6065064,
    "text": "試してみよう。"
  },
  {
    "start": 6065112,
    "end": 6068980,
    "text": "とりあえず、これらの値のひとつをコンソールにロックしてみよう。"
  },
  {
    "start": 6069530,
    "end": 6080154,
    "text": "通常はこのような値を取得し、フォームデータを取得し、そこに例えばqのような名前を渡す。"
  },
  {
    "start": 6080282,
    "end": 6088378,
    "text": "デフォルトでは、このタイプはフォーム・データ入力値であり、基本的に文字列かファイルである。"
  },
  {
    "start": 6088514,
    "end": 6092602,
    "text": "通常、これを扱うときは、これを文字列にキャストする必要がある。"
  },
  {
    "start": 6092706,
    "end": 6095562,
    "text": "この件に関しては、もう少し良い方法で対処しよう。"
  },
  {
    "start": 6095626,
    "end": 6104550,
    "text": "今のところ、これをコンソールにロックしたいだけだ。これはサーバー上で実行されているので、これらのログ・メッセージはブラウザではなく、コンソールで見ることになる。"
  },
  {
    "start": 6105090,
    "end": 6106594,
    "text": "試してみよう。"
  },
  {
    "start": 6106642,
    "end": 6111322,
    "text": "サーバー・アクションを提出できるはずだ。"
  },
  {
    "start": 6111506,
    "end": 6116986,
    "text": "検索フィールドに何かを入力し、ジョブをフィルタリングすれば、クエリが完成する。"
  },
  {
    "start": 6117098,
    "end": 6119442,
    "text": "これはサーバーアクションに渡される。"
  },
  {
    "start": 6119586,
    "end": 6128188,
    "text": "サーバーアクションでは、バックエンドのコードを実行したり、データベースに変更を加えたり、通常のサーバーでできることは何でもできます。"
  },
  {
    "start": 6128274,
    "end": 6131480,
    "text": "最初のサーバー・アクションは、ここではシンプルにします。"
  },
  {
    "start": 6131560,
    "end": 6136776,
    "text": "検索パラメータに適切なフィルターを設定した新しいURLにリダイレクトするだけです。"
  },
  {
    "start": 6136848,
    "end": 6144112,
    "text": "繰り返しになるが、簡単な例から始めることで、圧倒されることなく、これらのサーバー・アクションについて段階的に学ぶことができるようにしたい。"
  },
  {
    "start": 6144216,
    "end": 6149312,
    "text": "ところで、もしこのチュートリアルを楽しんでいただけたら、「いいね！」とチャンネル登録をお願いします。"
  },
  {
    "start": 6149416,
    "end": 6157354,
    "text": "特に「いいね！」は重要で、この動画がより多くの人に見てもらえるようになり、ひいてはこのような動画を今後も作っていこうという意欲につながるからだ。"
  },
  {
    "start": 6157512,
    "end": 6165490,
    "text": "さて、このようにフォームデータからすべての値をひとつずつ抽出してキャストし、利用可能かどうかをチェックすることもできる。"
  },
  {
    "start": 6165910,
    "end": 6169650,
    "text": "よりクリーンな方法は、適切な検証スキーマを設定することである。"
  },
  {
    "start": 6170190,
    "end": 6177158,
    "text": "現在最も人気のある検証ライブラリーはsortで、これは以前にSchatzienと一緒にインストールされたものだ。"
  },
  {
    "start": 6177334,
    "end": 6179694,
    "text": "そんな検証ライブラリーを作ってみよう。"
  },
  {
    "start": 6179782,
    "end": 6186252,
    "text": "これをまた別のファイルにして、libフォルダのドットtの検証に入れたい。"
  },
  {
    "start": 6186356,
    "end": 6187720,
    "text": "ここに入れよう。"
  },
  {
    "start": 6188380,
    "end": 6196708,
    "text": "ここから、ジョブ・フィルター・スキーマと呼ばれる定数をエクスポートし、zをリコールする。"
  },
  {
    "start": 6196884,
    "end": 6198636,
    "text": "これを輸入しなければならない。"
  },
  {
    "start": 6198788,
    "end": 6202040,
    "text": "オートコンプリートが機能するときとしないときがある。"
  },
  {
    "start": 6202500,
    "end": 6205840,
    "text": "zotからzをインポートしたい。"
  },
  {
    "start": 6207220,
    "end": 6209080,
    "text": "キーボードを忘れた。"
  },
  {
    "start": 6210020,
    "end": 6216308,
    "text": "このz変数に、ソートスキーマを定義するオブジェクトを作成することができる。"
  },
  {
    "start": 6216404,
    "end": 6221148,
    "text": "このオブジェクトは、左のジョブ・フィルターと同じ形にしたい。"
  },
  {
    "start": 6221244,
    "end": 6224244,
    "text": "このため、さまざまな検証ルールがある。"
  },
  {
    "start": 6224332,
    "end": 6226540,
    "text": "ソートのドキュメントはかなり膨大だ。"
  },
  {
    "start": 6226660,
    "end": 6228356,
    "text": "ここを覗いてみるといい。"
  },
  {
    "start": 6228548,
    "end": 6233940,
    "text": "使えるルールはいろいろあるが、必要なのはほんの一握りだ。"
  },
  {
    "start": 6234100,
    "end": 6238716,
    "text": "期待するフィールドの名前をすべて追加する必要があるよね？"
  },
  {
    "start": 6238748,
    "end": 6245940,
    "text": "なぜなら、qはこのフォームの名前のひとつだからだ。"
  },
  {
    "start": 6246440,
    "end": 6248180,
    "text": "はqである。"
  },
  {
    "start": 6248840,
    "end": 6250752,
    "text": "これは文字列であると予想される。"
  },
  {
    "start": 6250816,
    "end": 6263136,
    "text": "つまり、文字列を渡す必要はなく、未定義でも構わないということだ。"
  },
  {
    "start": 6263328,
    "end": 6270350,
    "text": "タイプもロケーションも同じルールに従うからだ。"
  },
  {
    "start": 6270730,
    "end": 6274870,
    "text": "また、これらの名前はフィルター・フォームでも使用している。"
  },
  {
    "start": 6275970,
    "end": 6277746,
    "text": "最後は遠隔地だ。"
  },
  {
    "start": 6277818,
    "end": 6286794,
    "text": "これは実際にはブール値にすべきなのだが、URL検索パラメータは常に文字列なので、sortに自動的に文字列をブール値に変換させることができる。"
  },
  {
    "start": 6286882,
    "end": 6291426,
    "text": "文字列が値を持っている場合、それはtrue freeであり、booleanに変換される。"
  },
  {
    "start": 6291578,
    "end": 6298450,
    "text": "今回は関数ではないので、括弧は付けない。"
  },
  {
    "start": 6298870,
    "end": 6303330,
    "text": "次にdot booleanと書くが、これもdot optional関数である。"
  },
  {
    "start": 6304750,
    "end": 6316006,
    "text": "繰り返しになるが、これはURL検索パラメータにあるリモート文字列を受け取り、もしその値があれば、それをブール値のtrueに変え、他の値はすべて通常の文字列とする。"
  },
  {
    "start": 6316198,
    "end": 6321590,
    "text": "後ほど、より複雑な新しい求人フォーム用に別のスキーマを作成します。"
  },
  {
    "start": 6321670,
    "end": 6323734,
    "text": "これはとてもシンプルなものだ。"
  },
  {
    "start": 6323862,
    "end": 6333450,
    "text": "ソートのクールな機能のひとつは、スキーマから型を自動的に作成できることだ。"
  },
  {
    "start": 6334030,
    "end": 6350398,
    "text": "ここでは、ジョブ・フィルター値と呼ばれる型をエクスポートし、角括弧の中にゼロ・ドットを入れ、角括弧の間にジョブ・フィルター・スキーマの型を書く。"
  },
  {
    "start": 6350574,
    "end": 6360158,
    "text": "これはスキーマを受け取り、ここでスキーマで定義したのと同じ型とオプション性を持つタイプスクリプト型に変換する。"
  },
  {
    "start": 6360214,
    "end": 6361330,
    "text": "クールだろ？"
  },
  {
    "start": 6361950,
    "end": 6371374,
    "text": "とりあえずこのファイルを閉じて、あとは基本的に、zotにこのフォーム・データをすべて受け取ってスキーマと比較するように指示したい。"
  },
  {
    "start": 6371502,
    "end": 6373210,
    "text": "この行を削除しよう。"
  },
  {
    "start": 6373630,
    "end": 6380518,
    "text": "まず最初に、フォーム・データを通常のJavaScriptオブジェクトに戻す必要がある。"
  },
  {
    "start": 6380694,
    "end": 6401690,
    "text": "const値はentriesの大文字のoを持つオブジェクトに等しく、これにformdata entriesを渡す。formdata entriesは関数なので、これを呼び出す必要がある。これは単にこれらのフォーム値をJavaScriptオブジェクトに変換し、zotに渡すことができる。"
  },
  {
    "start": 6403230,
    "end": 6407802,
    "text": "次の行では、const pass result equalsと書いている。"
  },
  {
    "start": 6407866,
    "end": 6418270,
    "text": "次に、バリデーション・ファイルからエクスポートしたジョブ・フィルター・スキーマをカールに渡し、このオブジェクトに値を渡します。"
  },
  {
    "start": 6418770,
    "end": 6423722,
    "text": "今、ソートはこれらの値をジョブフィルタースキーマと比較します。"
  },
  {
    "start": 6423866,
    "end": 6436188,
    "text": "もし一致しなければエラーになるが、もし一致すれば、このパス結果にバリデートされた値が入り、適切な型とフィールド名がここに入り、バリデートされたことになる。"
  },
  {
    "start": 6436284,
    "end": 6446220,
    "text": "一方、フォーム・データから直接アクセスする場合は、フォーム・データには何でも入れることができるので、この保証はない。"
  },
  {
    "start": 6446380,
    "end": 6451684,
    "text": "繰り返しますが、バックエンドのロジックはすべてサーバーアクションで行うことができます。"
  },
  {
    "start": 6451732,
    "end": 6453840,
    "text": "これがここでやりたい仕事のすべてだ。"
  },
  {
    "start": 6454700,
    "end": 6457124,
    "text": "では、パスの結果を再構築してみよう。"
  },
  {
    "start": 6457252,
    "end": 6463362,
    "text": "変数名を削除し、代わりに中括弧を追加する。"
  },
  {
    "start": 6463546,
    "end": 6471710,
    "text": "qタイプのlocationとリモートのbooleanは、これですべて適切な型になった。"
  },
  {
    "start": 6472170,
    "end": 6478430,
    "text": "そして、検索パラメータを作成し、その検索パラメータを持つURLにリダイレクトしたい。"
  },
  {
    "start": 6479130,
    "end": 6488230,
    "text": "インポートを必要としない新しいURL検索パラメータに等しいconst検索パラメータを作成します。"
  },
  {
    "start": 6489050,
    "end": 6499010,
    "text": "このオブジェクトにJavaScriptオブジェクトを渡し、ここにそれぞれの値を検索パラメタとして置きたい。"
  },
  {
    "start": 6499130,
    "end": 6505946,
    "text": "これらのフィルタのいくつかをパスすることもできるし、何もパスしないことも、すべてをパスすることもできる。"
  },
  {
    "start": 6506058,
    "end": 6508410,
    "text": "そのため、次のように追加する。"
  },
  {
    "start": 6508490,
    "end": 6512750,
    "text": "括弧を2つ作り、その前にドット・ドットを書く。"
  },
  {
    "start": 6513450,
    "end": 6516906,
    "text": "ここでは、2つのアマゾンのサインをqと書く。"
  },
  {
    "start": 6517058,
    "end": 6528818,
    "text": "そして、このようにJavaScriptオブジェクトを作成し、ここにqコロン、qドットと書き、トリム・トリムは単純にすべての空白を削除する。"
  },
  {
    "start": 6528914,
    "end": 6544394,
    "text": "スペース・ベース、スペース・ストライプのように入力すると、もちろん空白は検索に入れたくないので、トリムは空白を削除し、この奇妙な構文でこの部分を条件付きで渡す。"
  },
  {
    "start": 6544522,
    "end": 6548554,
    "text": "もしqが定義されていれば、これを検索パラメータに入れる。"
  },
  {
    "start": 6548642,
    "end": 6551562,
    "text": "qが定義されていない場合は省略される。"
  },
  {
    "start": 6551666,
    "end": 6553630,
    "text": "ここでの構文はこうなっている。"
  },
  {
    "start": 6554770,
    "end": 6556870,
    "text": "次の行も同じようにする。"
  },
  {
    "start": 6557250,
    "end": 6572910,
    "text": "この値を変更する必要はないので、コロン型の代わりにこのような短縮形を使えばいい。"
  },
  {
    "start": 6574090,
    "end": 6576710,
    "text": "場所についても同様だ。"
  },
  {
    "start": 6578090,
    "end": 6580910,
    "text": "以下、もう1回。"
  },
  {
    "start": 6583090,
    "end": 6587690,
    "text": "remoteに値があれば、remoteも追加したい。"
  },
  {
    "start": 6587730,
    "end": 6588994,
    "text": "remoteはブール値。"
  },
  {
    "start": 6589042,
    "end": 6598356,
    "text": "この文字列を文字列にして、もしリモートがtrueなら、チェックボックスがチェックされていれば、trueという文字列を検索パラメータに追加する。"
  },
  {
    "start": 6598508,
    "end": 6601884,
    "text": "これがどのように見えるかは、もう少ししたらわかるだろう。"
  },
  {
    "start": 6602052,
    "end": 6606444,
    "text": "であれば、これらの新しい検索パラメータにリダイレクトしたいだけである。"
  },
  {
    "start": 6606572,
    "end": 6610028,
    "text": "これには、次のスラッシュ・ナビゲーションからのリダイレクトを使用する。"
  },
  {
    "start": 6610204,
    "end": 6612200,
    "text": "正しいインポートを追加してください。"
  },
  {
    "start": 6612940,
    "end": 6619712,
    "text": "ここでは、ルートURLにスラッシュを入れた新しいURLをバックスティックで追加している。"
  },
  {
    "start": 6619856,
    "end": 6630544,
    "text": "ここに検索パラメータ変数を置き、その文字列を呼び出すことで、URL検索パラメータ構文に変換する。"
  },
  {
    "start": 6630592,
    "end": 6634176,
    "text": "このようなパラメータがどのようなものかご存じない方のために補足しておくと、パラメータは常に次のような形をしている。"
  },
  {
    "start": 6634288,
    "end": 6641584,
    "text": "これらは、URLの後にクエスチョンマークで始まり、次にフィールド名、例えばqクエリ、そして値となる。"
  },
  {
    "start": 6641752,
    "end": 6646902,
    "text": "次にアンバサダー・ロケーション・イコール、そしてロケーション・バリューと続く。"
  },
  {
    "start": 6647096,
    "end": 6651830,
    "text": "この検索パラメーターを文字列に変換するとこうなる。"
  },
  {
    "start": 6652610,
    "end": 6656790,
    "text": "オーケー、でもこの話をするだけじゃなくて、実際にやってみよう。"
  },
  {
    "start": 6657770,
    "end": 6668386,
    "text": "すべての変更を保存した後、ページをリフレッシュすると、ここに追加したものはすべて、これを送信する際のURLの一部になるはずだ。"
  },
  {
    "start": 6668538,
    "end": 6671914,
    "text": "ローディングインジケーターはまだないが、すでに機能している。"
  },
  {
    "start": 6672082,
    "end": 6675050,
    "text": "でも、クエスチョンマークは自分たちで付けなければならない。"
  },
  {
    "start": 6675170,
    "end": 6677214,
    "text": "これは気づかなかった。"
  },
  {
    "start": 6677382,
    "end": 6685302,
    "text": "リダイレクトカーのこのスラッシュの後にクエスチョンマークを追加するのは、これが検索パラメーターの開始を示すからです。"
  },
  {
    "start": 6685366,
    "end": 6686638,
    "text": "もう一度やってみよう。"
  },
  {
    "start": 6686814,
    "end": 6695878,
    "text": "というのも、実際にはまだ結果をフィルタリングしていないのだが、URLにはすでに値が追加されているからだ。"
  },
  {
    "start": 6696014,
    "end": 6698190,
    "text": "リモートフィルターも試してみよう。"
  },
  {
    "start": 6698270,
    "end": 6701570,
    "text": "リモート・トゥルーでこんな感じ。"
  },
  {
    "start": 6702960,
    "end": 6714392,
    "text": "クロームの開発ツールでネットワーク・タブを見ると、フィルターを送信するときにポスト・リクエストが表示されるはずだ。"
  },
  {
    "start": 6714576,
    "end": 6724288,
    "text": "ここでわかるように、これはHTTPポスト・リクエストで、このポスト・リクエストは現在いるページと同じURLに送られる。"
  },
  {
    "start": 6724384,
    "end": 6727530,
    "text": "これは次のJSがやってくれるマジックだ。"
  },
  {
    "start": 6727640,
    "end": 6734758,
    "text": "基本的にはこのポスト・エンドポイントを作成し、このポスト・エンドポイントに、ここにあるようなフォーム・データをすべて渡します。"
  },
  {
    "start": 6734854,
    "end": 6743438,
    "text": "この投稿のオブジェクトのレスポンスの中で最もクールなものは、リダイレクト後の新しいページのコンテンツである。"
  },
  {
    "start": 6743574,
    "end": 6753470,
    "text": "というのも、サーバーのエンドポイントを呼び出してから、URLにフィルタを適用するためだけにリダイレクトを行うのは非常に無駄が多いからだ。"
  },
  {
    "start": 6753550,
    "end": 6758878,
    "text": "これは2回のリクエストとなり、1回のリクエストで実行する方法は他にもある。"
  },
  {
    "start": 6759014,
    "end": 6767406,
    "text": "これらのサーバーアクションは、投稿リクエストのレスポンスの中にすでに新しいページを返すように最適化されています。"
  },
  {
    "start": 6767518,
    "end": 6771086,
    "text": "実際には、新しいページを取得するためのリクエストは1つしかない。"
  },
  {
    "start": 6771238,
    "end": 6779126,
    "text": "これは、クライアント側の機能を持たないサーバー・コンポーネントの内部で使用するため、JavaScriptを無効にしても動作します。"
  },
  {
    "start": 6779238,
    "end": 6780690,
    "text": "試してみよう。"
  },
  {
    "start": 6780990,
    "end": 6784530,
    "text": "JavaScriptを無効にする ページを更新する"
  },
  {
    "start": 6784870,
    "end": 6790038,
    "text": "まだURLからデフォルト値を設定していないが、これは後で実装する。"
  },
  {
    "start": 6790214,
    "end": 6791526,
    "text": "もう一度試してみよう。"
  },
  {
    "start": 6791638,
    "end": 6804558,
    "text": "これは本当に良いことで、インターネット接続が遅い人はJavaScriptの読み込みに時間がかかることがあるからだ。"
  },
  {
    "start": 6804654,
    "end": 6809264,
    "text": "こうすることで、このページはすぐにインタラクティブになり、ユーザーは待つ必要がなくなる。"
  },
  {
    "start": 6809352,
    "end": 6818520,
    "text": "例えば、ルーターを経由してクライアント側でリダイレクト操作を行う場合、これを実行するにはJavaScriptが必要になる。"
  },
  {
    "start": 6818600,
    "end": 6823720,
    "text": "フォームアクションとサーバーアクションを使用することで、JavaScriptを必要としません。"
  },
  {
    "start": 6823880,
    "end": 6828864,
    "text": "さて、次のステップは実際にフィルターを適用して、ここで結果をフィルタリングすることだ。"
  },
  {
    "start": 6828952,
    "end": 6830296,
    "text": "もう1つだけ修正する。"
  },
  {
    "start": 6830448,
    "end": 6836590,
    "text": "今のところ、\"タイプ \"は \"ロケーション \"であり、\"すべてのタイプ \"と表示する必要がある。"
  },
  {
    "start": 6837130,
    "end": 6840350,
    "text": "ここではこれを全タイプに変更する。"
  },
  {
    "start": 6840650,
    "end": 6841750,
    "text": "よし、良くなった。"
  },
  {
    "start": 6842170,
    "end": 6850250,
    "text": "さて、ここでフィルターが実際に機能することを確認し、フィルターボタンのロード状態を追加したい。"
  },
  {
    "start": 6850330,
    "end": 6852074,
    "text": "今はまだないんだから。"
  },
  {
    "start": 6852162,
    "end": 6858370,
    "text": "というのも、私たちはサーバー・コンポーネントの中にいて、サーバー・コンポーネントの中にステートはないからだ。"
  },
  {
    "start": 6858410,
    "end": 6861454,
    "text": "このボタンにローディングの状態をどのように取り込めばいいのか？"
  },
  {
    "start": 6861602,
    "end": 6863414,
    "text": "すぐにわかるだろう。"
  },
  {
    "start": 6863502,
    "end": 6870494,
    "text": "まず最初に、エラーページを追加したいと思います。"
  },
  {
    "start": 6870582,
    "end": 6879182,
    "text": "これらのフィルターに無効な値を挿入した場合を除けば、ここでエラーが発生することはないだろう。"
  },
  {
    "start": 6879246,
    "end": 6884214,
    "text": "なぜなら、それは単なる文字列だからだ。"
  },
  {
    "start": 6884302,
    "end": 6888990,
    "text": "アプリのどこかでエラーが発生した場合に備えて、エラー・ページを追加する。"
  },
  {
    "start": 6889030,
    "end": 6889256,
    "text": "基本的にはね。"
  },
  {
    "start": 6889278,
    "end": 6889876,
    "text": "基本的にはね。"
  },
  {
    "start": 6890028,
    "end": 6899680,
    "text": "サイドバーを開き、アプリ・フォルダーに入り、アプリ・フォルダーに直接、エラーTSXを入れる。"
  },
  {
    "start": 6900380,
    "end": 6903356,
    "text": "これは次のJSアプリのルーターにある特別なファイルだ。"
  },
  {
    "start": 6903428,
    "end": 6913036,
    "text": "次回のJS初心者チュートリアルで取り上げますが、これは単に、コンポーネントでエラーがスローされ、自分たちではキャッチできなかった場合に表示されるページです。"
  },
  {
    "start": 6913188,
    "end": 6916238,
    "text": "エラーページはクライアント・コンポーネントでなければならない。"
  },
  {
    "start": 6916404,
    "end": 6918690,
    "text": "一番上にuse clientディレクティブを追加する。"
  },
  {
    "start": 6918730,
    "end": 6921790,
    "text": "では、ここにシンプルなページをエクスポートしたいと思います。"
  },
  {
    "start": 6922210,
    "end": 6924074,
    "text": "デフォルト関数をエクスポートする。"
  },
  {
    "start": 6924122,
    "end": 6925842,
    "text": "これは好きな名前をつけることができる。"
  },
  {
    "start": 6925906,
    "end": 6928830,
    "text": "これをエラーまたはエラー・ページと呼ぶことにする。"
  },
  {
    "start": 6929610,
    "end": 6932154,
    "text": "ここにもメインタグを入れる。"
  },
  {
    "start": 6932322,
    "end": 6939154,
    "text": "ここに見出しを入れ、トップページと同じスタイルにしたい。"
  },
  {
    "start": 6939242,
    "end": 6943168,
    "text": "このようなクラスを何度も何度もコピーしたくない。"
  },
  {
    "start": 6943274,
    "end": 6948380,
    "text": "できることは、このスタイリングを含むh oneコンポーネントを作成することだ。"
  },
  {
    "start": 6948460,
    "end": 6949452,
    "text": "そうしよう"
  },
  {
    "start": 6949556,
    "end": 6957716,
    "text": "これらのクラス名をここにコピーして、新しいコンポーネントを作成し、UIフォルダに入れましょう。"
  },
  {
    "start": 6957868,
    "end": 6961720,
    "text": "H ONE TSXと呼ぼう。"
  },
  {
    "start": 6962260,
    "end": 6969920,
    "text": "ここでは、hを大文字のHDDと呼ぶデフォルトの関数をエクスポートする。"
  },
  {
    "start": 6971850,
    "end": 6979370,
    "text": "これは通常のh oneタグと同じプロップを受け取ることになり、この場合も既存のリアクトタイプを使用することができる。"
  },
  {
    "start": 6979490,
    "end": 6990430,
    "text": "HTMLの小道具の角括弧HTMLの見出し要素、これはhead要素ではなくheading要素です。"
  },
  {
    "start": 6991570,
    "end": 6997320,
    "text": "こうすることで、このコンポーネントにも通常のhコンポーネントと同じ小道具を渡すことができる。"
  },
  {
    "start": 6997450,
    "end": 7000372,
    "text": "ここでは、単にnhを1つレンダリングしたいだけだ。"
  },
  {
    "start": 7000476,
    "end": 7002880,
    "text": "このタグは自分で閉じることができる。"
  },
  {
    "start": 7004180,
    "end": 7013700,
    "text": "小道具を広げたので、見出し要素の一部であれば何でもこのコンポーネントに渡すことができる。"
  },
  {
    "start": 7013780,
    "end": 7014452,
    "text": "小道具。"
  },
  {
    "start": 7014556,
    "end": 7020080,
    "text": "ということは、ここのクラス名をここと同じものにしたい。"
  },
  {
    "start": 7020940,
    "end": 7022260,
    "text": "クラス名を追加する。"
  },
  {
    "start": 7022300,
    "end": 7027078,
    "text": "もう一度、これを式に変えて、このcn関数を使う。"
  },
  {
    "start": 7027214,
    "end": 7031530,
    "text": "そして、これらのクラス名を文字列として第1引数に渡す。"
  },
  {
    "start": 7032510,
    "end": 7038650,
    "text": "もうひとつは、外部からスタイリングを変更できるようにするための、プロップスのクラス名である。"
  },
  {
    "start": 7039710,
    "end": 7046610,
    "text": "よし、フロント・ページでこれを置き換えれば、もうスタイリングする必要はない。"
  },
  {
    "start": 7047070,
    "end": 7052824,
    "text": "代わりに大文字のエッジのものを使い、UIフォルダからインポートする。"
  },
  {
    "start": 7052992,
    "end": 7055340,
    "text": "以前と同じスタイリングであるべきだ。"
  },
  {
    "start": 7056120,
    "end": 7060460,
    "text": "では、矢印のページでも同じ見出しを使いたい。"
  },
  {
    "start": 7061040,
    "end": 7066980,
    "text": "このメインタグの中に、大文字のhを1つ入れる。"
  },
  {
    "start": 7067760,
    "end": 7070020,
    "text": "見出しにはエラーと書かれるだけだ。"
  },
  {
    "start": 7070400,
    "end": 7079030,
    "text": "予期せぬエラーが発生しました。"
  },
  {
    "start": 7080570,
    "end": 7082986,
    "text": "このメイン・タグのスタイリング。"
  },
  {
    "start": 7083058,
    "end": 7093870,
    "text": "クラス名m autoを画面中央に配置するために、フロントページでも使用したのと同じ最大幅5 xlを追加する。"
  },
  {
    "start": 7094210,
    "end": 7102172,
    "text": "ここでも同じように、縦方向のマージンと横方向のパディング、そしてテキストの中心をリセットする。"
  },
  {
    "start": 7102346,
    "end": 7108340,
    "text": "見出しと段落の間にスペースを追加するため、もう1つスペースy 5。"
  },
  {
    "start": 7108760,
    "end": 7110272,
    "text": "オーケー、ベリッシモ。"
  },
  {
    "start": 7110376,
    "end": 7112888,
    "text": "今、このエラー・ページが表示されている。"
  },
  {
    "start": 7112984,
    "end": 7115736,
    "text": "サーバー・アクションで、ここでエラーを投げることができる。"
  },
  {
    "start": 7115808,
    "end": 7117540,
    "text": "テストのためだ。"
  },
  {
    "start": 7118240,
    "end": 7130104,
    "text": "新しいエラーをZyngaに投げて、以下のこの部分をコメントアウトしなければなりません。"
  },
  {
    "start": 7130272,
    "end": 7131664,
    "text": "よし、試してみよう。"
  },
  {
    "start": 7131712,
    "end": 7136064,
    "text": "保存して、サイドバーを投稿してみよう。"
  },
  {
    "start": 7136232,
    "end": 7137856,
    "text": "これがエラーページだ。"
  },
  {
    "start": 7137968,
    "end": 7143180,
    "text": "後でページに十分なバーとフッターを追加すると、エラーページにも表示される。"
  },
  {
    "start": 7143560,
    "end": 7149740,
    "text": "繰り返しになりますが、私たちのウェブサイトの通常の使用では、ユーザーがここに到達することさえ想定していません。"
  },
  {
    "start": 7150200,
    "end": 7156468,
    "text": "そして、実際にフィルタを適用するために、すべての求人を取得するページにいくつかのロジックを追加する必要があります。"
  },
  {
    "start": 7156584,
    "end": 7164036,
    "text": "さて、このコンポーネントをあまり大きくしたくないので、結果を別のコンポーネントに抽出しよう。"
  },
  {
    "start": 7164188,
    "end": 7170640,
    "text": "ジョブ・フィルターのサイドバーの下にある、growとspace y fourを含むこのdiv全体を切り取ろう。"
  },
  {
    "start": 7171220,
    "end": 7179920,
    "text": "これを切り取って、drop results tsxと呼ぶ別のコンポーネントに入れよう。"
  },
  {
    "start": 7181620,
    "end": 7192050,
    "text": "ここにデフォルト・ファンクションのジョブ結果をエクスポートし、このdivをここに貼り付ける。"
  },
  {
    "start": 7192510,
    "end": 7198370,
    "text": "ジョブ・リスト・アイテム・コンポーネントをインポートし、もちろんここにジョブが必要です。"
  },
  {
    "start": 7198870,
    "end": 7207918,
    "text": "私たちはこれを受け取り、ホームページからの多くの呼び出しを見つけ、それをこのコンポーネントに取り込み、適切にカプセル化します。"
  },
  {
    "start": 7208094,
    "end": 7210542,
    "text": "また、この関数を非同期にしなければならない。"
  },
  {
    "start": 7210606,
    "end": 7215570,
    "text": "繰り返すが、これはまだサーバー・コンポーネントであり、プリズマが必要なのだ。"
  },
  {
    "start": 7217430,
    "end": 7227570,
    "text": "これで保存し、結果をレンダリングすることができる。"
  },
  {
    "start": 7229070,
    "end": 7233102,
    "text": "フィルター値はURLから取得する。"
  },
  {
    "start": 7233206,
    "end": 7241210,
    "text": "これらはURL検索パラメータであり、次のjのアプリ・ルーターのサーバー・コンポーネントは、これらの検索パラメータをpropsとして受け取ることができる。"
  },
  {
    "start": 7241720,
    "end": 7244420,
    "text": "そのために、別のプロップス・インターフェースを作る。"
  },
  {
    "start": 7244920,
    "end": 7247500,
    "text": "ページの小道具とでも言おうか。"
  },
  {
    "start": 7247920,
    "end": 7250392,
    "text": "ここにあるのは検索パラメーターである。"
  },
  {
    "start": 7250536,
    "end": 7270430,
    "text": "というのも、これはnext j'sの特別な名前だからだ。next j'sはここに、URL検索パラメータに入れるものを何でも入れる。"
  },
  {
    "start": 7270890,
    "end": 7281266,
    "text": "タイプ、場所、スペルがサイドバーのフィールドの名前に合っていること、入力フィールド、そしてリモートであることを確認してください。"
  },
  {
    "start": 7281378,
    "end": 7285298,
    "text": "検索パラメータはすべて文字列なので、remoteはブール値ではない。"
  },
  {
    "start": 7285394,
    "end": 7288650,
    "text": "後でブーリアンに変換して渡すだけだ。"
  },
  {
    "start": 7288770,
    "end": 7292586,
    "text": "それでは、ホームページはこれらの検索パラメータを受け取ることができます。"
  },
  {
    "start": 7292658,
    "end": 7298620,
    "text": "中括弧でpropsを再構築し、typeをpage propsにリセットします。"
  },
  {
    "start": 7299000,
    "end": 7307540,
    "text": "ここにあるのは検索パラメータで、qタイプ、ロケーション、リモートという構成要素に分解することができる。"
  },
  {
    "start": 7308400,
    "end": 7317864,
    "text": "それから、結果をフィルタリングするために、これらの検索パラメーターを検索結果に渡すことができ、ページをリフレッシュするときにデフォルト値を設定するために、サイドバーにも渡すことができます。"
  },
  {
    "start": 7317952,
    "end": 7320368,
    "text": "リモートはブーリアンであるべきだろう？"
  },
  {
    "start": 7320424,
    "end": 7323814,
    "text": "検索パラメータは文字列なので、ここで変換しよう。"
  },
  {
    "start": 7323902,
    "end": 7332770,
    "text": "このために、上にフィルター値という新しいオブジェクトを作成し、タイプをジョブフィルター値に設定します。"
  },
  {
    "start": 7333430,
    "end": 7335078,
    "text": "これはどこから来ているのか？"
  },
  {
    "start": 7335214,
    "end": 7340290,
    "text": "これは、スキーマから生成される、先ほど作成したzot型である。"
  },
  {
    "start": 7340590,
    "end": 7342542,
    "text": "これでオートコンプリートが可能になった。"
  },
  {
    "start": 7342646,
    "end": 7349220,
    "text": "これは、検索パラメーターの型から直接渡されるQrを期待する。"
  },
  {
    "start": 7349720,
    "end": 7357020,
    "text": "検索パラメータは文字列だが、我々はブール値を期待している。"
  },
  {
    "start": 7357840,
    "end": 7362536,
    "text": "remoteがtrueに等しい場合、ここにtrueを渡す。"
  },
  {
    "start": 7362608,
    "end": 7364440,
    "text": "そうでなければfalseを渡す。"
  },
  {
    "start": 7364560,
    "end": 7371256,
    "text": "ジョブフィルターのサイドバーで、リモートtrueを文字列の形で検索パラメーターとして追加したことを思い出してください。"
  },
  {
    "start": 7371328,
    "end": 7374578,
    "text": "フォームのリモートチェックボックスがチェックされていた場合。"
  },
  {
    "start": 7374704,
    "end": 7380446,
    "text": "これをここで受け取り、ジョブ・フィルターの値を得るためにブール値に戻す。"
  },
  {
    "start": 7380558,
    "end": 7387690,
    "text": "次に、求人結果コンポーネントに戻り、フィルタの値をpropsとして受け入れるようにしましょう。"
  },
  {
    "start": 7388110,
    "end": 7401170,
    "text": "インターフェイスのjob results propsはjob filter values型のフィルター値を取ります。"
  },
  {
    "start": 7401990,
    "end": 7413370,
    "text": "さて、このジョブ結果プロップの中に、フィルター値を見つけることになる。"
  },
  {
    "start": 7414990,
    "end": 7423170,
    "text": "ここでは、qタイプ、ロケーション、そしてブール値になったリモートの3つである。"
  },
  {
    "start": 7423750,
    "end": 7433380,
    "text": "さて、検索クエリにはpostgresのフルテキスト検索機能を使いたい。"
  },
  {
    "start": 7433760,
    "end": 7436408,
    "text": "これについては、Prismaのドキュメントに記載されている。"
  },
  {
    "start": 7436504,
    "end": 7445584,
    "text": "この全文検索プレビュー機能はすでに追加されており、さらに最終クエリにはさまざまな演算子が利用できる。"
  },
  {
    "start": 7445712,
    "end": 7448784,
    "text": "複数の単語を含むテキスト。"
  },
  {
    "start": 7448872,
    "end": 7453504,
    "text": "このアマゾンのサインを検索文字列に使いたい。"
  },
  {
    "start": 7453592,
    "end": 7455776,
    "text": "検索語が一致しなければならない。"
  },
  {
    "start": 7455888,
    "end": 7460336,
    "text": "コンポーネントの最初にあるコードに戻ろう。"
  },
  {
    "start": 7460408,
    "end": 7465180,
    "text": "find manyクエリーを実行する前に、検索文字列を作成する。"
  },
  {
    "start": 7465600,
    "end": 7468376,
    "text": "検索文字列を作成する。"
  },
  {
    "start": 7468568,
    "end": 7475060,
    "text": "これは単なる文字列だが、複数の単語を含むことができる。"
  },
  {
    "start": 7475400,
    "end": 7477464,
    "text": "我々はそれをドットスプリットと呼んでいる。"
  },
  {
    "start": 7477592,
    "end": 7481726,
    "text": "これは、未定義の可能性があるため、セーフ・コール演算子を自動的に追加する。"
  },
  {
    "start": 7481888,
    "end": 7488514,
    "text": "空白で分割したいのは、この空白をエンバセンド演算子に置き換えるためだ。"
  },
  {
    "start": 7488602,
    "end": 7490746,
    "text": "別々の単語を検索する。"
  },
  {
    "start": 7490898,
    "end": 7492362,
    "text": "私たちはそれを分けた。"
  },
  {
    "start": 7492506,
    "end": 7497470,
    "text": "次に、空白をフィルタリングするためにフィルタを呼び出す。"
  },
  {
    "start": 7498330,
    "end": 7501550,
    "text": "フィルターには白い矢印を書く。"
  },
  {
    "start": 7502050,
    "end": 7505550,
    "text": "単語の長さがゼロより大きい。"
  },
  {
    "start": 7505970,
    "end": 7518154,
    "text": "例えば、単語1を入力し、その後にたくさんのスペースを入力し、単語2を入力する場合、検索文字列の配列にスペースごとに別のエントリーを作成したくありませんよね？"
  },
  {
    "start": 7518282,
    "end": 7521150,
    "text": "そのため、空欄を埋めたのだ。"
  },
  {
    "start": 7522970,
    "end": 7529234,
    "text": "splitは文字列を配列に変えるからだ。"
  },
  {
    "start": 7529402,
    "end": 7539450,
    "text": "そして、ここではアマゾンの記号スペースを文字列スペースとして書く。"
  },
  {
    "start": 7539830,
    "end": 7548702,
    "text": "検索ストライプのフロントエンドに、例えば2つの単語を入力するとしよう。"
  },
  {
    "start": 7548846,
    "end": 7557158,
    "text": "というのも、この単語の組み合わせがデータベースにある可能性は非常に低いからだ。"
  },
  {
    "start": 7557254,
    "end": 7567010,
    "text": "その代わりに、ストライプとフロント・エンドを別々の単語として検索し、別々の位置に配置できるように、このembersと演算子を追加したい。"
  },
  {
    "start": 7567090,
    "end": 7573402,
    "text": "このように、まず空白のスペースで分割し、アンパサンド演算子を加えるのだ。"
  },
  {
    "start": 7573586,
    "end": 7577122,
    "text": "とすると、検索フィルターの使い方は次のようになる。"
  },
  {
    "start": 7577186,
    "end": 7584130,
    "text": "このwhereフィルターで、タイトルなどの異なるフィールドを検索することができる。"
  },
  {
    "start": 7584210,
    "end": 7589010,
    "text": "ここで検索を行い、検索文字列を渡すことができる。"
  },
  {
    "start": 7589090,
    "end": 7593802,
    "text": "タイトルだけでなく、他のフィールドも検索したい。"
  },
  {
    "start": 7593906,
    "end": 7596666,
    "text": "この表現が大きくなりすぎないように。"
  },
  {
    "start": 7596818,
    "end": 7602282,
    "text": "このフィルターを別の変数に格納したい。"
  },
  {
    "start": 7602466,
    "end": 7608898,
    "text": "const検索フィルターを作成し、自動補完ができるようにタイプを指定しよう。"
  },
  {
    "start": 7608994,
    "end": 7624400,
    "text": "これらのwhere句には、スキーマから自動的に生成されるwhere入力タイプで、プリズマ・クライアントからインポートしなければならない大文字ピアドットジョブのプリズマを使用することができます。"
  },
  {
    "start": 7625100,
    "end": 7630316,
    "text": "これを使うと、このwhereブロックにあるのと同じオートコンプリートが得られる。"
  },
  {
    "start": 7630508,
    "end": 7636040,
    "text": "でも、検索フィルターに渡したいのは、検索文字列に値がある場合だけだよね？"
  },
  {
    "start": 7636340,
    "end": 7639600,
    "text": "検索文字列のクエスチョンマークを書く。"
  },
  {
    "start": 7640460,
    "end": 7645156,
    "text": "そして、コロンの下にあるフィルターでオブジェクトをここに入れる。"
  },
  {
    "start": 7645308,
    "end": 7651532,
    "text": "検索文字列が空の場合、空のオブジェクトを渡す。"
  },
  {
    "start": 7651596,
    "end": 7655748,
    "text": "検索文字列が定義されている場合は、ここにフィルターを入れる。"
  },
  {
    "start": 7655924,
    "end": 7659156,
    "text": "さて、先ほど検索構文をお見せした。"
  },
  {
    "start": 7659228,
    "end": 7662764,
    "text": "ここでこれを実行したいが、異なるフィールドがたくさんある。"
  },
  {
    "start": 7662852,
    "end": 7669296,
    "text": "このフィルターに配列を渡す必要がある。"
  },
  {
    "start": 7669448,
    "end": 7678192,
    "text": "この方法だと、タイトルと会社名、その他いくつかの場所で検索したいが、これらの場所のうちの1つだけが一致すれば十分だ、と言うことになる。"
  },
  {
    "start": 7678296,
    "end": 7679840,
    "text": "すべてが一致する必要はない。"
  },
  {
    "start": 7679920,
    "end": 7689620,
    "text": "そして中括弧で囲み、オートコンプリートを呼び出す。"
  },
  {
    "start": 7690040,
    "end": 7698988,
    "text": "そして、先ほどお見せしたのと同じ構文、タイトル、コロン、中かっこ、検索コロン、検索文字列を使う。"
  },
  {
    "start": 7699124,
    "end": 7701200,
    "text": "構文はこのようになっている。"
  },
  {
    "start": 7703100,
    "end": 7706932,
    "text": "をこれに加えるか、配列にいくつか加える。"
  },
  {
    "start": 7707116,
    "end": 7714876,
    "text": "この行を4回複製して、合計5行にし、他のフィールドもすべて複製する。"
  },
  {
    "start": 7714908,
    "end": 7718000,
    "text": "また、検索文字列を入れて検索したい。"
  },
  {
    "start": 7719150,
    "end": 7729930,
    "text": "会社名とタイプで検索したいので、例えばフルスタックの仕事を入力し、テーブルのこのタイプフィールドで調査することができます。"
  },
  {
    "start": 7730550,
    "end": 7738370,
    "text": "また、ロケーションの種類とロケーションで検索したいが、別の動作が必要な場合はカスタマイズできる。"
  },
  {
    "start": 7738670,
    "end": 7750480,
    "text": "さて、これが検索フィルターだが、まだサイトバウンドに他のフィルターを適用したい。"
  },
  {
    "start": 7751820,
    "end": 7756476,
    "text": "下に別の変数を作り、whereと呼ぶ。"
  },
  {
    "start": 7756668,
    "end": 7763868,
    "text": "ここでもプリズマジョブタイプで、入力するとここと同じオーダーが完了する。"
  },
  {
    "start": 7764044,
    "end": 7771650,
    "text": "ここに直接コードを入れると読みにくくなるので、整理するために別の変数に入れた。"
  },
  {
    "start": 7771740,
    "end": 7774990,
    "text": "その代わりにこの変数に入れた。"
  },
  {
    "start": 7775030,
    "end": 7781030,
    "text": "今回は、サイドバーのすべてのフィルターを適用する必要があるため、end演算子を使用する。"
  },
  {
    "start": 7781150,
    "end": 7788050,
    "text": "例えば、私たちが検索を入力し、特定の場所を選択した場合、結果を表示するためには、それらすべてが一致しなければならない。"
  },
  {
    "start": 7788550,
    "end": 7798198,
    "text": "このエンドフィルターでは、まず検索フィルターを通過させ、次にタイプフィルターを通過させる。"
  },
  {
    "start": 7798374,
    "end": 7807414,
    "text": "ここでも、定義されている場合のみ、この構文で定義する。"
  },
  {
    "start": 7807582,
    "end": 7809782,
    "text": "つまり、型が定義されている場合である。"
  },
  {
    "start": 7809926,
    "end": 7817502,
    "text": "このタイプフィルターをここに入れ、代わりにこの空のオブジェクトを入れる。"
  },
  {
    "start": 7817566,
    "end": 7829130,
    "text": "次に、同じようにロケーションをコンマで区切って、リモート・リモートとする。"
  },
  {
    "start": 7830950,
    "end": 7840894,
    "text": "remoteがtrueの場合、文字列値として保存されるため、文字列であるremoteというロケーションタイプを持つエントリーのみを返したい。"
  },
  {
    "start": 7841022,
    "end": 7844846,
    "text": "もしremoteがfalseなら、フィルタを追加したくない。"
  },
  {
    "start": 7844998,
    "end": 7852710,
    "text": "リモートチェックボックスがチェックされていない場合は、リモートとオンサイトのジョブを返します。"
  },
  {
    "start": 7853250,
    "end": 7858202,
    "text": "では、承認された仕事だけを表示したいのですね？"
  },
  {
    "start": 7858306,
    "end": 7860970,
    "text": "これはすでにここにあったフィルターだ。"
  },
  {
    "start": 7861130,
    "end": 7865266,
    "text": "このフィルターを、より複雑なこの新しいフィルターに置き換える。"
  },
  {
    "start": 7865378,
    "end": 7872530,
    "text": "この変数はこのキーと同じ名前なので、ここでも短い構文を使い、whereと書くだけでいい。"
  },
  {
    "start": 7872690,
    "end": 7879318,
    "text": "このフィルターが、検索フィルターやその他のフィルターとともに、多くのクルマに適用される。"
  },
  {
    "start": 7879514,
    "end": 7880878,
    "text": "試してみよう。"
  },
  {
    "start": 7880974,
    "end": 7886370,
    "text": "これを保存して、これらのフィルターを仕事の結果に渡そう。"
  },
  {
    "start": 7886750,
    "end": 7899410,
    "text": "ここでは、URL検索パラメータから読み取ったジョブフィルタの値をジョブ結果に渡し、それらをプリズマクエリに適用しています。"
  },
  {
    "start": 7901150,
    "end": 7907090,
    "text": "というのも、このクエリーアクティブフローがあり、タイトルで検索されたからだ。"
  },
  {
    "start": 7907670,
    "end": 7910690,
    "text": "例えばストライプを検索してみよう。"
  },
  {
    "start": 7911470,
    "end": 7913102,
    "text": "これがストライプの仕事だ。"
  },
  {
    "start": 7913206,
    "end": 7915170,
    "text": "都市を検索することもできる。"
  },
  {
    "start": 7915910,
    "end": 7918690,
    "text": "クパチーノもそうだったよね？"
  },
  {
    "start": 7919190,
    "end": 7924930,
    "text": "あるいは、ここにある他のフィルターを使って同じ結果を表示することもできる。"
  },
  {
    "start": 7925430,
    "end": 7931950,
    "text": "あるいは、もしフィルターがあれば、パートタイムの仕事を検索してみよう。"
  },
  {
    "start": 7932030,
    "end": 7932650,
    "text": "いいね。"
  },
  {
    "start": 7933020,
    "end": 7939044,
    "text": "後で、このページにページネーションとメタデータ（適切なページタイトルなど）を追加する。"
  },
  {
    "start": 7939132,
    "end": 7947068,
    "text": "今のところ、空のビューも追加しておきたい。結果がないフィルターを追加すると、このビューは空っぽになってしまうからだ。"
  },
  {
    "start": 7947244,
    "end": 7954060,
    "text": "ジョブ結果コンポーネントに入り、マップの下のリターン・ブロックに移動しよう。"
  },
  {
    "start": 7954100,
    "end": 7965086,
    "text": "carlはdivの中に別の式を追加し、もしjobs lengthenが0に等しければ、空のビューでレンダリングすることをチェックする。"
  },
  {
    "start": 7965158,
    "end": 7974090,
    "text": "これは単なる段落で、いくつかのクラス名、テキスト・センター、そしてこれをセンター揃えにするm autoがある。"
  },
  {
    "start": 7975070,
    "end": 7978210,
    "text": "この場合、求人は見つかりませんでしたと表示されます。"
  },
  {
    "start": 7979030,
    "end": 7986270,
    "text": "検索フィルターを調整してみてください。"
  },
  {
    "start": 7986350,
    "end": 7987250,
    "text": "あれだ。"
  },
  {
    "start": 7988270,
    "end": 7990638,
    "text": "うん、かなりクールだと思うよ。"
  },
  {
    "start": 7990814,
    "end": 7997502,
    "text": "このURLのフィルター値をサイドバーのデフォルト値として使いたい。"
  },
  {
    "start": 7997606,
    "end": 8005414,
    "text": "ページを更新したり、このURLを直接開いたりしたときに、それらが適用され、デフォルトの状態にリセットされないようにするためだ。"
  },
  {
    "start": 8005542,
    "end": 8012142,
    "text": "ジョブフィルターのサイドバーにもう一度入ってみよう。"
  },
  {
    "start": 8012246,
    "end": 8022270,
    "text": "ここで、サーバー・アクション・インターフェースの下に、ジョブ・フィルター・ザイト・バー・プロップスがあり、ここでもジョブ・フィルターの値を渡します。"
  },
  {
    "start": 8022730,
    "end": 8031642,
    "text": "というのも、この名前は入力フィールドのデフォルト値だからだ。"
  },
  {
    "start": 8031786,
    "end": 8034830,
    "text": "私たちはいつも通り、ここで彼らをデストラクチャーする。"
  },
  {
    "start": 8035330,
    "end": 8046526,
    "text": "job filter、zbar props、そしてここにデフォルト値があり、それらを異なるフォームフィールドに適用します。"
  },
  {
    "start": 8046678,
    "end": 8061302,
    "text": "タイトル入力フィールドから始めましょう。デフォルト値はデフォルト値に等しく、もし値がなければフィールドは空のままです。"
  },
  {
    "start": 8061406,
    "end": 8065292,
    "text": "値があれば、この検索フィールドに入力される。"
  },
  {
    "start": 8065446,
    "end": 8070620,
    "text": "次に、この空の文字列をデフォルト値として持つ以下のセレクトを実行する。"
  },
  {
    "start": 8070960,
    "end": 8085060,
    "text": "URLの中に値がない場合でも、すべてのタイプのデフォルト値として空の文字列を使用できるように、これをデフォルト値タイプ縦棒2本の空の文字列に変更します。"
  },
  {
    "start": 8086160,
    "end": 8107826,
    "text": "次のセレクト・フィールドも同じように、デフォルト値の場所か空の文字列、そしてこの下のチェックボックスはデフォルト・チェック済みと呼ばれるもので、これもデフォルト値のリモートに設定する。"
  },
  {
    "start": 8107898,
    "end": 8111550,
    "text": "もしremoteがtrueなら、このチェックボックスをチェックさせたい。"
  },
  {
    "start": 8112330,
    "end": 8118670,
    "text": "もちろん、このプロップをページのジョブフィルターサイドバーに渡す必要もある。"
  },
  {
    "start": 8119200,
    "end": 8132640,
    "text": "ページをリフレッシュした後、検索クエリとタイプフィルターがサイドバーに適用されるので、機能していることがわかります。"
  },
  {
    "start": 8132800,
    "end": 8141504,
    "text": "というのも、彼らがページを開いたとき、すでにフィルターが適用されているはずだからだ。"
  },
  {
    "start": 8141592,
    "end": 8143500,
    "text": "より良いユーザーエクスペリエンスだ。"
  },
  {
    "start": 8144040,
    "end": 8147786,
    "text": "それでは、送信ボタンにロード状態を追加しましょう。"
  },
  {
    "start": 8147888,
    "end": 8157614,
    "text": "サーバー・コンポーネントではステートやエフェクトを持たないので、ローディング・ステートをここに追加することはできない。"
  },
  {
    "start": 8157662,
    "end": 8158886,
    "text": "どうすればいいのか？"
  },
  {
    "start": 8158998,
    "end": 8163886,
    "text": "そこで、この新しいリアクトフックの使用形態が登場する。"
  },
  {
    "start": 8163998,
    "end": 8169590,
    "text": "これはかなり新しいフックで、次のJS14で安定版になったばかりだ。"
  },
  {
    "start": 8169750,
    "end": 8178178,
    "text": "これにより、親コンポーネントのフォーム・ステータスを受け取る、クライアント上でレンダリング可能な小さな子コンポーネントを作成することができる。"
  },
  {
    "start": 8178274,
    "end": 8185882,
    "text": "ページをサーバー・コンポーネントとして保持し、このボタンだけをクライアント・コンポーネントにすることができる。"
  },
  {
    "start": 8185986,
    "end": 8192750,
    "text": "また、useformstateというよく似た名前の新しいフックもあり、これもこのチュートリアルの後半で使うことになる。"
  },
  {
    "start": 8193530,
    "end": 8201270,
    "text": "基本的には、このボタンを別のコンポーネントに取り出して、フォームの状態に到達できるようにします。"
  },
  {
    "start": 8201570,
    "end": 8205450,
    "text": "componentsフォルダに新しいコンポーネントを作成します。"
  },
  {
    "start": 8205610,
    "end": 8208794,
    "text": "フォーム送信ボタンと呼ぶことにする。"
  },
  {
    "start": 8208842,
    "end": 8221186,
    "text": "UIコンポーネント・フォルダではなく、コンポーネント・フォルダに入れたのは、通常のボタンより少しレベルが高いからだ。"
  },
  {
    "start": 8221258,
    "end": 8223310,
    "text": "これは個人の好みによる。"
  },
  {
    "start": 8224050,
    "end": 8232912,
    "text": "これはクライアント・コンポーネントでなければならない。なぜなら、ここでは使用フォーム・ステータス・フックを呼び出したいからであり、クライアント・コンポーネントの内部でしかフックを呼び出すことができないからである。"
  },
  {
    "start": 8233026,
    "end": 8235772,
    "text": "サーバーコンポーネントの内部でフックを使用することはできません。"
  },
  {
    "start": 8235876,
    "end": 8238636,
    "text": "これが、州が使えない理由でもある。"
  },
  {
    "start": 8238788,
    "end": 8253868,
    "text": "さて、以下に同じ名前のフォーム送信ボタンでエクスポート・デフォルト関数を書きますが、このボタンは通常のボタンと同じ引数を取ります。"
  },
  {
    "start": 8254044,
    "end": 8279259,
    "text": "propsを記述し、再びreact type react dot button HTML attributes angle brackets HTML button elementを使用します。こうすることで、このフォーム送信ボタンにも、タイプやクラス名など、通常のボタンに渡すのと同じpropsをすべて渡すことができます。"
  },
  {
    "start": 8280319,
    "end": 8280839,
    "text": "いいかい？"
  },
  {
    "start": 8280879,
    "end": 8294499,
    "text": "これはreact Domからのインポートで、引数をとりません。"
  },
  {
    "start": 8294879,
    "end": 8297247,
    "text": "ここには4つの異なる値がある。"
  },
  {
    "start": 8297343,
    "end": 8302935,
    "text": "アクション・データ・メソッドのペンディング 通常、気になるのはペンディング値だけである。"
  },
  {
    "start": 8303087,
    "end": 8305711,
    "text": "これは親フォームの読み込み状態です。"
  },
  {
    "start": 8305855,
    "end": 8310885,
    "text": "ジョブフィルタを送信すると、ザイトバーフォームのpendingがtrueになります。"
  },
  {
    "start": 8311007,
    "end": 8314030,
    "text": "ローディングのインジケーターを表示するために、このインジケーターを使うことができる。"
  },
  {
    "start": 8315090,
    "end": 8321590,
    "text": "ここでは、UIフォルダにある大文字のbボタンをレンダリングする。"
  },
  {
    "start": 8322130,
    "end": 8326950,
    "text": "ここではまず、渡した小道具をすべて適用されるように広げる。"
  },
  {
    "start": 8327690,
    "end": 8332618,
    "text": "これは常に送信ボタンになるため、送信タイプをハードコードしています。"
  },
  {
    "start": 8332714,
    "end": 8335498,
    "text": "これが、フォーム送信ボタンと呼ばれる所以である。"
  },
  {
    "start": 8335674,
    "end": 8338326,
    "text": "そうすれば、ローディングの状態をここで使うことができる。"
  },
  {
    "start": 8338458,
    "end": 8343930,
    "text": "例えば、pendingがtrueの場合、このボタンを無効にすることができる。"
  },
  {
    "start": 8344390,
    "end": 8349350,
    "text": "ボタンには、この無効化されたプロップも渡すことができる。"
  },
  {
    "start": 8349430,
    "end": 8349790,
    "text": "そうだろう？"
  },
  {
    "start": 8349870,
    "end": 8352822,
    "text": "この点も考慮したい。"
  },
  {
    "start": 8352926,
    "end": 8365092,
    "text": "もしprops disabledがtrueなら、あるいはpendingがtrueなら、このボタンを無効にしたい。"
  },
  {
    "start": 8365246,
    "end": 8372624,
    "text": "ここでは、子ボタンをレンダリングしたい。子ボタンは、ボタンに入れたテキストだけでなく、その横にローディング・インジケータも表示する。"
  },
  {
    "start": 8372792,
    "end": 8375140,
    "text": "スタイル用のスパンを作成する。"
  },
  {
    "start": 8377040,
    "end": 8390020,
    "text": "これらの2つの要素を水平に揃えるために、spanにいくつかのクラスを追加する。"
  },
  {
    "start": 8391770,
    "end": 8399322,
    "text": "ここには、ボタンの開始タグと終了タグの間に置く小道具の子（props children）を置く。"
  },
  {
    "start": 8399386,
    "end": 8401882,
    "text": "この文章とその上。"
  },
  {
    "start": 8401946,
    "end": 8408106,
    "text": "の左側には、ローディング・インジケータを表示したい。"
  },
  {
    "start": 8408258,
    "end": 8412218,
    "text": "エマーソンの記号を保留した式で書く。"
  },
  {
    "start": 8412314,
    "end": 8427780,
    "text": "ローディングスピナーには、lucid reactのローダーツールアイコンを使うことができます。"
  },
  {
    "start": 8428320,
    "end": 8437352,
    "text": "今回は、refを転送する必要はありません。なぜなら、この送信値を持つフォームの内部でのみこのメソッドを使用し、refを必要としないからです。"
  },
  {
    "start": 8437536,
    "end": 8438800,
    "text": "オーケー、素晴らしい。"
  },
  {
    "start": 8438960,
    "end": 8447632,
    "text": "これでこのボタンは完成したので、ここにあるボタンをフォーム送信ボタンに置き換える。"
  },
  {
    "start": 8447816,
    "end": 8454460,
    "text": "型はすでにハードコードされているので、ここから削除できるが、クラス名は残す。"
  },
  {
    "start": 8455120,
    "end": 8456976,
    "text": "よし、これでうまくいくはずだ。"
  },
  {
    "start": 8457048,
    "end": 8461208,
    "text": "要約すると、ジョブフィルターサイドバーはまだサーバーコンポーネントです。"
  },
  {
    "start": 8461344,
    "end": 8464496,
    "text": "フォーム送信ボタンだけがクライアント・コンポーネントです。"
  },
  {
    "start": 8464608,
    "end": 8467160,
    "text": "これが、ローディングの状態をここに置くことができる理由だ。"
  },
  {
    "start": 8467240,
    "end": 8475028,
    "text": "このuseform statusフックは、ジョブフィルターのサイドバーサーバーコンポーネントであるparenthoodのフォームステータスを読み取ります。"
  },
  {
    "start": 8475124,
    "end": 8480292,
    "text": "このフォームが送信されている間、pendingはtrueになり、ローディング・インジケータが表示されます。"
  },
  {
    "start": 8480476,
    "end": 8482120,
    "text": "試してみよう。"
  },
  {
    "start": 8483100,
    "end": 8484636,
    "text": "ああ、そこだ。"
  },
  {
    "start": 8484828,
    "end": 8495280,
    "text": "このボタンをクリックすると、ローディング・インジケータが表示される。"
  },
  {
    "start": 8496740,
    "end": 8500446,
    "text": "これでユーザーは、何かが処理されていることがわかるからだ。"
  },
  {
    "start": 8500588,
    "end": 8507270,
    "text": "プログレッシブ・エンハンスメントは、このページ全体がJavaScriptなしで動作するため、まだ機能しています。"
  },
  {
    "start": 8507570,
    "end": 8515610,
    "text": "JavaScriptを無効にすると、ローディングインジケータは表示されなくなりますが、フィルタはまだ動作します。"
  },
  {
    "start": 8515690,
    "end": 8526594,
    "text": "これこそが、新しいuseformのステータスとreactのフォーム・ステート・フックの背後にあるマジックなのだ。"
  },
  {
    "start": 8526722,
    "end": 8532914,
    "text": "それでは次に、ページに十分なバーとフォルダを追加し、ページタイトルのようなメタデータを追加しましょう。"
  },
  {
    "start": 8533002,
    "end": 8536930,
    "text": "次に、新しいジョブを送信するための別のフォームを追加します。"
  },
  {
    "start": 8537010,
    "end": 8547350,
    "text": "というのも、次回はサーバーアクションをサーバーコンポーネントからではなく、クライアントコンポーネントからカリングし、reactフックフォームを一緒に使うからだ。"
  },
  {
    "start": 8547650,
    "end": 8552684,
    "text": "では、新しい求人フォームに移動するのに十分なバーを作りましょう。"
  },
  {
    "start": 8552842,
    "end": 8557740,
    "text": "これをcomponentsフォルダに入れ、navbarと呼ぶことにする。"
  },
  {
    "start": 8565240,
    "end": 8568144,
    "text": "ここではレイアウトを返すだけだ。"
  },
  {
    "start": 8568312,
    "end": 8574180,
    "text": "繰り返しになるが、このようなバーに使うHTMLタグはheaderタグである。"
  },
  {
    "start": 8576880,
    "end": 8589838,
    "text": "ここには、ナビゲーション・リンクがあることを示す十分な数を入れ、スナッフ・バーには、左側にロゴとウェブサイトの名前を入れたい。"
  },
  {
    "start": 8589934,
    "end": 8593094,
    "text": "右側にボタンのようなリンクが欲しい。"
  },
  {
    "start": 8593182,
    "end": 8595382,
    "text": "そこで、新しい雇用形態に行き着く。"
  },
  {
    "start": 8595526,
    "end": 8603366,
    "text": "とりあえず、エレメント1とエレメント2をここに入れて、レイアウトを整えよう。"
  },
  {
    "start": 8603518,
    "end": 8608296,
    "text": "とりあえずナバーは保存して、ルートレイアウトのTSXファイルに入りましょう。"
  },
  {
    "start": 8608478,
    "end": 8613716,
    "text": "ナバーは、bodyタグ内の子供たちのすぐ上に配置した。"
  },
  {
    "start": 8613828,
    "end": 8615400,
    "text": "ここが居場所だ。"
  },
  {
    "start": 8616580,
    "end": 8618540,
    "text": "子供たちはページそのものである。"
  },
  {
    "start": 8618700,
    "end": 8621924,
    "text": "このナビバーは各ページで共有されるべきである。"
  },
  {
    "start": 8622052,
    "end": 8625320,
    "text": "そこにエレメント1とエレメント2がある。"
  },
  {
    "start": 8626060,
    "end": 8627956,
    "text": "さて、ナバー・ファイルに戻ろう。"
  },
  {
    "start": 8628068,
    "end": 8629332,
    "text": "このスタイルにしよう。"
  },
  {
    "start": 8629396,
    "end": 8639970,
    "text": "まず、ヘッダー・タグに移動し、クラス名shadow SMを追加して、この下の部分に非常に微妙な影を付けます。"
  },
  {
    "start": 8640790,
    "end": 8644206,
    "text": "それから、ナバー・コンテンツに固定幅を与えたい。"
  },
  {
    "start": 8644278,
    "end": 8647174,
    "text": "そうでない場合は、利用可能な幅いっぱいに表示されます。"
  },
  {
    "start": 8647302,
    "end": 8652510,
    "text": "影が横幅いっぱいに広がるようにするためだ。"
  },
  {
    "start": 8652550,
    "end": 8658970,
    "text": "コンテンツの幅は、コンテンツと同じように最大5xlに制限されるべきである。"
  },
  {
    "start": 8659470,
    "end": 8663782,
    "text": "また、画面の中央に配置するために、mを押すオートキーを追加しなければならない。"
  },
  {
    "start": 8663926,
    "end": 8668862,
    "text": "これで、シャドウは幅いっぱいに表示されるが、コンテンツの幅は制限される。"
  },
  {
    "start": 8669046,
    "end": 8670806,
    "text": "パディングも追加しよう。"
  },
  {
    "start": 8670958,
    "end": 8676370,
    "text": "水平方向のパディングを3、垂直方向のパディングを5にしたい。"
  },
  {
    "start": 8677150,
    "end": 8683170,
    "text": "そして、これをフレックスボックスにして、中央揃えと両端揃えを追加します。"
  },
  {
    "start": 8683870,
    "end": 8689196,
    "text": "Justify betweenは、一方の要素を左側に、もう一方の要素を右側に押し出す。"
  },
  {
    "start": 8689348,
    "end": 8696620,
    "text": "これは、実際にタグに包まれている場合のみ有効だと思う。"
  },
  {
    "start": 8696660,
    "end": 8698124,
    "text": "ああ、今はうまくいっている。"
  },
  {
    "start": 8698212,
    "end": 8702996,
    "text": "もちろん、このプレースホルダーを実際のコンテンツに置き換えたい。"
  },
  {
    "start": 8703148,
    "end": 8707444,
    "text": "また、左側にはウェブサイトのロゴと名前を入れる。"
  },
  {
    "start": 8707612,
    "end": 8713452,
    "text": "なぜなら、クリックするとホームページに戻りたいからだ。"
  },
  {
    "start": 8713596,
    "end": 8717480,
    "text": "ホームページをスラッシュするためにhrefを追加する。"
  },
  {
    "start": 8717900,
    "end": 8723800,
    "text": "そして、このリンクをフレックス・アイテム・センターとギャップ3でスタイルする。"
  },
  {
    "start": 8726540,
    "end": 8729060,
    "text": "ここではまず、次の画像を置く。"
  },
  {
    "start": 8729180,
    "end": 8730748,
    "text": "これも輸入品である。"
  },
  {
    "start": 8730804,
    "end": 8737120,
    "text": "次に、スタートコードの一部であるロゴを表示したい。"
  },
  {
    "start": 8737620,
    "end": 8747100,
    "text": "このインポートロゴを資産logopngからインポートする必要がある。"
  },
  {
    "start": 8749320,
    "end": 8751500,
    "text": "これでここに表示できる。"
  },
  {
    "start": 8755840,
    "end": 8756496,
    "text": "あれだ。"
  },
  {
    "start": 8756528,
    "end": 8757980,
    "text": "ちょっと大きいかな。"
  },
  {
    "start": 8758640,
    "end": 8761140,
    "text": "幅と高さを制約することができる。"
  },
  {
    "start": 8764000,
    "end": 8772126,
    "text": "また、アクセシビリティのために、この画像フローを説明するaltテキストを与える必要があります。"
  },
  {
    "start": 8772318,
    "end": 8779230,
    "text": "というのも、flow jobsはウェブサイトの名前であり、その横にウェブサイト名のテキストを表示したいからです。"
  },
  {
    "start": 8779270,
    "end": 8782486,
    "text": "このリンクはフレックスボックスである。"
  },
  {
    "start": 8782678,
    "end": 8787390,
    "text": "私たちは、フロー・ジョブであるテキストにスパンを置いた。"
  },
  {
    "start": 8787430,
    "end": 8788894,
    "text": "もう一度言う。"
  },
  {
    "start": 8788942,
    "end": 8790810,
    "text": "このテキストにスタイルを付けたい。"
  },
  {
    "start": 8791310,
    "end": 8794170,
    "text": "エクセルのテキストで大きくするんだ。"
  },
  {
    "start": 8795330,
    "end": 8797178,
    "text": "私たちはまた、それを大胆にする。"
  },
  {
    "start": 8797354,
    "end": 8804550,
    "text": "ここでもトラッキング・タイトを使って文字間のスペースを小さくしている。"
  },
  {
    "start": 8806210,
    "end": 8807546,
    "text": "ああ、これが僕らのロゴだ。"
  },
  {
    "start": 8807578,
    "end": 8816630,
    "text": "これをクリックすると、フロントページに戻り、URL検索パラメータが削除される。"
  },
  {
    "start": 8817090,
    "end": 8817482,
    "text": "オーケー。"
  },
  {
    "start": 8817506,
    "end": 8823572,
    "text": "反対側のnavdhの中に、ボタンのようなリンクを貼りたい。"
  },
  {
    "start": 8823756,
    "end": 8828428,
    "text": "ボタンを使いますが、これは子プロップとして追加します。"
  },
  {
    "start": 8828604,
    "end": 8830828,
    "text": "これはシェッドCNの特徴である。"
  },
  {
    "start": 8830924,
    "end": 8835740,
    "text": "コンポーネント内部でどのように実装されているかは、またしても私たちがコードを所有しているので、おわかりいただけるだろう。"
  },
  {
    "start": 8835820,
    "end": 8847694,
    "text": "この機能はとてもクールで、こうすることでこの要素をボタンのように見せることができるが、実際にレンダリングされる要素、つまり実際のHTML要素は、ここに子要素として置いたものになる。"
  },
  {
    "start": 8847782,
    "end": 8855490,
    "text": "ページにリンクがある場合、アクセシビリティの観点から、HTMLボタンではなくリンクであるべきだからです。"
  },
  {
    "start": 8855910,
    "end": 8857046,
    "text": "試してみよう。"
  },
  {
    "start": 8857078,
    "end": 8864798,
    "text": "スラッシュ・ジョブズ・スラッシュ・ニューを指すリンクをここに貼ろう。"
  },
  {
    "start": 8864974,
    "end": 8869974,
    "text": "このページはまだ作っていませんが、この方法で少しずつ作っていきます。"
  },
  {
    "start": 8870062,
    "end": 8871250,
    "text": "仕事を掲載する"
  },
  {
    "start": 8871590,
    "end": 8873720,
    "text": "ここにボタンがある。"
  },
  {
    "start": 8874180,
    "end": 8882340,
    "text": "クロームの開発ツールでこれを検査すると、これはaタグであり、通常のリンクであり、ボタンではないことがわかる。"
  },
  {
    "start": 8882460,
    "end": 8884772,
    "text": "これもアクセシビリティのためだ。"
  },
  {
    "start": 8884916,
    "end": 8888052,
    "text": "常に適切なHTMLタグを使用する必要があります。"
  },
  {
    "start": 8888156,
    "end": 8889212,
    "text": "オーケー、とてもいいね。"
  },
  {
    "start": 8889276,
    "end": 8892820,
    "text": "また、フッターがあったほうがプロフェッショナルに見えるからだ。"
  },
  {
    "start": 8892900,
    "end": 8896812,
    "text": "フッターはそれほど重要ではないが、見栄えはいい。"
  },
  {
    "start": 8896916,
    "end": 8900040,
    "text": "これもcomponentsフォルダに入れておこう。"
  },
  {
    "start": 8900450,
    "end": 8901830,
    "text": "フッター TSX"
  },
  {
    "start": 8903090,
    "end": 8909482,
    "text": "今回は、単なる定型的なコードなので、コピー・ペーストする。"
  },
  {
    "start": 8909506,
    "end": 8911106,
    "text": "特別なものは何もない。"
  },
  {
    "start": 8911138,
    "end": 8915082,
    "text": "このビデオでこれを作るのはちょっと時間の無駄だ。"
  },
  {
    "start": 8915226,
    "end": 8918378,
    "text": "もし望むなら、ビデオを一時停止して、これをタイプすることができる。"
  },
  {
    "start": 8918474,
    "end": 8926944,
    "text": "GitHubのリポジトリからコピーすることもできるし、フッターは美観のためにあるだけなので、完全に省くこともできる。"
  },
  {
    "start": 8927042,
    "end": 8929420,
    "text": "ここにあるリンクは、実際にはどこにもつながっていない。"
  },
  {
    "start": 8929500,
    "end": 8931564,
    "text": "その方が見栄えがいいからだ。"
  },
  {
    "start": 8931692,
    "end": 8934240,
    "text": "お望みなら、これを加えてもいい。"
  },
  {
    "start": 8935140,
    "end": 8940760,
    "text": "これを保存して、ルート・レイアウトの子供たちの下に置きます。"
  },
  {
    "start": 8942980,
    "end": 8945320,
    "text": "これがフッターだ。"
  },
  {
    "start": 8945940,
    "end": 8946680,
    "text": "いいね。"
  },
  {
    "start": 8947540,
    "end": 8956750,
    "text": "次に、ページのメタデータを修正したいと思います。ページタイトルには、ルート・レイアウトで定義されている次のアプリを作成と表示されています。"
  },
  {
    "start": 8957490,
    "end": 8967442,
    "text": "各ページにページタイトルを表示し、その後に縦棒とフロー・ジョブを表示します。"
  },
  {
    "start": 8967546,
    "end": 8969210,
    "text": "各ページにこれが欲しい。"
  },
  {
    "start": 8969330,
    "end": 8975482,
    "text": "そのために、タイトル・テンプレートを使うことができる。こうすれば、すべてのページでこのパターンを繰り返す必要がなくなるからだ。"
  },
  {
    "start": 8975626,
    "end": 8986802,
    "text": "文字列の代わりにオブジェクトをtitleに渡し、ここにパーセンテージを割り当てたプレースホルダーを追加するテンプレートを定義することができる。"
  },
  {
    "start": 8986906,
    "end": 8992666,
    "text": "これには、子ページのタイトルと、縦棒フロー・ジョブが含まれます。"
  },
  {
    "start": 8992818,
    "end": 9001066,
    "text": "プライバシーポリシーのページがある場合、例えばプライバシーポリシーというタイトルがあれば、これはプライバシーポリシーということになる。"
  },
  {
    "start": 9001218,
    "end": 9010282,
    "text": "バーティカル・バー・フローの仕事だが、独自のタイトルを持たないすべてのページのために、ここでデフォルト値を定義する必要もある。"
  },
  {
    "start": 9010426,
    "end": 9013546,
    "text": "この場合、フロー・ジョブと表示される。"
  },
  {
    "start": 9013698,
    "end": 9020098,
    "text": "フロント・ページでは、デフォルトの値が表示される。"
  },
  {
    "start": 9020274,
    "end": 9027322,
    "text": "あなたの理想の開発者職を見つけるために、説明も変えてみましょう。"
  },
  {
    "start": 9027506,
    "end": 9030034,
    "text": "もちろん、ここに何を入れるかはあなた次第だ。"
  },
  {
    "start": 9030162,
    "end": 9038206,
    "text": "この記述はブラウザには表示されませんが、例えばソーシャルメディアに当社ウェブサイトへのリンクを貼り付けた場合には表示されます。"
  },
  {
    "start": 9038378,
    "end": 9042134,
    "text": "また、トップページにもっと具体的なタイトルが欲しい。"
  },
  {
    "start": 9042222,
    "end": 9047970,
    "text": "ページのTsXファイルに、ここでやったようなハードコードされたタイトルはいらない。"
  },
  {
    "start": 9048270,
    "end": 9052102,
    "text": "その代わりに、適用したフィルターによって変化するようにしたい。"
  },
  {
    "start": 9052206,
    "end": 9057246,
    "text": "このhはページのメタ・タイトルと同じにしたい。"
  },
  {
    "start": 9057358,
    "end": 9063730,
    "text": "このタイトルを生成する再利用可能な関数を作ってみよう。"
  },
  {
    "start": 9064290,
    "end": 9084830,
    "text": "それを同じファイルに入れ、get titleと呼び、クエリ、タイプロケーション、リモートブール値を含むジョブフィルタの値を渡します。"
  },
  {
    "start": 9085130,
    "end": 9092364,
    "text": "次に、クエリがあるかどうかをチェックするconst title prefixを作成する。"
  },
  {
    "start": 9092532,
    "end": 9094660,
    "text": "それから三項演算子を使う。"
  },
  {
    "start": 9094820,
    "end": 9099480,
    "text": "クエリーがあれば、タイトルの接頭辞は次のようになる。"
  },
  {
    "start": 9099980,
    "end": 9104724,
    "text": "まず、文字列の最初にクエリー、次にジョブズという単語。"
  },
  {
    "start": 9104892,
    "end": 9109196,
    "text": "フローを検索すると、フロー・ジョブと表示される。"
  },
  {
    "start": 9109388,
    "end": 9112404,
    "text": "次に、三項演算子のコロンを加える。"
  },
  {
    "start": 9112532,
    "end": 9126662,
    "text": "もしクエリがなければ、タイプフィルターがあるかどうかをチェックします。その場合、似たようなタイトルで、最初にタイプがあり、その後に開発者求人があるものを用意します。"
  },
  {
    "start": 9126806,
    "end": 9133414,
    "text": "パートタイムの場合は、「パートタイム開発者求人」と表示されます。"
  },
  {
    "start": 9133582,
    "end": 9138366,
    "text": "さて、この入れ子になった三項演算子とその可読性については、さまざまな意見がある。"
  },
  {
    "start": 9138518,
    "end": 9143074,
    "text": "すべての枝が1本の線であるなら、問題ないと思う。"
  },
  {
    "start": 9143222,
    "end": 9149790,
    "text": "もしタイプフィルターがなければ、リモートフィルターがあるかどうかをチェックする。"
  },
  {
    "start": 9151490,
    "end": 9155230,
    "text": "そうすると、リモート開発者の求人と表示されます。"
  },
  {
    "start": 9155690,
    "end": 9160950,
    "text": "最後のひとつは、開発者の仕事だ。"
  },
  {
    "start": 9163130,
    "end": 9164290,
    "text": "それが接頭辞だ。"
  },
  {
    "start": 9164370,
    "end": 9166234,
    "text": "この弦のどちらかだろう。"
  },
  {
    "start": 9166322,
    "end": 9171980,
    "text": "をタイトルの後半部分と呼ぶことにする。"
  },
  {
    "start": 9172480,
    "end": 9175180,
    "text": "場所があれば表示したい。"
  },
  {
    "start": 9175520,
    "end": 9185300,
    "text": "特定の場所でフィルターをかけた場合は、その場所にスペースと表示させたい。"
  },
  {
    "start": 9186200,
    "end": 9188688,
    "text": "そうでない場合は空文字列にしたい。"
  },
  {
    "start": 9188784,
    "end": 9190620,
    "text": "それなら、何も追加しない。"
  },
  {
    "start": 9191840,
    "end": 9194900,
    "text": "最後に、タイトルの全文を返す。"
  },
  {
    "start": 9195530,
    "end": 9197770,
    "text": "ここでもバックティック文字列にする。"
  },
  {
    "start": 9197810,
    "end": 9200162,
    "text": "ここに2つの変数を入れる。"
  },
  {
    "start": 9200266,
    "end": 9210874,
    "text": "最初はタイトルの接頭辞で、その直後にスペースを入れずにタイトルの接尾辞とする。"
  },
  {
    "start": 9211042,
    "end": 9214430,
    "text": "これはサフィックスではなく、サフィックスと呼ぶべきだ。"
  },
  {
    "start": 9215650,
    "end": 9220550,
    "text": "では、この下の開発者求人のところで試してみよう。"
  },
  {
    "start": 9220980,
    "end": 9228520,
    "text": "では、get titleを呼び出す式を作り、フィルター値を渡してみよう。"
  },
  {
    "start": 9228980,
    "end": 9230476,
    "text": "それだけだ。"
  },
  {
    "start": 9230508,
    "end": 9231840,
    "text": "開発者の仕事"
  },
  {
    "start": 9232740,
    "end": 9234516,
    "text": "リモート開発者の求人"
  },
  {
    "start": 9234628,
    "end": 9237612,
    "text": "フロー・フローの仕事を検索してみよう。"
  },
  {
    "start": 9237716,
    "end": 9246870,
    "text": "クエリがなく、タイプがある場合は、契約開発者の求人と表示し、勤務地を末尾に追加します。"
  },
  {
    "start": 9247020,
    "end": 9247962,
    "text": "クールだろ？"
  },
  {
    "start": 9248026,
    "end": 9251190,
    "text": "メタ・タイトルにもこれを使いたい。"
  },
  {
    "start": 9252050,
    "end": 9261746,
    "text": "ダイナミック・メタデータの定義方法をご存じない方のために、次回のJ's初心者チュートリアルと次回のJ's SEOチュートリアルで取り上げます。"
  },
  {
    "start": 9261898,
    "end": 9267282,
    "text": "静的なメタデータがある場合は、このメタデータ・オブジェクトをエクスポートすればいい。"
  },
  {
    "start": 9267466,
    "end": 9273950,
    "text": "というのも、メタデータはページIに渡す検索パラメータに依存するからだ。"
  },
  {
    "start": 9275320,
    "end": 9283656,
    "text": "メタデータを動的に生成するには、generate metadataという関数をエクスポートする必要がある。"
  },
  {
    "start": 9283728,
    "end": 9288136,
    "text": "名前を正確にしなければ、次のjsはそれを認識しない。"
  },
  {
    "start": 9288248,
    "end": 9292660,
    "text": "この関数は、我々のページと同じ小道具を受け取ることができる。"
  },
  {
    "start": 9293240,
    "end": 9300790,
    "text": "ここではページプロップスを設定し、その中に検索パラメーターを設定します。"
  },
  {
    "start": 9306690,
    "end": 9311910,
    "text": "関数の戻り値の型は、このメタデータ・オブジェクトと同じ型です。"
  },
  {
    "start": 9313290,
    "end": 9314338,
    "text": "追加しよう。"
  },
  {
    "start": 9314394,
    "end": 9319030,
    "text": "次からオートコンプリートのメタデータを取得します。"
  },
  {
    "start": 9319850,
    "end": 9323906,
    "text": "では、ここでそのようなメタデータ・オブジェクトを返さなければならない。"
  },
  {
    "start": 9324098,
    "end": 9328468,
    "text": "ここでオートコンプリートを使えば、タイトルを設定できる。"
  },
  {
    "start": 9328644,
    "end": 9332400,
    "text": "そのために、もう一度タイトルを取得する関数を呼びたい。"
  },
  {
    "start": 9333540,
    "end": 9335796,
    "text": "今回は検索パラメーターを用意した。"
  },
  {
    "start": 9335828,
    "end": 9337364,
    "text": "我々はフィルター値を持っていない。"
  },
  {
    "start": 9337412,
    "end": 9343364,
    "text": "リモートは検索パラメータに文字列を指定するが、フィルター値にはブール値を指定するという違いがあることを覚えておいてほしい。"
  },
  {
    "start": 9343492,
    "end": 9345724,
    "text": "ここでも同じことをしなければならない。"
  },
  {
    "start": 9345892,
    "end": 9349800,
    "text": "検索パラメータからフィルター値を作成しなければならない。"
  },
  {
    "start": 9350220,
    "end": 9351600,
    "text": "試してみよう。"
  },
  {
    "start": 9352040,
    "end": 9355528,
    "text": "現在、オタワの契約開発者の求人が表示されています。"
  },
  {
    "start": 9355664,
    "end": 9360216,
    "text": "唯一の問題は、このプレースホルダーがフロントページでは機能しないことだ。"
  },
  {
    "start": 9360288,
    "end": 9362408,
    "text": "子ページでのみ機能する。"
  },
  {
    "start": 9362584,
    "end": 9364820,
    "text": "手動で追加する必要がある。"
  },
  {
    "start": 9365160,
    "end": 9369272,
    "text": "このタイトルカードの取得全体をバックティック文字列にまとめよう。"
  },
  {
    "start": 9369416,
    "end": 9381344,
    "text": "このような式にして、文字列の最後にまた同じ縦棒の流れを追加して、ページタイトルの一部にしよう。"
  },
  {
    "start": 9381432,
    "end": 9384032,
    "text": "繰り返しになるが、これはフロントページにのみ必要なことである。"
  },
  {
    "start": 9384136,
    "end": 9388400,
    "text": "このルート・レイアウトのすべての子ページに、この設定が自動的に適用されます。"
  },
  {
    "start": 9388520,
    "end": 9394368,
    "text": "このメタ・タイトルはSEOにも有効で、実際にGoogleでこのように表示されることがあるからだ。"
  },
  {
    "start": 9394464,
    "end": 9402336,
    "text": "オタワでの契約開発者の仕事 このような仕事を探している人がいたら、もうひとつ小さなことを今すぐ直したい。"
  },
  {
    "start": 9402448,
    "end": 9405000,
    "text": "これで検索バーにフィルターが適用された。"
  },
  {
    "start": 9405040,
    "end": 9413608,
    "text": "現在、フロントページをクリックすると、これらのフィルターはURLから削除されますが、サイドバーからは削除されません。"
  },
  {
    "start": 9413704,
    "end": 9417832,
    "text": "これは、reactがこのコンポーネントの状態を自動的に維持するためである。"
  },
  {
    "start": 9417896,
    "end": 9421120,
    "text": "これには簡単な対策がある。"
  },
  {
    "start": 9421160,
    "end": 9424480,
    "text": "ジョブフィルターのツァイトバー・コンポーネントに再び入る。"
  },
  {
    "start": 9424640,
    "end": 9430352,
    "text": "フォームまでスクロールし、reactにこのフォームを再レンダリングさせたい。"
  },
  {
    "start": 9430456,
    "end": 9442964,
    "text": "フィルターが変更され、これらのdom要素に保存されている既存の状態がすべて捨て去られた場合、デフォルト値が変更された時点でフィルターが変更されたことがわかりますよね？"
  },
  {
    "start": 9443092,
    "end": 9450240,
    "text": "なぜなら、検索パラメータが削除されると、デフォルト値が変更され、新しいフォームがレンダリングされるからです。"
  },
  {
    "start": 9450660,
    "end": 9461004,
    "text": "これを行うには、コンポーネントにキーを追加し、このキーが変更されると、reactはこのコンポーネントの古い状態を捨て、新しいコンポーネントをインスタンス化する。"
  },
  {
    "start": 9461092,
    "end": 9472202,
    "text": "最も簡単な方法は、JSON stringifyを使ってフィルターを文字列に変換することだ。"
  },
  {
    "start": 9472306,
    "end": 9478194,
    "text": "フィルターがひとつでも変わると、この文字列全体が変わってしまい、ゼロからレンダリングすることになる。"
  },
  {
    "start": 9478362,
    "end": 9479490,
    "text": "試してみよう。"
  },
  {
    "start": 9479530,
    "end": 9482110,
    "text": "過去のフィルターをかけてみよう。"
  },
  {
    "start": 9482450,
    "end": 9489850,
    "text": "ページを更新すると、フィルターはまだそこにあるが、フロントページのリンクをクリックすると、フィルターは消えてしまう。"
  },
  {
    "start": 9489970,
    "end": 9490790,
    "text": "驚いたよ。"
  },
  {
    "start": 9491140,
    "end": 9501804,
    "text": "これはZeitbarフィルターよりも複雑なフォームで、リアクトフックフォームを使用し、クライアントサイドでサーバーアクションを呼び出します。"
  },
  {
    "start": 9501892,
    "end": 9504640,
    "text": "これは学ぶべき本当に重要なテーマだ。"
  },
  {
    "start": 9505060,
    "end": 9513052,
    "text": "では、新しいジョブを作成するための新しいバリデーションスキーマを作成することから始めましょう。"
  },
  {
    "start": 9513116,
    "end": 9516092,
    "text": "ジョブ・フィルター・スキーマの上に置くつもりだ。"
  },
  {
    "start": 9516276,
    "end": 9521780,
    "text": "create job schemaと呼ばれる別の定数をエクスポートします。"
  },
  {
    "start": 9522240,
    "end": 9529376,
    "text": "素晴らしいのは、フロントエンドとバックエンドでスキーマを再利用し、両方の場所で検証できることだ。"
  },
  {
    "start": 9529568,
    "end": 9536820,
    "text": "繰り返しになるが、これはジョブ・フィルター・スキーマと同じzドット・オブジェクトだが、もう少し複雑なものになる。"
  },
  {
    "start": 9537160,
    "end": 9540056,
    "text": "どんな仕事にも肩書きが必要だろう？"
  },
  {
    "start": 9540128,
    "end": 9545952,
    "text": "バックエンドに再送信するフィールドと同じものを、データベースに保存する。"
  },
  {
    "start": 9546056,
    "end": 9551392,
    "text": "アイデアとタイムスタンプ以外は、基本的にすべてここにある。"
  },
  {
    "start": 9551536,
    "end": 9555632,
    "text": "タイトルはzドットの文字列だが、今回はオプションではない。"
  },
  {
    "start": 9555696,
    "end": 9557704,
    "text": "タイトルは必須ですよね？"
  },
  {
    "start": 9557832,
    "end": 9560300,
    "text": "ドットオプショナルは付けない。"
  },
  {
    "start": 9560760,
    "end": 9563260,
    "text": "その代わりにminを追加する。"
  },
  {
    "start": 9563760,
    "end": 9570488,
    "text": "minを設定しなければ、文字列が未定義でなく空文字列でもカウントされる。"
  },
  {
    "start": 9570624,
    "end": 9574162,
    "text": "このようにして、この文字列が実際にコンテンツを含んでいることを確認する。"
  },
  {
    "start": 9574336,
    "end": 9578510,
    "text": "をminの第2引数に指定することで、エラーメッセージをカスタマイズすることもできる。"
  },
  {
    "start": 9578590,
    "end": 9583694,
    "text": "デフォルトのエラーメッセージよりも読みやすいので、requiredに設定しよう。"
  },
  {
    "start": 9583862,
    "end": 9587942,
    "text": "では、この必要な文字列パターンを何度か再利用してみよう。"
  },
  {
    "start": 9588006,
    "end": 9593262,
    "text": "これを切り取って別の変数に入れ、再利用できるようにしよう。"
  },
  {
    "start": 9593446,
    "end": 9600374,
    "text": "上記では、const必須文字列を作成し、それをこのソートスキーマに割り当てている。"
  },
  {
    "start": 9600422,
    "end": 9602890,
    "text": "これは基本的に小さなスキーマである。"
  },
  {
    "start": 9603440,
    "end": 9607544,
    "text": "今、私たちはストリングスを叫んでいる。"
  },
  {
    "start": 9607672,
    "end": 9613080,
    "text": "また、巨大なタイトルを渡せないように、文字列に最大サイズを与えたい。"
  },
  {
    "start": 9613200,
    "end": 9628100,
    "text": "これはスキーマの一部であり、我々が期待するデータなので、これも必須文字列である。"
  },
  {
    "start": 9629690,
    "end": 9631378,
    "text": "このままでいい。"
  },
  {
    "start": 9631474,
    "end": 9639906,
    "text": "また、任意の値を渡すことができないように、ジョブ・タイプに実際に含まれているかどうかをチェックすることもできる。"
  },
  {
    "start": 9639938,
    "end": 9645914,
    "text": "このソートを列挙型にすることもできるが、列挙型のエラーメッセージをカスタマイズするのは非常に難しい。"
  },
  {
    "start": 9645962,
    "end": 9648270,
    "text": "代わりに普通の文字列を使う。"
  },
  {
    "start": 9648650,
    "end": 9654480,
    "text": "このrefine関数を追加すれば、過去の値を取得することができる。"
  },
  {
    "start": 9654650,
    "end": 9657476,
    "text": "という文字列を渡す。"
  },
  {
    "start": 9657628,
    "end": 9660876,
    "text": "洗練された内部では、自分たちのルールを定義することができる。"
  },
  {
    "start": 9660988,
    "end": 9663068,
    "text": "これはブール値を返すだけでよい。"
  },
  {
    "start": 9663164,
    "end": 9666636,
    "text": "これが通ればtrueを返し、通らなければfalseを返す。"
  },
  {
    "start": 9666748,
    "end": 9678320,
    "text": "ここで、ジョブタイプファイルの配列であるジョブタイプにこの値が含まれているかどうかをチェックすることができます。"
  },
  {
    "start": 9678860,
    "end": 9683500,
    "text": "もしそれが含まれていなければ、ここでもこのセクションは失敗に終わるだろう。"
  },
  {
    "start": 9683620,
    "end": 9687852,
    "text": "エラーメッセージはカスタマイズできる。"
  },
  {
    "start": 9687916,
    "end": 9690200,
    "text": "これが2つ目の定義だ。"
  },
  {
    "start": 9691420,
    "end": 9695560,
    "text": "無効な職種と書いてほしい。"
  },
  {
    "start": 9696740,
    "end": 9699240,
    "text": "よし、これがタイプ・フィールドだ。"
  },
  {
    "start": 9701180,
    "end": 9709160,
    "text": "会社名はその次で、これも最大長100の必須文字列である。"
  },
  {
    "start": 9710840,
    "end": 9714896,
    "text": "次に、会社のロゴがあるが、ここではオートコンプリートは使えない。"
  },
  {
    "start": 9714928,
    "end": 9727144,
    "text": "というのも、このキーがデータベース・スキーマのすべてのキーと一致していること、そしてフォームのキーとも一致していることに注意しなければならないからだ。"
  },
  {
    "start": 9727312,
    "end": 9730160,
    "text": "会社のロゴはファイルですよね？"
  },
  {
    "start": 9730240,
    "end": 9738770,
    "text": "というのも、バックエンドに渡すのはファイルそのものであり、それをブロブ・ストレージに保存して文字列を返すからだ。"
  },
  {
    "start": 9738890,
    "end": 9740950,
    "text": "ここではファイルを想定している。"
  },
  {
    "start": 9741250,
    "end": 9744430,
    "text": "これを整理するために別の変数に入れよう。"
  },
  {
    "start": 9744970,
    "end": 9747666,
    "text": "このファイルスキーマは少し大きいからだ。"
  },
  {
    "start": 9747858,
    "end": 9756990,
    "text": "我々は、zドットカスタムであるコンスタント会社のロゴスキーマを作成します。"
  },
  {
    "start": 9757970,
    "end": 9761470,
    "text": "このようにして、独自のバリデーション・タイプを作成することができる。"
  },
  {
    "start": 9762340,
    "end": 9768900,
    "text": "角括弧の間にこのように縦棒を入れて、fileまたはundefinedに設定する。"
  },
  {
    "start": 9769060,
    "end": 9772108,
    "text": "これはスキーマで期待される型である。"
  },
  {
    "start": 9772244,
    "end": 9773300,
    "text": "なぜ未定義なのか？"
  },
  {
    "start": 9773380,
    "end": 9776244,
    "text": "会社のロゴを提供する必要はないからね。"
  },
  {
    "start": 9776292,
    "end": 9777772,
    "text": "空にしておくこともできる。"
  },
  {
    "start": 9777916,
    "end": 9786642,
    "text": "さて、このカスタムは関数なので、これを呼び出し、チェックしたいルールを適用する必要がある。"
  },
  {
    "start": 9786836,
    "end": 9789134,
    "text": "ここにはセミコロンはない。"
  },
  {
    "start": 9789262,
    "end": 9795406,
    "text": "その代わりに、ドット・リファインを再度追加する。"
  },
  {
    "start": 9795558,
    "end": 9803230,
    "text": "ここで、このファイルが渡され、これに関数を渡して、ファイルが有効であればtrueを返さなければならない。"
  },
  {
    "start": 9803390,
    "end": 9807730,
    "text": "さて、冒頭でnode js 20をインストールする必要があると述べた。"
  },
  {
    "start": 9808150,
    "end": 9814798,
    "text": "これが、以下のnode jのバージョンでこのファイルタイプがバックエンドで利用できない理由である。"
  },
  {
    "start": 9814894,
    "end": 9815378,
    "text": "20."
  },
  {
    "start": 9815494,
    "end": 9818874,
    "text": "このため、node jsのバージョンを更新することが重要です。"
  },
  {
    "start": 9819002,
    "end": 9821466,
    "text": "よし、リファインをしよう。"
  },
  {
    "start": 9821658,
    "end": 9826762,
    "text": "ここでは、fileがfalseの場合にこれを渡したい。"
  },
  {
    "start": 9826906,
    "end": 9832802,
    "text": "ファイルを渡さない場合は、ファイルはオプションであることを忘れずに。"
  },
  {
    "start": 9832946,
    "end": 9844510,
    "text": "ファイルを提供する場合、ファイルがこのファイル・タイプのインスタンスであることをチェックし、会社ロゴ・フィールドに他のデータ・タイプを渡さないようにします。"
  },
  {
    "start": 9845020,
    "end": 9854996,
    "text": "また、このファイルが実際に画像ファイルであり、例えばPDFのような他のものではないことを確認することもできる。"
  },
  {
    "start": 9855068,
    "end": 9861160,
    "text": "ドットで始まり、ここではイメージ・スラッシュを文字列として渡す。"
  },
  {
    "start": 9861660,
    "end": 9871766,
    "text": "なぜなら、この2つの条件はフロントエンドで一緒にチェックされなければならないからだ。"
  },
  {
    "start": 9871798,
    "end": 9878310,
    "text": "後で画像ファイルだけを選択できるようにしますが、フロントエンドの検証だけでは不十分です。"
  },
  {
    "start": 9878430,
    "end": 9886558,
    "text": "任意の値でバックエンドを呼び出し、画像でもファイルでもない別の種類のファイルを送ることもできる。"
  },
  {
    "start": 9886614,
    "end": 9891910,
    "text": "このルールをバックエンドに適用し、実際に期待するデータをチェックしなければならない。"
  },
  {
    "start": 9892030,
    "end": 9899502,
    "text": "なぜこのようなロジックを書かなければならないかというと、Sotには画像ファイルをチェックする型がないからだ。"
  },
  {
    "start": 9899566,
    "end": 9903660,
    "text": "これが、このrefine関数で独自のロジックを書く理由である。"
  },
  {
    "start": 9903780,
    "end": 9913360,
    "text": "また、2番目の引数は、表示したいエラーメッセージである。"
  },
  {
    "start": 9913660,
    "end": 9918812,
    "text": "画像ファイルでないものをアップロードしようとすると、このようなエラーメッセージが表示される。"
  },
  {
    "start": 9918956,
    "end": 9921692,
    "text": "ファイルサイズもチェックしたい。"
  },
  {
    "start": 9921876,
    "end": 9929644,
    "text": "下にもうひとつrefineを追加し、ここでもファイル・オブジェクトを通過させ、それを検証する。"
  },
  {
    "start": 9929772,
    "end": 9937320,
    "text": "ここでもfileがfalseの場合はtrueを返したい。なぜなら、ファイルをアップロードしないことを許可しなければならないからだ。"
  },
  {
    "start": 9937620,
    "end": 9949852,
    "text": "ファイルが定義されている場合、ファイルサイズが1024×1024×2以下であることをチェックしたい。"
  },
  {
    "start": 9949996,
    "end": 9951700,
    "text": "これはバイト数である。"
  },
  {
    "start": 9951780,
    "end": 9958196,
    "text": "つまり、1キロバイト×1000で1メガバイト×2となり、2メガバイトとなる。"
  },
  {
    "start": 9958268,
    "end": 9961812,
    "text": "最大ファイルサイズは2メガバイトです。"
  },
  {
    "start": 9961996,
    "end": 9969000,
    "text": "第2引数のファイルは2MB以下でなければならないので、再度エラーメッセージを定義する。"
  },
  {
    "start": 9969940,
    "end": 9976960,
    "text": "これが会社のロゴ・スキーマで、これを会社のロゴ・フィールドに渡すことができる。"
  },
  {
    "start": 9979620,
    "end": 9985650,
    "text": "次は説明文だが、これは必須ではないことを覚えておいてほしい。"
  },
  {
    "start": 9986030,
    "end": 9988930,
    "text": "通常のZドット文字列を使ってみよう。"
  },
  {
    "start": 9990390,
    "end": 9993570,
    "text": "最大長を設定したい。"
  },
  {
    "start": 9994230,
    "end": 9998690,
    "text": "大きくなりすぎないように5000文字に設定しよう。"
  },
  {
    "start": 9998990,
    "end": 10004090,
    "text": "の場合は、説明を渡す必要がないため、ドットオプショナルを追加する。"
  },
  {
    "start": 10006270,
    "end": 10016624,
    "text": "次のフィールドは給与で、これも数字ではなく文字列になる。なぜなら、入力タイプが数字であっても、フォームフィールドには常に文字列が含まれるからだ。"
  },
  {
    "start": 10016712,
    "end": 10021784,
    "text": "実際に送信されるのは文字列だが、この文字列が数字のように見えるかどうかをチェックすることができる。"
  },
  {
    "start": 10021912,
    "end": 10028664,
    "text": "このために、もうひとつ小さな文字列スキーマを作りたい。"
  },
  {
    "start": 10028792,
    "end": 10032664,
    "text": "これをconst numeric required stringと呼ぶことにしよう。"
  },
  {
    "start": 10032792,
    "end": 10042180,
    "text": "数値と必須文字列の両方なので、必須文字列スキーマを使用し、正規表現を追加する。"
  },
  {
    "start": 10042340,
    "end": 10043960,
    "text": "やった、正規表現だ。"
  },
  {
    "start": 10044380,
    "end": 10048036,
    "text": "ここに次のような正規表現を追加する。"
  },
  {
    "start": 10048148,
    "end": 10049716,
    "text": "ビデオを一時停止して、それを入力する。"
  },
  {
    "start": 10049828,
    "end": 10054360,
    "text": "これにより、文字列が数字に見えるようになり、数字だけが含まれるようになる。"
  },
  {
    "start": 10054700,
    "end": 10059640,
    "text": "エラーメッセージは数字でなければならない。"
  },
  {
    "start": 10061030,
    "end": 10064250,
    "text": "さて、これが数値必須文字列だ。"
  },
  {
    "start": 10064670,
    "end": 10066970,
    "text": "給料はこの下で使おう。"
  },
  {
    "start": 10068790,
    "end": 10076862,
    "text": "また、この数値が長すぎないことを確認しよう。そうしないと、数値に渡すときに整数の限界を超えてしまうからだ。"
  },
  {
    "start": 10076966,
    "end": 10081254,
    "text": "ここでは最大9桁までとする。"
  },
  {
    "start": 10081382,
    "end": 10089410,
    "text": "この方法ならint型に収まるし、どんな給料にも対応できる大きさだ。"
  },
  {
    "start": 10091870,
    "end": 10093630,
    "text": "次にエラーメッセージを定義する。"
  },
  {
    "start": 10093670,
    "end": 10109930,
    "text": "繰り返しますが、数字は9桁より長くすることはできません。ユーザーは、フォームにこのエラーメッセージが表示されるか、バックエンドに直接データを送信した場合は、バックエンドからのレスポンスとして表示されます。"
  },
  {
    "start": 10110310,
    "end": 10116786,
    "text": "さて、まだ足りないのは応募メールと応募URLだ。"
  },
  {
    "start": 10116898,
    "end": 10123018,
    "text": "というのも、どちらもオプションであるにもかかわらず、どちらか一方は必須であるべきだからだ。"
  },
  {
    "start": 10123154,
    "end": 10124610,
    "text": "それを確認しなければならない。"
  },
  {
    "start": 10124730,
    "end": 10127122,
    "text": "そのためにまた別のスキーマを作る。"
  },
  {
    "start": 10127226,
    "end": 10142940,
    "text": "組織用の会社ロゴスキーマの下に、const アプリケーションスキーマを作成します。このスキーマは、アプリケーションの電子メールを含む独自の z ドットオブジェクトです。"
  },
  {
    "start": 10143020,
    "end": 10153800,
    "text": "この場合も、スペルが正しいことを確認してください。これは、最大100文字のzドット文字列です。"
  },
  {
    "start": 10155420,
    "end": 10159116,
    "text": "そこで、zotが提供するドット・メール機能を使うことができる。"
  },
  {
    "start": 10159188,
    "end": 10163938,
    "text": "これは、実際に追加記号とドメイン末尾を持つ電子メールのように見えることを確認します。"
  },
  {
    "start": 10164044,
    "end": 10166150,
    "text": "これはオプションであるべきだろう？"
  },
  {
    "start": 10166270,
    "end": 10169246,
    "text": "ドットオプショナルも追加する。"
  },
  {
    "start": 10169438,
    "end": 10178622,
    "text": "というのも、これはオプションであるにもかかわらず、空文字列はドット・メール・フィルターを通らないからだ。"
  },
  {
    "start": 10178726,
    "end": 10184758,
    "text": "この問題を解決するためには、append.orgを呼び出す必要がある。"
  },
  {
    "start": 10184814,
    "end": 10189708,
    "text": "あるいは、zドットリテラルを渡し、これに空文字列を渡す。"
  },
  {
    "start": 10189894,
    "end": 10197760,
    "text": "これは、私たちのフィールドをオプショナルにするために必要なことで、何かを渡した場合でもこのEメールパターンをチェックする。"
  },
  {
    "start": 10197920,
    "end": 10199648,
    "text": "こんな感じだ。"
  },
  {
    "start": 10199824,
    "end": 10210420,
    "text": "この行をアプリケーションスキーマ内のアプリケーションURL用に複製してみましょう。"
  },
  {
    "start": 10211120,
    "end": 10216206,
    "text": "でも、この2つのうち1つが実際に提出されているかどうかもチェックしたいよね？"
  },
  {
    "start": 10216328,
    "end": 10230162,
    "text": "アプリケーションスキーマにもう1つのrefineを追加することでこれを行うことができます。"
  },
  {
    "start": 10230266,
    "end": 10232802,
    "text": "この洗練されたものを何に使おうとも。"
  },
  {
    "start": 10232906,
    "end": 10241850,
    "text": "ここでは、data dot application emailが定義されているか、data dot application URLが定義されているかを確認する。"
  },
  {
    "start": 10242010,
    "end": 10254350,
    "text": "これらのいずれかに値があればtrueを返し、refineの第2引数として今回は文字列を渡さずにオブジェクトを渡す。"
  },
  {
    "start": 10254690,
    "end": 10261790,
    "text": "ここでは、電子メールまたはURLが必要であることを示すフィールドの形でメッセージを設定することができます。"
  },
  {
    "start": 10262370,
    "end": 10270110,
    "text": "今回オブジェクトを渡すのは、このエラーメッセージをどのフィールドに追加したいかを指定できるからだ。"
  },
  {
    "start": 10271720,
    "end": 10274128,
    "text": "これを配列の形で渡す。"
  },
  {
    "start": 10274264,
    "end": 10276832,
    "text": "ここでは、申し込みの電子メールを渡す。"
  },
  {
    "start": 10277016,
    "end": 10282536,
    "text": "このエラーメッセージをトリガーすると、アプリケーションのEメールフィールドに表示されます。"
  },
  {
    "start": 10282648,
    "end": 10287540,
    "text": "というエラーメッセージが表示されます。"
  },
  {
    "start": 10287840,
    "end": 10297456,
    "text": "さて、個別のアプリケーションスキーマができたので、これをcreate jobスキーマにマージして、すべてのロジックをここに直接入れるようにします。"
  },
  {
    "start": 10297648,
    "end": 10307488,
    "text": "そのためにスキーマの最後に行き、セミコロンを取り除く。"
  },
  {
    "start": 10307624,
    "end": 10310520,
    "text": "これはこのスキーマにマージされる。"
  },
  {
    "start": 10310680,
    "end": 10321560,
    "text": "その代わりにできたことは、これら2つのフィールドを直接create jobスキーマに入れ、refineをcreate jobスキーマの最後に追加することです。"
  },
  {
    "start": 10321640,
    "end": 10323762,
    "text": "行動に違いがある。"
  },
  {
    "start": 10323896,
    "end": 10331030,
    "text": "refineをスキーマの最後に追加すると、refineは上記の値がすべて渡された場合にのみトリガーされる。"
  },
  {
    "start": 10331110,
    "end": 10340262,
    "text": "というのも、このエラーメッセージが表示されるのは、すでに他のものすべてに有効な値を入力した後だからだ。"
  },
  {
    "start": 10340326,
    "end": 10344054,
    "text": "フォームに表示されたエラーメッセージをすべて同時に表示したい。"
  },
  {
    "start": 10344142,
    "end": 10350410,
    "text": "これを別のスキーマに入れ、このエンド・オペレーターとマージすることで実現できる。"
  },
  {
    "start": 10350710,
    "end": 10362530,
    "text": "現在欠けているのはロケーション・タイプとロケーションだけで、これらは独自の絞り込みロジックが必要なので、別のスキーマにしました。"
  },
  {
    "start": 10363790,
    "end": 10374956,
    "text": "ロケーションスキーマcオブジェクトの最初のフィールドはロケーションタイプで、これは必須文字列である。"
  },
  {
    "start": 10375118,
    "end": 10382980,
    "text": "ここでも有効なロケーションタイプであることを確認し、ロケーションタイプ配列の一部となるようにする。"
  },
  {
    "start": 10383400,
    "end": 10389740,
    "text": "またドット・リファインで値をチェックする。"
  },
  {
    "start": 10390440,
    "end": 10392940,
    "text": "その場所のタイプをチェックする。"
  },
  {
    "start": 10393520,
    "end": 10409486,
    "text": "ドットにはこの値が含まれており、もし含まれていなければ、文字列エラーinvalid location typeを表示したい。"
  },
  {
    "start": 10409518,
    "end": 10413846,
    "text": "オプションの文字列である場所のフィールドを追加する。"
  },
  {
    "start": 10413958,
    "end": 10420330,
    "text": "z ドット 文字列 最大 100 任意。"
  },
  {
    "start": 10423430,
    "end": 10439638,
    "text": "そして、このロケーションスキーマにもrefineを追加する。ここでも、ロケーションタイプとロケーションを含むデータを取得する。"
  },
  {
    "start": 10439734,
    "end": 10442846,
    "text": "リモートに設定されている場合は、場所は必要ありません。"
  },
  {
    "start": 10442958,
    "end": 10446974,
    "text": "繰り返しになるが、この種のカスタム検証ロジックは自分たちで書かなければならない。"
  },
  {
    "start": 10447102,
    "end": 10457380,
    "text": "なぜなら、フロントエンドのバーティカルバーにエラーを表示したくないからです。"
  },
  {
    "start": 10457800,
    "end": 10464856,
    "text": "また、ロケーションタイプが大文字のrでremoteに設定されている場合もパスする必要がある。"
  },
  {
    "start": 10465008,
    "end": 10471820,
    "text": "リモートに設定されていれば、何を選択してもパスする。"
  },
  {
    "start": 10473800,
    "end": 10480140,
    "text": "remoteに設定されておらず、値が定義されている場合、場所はtruefydeでなければならない。"
  },
  {
    "start": 10480210,
    "end": 10488580,
    "text": "というのも、\"on site \"か \"hybrid \"のどちらかが選択されていることを意味するからだ。"
  },
  {
    "start": 10489320,
    "end": 10506340,
    "text": "ここでも、エラーに対して、現場でのジョブに必要なロケーションというメッセージを持つオブジェクトを渡し、この矢印を表示したいパスを定義する。"
  },
  {
    "start": 10507560,
    "end": 10510820,
    "text": "これをロケーション・フィールドに直接表示したい。"
  },
  {
    "start": 10511680,
    "end": 10514464,
    "text": "さて、これが最後のスキーマだ。"
  },
  {
    "start": 10514592,
    "end": 10521020,
    "text": "最後にドット・スキーマとロケーション・スキーマを追加する。"
  },
  {
    "start": 10522400,
    "end": 10529336,
    "text": "ここで作成したソートスキーマはかなり複雑なものだが、フォームがかなり複雑なので必要なのだ。"
  },
  {
    "start": 10529448,
    "end": 10534718,
    "text": "フロントエンドでもバックエンドでもスキーマを再利用できるようになったということだ。"
  },
  {
    "start": 10534744,
    "end": 10537874,
    "text": "ほんの小さなミスだ。"
  },
  {
    "start": 10538002,
    "end": 10542490,
    "text": "ここまではファンクション・ブロックだが、returnキーワードはない。"
  },
  {
    "start": 10542530,
    "end": 10549490,
    "text": "ここにreturnを加えるか、あるいはセミコロンを外してワンライナーにしてしまう。"
  },
  {
    "start": 10549530,
    "end": 10554470,
    "text": "なぜなら、ここではブール値を返すことが重要だからだ。"
  },
  {
    "start": 10554890,
    "end": 10563480,
    "text": "また、スキーマの型を作成し、後で再利用できるようにしたい。"
  },
  {
    "start": 10563820,
    "end": 10579120,
    "text": "create job schema export type create job valuesの下に置き、c dot infer type of create job schemaを使用します。"
  },
  {
    "start": 10580580,
    "end": 10587548,
    "text": "これにカーソルを合わせると、スキーマの記述にぴったり合う新しい型ができあがる。"
  },
  {
    "start": 10587644,
    "end": 10590412,
    "text": "これは、フォームを通して期待されるデータである。"
  },
  {
    "start": 10590476,
    "end": 10594004,
    "text": "後で会社のロゴがファイルであることがわかる。"
  },
  {
    "start": 10594052,
    "end": 10599916,
    "text": "先に定義したように、非オプショナル文字列とオプショナル文字列がある。"
  },
  {
    "start": 10600028,
    "end": 10602828,
    "text": "このタイプは後で本当に役に立つ。"
  },
  {
    "start": 10603004,
    "end": 10609228,
    "text": "それでは、これらの値を渡す新しい求人フォームの新しいページをセットアップしたいと思います。"
  },
  {
    "start": 10609324,
    "end": 10615474,
    "text": "JavaScriptを必要とするreactフックフォームを使うので、このフォームはクライアント・コンポーネントの中に住むことになる。"
  },
  {
    "start": 10615572,
    "end": 10621286,
    "text": "ページに独自のタイトルをつけたいのですが、これはサーバーコンポーネントでしかできません。"
  },
  {
    "start": 10621398,
    "end": 10631902,
    "text": "アプリのフォルダに移動して、新規ファイルを右クリックし、新規ページTsXをスラッシュする。"
  },
  {
    "start": 10632046,
    "end": 10635078,
    "text": "こうして新しい仕事と新しいフォルダを作るのだ。"
  },
  {
    "start": 10635214,
    "end": 10648760,
    "text": "ここでは、デフォルトの関数ページをエクスポートし、フォームクライアントコンポーネントのラッパーとして使用します。"
  },
  {
    "start": 10649180,
    "end": 10652404,
    "text": "ここでは、ページのタイトルをエクスポートしたいと思います。"
  },
  {
    "start": 10652532,
    "end": 10665160,
    "text": "エクスポートされたconst metadataはmetadata型であり、タイトルをハードコードして新しい仕事を投稿する。"
  },
  {
    "start": 10666060,
    "end": 10673592,
    "text": "次に、同じフォルダにnew job form dot TsXという別のファイルを作成します。"
  },
  {
    "start": 10673696,
    "end": 10675780,
    "text": "好きな名前をつけていい。"
  },
  {
    "start": 10676880,
    "end": 10678784,
    "text": "これには実際のフォームが含まれる。"
  },
  {
    "start": 10678872,
    "end": 10681420,
    "text": "これもまた、クライアント・コンポーネントでなければならない。"
  },
  {
    "start": 10681800,
    "end": 10688820,
    "text": "サーバ・コンポーネントからしかメタデータをエクスポートできないので、このページをクライアント・コンポーネントにすることはできない。"
  },
  {
    "start": 10689520,
    "end": 10697512,
    "text": "そのため、この別のコンポーネントを作成し、基本的にはここから新しい求人フォームを返すだけにしています。"
  },
  {
    "start": 10697696,
    "end": 10701300,
    "text": "そのためには、まずここに関数をエクスポートしなければならない。"
  },
  {
    "start": 10701680,
    "end": 10719584,
    "text": "デフォルト関数をエクスポートし、新しい求人フォームを保存したら、このフォームの内容をインポートできるはずです。"
  },
  {
    "start": 10719672,
    "end": 10724782,
    "text": "これがページタイトルで、これがフロー・ジョブ・テンプレートだ。"
  },
  {
    "start": 10724976,
    "end": 10729430,
    "text": "このタイトルには追加していない。"
  },
  {
    "start": 10730010,
    "end": 10732962,
    "text": "よし、では実際のフォームをここに入れよう。"
  },
  {
    "start": 10733106,
    "end": 10735226,
    "text": "では、スタイリングから始めよう。"
  },
  {
    "start": 10735338,
    "end": 10739670,
    "text": "これは基本的にページ全体なので、mainタグが必要だ。"
  },
  {
    "start": 10741730,
    "end": 10744990,
    "text": "とりあえず、ここにプレースホルダーを入れておこう。"
  },
  {
    "start": 10745570,
    "end": 10747910,
    "text": "もちろん、これを返さなければならない。"
  },
  {
    "start": 10749490,
    "end": 10756198,
    "text": "今回はこのフォームを大きくしすぎないように、最大幅を3xlにしたい。"
  },
  {
    "start": 10756294,
    "end": 10758410,
    "text": "私はまた、このことを中央に置きたい。"
  },
  {
    "start": 10759190,
    "end": 10765090,
    "text": "上下に余白を確保するため、縦に10マージンを追加する。"
  },
  {
    "start": 10765390,
    "end": 10772330,
    "text": "次に、このタグ内の要素の間隔を空けるために、スペースyを10個追加する。"
  },
  {
    "start": 10773550,
    "end": 10785532,
    "text": "ここには、トップページと同じように、見出しを入れるdivを置く。この見出しには、大文字のhを1つ使う。"
  },
  {
    "start": 10785566,
    "end": 10790860,
    "text": "理想の開発者を見つけよう"
  },
  {
    "start": 10792680,
    "end": 10795580,
    "text": "の下に段落タグを置く。"
  },
  {
    "start": 10796400,
    "end": 10803328,
    "text": "何千人もの求職者に求人広告を見てもらうことができます。"
  },
  {
    "start": 10803504,
    "end": 10806500,
    "text": "もちろん、ここに何を入れてもいい。"
  },
  {
    "start": 10808240,
    "end": 10813180,
    "text": "この段落のテキストをミュートの前景にしたい。"
  },
  {
    "start": 10816070,
    "end": 10824070,
    "text": "見出しとこの小見出しを囲むdivに、スペースy5とテキストcenterを追加する。"
  },
  {
    "start": 10824110,
    "end": 10840342,
    "text": "このdivの下、まだmainタグの中にある別のdivの中にフォームそのものを置き、そこにいくつかのクラス、スペースy6を追加する。"
  },
  {
    "start": 10840406,
    "end": 10849510,
    "text": "スペーシングのために、ボーダーを追加し、角を丸め、lgを丸め、パディングを追加する。"
  },
  {
    "start": 10849670,
    "end": 10853570,
    "text": "これはフォームが置かれるボックスです。"
  },
  {
    "start": 10854790,
    "end": 10858478,
    "text": "一番上に、テキストでもうひとつ小さな見出しをつけたい。"
  },
  {
    "start": 10858534,
    "end": 10860890,
    "text": "これを別のdivにまとめる。"
  },
  {
    "start": 10862510,
    "end": 10868450,
    "text": "そして、ここに仕事の詳細と書かれたh2がある。"
  },
  {
    "start": 10869260,
    "end": 10890036,
    "text": "また、この段落を太字のジミー・フォントで、その下にもう1段落、前景をミュートしたテキストでスタイルしたい。"
  },
  {
    "start": 10890188,
    "end": 10894280,
    "text": "ここにテキストがあり、次にフォームの入力フィールドがある。"
  },
  {
    "start": 10894780,
    "end": 10899060,
    "text": "次に、この2つのdivの閉じタグの間に入る。"
  },
  {
    "start": 10899140,
    "end": 10903400,
    "text": "私たちはまだこのdivの中にいる。"
  },
  {
    "start": 10903860,
    "end": 10906580,
    "text": "ここでは大文字を使う。"
  },
  {
    "start": 10906660,
    "end": 10909780,
    "text": "ここで注意しなければならないのは、さまざまな輸入品があるということだ。"
  },
  {
    "start": 10909860,
    "end": 10915756,
    "text": "reactフックフォームからインポートするのではなく、独自のコンポーネントフォルダからインポートしたい。"
  },
  {
    "start": 10915948,
    "end": 10921726,
    "text": "このフォーム・コンポーネントはshed CNNが提供しているもので、先にインストールしたものだ。"
  },
  {
    "start": 10921878,
    "end": 10929646,
    "text": "なぜ今、この特別なフォーム・コンポーネントが必要なのでしょうか？フィルタのサイドバーでやったように、普通の小文字のフォームを使うことができないのでしょうか？"
  },
  {
    "start": 10929718,
    "end": 10937606,
    "text": "これは、フォーム入力フィールドのバリデーションと管理を行うreactフックフォームと統合したいからだ。"
  },
  {
    "start": 10937638,
    "end": 10944838,
    "text": "というのも、私たちの新しい求人フォームはより複雑で、この大文字フォーム・コンポーネントは基本的にこれらすべてを指揮するからです。"
  },
  {
    "start": 10944934,
    "end": 10950510,
    "text": "これは私たちのために値を保存し、バリデーションのためにさまざまなフォームフィールドにアクセスする方法を与えてくれる。"
  },
  {
    "start": 10950630,
    "end": 10962038,
    "text": "これと一緒にフォーム・フィールド・コンポーネントもあり、これを使って単一のフォーム入力、セレクト・フィールド、チェックボックスなど、あらゆる種類のフォーム要素をレンダリングする。"
  },
  {
    "start": 10962134,
    "end": 10969478,
    "text": "このフォーム・フィールドは、たくさんのコードで構成されているが、実際には、後のフォームの入力フィールドにすぎない。"
  },
  {
    "start": 10969574,
    "end": 10971302,
    "text": "我々はこれをたくさん持っている。"
  },
  {
    "start": 10971406,
    "end": 10972902,
    "text": "なぜこれが必要なのか？"
  },
  {
    "start": 10973046,
    "end": 10979112,
    "text": "さて、繰り返しになるが、まず第一に、これはフォームの状態を管理し、それをreactフック・フォームに渡す。"
  },
  {
    "start": 10979176,
    "end": 10981632,
    "text": "このコントロール部分はそのためのものだ。"
  },
  {
    "start": 10981776,
    "end": 10993232,
    "text": "フォーム項目は、フォームラベル、フォーム入力フィールド、説明文、エラーメッセージが正しい間隔で正しく配置されるように、いくつかのレイアウトとスタイルを提供します。"
  },
  {
    "start": 10993376,
    "end": 11003272,
    "text": "このフォーム・コントロールのラッパーは、ラベルと入力フィールド、説明文とエラーメッセージが適切に接続されるようにします。"
  },
  {
    "start": 11003416,
    "end": 11013160,
    "text": "先ほどのジョブフィルターのサイドバーで、このラベルがこの入力フィールドにつながっていることをブラウザに伝えるためにHTMLのfour属性を設定したことを思い出してください。"
  },
  {
    "start": 11013240,
    "end": 11015896,
    "text": "サーバー・コンポーネントでは、このようにしなければならない。"
  },
  {
    "start": 11016008,
    "end": 11022576,
    "text": "クライアント・コンポーネントでは、このフォーム・コントロール・ラッパーを経由して、自動的にこれを行うヘルパーを使うことができる。"
  },
  {
    "start": 11022648,
    "end": 11034018,
    "text": "これがクライアント・コンポーネントでしか機能しないのは、内部的にコンテキストを使ってこれらの値をさまざまなコンポーネントに渡しており、コンテキストはクライアント・コンポーネントでしか利用できないからだ。"
  },
  {
    "start": 11034114,
    "end": 11051250,
    "text": "エラーメッセージも入力フィールドに接続する必要があり、さまざまなアクセシビリティ属性があるためです。"
  },
  {
    "start": 11051370,
    "end": 11057414,
    "text": "また、これらのフォーム・フィールド・コンポーネントは、クライアント・コンポーネントでのみ機能する。"
  },
  {
    "start": 11057562,
    "end": 11068566,
    "text": "このshadcnフォーム・フィールド・ラッパーを使わずにreactフック・フォームを使うこともできますが、私はこのフォームが気に入っています。"
  },
  {
    "start": 11068678,
    "end": 11071054,
    "text": "では、その方法をお見せしよう。"
  },
  {
    "start": 11071182,
    "end": 11074398,
    "text": "まず、react hocformを初期化しなければならない。"
  },
  {
    "start": 11074494,
    "end": 11088500,
    "text": "繰り返しますが、react hocformはフォームの入力をステートとして保存し、フォームを送信する前に表示されるエラーメッセージや、他の入力フィールドに依存する入力フィールドなど、動的なバリデーションを可能にします。"
  },
  {
    "start": 11088580,
    "end": 11091156,
    "text": "これはすべてリアクトフックフォームによって編成される。"
  },
  {
    "start": 11091228,
    "end": 11098700,
    "text": "このコンポーネントの最上部に、used form hookと呼ばれるconst formエントリーを作成します。"
  },
  {
    "start": 11098820,
    "end": 11100480,
    "text": "リアクトフックのフォームから。"
  },
  {
    "start": 11101340,
    "end": 11106388,
    "text": "これに、フォームに期待するデータの種類を型引数として渡すことができる。"
  },
  {
    "start": 11106484,
    "end": 11108560,
    "text": "これが、後に型安全性をもたらすことになる。"
  },
  {
    "start": 11109340,
    "end": 11112584,
    "text": "これには、私たちが作成したジョブの値を使うことができる。"
  },
  {
    "start": 11112692,
    "end": 11117592,
    "text": "これはcreate jobスキーマから推測されたゾットタイプです。"
  },
  {
    "start": 11117776,
    "end": 11119340,
    "text": "これはここで使える。"
  },
  {
    "start": 11120040,
    "end": 11125460,
    "text": "そして、これをカリングし、括弧の間にコンフィギュレーション・オブジェクトを渡す。"
  },
  {
    "start": 11126040,
    "end": 11133656,
    "text": "ここでは、検証を担当するリゾルバを渡すことができ、これにゾット・リゾルバを渡すことができる。"
  },
  {
    "start": 11133728,
    "end": 11136380,
    "text": "手動でインポートしなければならないようだ。"
  },
  {
    "start": 11138120,
    "end": 11155880,
    "text": "アドホック・フォーム・リゾルバ・スラッシュzotからdestructureをインポートし、ここにこのフォームのリゾルバとして使いたいzotリゾルバを入れる。"
  },
  {
    "start": 11156180,
    "end": 11164360,
    "text": "に、バリデーションファイルで設定したzotスキーマであるcreate jobスキーマを渡します。"
  },
  {
    "start": 11164790,
    "end": 11173490,
    "text": "では、フォーム・コンポーネントに移動して、フォームの値をこのフォームに広げましょう。"
  },
  {
    "start": 11173790,
    "end": 11176662,
    "text": "これは小屋Cnのドキュメントに記載されている。"
  },
  {
    "start": 11176766,
    "end": 11181290,
    "text": "これにより、このフォームはリアクトフックフォームと正しく連動するようになる。"
  },
  {
    "start": 11181910,
    "end": 11188330,
    "text": "そしてこのフォーム・ラッパーに、実際のHTMLフォームそのものである小文字のフォームを入れる。"
  },
  {
    "start": 11188710,
    "end": 11191680,
    "text": "このフォームにいくつかの小道具を加える。"
  },
  {
    "start": 11191800,
    "end": 11198300,
    "text": "まず最初に、フォームの入力フィールドの間隔を空けるために、スペースyを4つ使用する。"
  },
  {
    "start": 11198600,
    "end": 11201032,
    "text": "これもノーバリデートに設定した。"
  },
  {
    "start": 11201136,
    "end": 11211776,
    "text": "なぜなら、ブラウザのメッセージではなく、独自のエラーメッセージを持つJavaScriptベースの検証を使いたいからだ。"
  },
  {
    "start": 11211928,
    "end": 11216072,
    "text": "そして、このフォームを送信するときに呼び出される関数も必要だ。"
  },
  {
    "start": 11216176,
    "end": 11223464,
    "text": "今回は、JavaScriptの実行を必要とする、より動的なバリデーションを行うので、アクションプロップは使いません。"
  },
  {
    "start": 11223552,
    "end": 11234280,
    "text": "このためにonsubmit関数を使用します。この関数を使用すると、フォームが送信されたときに何を実行するかについて、単にpostリクエストを送信するよりも柔軟性が増すからです。"
  },
  {
    "start": 11234400,
    "end": 11243580,
    "text": "繰り返しますが、onsubmitの欠点はJavaScriptを必要とすることですが、前述のように、ここで設定したフォームはJavaScriptなしでは実現不可能です。"
  },
  {
    "start": 11244630,
    "end": 11249850,
    "text": "submit時に呼び出される非同期関数を作ってみよう。"
  },
  {
    "start": 11250830,
    "end": 11257910,
    "text": "これには、入力フィールドであるジョブ作成値を乗り越える必要がある。"
  },
  {
    "start": 11258030,
    "end": 11264610,
    "text": "reactフックフォームを使用すると、過去のフォームデータは取得されず、正しい型で解決された値が取得されます。"
  },
  {
    "start": 11265150,
    "end": 11271850,
    "text": "とりあえず、実際に正しい値を受け取ったことを示すアラートメッセージを表示しておこう。"
  },
  {
    "start": 11272310,
    "end": 11275838,
    "text": "3つ目は、これらの値をnullコマンドに文字列化することである。"
  },
  {
    "start": 11275934,
    "end": 11281390,
    "text": "二つ目は、このJSON文字列を読みやすいようにフォーマットする部分だ。"
  },
  {
    "start": 11281550,
    "end": 11283862,
    "text": "今のところ、やりたいことはこれだけだ。"
  },
  {
    "start": 11283966,
    "end": 11288358,
    "text": "後でここでサーバーアクションを呼び出し、実際に新しいジョブを作成する。"
  },
  {
    "start": 11288494,
    "end": 11299220,
    "text": "さらに、このフォーム・オブジェクトを構造化して、異なる値を使用する際にフォーム・ドットを常に記述する必要がないようにしたい。"
  },
  {
    "start": 11300360,
    "end": 11305980,
    "text": "ここでは、ハンドルのサブミット・ウォッチを再構築している。"
  },
  {
    "start": 11306600,
    "end": 11308912,
    "text": "これらの意味を知る必要はない。"
  },
  {
    "start": 11308976,
    "end": 11311740,
    "text": "それらすべてについては、すぐにわかるだろう。"
  },
  {
    "start": 11312920,
    "end": 11320460,
    "text": "制御設定値 フォーカスとフォームの状態を設定します。"
  },
  {
    "start": 11320920,
    "end": 11326080,
    "text": "なぜなら、ここには送信フィールドがあるからだ。"
  },
  {
    "start": 11326740,
    "end": 11331360,
    "text": "さて、これらはすべてこのフォーム・オブジェクトの中に含まれている値です。"
  },
  {
    "start": 11331900,
    "end": 11338372,
    "text": "onsubmit関数まで降りて、ここでonsubmit関数を直接渡さない。"
  },
  {
    "start": 11338556,
    "end": 11344760,
    "text": "その代わりに、フォーム・オブジェクトから構造化解除したhandlesubmitにこれをラップする。"
  },
  {
    "start": 11345220,
    "end": 11351756,
    "text": "これを思い出して、次のようにsubmit関数に独自の関数を渡す。"
  },
  {
    "start": 11351948,
    "end": 11352516,
    "text": "なぜですか？"
  },
  {
    "start": 11352628,
    "end": 11358620,
    "text": "なぜなら、この部分はリアクトフックフォームを通してフォームのバリデーションをトリガーする役割を担っているからだ。"
  },
  {
    "start": 11358700,
    "end": 11366680,
    "text": "これはまた、データを抽出し、onsubmit関数に渡すことで、これらのcreate jobの値を受け取ります。"
  },
  {
    "start": 11367500,
    "end": 11368036,
    "text": "いいかい？"
  },
  {
    "start": 11368068,
    "end": 11376640,
    "text": "そして、この小文字のフォームの中に、schedzynのドキュメントで紹介したさまざまなフォーム・フィールド・オブジェクトを配置する。"
  },
  {
    "start": 11377160,
    "end": 11381592,
    "text": "タグは自閉するが、別の小道具がたくさんある。"
  },
  {
    "start": 11381736,
    "end": 11387104,
    "text": "最初のものはコントロールで、上のフォーム・オブジェクトから再構築したものだ。"
  },
  {
    "start": 11387232,
    "end": 11395168,
    "text": "これは基本的にreactフック・フォームがこの入力フィールドの値を管理できるようにするもので、名前をつけなければならない。"
  },
  {
    "start": 11395224,
    "end": 11397312,
    "text": "ここでオートコンプリートを得る。"
  },
  {
    "start": 11397416,
    "end": 11397824,
    "text": "なぜですか？"
  },
  {
    "start": 11397912,
    "end": 11406946,
    "text": "というのも、これらはすべてゾット・スキーマの一部であり、ゾット・リゾルバーに使用フォーム・カーに渡したものだからだ。"
  },
  {
    "start": 11407058,
    "end": 11410910,
    "text": "これが、この下にあるフィールドの自動補完を実現するものだ。"
  },
  {
    "start": 11412130,
    "end": 11417590,
    "text": "そして、このrender propを追加して、実際の入力フィールドをレンダリングします。"
  },
  {
    "start": 11418650,
    "end": 11427230,
    "text": "ここで括弧と中括弧をもうひとつ書いているのは、フィールドと呼ばれる値を構造化解除したいからだ。"
  },
  {
    "start": 11428540,
    "end": 11431828,
    "text": "であれば、これをアローファンクションのエントリーとする。"
  },
  {
    "start": 11431924,
    "end": 11433196,
    "text": "何か返しますか？"
  },
  {
    "start": 11433308,
    "end": 11442604,
    "text": "というのは、このレンダー関数からこの部分を返したいからだ。"
  },
  {
    "start": 11442772,
    "end": 11448396,
    "text": "よし、ここにフォーム・アイテムを入れよう。これはコンポーネント・フォルダーからインポートしたものだ。"
  },
  {
    "start": 11448428,
    "end": 11449000,
    "text": "もう一度言う。"
  },
  {
    "start": 11449740,
    "end": 11454084,
    "text": "ここでもまた、コンポーネントを適切にレイアウトする責任がある。"
  },
  {
    "start": 11454252,
    "end": 11470080,
    "text": "このフォーム・アイテムの中に、通常のラベルと同じフォーム・ラベルを貼り付けます。"
  },
  {
    "start": 11470820,
    "end": 11481120,
    "text": "そしてその下にフォーム・コントロールのラッパーを置き、これを閉じて、ここにコンポーネント・フォルダーから実際の入力フィールドを置く。"
  },
  {
    "start": 11482880,
    "end": 11488900,
    "text": "これは、サイドバーで使用したのと同じ入力フィールドで、同じコンポーネントです。"
  },
  {
    "start": 11489520,
    "end": 11494752,
    "text": "これはフォーム・コントロールにラップされているので、idを自分で設定する必要はない。"
  },
  {
    "start": 11494896,
    "end": 11501200,
    "text": "フォーム・コントロールがこれをやってくれるので、フォーム・ラベルとエラー・メッセージには同じアイデアが設定される。"
  },
  {
    "start": 11501240,
    "end": 11502260,
    "text": "アクセシビリティのため。"
  },
  {
    "start": 11503560,
    "end": 11510760,
    "text": "ここにプレースホルダーを設定しよう。"
  },
  {
    "start": 11510800,
    "end": 11514860,
    "text": "これはプレースホルダーのテキストで、すでにここで見ることができる。"
  },
  {
    "start": 11516080,
    "end": 11528392,
    "text": "そして、このプレースホルダー・テキストの後に、このフィールド・オブジェクトを広げたい。ここには、この入力フィールドに適用したいさまざまなプロップが含まれているからだ。"
  },
  {
    "start": 11528536,
    "end": 11530456,
    "text": "点を書くと、それが見える。"
  },
  {
    "start": 11530568,
    "end": 11538602,
    "text": "これは、ここまでのchangeとvalueと同じ名前を適用し、valueと他の多くのものを管理する。"
  },
  {
    "start": 11538706,
    "end": 11551490,
    "text": "これをここに広げ、フォーム・コントロールの下にフォーム・メッセージをレンダリングし、フォーム・メッセージには自動的にソート検証スキーマのエラー・メッセージが含まれるようにする。"
  },
  {
    "start": 11551570,
    "end": 11555794,
    "text": "ここにスキーマを渡したために値が有効でない場合。"
  },
  {
    "start": 11555882,
    "end": 11563824,
    "text": "例えば、長すぎるタイトルを入力すると、適切なエラーメッセージが表示される。"
  },
  {
    "start": 11563912,
    "end": 11567344,
    "text": "タイトルがない場合は、このようなメッセージが表示されます。"
  },
  {
    "start": 11567432,
    "end": 11569344,
    "text": "すぐにわかるだろう。"
  },
  {
    "start": 11569512,
    "end": 11576160,
    "text": "これはschedzynフォームラッパーが処理してくれるため、このフォームメッセージに自動的に入れられる。"
  },
  {
    "start": 11576280,
    "end": 11581880,
    "text": "ラベルをクリックすると、自動的に入力フィールドにフォーカスが当たる。"
  },
  {
    "start": 11582000,
    "end": 11586978,
    "text": "これは、このラベルがこの入力フィールドに正しく接続されていることを示している。"
  },
  {
    "start": 11587074,
    "end": 11592498,
    "text": "HTML four属性を設定していないにもかかわらず、これも自動的に管理される。"
  },
  {
    "start": 11592594,
    "end": 11604290,
    "text": "少し複雑に聞こえるかもしれないが、reactのフォームはアクセシビリティが必要で、ステートを管理する必要があり、react hook formのようなヘルパー・ライブラリがそれをやってくれるから複雑なのだ。"
  },
  {
    "start": 11604370,
    "end": 11612896,
    "text": "私たちのフィルターサイドバーにこれが必要なかった理由は、私たちのフィルターサイドバーがとてもシンプルで、その中にバリデーションがなかったからです。"
  },
  {
    "start": 11612978,
    "end": 11618028,
    "text": "もう少し複雑なフォームの場合、通常はヘルパー・ライブラリを使いたい。"
  },
  {
    "start": 11618204,
    "end": 11620788,
    "text": "これを保存すれば、もう試すことができる。"
  },
  {
    "start": 11620844,
    "end": 11628964,
    "text": "送信ボタンはまだありませんが、ここに何も入力せずにEnterを押すと、必要なエラーメッセージが表示されます。"
  },
  {
    "start": 11629092,
    "end": 11638052,
    "text": "というのも、複数の入力フィールドがある場合、この赤いタイトル・カラーはとても賑やかでわかりにくくなるからだ。"
  },
  {
    "start": 11638156,
    "end": 11641668,
    "text": "共有CNを使っているのだから、すべてのコードは自分たちのものだろう？"
  },
  {
    "start": 11641724,
    "end": 11646480,
    "text": "先ほど共有CNを使って作成したフォーム・コンポーネントに入ることができる。"
  },
  {
    "start": 11647340,
    "end": 11651360,
    "text": "ここでフォームラベルコンポーネントを探すことができる。"
  },
  {
    "start": 11651820,
    "end": 11654572,
    "text": "これはテキストを赤くするコードである。"
  },
  {
    "start": 11654676,
    "end": 11658292,
    "text": "エラーがあれば、代わりにこれを取り除きたい。"
  },
  {
    "start": 11658356,
    "end": 11662188,
    "text": "ここではクラス名だけを渡したい。"
  },
  {
    "start": 11662364,
    "end": 11668764,
    "text": "というのも、この下に敷かれている小道具が、すでにこの問題を解決してくれているはずだからだ。"
  },
  {
    "start": 11668892,
    "end": 11675288,
    "text": "ただし、ここでのクラス名のデストラクチャリングも削除する必要がある。"
  },
  {
    "start": 11675384,
    "end": 11682784,
    "text": "これを再構築する代わりに、propsオブジェクト全体を取得して、ここで再構築しよう。"
  },
  {
    "start": 11682832,
    "end": 11686352,
    "text": "これは自動的にクラス名も適用するはずだ。"
  },
  {
    "start": 11686496,
    "end": 11690000,
    "text": "であれば、このエラー値ももう必要ない。"
  },
  {
    "start": 11690080,
    "end": 11691940,
    "text": "少し整理しよう。"
  },
  {
    "start": 11692360,
    "end": 11699262,
    "text": "変更を保存すると、タイトルが赤くなくなり、後で見栄えがよくなると思います。"
  },
  {
    "start": 11699446,
    "end": 11702622,
    "text": "それでは、フォーム・フィールドをもう2つ追加しましょう。"
  },
  {
    "start": 11702726,
    "end": 11712250,
    "text": "最初のフォーム・フィールドの下に別のフォーム・フィールドを追加する。"
  },
  {
    "start": 11713030,
    "end": 11717730,
    "text": "コントロールを渡し、名前をつける。"
  },
  {
    "start": 11718190,
    "end": 11719850,
    "text": "これはそのタイプだ。"
  },
  {
    "start": 11720950,
    "end": 11724860,
    "text": "次に、フォーム・フィールド自体をレンダリングする必要がある。"
  },
  {
    "start": 11726160,
    "end": 11730220,
    "text": "ここでも、このフィールド・オブジェクトを構造化しないようにする。"
  },
  {
    "start": 11731800,
    "end": 11742340,
    "text": "ここにフォーム項目を置き、一番上にジョブ・タイプと書かれたフォーム・ラベルを貼ります。"
  },
  {
    "start": 11743520,
    "end": 11745780,
    "text": "こちらはセレクトフィールドになる。"
  },
  {
    "start": 11746760,
    "end": 11750700,
    "text": "先ほど作成したselectコンポーネントを使用する。"
  },
  {
    "start": 11752180,
    "end": 11763080,
    "text": "ここでフィールド・プロップスを広げ、サイドバーでやったようにデフォルト値を空文字列にリセットする。"
  },
  {
    "start": 11763980,
    "end": 11766920,
    "text": "そして、ここにオプションを入れる。"
  },
  {
    "start": 11767660,
    "end": 11774280,
    "text": "最初のものは、この空の文字列の値を取得するプレースホルダーとなる。"
  },
  {
    "start": 11775460,
    "end": 11777520,
    "text": "これをhiddenに設定する。"
  },
  {
    "start": 11777870,
    "end": 11781570,
    "text": "オプションを選択してください。"
  },
  {
    "start": 11782030,
    "end": 11796510,
    "text": "というのも、このようなプレースホルダーを作成すると、「オプションを選択してください」と表示されるが、クリックしてもドロップダウンメニューには表示されないからだ。"
  },
  {
    "start": 11796630,
    "end": 11799142,
    "text": "我々はこの隠しオプションでこれを実現した。"
  },
  {
    "start": 11799326,
    "end": 11803170,
    "text": "もしこれが隠されていなければ、実際に選択できるオプションになっていただろう。"
  },
  {
    "start": 11803480,
    "end": 11809192,
    "text": "次に、フィルターザイトバーのように、各ジョブタイプのオプションを作成します。"
  },
  {
    "start": 11809336,
    "end": 11816224,
    "text": "ジョブ・タイプの配列を、オプション・オブジェクトにマッピングします。"
  },
  {
    "start": 11816392,
    "end": 11825300,
    "text": "ここにはそれぞれのジョブ・タイプがあり、それぞれのオプションをレンダリングしたい。"
  },
  {
    "start": 11826520,
    "end": 11828860,
    "text": "重要なのは職種そのものだ。"
  },
  {
    "start": 11830420,
    "end": 11837964,
    "text": "値もジョブ・タイプであり、オプション内のテキストもジョブ・タイプである。"
  },
  {
    "start": 11838012,
    "end": 11842400,
    "text": "これは以前にもやったことだが、今はそれぞれのタイプに応じたオプションがある。"
  },
  {
    "start": 11842780,
    "end": 11845164,
    "text": "フォーム・コントロールのラッパーを忘れていた。"
  },
  {
    "start": 11845252,
    "end": 11857240,
    "text": "ラベルとselectタグの間にフォーム・コントロールを置き、selectタグの下に閉じタグを置く。"
  },
  {
    "start": 11857640,
    "end": 11869540,
    "text": "また、このフォーム・コントロールは自動的にセレクト・フィールドにアイデアを渡し、フォーム・コントロールの下に置くラベルとエラー・メッセージにつなげる。"
  },
  {
    "start": 11870120,
    "end": 11876312,
    "text": "ここにフォーム・メッセージを書くと、適切なエラー・メッセージが自動的に入力される。"
  },
  {
    "start": 11876496,
    "end": 11883220,
    "text": "ラベルをクリックするとセレクト・フィールドが選択され、ラベルが正しく接続されていることがわかります。"
  },
  {
    "start": 11883550,
    "end": 11886462,
    "text": "さて、次はまた普通の入力フィールドだ。"
  },
  {
    "start": 11886526,
    "end": 11905210,
    "text": "最初の入力フィールド、下のタイトルをコピーペーストして、2番目の入力フィールドの名前を会社名に変更し、ラベルの内容を会社に変更しましょう。"
  },
  {
    "start": 11905990,
    "end": 11917128,
    "text": "ファイルアップロードボタンを設置したいので、プレースホルダーは必要ありません。"
  },
  {
    "start": 11917304,
    "end": 11920180,
    "text": "別の入力フォーム・フィールドを貼り付けてみよう。"
  },
  {
    "start": 11921200,
    "end": 11927180,
    "text": "名前を会社のロゴ、ラベルにも設定しよう。"
  },
  {
    "start": 11928960,
    "end": 11944150,
    "text": "そして、このプレースホルダーを取り除き、代わりにタイプをファイルに設定すると、クリックすればエクスプローラーが開くようなファイル入力になる。"
  },
  {
    "start": 11944610,
    "end": 11953578,
    "text": "このaccept propに画像のスラッシュ・アスタリスクを渡すことで、画像のみを受け入れることを定義できます。"
  },
  {
    "start": 11953754,
    "end": 11958650,
    "text": "アスタリスクは画像ファイルの種類を表し、pngやjpgなどを意味する。"
  },
  {
    "start": 11958730,
    "end": 11968804,
    "text": "フロントエンドでこれを行うだけでは安全ではないので、バックエンドでもバリデーション・スキーマを使ってこれを検証します。"
  },
  {
    "start": 11968892,
    "end": 11970640,
    "text": "これは使い勝手のためだ。"
  },
  {
    "start": 11971460,
    "end": 11977360,
    "text": "これをクリックすると、デフォルトでは画像ファイルしか選択できないことがわかる。"
  },
  {
    "start": 11978060,
    "end": 11989118,
    "text": "この苦情が出るのは、ここに広げたフィールドでバリュー・プロップを設定しようとしているからだ。"
  },
  {
    "start": 11989244,
    "end": 11992354,
    "text": "ファイル入力の場合、実際には値を設定することはできない。"
  },
  {
    "start": 11992522,
    "end": 11995522,
    "text": "セキュリティ上の理由から許可されていないんだと思う。"
  },
  {
    "start": 11995626,
    "end": 11997266,
    "text": "私たちはこれを取り除かなければならない。"
  },
  {
    "start": 11997338,
    "end": 12006950,
    "text": "ここで値をundefinedに設定することもできるが、よりクリーンな方法は、このフィールド・オブジェクトを上に広げることだ。"
  },
  {
    "start": 12007450,
    "end": 12015042,
    "text": "そして、カンマ・ドット・ドット・ドットのように値を抽出し、残りの値をフィールド値と呼ぶ。"
  },
  {
    "start": 12015226,
    "end": 12016794,
    "text": "この名前は私たち次第だ。"
  },
  {
    "start": 12016882,
    "end": 12018818,
    "text": "この構文は以前にも使った。"
  },
  {
    "start": 12018954,
    "end": 12024602,
    "text": "こうすることで、値を個別に再構築し、フィールドの値に含まれないようにする。"
  },
  {
    "start": 12024706,
    "end": 12031722,
    "text": "ここでフィールドの値を下に広げると、値が広がることはなくなり、エラーはなくなった。"
  },
  {
    "start": 12031906,
    "end": 12033826,
    "text": "しかし、まだひとつ問題がある。"
  },
  {
    "start": 12033938,
    "end": 12041342,
    "text": "このようなファイル入力では、ファイルリストと呼ばれる型を使用する。"
  },
  {
    "start": 12041426,
    "end": 12044630,
    "text": "そうすれば、このファイルリストからファイルを取り出すことができる。"
  },
  {
    "start": 12044710,
    "end": 12051670,
    "text": "なぜなら、バックエンドで受け取るのも同じファイルだからだ。"
  },
  {
    "start": 12051790,
    "end": 12062550,
    "text": "スキーマを分割して、バックエンドにファイルタイプを使うバリエーションと、フロントエンドにファイルリストタイプを使うバリエーションを作ることもできる。"
  },
  {
    "start": 12062630,
    "end": 12065326,
    "text": "同じスキーマを使い続けたい。"
  },
  {
    "start": 12065438,
    "end": 12070960,
    "text": "その代わりにできることは、onchange関数を自分たちで処理することだ。"
  },
  {
    "start": 12071340,
    "end": 12074540,
    "text": "デフォルトでは、これらのフィールド値から処理される。"
  },
  {
    "start": 12074660,
    "end": 12076124,
    "text": "この中にオンチェンジがある。"
  },
  {
    "start": 12076292,
    "end": 12083440,
    "text": "これはreactのフックフォームで処理されるが、これをオーバーライドして自分自身で処理することもできる。"
  },
  {
    "start": 12084420,
    "end": 12091080,
    "text": "ここでは、このonchangeイベントを受け取る関数を渡している。"
  },
  {
    "start": 12092100,
    "end": 12113000,
    "text": "このようにエラー関数を作り、自分たちで変更を処理したい。なぜなら、このファイルリストからファイルを抽出して、これをreactフックフォームに渡したいからだ。なぜなら、reactフックフォームはここで定義したもの、つまりファイルリストではなく単一のファイルを想定しているからだ。"
  },
  {
    "start": 12113700,
    "end": 12114644,
    "text": "そうしよう"
  },
  {
    "start": 12114692,
    "end": 12122424,
    "text": "これは実際のファンクション・ブロックだからだ。"
  },
  {
    "start": 12122532,
    "end": 12129860,
    "text": "よし、e dotのターゲット・ドット・ファイルからファイルを取得しよう。"
  },
  {
    "start": 12130360,
    "end": 12134896,
    "text": "ここでは、未定義の可能性があるため、セーフ・コール演算子を使わなければならない。"
  },
  {
    "start": 12135088,
    "end": 12147696,
    "text": "このように最初のファイルにアクセスするのは、1つのファイルしか想定していないからである。そして、changeイベントのフィールド値を介して、このファイルをreact hogフォームに渡したい。"
  },
  {
    "start": 12147848,
    "end": 12150560,
    "text": "ここでこのファイルを渡す。"
  },
  {
    "start": 12151100,
    "end": 12157012,
    "text": "ファイル・リストから最初のファイルを取り出し、フック・フォームに渡すだけだ。"
  },
  {
    "start": 12157156,
    "end": 12160652,
    "text": "考えてみれば、実はそれほど複雑なことではない。"
  },
  {
    "start": 12160836,
    "end": 12164080,
    "text": "さて、次のフォーム・フィールドはまたセレクト・フィールドだ。"
  },
  {
    "start": 12164540,
    "end": 12171532,
    "text": "タイプ・セレクト・フィールドをコピーしよう。"
  },
  {
    "start": 12171716,
    "end": 12172960,
    "text": "下に貼り付ける。"
  },
  {
    "start": 12173980,
    "end": 12176600,
    "text": "これはロケーションタイプでなければならない。"
  },
  {
    "start": 12178530,
    "end": 12181830,
    "text": "ラベルには所在地が記載されるだけだ。"
  },
  {
    "start": 12182330,
    "end": 12190834,
    "text": "デフォルト値はそのままに、location types配列からオプションをマッピングしたい。"
  },
  {
    "start": 12191002,
    "end": 12195190,
    "text": "この変数名もロケーション・タイプに変更しよう。"
  },
  {
    "start": 12196730,
    "end": 12199790,
    "text": "よし、これでセレクト・フィールドができた。"
  },
  {
    "start": 12200210,
    "end": 12204362,
    "text": "ところで、ファイル・バリデーションが正しく機能しているかどうかをチェックすることもできる。"
  },
  {
    "start": 12204506,
    "end": 12208150,
    "text": "私たちが許可しているのは画像ファイルだけだということを覚えていますか？"
  },
  {
    "start": 12208610,
    "end": 12218066,
    "text": "これが機能するかどうか確認するために、この画像フィルターをちょっと外して、別の種類のファイルを選択してみよう。"
  },
  {
    "start": 12218098,
    "end": 12219882,
    "text": "例えばexfファイル。"
  },
  {
    "start": 12220026,
    "end": 12226018,
    "text": "ご覧のように、これはすぐに画像でなければならないと表示され、バックエンドでも検証されます。"
  },
  {
    "start": 12226194,
    "end": 12230870,
    "text": "画像だけを選択できるようにするために、これを追加しよう。"
  },
  {
    "start": 12231290,
    "end": 12234430,
    "text": "これでexfファイルさえ見えなくなった。"
  },
  {
    "start": 12235330,
    "end": 12238410,
    "text": "さて、次はロケーション検索フィールドだ。"
  },
  {
    "start": 12238490,
    "end": 12243274,
    "text": "このために独自の検索入力フィールドを作ったのだから。"
  },
  {
    "start": 12243322,
    "end": 12247110,
    "text": "componentsフォルダに新しいコンポーネントを作成しよう。"
  },
  {
    "start": 12247530,
    "end": 12258230,
    "text": "ここでは、ロケーション・インプットとかロケーション・サーチとかいう名前でコンポーネントをエクスポートすることにする。"
  },
  {
    "start": 12261250,
    "end": 12264550,
    "text": "このコンポーネントは小道具も必要だ。"
  },
  {
    "start": 12265770,
    "end": 12268390,
    "text": "場所入力小道具。"
  },
  {
    "start": 12268890,
    "end": 12272122,
    "text": "これは通常の入力フィールドと同じ小道具を取る。"
  },
  {
    "start": 12272226,
    "end": 12290210,
    "text": "このインターフェイスをリアクト・ドットで拡張し、HTML属性を追加する。"
  },
  {
    "start": 12291270,
    "end": 12296158,
    "text": "こうすることで、このインターフェイスは通常のHTML入力と同じ小道具を受け取ることができる。"
  },
  {
    "start": 12296294,
    "end": 12302718,
    "text": "さらにもう1つ小道具がある。"
  },
  {
    "start": 12302894,
    "end": 12307050,
    "text": "これは、実際に検索結果をクリックしたときにトリガーされる。"
  },
  {
    "start": 12307470,
    "end": 12315606,
    "text": "この関数は、文字列である選択された場所を転送し、戻り値はありません。"
  },
  {
    "start": 12315798,
    "end": 12317690,
    "text": "私たちはこう宣言した。"
  },
  {
    "start": 12318110,
    "end": 12330850,
    "text": "reactフック・フォームが無効な入力フィールドに自動的にフォーカスを当てるためにはrefが必要であり、これにはrefが必要だからである。"
  },
  {
    "start": 12331230,
    "end": 12339222,
    "text": "先ほどselectコンポーネントでrefを転送したのを思い出してほしい。"
  },
  {
    "start": 12339246,
    "end": 12344760,
    "text": "そこで、先ほどと同じように、デフォルト輸出の後ろに回る。"
  },
  {
    "start": 12345540,
    "end": 12350400,
    "text": "2つの型引数を渡すforward refを呼び出す。"
  },
  {
    "start": 12350780,
    "end": 12353804,
    "text": "最初のものはHTML input要素である。"
  },
  {
    "start": 12353932,
    "end": 12356280,
    "text": "ここにはそういう要素がある。"
  },
  {
    "start": 12356940,
    "end": 12359676,
    "text": "2つ目はロケの小道具だ。"
  },
  {
    "start": 12359748,
    "end": 12360360,
    "text": "そうだろう？"
  },
  {
    "start": 12361140,
    "end": 12368582,
    "text": "そしてまた、この関数全体を括弧で囲み、この位置入力は2つの引数を受け取る。"
  },
  {
    "start": 12368686,
    "end": 12376246,
    "text": "最初の小道具は、このロケ地で破壊したい小道具で、残りの小道具は選択したものです。"
  },
  {
    "start": 12376438,
    "end": 12379130,
    "text": "第2引数はレフェリー。"
  },
  {
    "start": 12379670,
    "end": 12387094,
    "text": "とりあえず、大文字のIを持つ入力フィールドを返すことにしよう。"
  },
  {
    "start": 12387182,
    "end": 12390090,
    "text": "これをcomponentsフォルダからインポートする。"
  },
  {
    "start": 12390790,
    "end": 12406210,
    "text": "この入力フィールドに、渡された入力フィールドの小道具を広げます。"
  },
  {
    "start": 12406590,
    "end": 12410262,
    "text": "ロケーション・タイプの下にもう一つ入力が必要だ。"
  },
  {
    "start": 12410366,
    "end": 12414730,
    "text": "では、既存の入力フィールドをもう一度コピーしてみよう。"
  },
  {
    "start": 12416200,
    "end": 12418820,
    "text": "最後の1つの下に置いてください。"
  },
  {
    "start": 12419840,
    "end": 12422660,
    "text": "これはロケーション・フィールドと呼ばれる。"
  },
  {
    "start": 12424720,
    "end": 12433176,
    "text": "ラベルにはオフィスの場所を記入し、フォーム・コントロールの内部には通常の入力を書かない。"
  },
  {
    "start": 12433248,
    "end": 12442030,
    "text": "位置情報を入力したいので、on location selectedコールバックを渡します。"
  },
  {
    "start": 12442160,
    "end": 12447310,
    "text": "場所が選択されたとき、フィールドのドットonchangeを呼びたい。"
  },
  {
    "start": 12447810,
    "end": 12453018,
    "text": "この入力フィールドの入力をreactフックフォームに保存することはありません。"
  },
  {
    "start": 12453114,
    "end": 12457698,
    "text": "入力のonchange関数ではフィールドのonchangeを呼び出さない。"
  },
  {
    "start": 12457794,
    "end": 12459346,
    "text": "その代わり、\"変化 \"を思い出してほしい。"
  },
  {
    "start": 12459418,
    "end": 12465554,
    "text": "このonlocation selectedコールバックは、実際に都市を選択したときにトリガーされます。"
  },
  {
    "start": 12465682,
    "end": 12468444,
    "text": "そして、この値をリアクトホック形式で保存する。"
  },
  {
    "start": 12468562,
    "end": 12471940,
    "text": "これがどのように機能するかは、すぐにわかるだろう。"
  },
  {
    "start": 12472480,
    "end": 12478820,
    "text": "ここで渡したいもう一つの値は、field dot refから得られるrefである。"
  },
  {
    "start": 12479200,
    "end": 12483704,
    "text": "位置情報入力の内部では、フォワード・リファレンスを使って転送する。"
  },
  {
    "start": 12483832,
    "end": 12487740,
    "text": "また、このように実際にここでパスを出さなければならない。"
  },
  {
    "start": 12490000,
    "end": 12493744,
    "text": "今回は、これらの他のフィールドの値にはこだわらない。"
  },
  {
    "start": 12493792,
    "end": 12497656,
    "text": "ぼかしも値も名前も何もいらない。"
  },
  {
    "start": 12497768,
    "end": 12500136,
    "text": "必要なのはオンチェンジと審判だけだ。"
  },
  {
    "start": 12500248,
    "end": 12503888,
    "text": "今回は、残りのフィールドの値を広げない。"
  },
  {
    "start": 12504064,
    "end": 12505984,
    "text": "今、これは特別なことではない。"
  },
  {
    "start": 12506072,
    "end": 12508880,
    "text": "これは基本的に単なる入力フィールドである。"
  },
  {
    "start": 12508960,
    "end": 12512576,
    "text": "では、実際の検索機能を実装してみよう。"
  },
  {
    "start": 12512728,
    "end": 12516512,
    "text": "ここに何かを入力すると、結果のリストが表示される。"
  },
  {
    "start": 12516696,
    "end": 12521066,
    "text": "そのためには、現在の入力を保持するステートが必要だ。"
  },
  {
    "start": 12521168,
    "end": 12523890,
    "text": "そして、この日付を使ってリストをフィルタリングする。"
  },
  {
    "start": 12524670,
    "end": 12535010,
    "text": "を角括弧で囲んでconstを作り、これをlocation search inputとz location search inputと呼ぶことにする。"
  },
  {
    "start": 12536110,
    "end": 12541250,
    "text": "これはリアクト・ステートで、空文字列で初期化する。"
  },
  {
    "start": 12541790,
    "end": 12547666,
    "text": "そこで、私はこの都市リストを用意した。"
  },
  {
    "start": 12547798,
    "end": 12550554,
    "text": "このファイルはすでにスタイリング・コードに入れた。"
  },
  {
    "start": 12550642,
    "end": 12555866,
    "text": "スタイリング・コードをダウンロードしていない場合は、このファイルへのリンクもビデオの説明文に載せます。"
  },
  {
    "start": 12555938,
    "end": 12562586,
    "text": "実際、私のPCのファンは、この巨大なアレイをロードしなければならないので、今とてもうるさくなっている。"
  },
  {
    "start": 12562658,
    "end": 12566818,
    "text": "実際のアプリでは、グーグルマップ検索のようなものを使うのが普通だ。"
  },
  {
    "start": 12566914,
    "end": 12569746,
    "text": "問題は、そこでアカウントを作成することだ。"
  },
  {
    "start": 12569818,
    "end": 12576164,
    "text": "APIを使うにはクレジットカードを提供しなければならない。"
  },
  {
    "start": 12576252,
    "end": 12579084,
    "text": "その代わりに、私たちが独自に作成した都市リストを使用する。"
  },
  {
    "start": 12579212,
    "end": 12586780,
    "text": "繰り返しますが、都市リストへのリンクはビデオの説明にあります。"
  },
  {
    "start": 12586900,
    "end": 12597068,
    "text": "そこで、citiesという変数を作成し、この巨大な配列を基本的にフィルタリングして、気になる結果だけを表示するようにしたい。"
  },
  {
    "start": 12597244,
    "end": 12609520,
    "text": "さらに、このフィルタを使用メモにラップすることで、レンダリングごとにこのフィルタが実行されないようにします。"
  },
  {
    "start": 12609600,
    "end": 12612616,
    "text": "実際に必要なときだけ実行したい。"
  },
  {
    "start": 12612688,
    "end": 12615100,
    "text": "これを実現するのが使用メモだ。"
  },
  {
    "start": 12615840,
    "end": 12624784,
    "text": "usememoからは、実際にUIに表示されるフィルタリングされたリストを返したい。"
  },
  {
    "start": 12624952,
    "end": 12631180,
    "text": "まず、感嘆符の位置が検索入力のドット・トリムかどうかをチェックする。"
  },
  {
    "start": 12631640,
    "end": 12642336,
    "text": "もし場所検索の入力が空であったり、空白しかなかったりした場合は、結果を表示したくないので、空の配列を返します。"
  },
  {
    "start": 12642528,
    "end": 12651272,
    "text": "次に、usememoの閉じ括弧のところまで行き、use effectと同じように依存配列を追加する。"
  },
  {
    "start": 12651456,
    "end": 12657000,
    "text": "この変数をここで使っているので、これは位置検索の入力を期待している。"
  },
  {
    "start": 12657340,
    "end": 12666860,
    "text": "この都市配列は、位置検索の入力が変更されたときにのみ再計算され、それ以外のレンダリングでは以前の値が使用されます。"
  },
  {
    "start": 12666980,
    "end": 12670788,
    "text": "こうすることで、レンダリングごとに計算する必要がなくなる。"
  },
  {
    "start": 12670964,
    "end": 12674400,
    "text": "さて、ここで検索ロジックを実装したい。"
  },
  {
    "start": 12675060,
    "end": 12687970,
    "text": "再度、この検索語の配列を作成し、入力を受け取り、各単語を個別に検索できるように、空白のスペースで分割する。"
  },
  {
    "start": 12688350,
    "end": 12692678,
    "text": "次に、この都市リストをフィルターにかける。"
  },
  {
    "start": 12692854,
    "end": 12700806,
    "text": "まず、都市名と国名、そして国名を結果の文字列にしたい。"
  },
  {
    "start": 12700918,
    "end": 12716020,
    "text": "ここでは、libフォルダーの中にある都市リストをインポートする必要がある。"
  },
  {
    "start": 12717960,
    "end": 12726980,
    "text": "先ほど説明したように、各都市のオブジェクトを文字列にマッピングしたい。"
  },
  {
    "start": 12727760,
    "end": 12746380,
    "text": "この文字列は、都市名をコンマで結び、次にサブカントリーを結び、さらにコンマで結び、都市ドットカントリーを結ぶ。"
  },
  {
    "start": 12747560,
    "end": 12761152,
    "text": "この3つの異なる値を1つの文字列にまとめ、オブジェクトの配列を文字列の配列にマップする。"
  },
  {
    "start": 12761216,
    "end": 12767980,
    "text": "セミコロンを削除し、代わりにフィルタを追加する。"
  },
  {
    "start": 12769160,
    "end": 12779432,
    "text": "ここでは、各ジディアを通過して、この値を配列に残したいかどうかによって、trueかfalseのブール値を返さなければならない。"
  },
  {
    "start": 12779576,
    "end": 12782808,
    "text": "よし、これが私が思いついた検索ロジックだ。"
  },
  {
    "start": 12782904,
    "end": 12794180,
    "text": "ジディアを小文字にして、大文字と小文字を区別しないようにしたい。"
  },
  {
    "start": 12795440,
    "end": 12800060,
    "text": "この場合の都市は、ここにマッピングした文字列である。"
  },
  {
    "start": 12800520,
    "end": 12805096,
    "text": "これは最初の検索語から始めるべきである。"
  },
  {
    "start": 12805248,
    "end": 12814208,
    "text": "インデックス・ゼロの検索語は小文字にする。"
  },
  {
    "start": 12814264,
    "end": 12822476,
    "text": "例えばberと入力すると、ベルリンなどの都市が表示され、ベルリンで始まる国は表示されない。"
  },
  {
    "start": 12822588,
    "end": 12825560,
    "text": "必要であれば、検索ロジックを変更することができる。"
  },
  {
    "start": 12825940,
    "end": 12828004,
    "text": "そして、2本の燠火とサインを加える。"
  },
  {
    "start": 12828132,
    "end": 12837640,
    "text": "国やサブカントリーのような他の単語でも検索できるようにするために、私たちは検索ワードを書く。"
  },
  {
    "start": 12838100,
    "end": 12850570,
    "text": "この関数に、各単語の右矢印の都市ドットを小文字に変換する関数を渡す。"
  },
  {
    "start": 12851590,
    "end": 12863022,
    "text": "ここでは、wordのドットを小文字に変換し、wordは検索語の配列に含まれるすべての単語である。"
  },
  {
    "start": 12863126,
    "end": 12870400,
    "text": "このようにして、基本的に検索ワードが都市文字列のどこかに含まれているかどうかをチェックする。"
  },
  {
    "start": 12870590,
    "end": 12873440,
    "text": "国名、準国名、国名のどこでも。"
  },
  {
    "start": 12874980,
    "end": 12878892,
    "text": "最後に、最大でも5つの値しか返したくない。"
  },
  {
    "start": 12878956,
    "end": 12888372,
    "text": "このセミコロン・エントリーを削除し、ドット・スライスを追加する。"
  },
  {
    "start": 12888556,
    "end": 12894520,
    "text": "インデックス0から始まる新しい配列を作成するが、最大でも5要素しかない。"
  },
  {
    "start": 12894900,
    "end": 12897292,
    "text": "これが検索ロジックだ。"
  },
  {
    "start": 12897476,
    "end": 12906316,
    "text": "これもuseメモにラップしたので、CPUサイクルを節約するために、位置検索の入力が変更されたときだけ実行される。"
  },
  {
    "start": 12906508,
    "end": 12915280,
    "text": "さて、これが機能することを確認するために、この入力をこのようにdivで囲んでみよう。"
  },
  {
    "start": 12918460,
    "end": 12924250,
    "text": "次に、入力の下に、検索結果をdivの中にレンダリングします。"
  },
  {
    "start": 12924790,
    "end": 12932690,
    "text": "とりあえず、シンプルにするために、JSONをドット文字列化した都市をレンダリングしてみよう。"
  },
  {
    "start": 12933150,
    "end": 12940850,
    "text": "この入力フィールドに入力したものはすべて、このロケーション入力に保存されるようにリアクトに伝えなければならない。"
  },
  {
    "start": 12941230,
    "end": 12943130,
    "text": "これを小道具として加える。"
  },
  {
    "start": 12944430,
    "end": 12952740,
    "text": "これは、on changeハンドラを追加することで行う。"
  },
  {
    "start": 12953360,
    "end": 12963500,
    "text": "そこで、この入力をロケーション検索インポートに設定したい。"
  },
  {
    "start": 12964680,
    "end": 12971728,
    "text": "また、この入力フィールドの値を、現在の位置検索入力に設定したい。"
  },
  {
    "start": 12971784,
    "end": 12972580,
    "text": "こんな感じだ。"
  },
  {
    "start": 12973440,
    "end": 12978494,
    "text": "ここで検索すると、すでに検索結果のリストが表示される。"
  },
  {
    "start": 12978622,
    "end": 12979878,
    "text": "クールだろ？"
  },
  {
    "start": 12980054,
    "end": 12983006,
    "text": "ドイツのベルリンを試してみよう。"
  },
  {
    "start": 12983078,
    "end": 12984110,
    "text": "これだ。"
  },
  {
    "start": 12984270,
    "end": 12986814,
    "text": "あとはこれを適切にレンダリングするだけだ。"
  },
  {
    "start": 12986982,
    "end": 12993090,
    "text": "この差分を削除し、代わりに式を追加する。"
  },
  {
    "start": 12993910,
    "end": 13001972,
    "text": "位置検索の入力が実際に何かを含んでいることをチェックしたい。"
  },
  {
    "start": 13002166,
    "end": 13005780,
    "text": "この値を再度トリミングして空白を取り除く。"
  },
  {
    "start": 13006400,
    "end": 13009008,
    "text": "このような値があることを確認する。"
  },
  {
    "start": 13009064,
    "end": 13010880,
    "text": "価値があれば、それは本当の料金だ。"
  },
  {
    "start": 13011000,
    "end": 13018740,
    "text": "もしそうなら、結果を含むdiffをレンダリングしますよね？"
  },
  {
    "start": 13020840,
    "end": 13028904,
    "text": "まず第一に、もし結果がなければ、エクスクラメーションマークでチェックすることができる。"
  },
  {
    "start": 13029102,
    "end": 13039200,
    "text": "もしlengthがゼロか未定義なら、結果は見つかりませんでしたという段落を表示したい。"
  },
  {
    "start": 13041020,
    "end": 13043948,
    "text": "また、これを少しスタイリングしたい。"
  },
  {
    "start": 13044084,
    "end": 13046520,
    "text": "これは3点満点だ。"
  },
  {
    "start": 13048220,
    "end": 13052880,
    "text": "結果があれば、それをリスト項目にマッピングしたい。"
  },
  {
    "start": 13053460,
    "end": 13058422,
    "text": "以下に、cities dot mapと呼ぶ別の式を追加する。"
  },
  {
    "start": 13058606,
    "end": 13067850,
    "text": "各都市を通り過ぎたが、citiesは文字列配列なので、cityは文字列になった。"
  },
  {
    "start": 13068310,
    "end": 13073854,
    "text": "各都市の文字列を受け取り、単純なリスト項目をレンダリングしたい。"
  },
  {
    "start": 13073982,
    "end": 13082586,
    "text": "リスト項目をクリックすると、onlocation selectedコールバックが呼び出されます。"
  },
  {
    "start": 13082718,
    "end": 13084594,
    "text": "これはボタンで行う。"
  },
  {
    "start": 13084722,
    "end": 13090658,
    "text": "今回は小文字の \"be a button \"である。なぜなら、主要なボタン・スタイリングは必要ないからだ。"
  },
  {
    "start": 13090754,
    "end": 13093514,
    "text": "全くスタイルのないボタンが欲しい。"
  },
  {
    "start": 13093682,
    "end": 13099350,
    "text": "ボタンの内容は都市名となる。"
  },
  {
    "start": 13100930,
    "end": 13105150,
    "text": "リストをマッピングするのだから、もちろんキーが必要だ。"
  },
  {
    "start": 13105690,
    "end": 13106914,
    "text": "何が出たか見てみよう。"
  },
  {
    "start": 13106962,
    "end": 13108388,
    "text": "さて、これを保存する。"
  },
  {
    "start": 13108514,
    "end": 13112480,
    "text": "ええ、ボタンができましたが、まだ真下にレンダリングされています。"
  },
  {
    "start": 13112560,
    "end": 13114488,
    "text": "ポップアップにしてほしい。"
  },
  {
    "start": 13114624,
    "end": 13126352,
    "text": "そのために、入力を包む外側のdivと内側のdivにrelativeというクラス名を追加し、子要素を相対的に配置できるようにします。"
  },
  {
    "start": 13126536,
    "end": 13133990,
    "text": "次に、この結果のdivに行き、絶対配置のためにクラス名absoluteを追加する。"
  },
  {
    "start": 13134160,
    "end": 13138538,
    "text": "これを保存すると、残りのコンテンツの上に表示されているのがわかるだろう。"
  },
  {
    "start": 13138714,
    "end": 13144310,
    "text": "では、これをポップアップ・メニューのようなスタイルにしたい。"
  },
  {
    "start": 13145290,
    "end": 13147190,
    "text": "これで背景色がついた。"
  },
  {
    "start": 13147690,
    "end": 13151722,
    "text": "シャドーXLという影をつけることもできる。"
  },
  {
    "start": 13151906,
    "end": 13154858,
    "text": "今はもう、ほとんどポップアップのように見える。"
  },
  {
    "start": 13154954,
    "end": 13159658,
    "text": "ボーダーも欲しいが、上部ではなく、左右と下部だけだ。"
  },
  {
    "start": 13159714,
    "end": 13166902,
    "text": "横軸のボーダーxと下部のボーダーを追加しているが、上部には何もない。"
  },
  {
    "start": 13167086,
    "end": 13176090,
    "text": "同様に、私は角を丸くしたいが、それはBLGで丸くすることができる下部だけである。"
  },
  {
    "start": 13176710,
    "end": 13179530,
    "text": "これで下の角だけが丸くなった。"
  },
  {
    "start": 13179950,
    "end": 13188544,
    "text": "また、Zインデックスを20にすることで、常に他の要素の上に表示されるようにしたい。"
  },
  {
    "start": 13188702,
    "end": 13198468,
    "text": "このc 20クラスでこれを行い、次に、単品アイテムの間に縦の仕切りを追加するdivide yを追加したい。"
  },
  {
    "start": 13198564,
    "end": 13201436,
    "text": "それが、ここに見える小さな仕切り線だ。"
  },
  {
    "start": 13201588,
    "end": 13206396,
    "text": "各リスト項目はそれぞれの行にあるべきですよね？"
  },
  {
    "start": 13206588,
    "end": 13209160,
    "text": "ボタンのスタイルも変えなければならない。"
  },
  {
    "start": 13209780,
    "end": 13213818,
    "text": "ブロックの場合、それぞれのブロックが1行を占める。"
  },
  {
    "start": 13214004,
    "end": 13220170,
    "text": "また、divラッパーとボタンの両方にwidth fullクラスを追加します。"
  },
  {
    "start": 13220550,
    "end": 13223030,
    "text": "これは利用可能な幅を占有する。"
  },
  {
    "start": 13223150,
    "end": 13229210,
    "text": "左側にテキストを表示したい。"
  },
  {
    "start": 13230070,
    "end": 13232902,
    "text": "また、ここで若干の水増しをしたい。"
  },
  {
    "start": 13233086,
    "end": 13234450,
    "text": "ツアーの水増し。"
  },
  {
    "start": 13234870,
    "end": 13237694,
    "text": "これはもうかなりいい感じだと思う。"
  },
  {
    "start": 13237862,
    "end": 13243060,
    "text": "これが検索フィールドで、検索結果が見つかりませんというテキストが表示されます。"
  },
  {
    "start": 13245000,
    "end": 13245496,
    "text": "オーケー。"
  },
  {
    "start": 13245528,
    "end": 13249952,
    "text": "独自の検索入力フィールドを簡単に構築できるのは、とてもクールだと思う。"
  },
  {
    "start": 13250056,
    "end": 13252620,
    "text": "まだ少し微調整したいところがある。"
  },
  {
    "start": 13253000,
    "end": 13259056,
    "text": "まず、ジディアを検索したときのデフォルトのプレースホルダーを設定したい。"
  },
  {
    "start": 13259248,
    "end": 13264432,
    "text": "ここでプロップを広げたのだから、必要なら外から上書きすることもできる。"
  },
  {
    "start": 13264576,
    "end": 13272510,
    "text": "この値の後に小道具を広げているので、外部からプレースホルダーを渡してもそれらが優先される。"
  },
  {
    "start": 13272970,
    "end": 13277242,
    "text": "この入力フィールドのタイプを検索に設定することもできる。"
  },
  {
    "start": 13277426,
    "end": 13281710,
    "text": "この小さな×印が入力をクリアする。"
  },
  {
    "start": 13282770,
    "end": 13284202,
    "text": "もうひとつある。"
  },
  {
    "start": 13284346,
    "end": 13289738,
    "text": "検索結果が表示された後、別の場所をクリックしても、検索結果は表示されたままになる。"
  },
  {
    "start": 13289834,
    "end": 13293494,
    "text": "私たちは、この入力フィールドが実際にフォーカスされているときだけ、それらを表示したい。"
  },
  {
    "start": 13293602,
    "end": 13296166,
    "text": "そのために、ある状態でフォーカスを管理することができる。"
  },
  {
    "start": 13296278,
    "end": 13309050,
    "text": "ここでは、has focusという別のステートを作成し、has focusを設定する。"
  },
  {
    "start": 13309870,
    "end": 13318770,
    "text": "次に、この入力フィールドの下、on change propの下に、on focusを追加します。"
  },
  {
    "start": 13319920,
    "end": 13324500,
    "text": "これが呼ばれると、z has focusがtrueに設定される。"
  },
  {
    "start": 13325320,
    "end": 13328380,
    "text": "これは、この入力フィールドにフォーカスを当てたときにトリガーされる。"
  },
  {
    "start": 13330080,
    "end": 13335248,
    "text": "その逆は、この入力フィールドのフォーカスを外したときに呼び出されるblurである。"
  },
  {
    "start": 13335304,
    "end": 13342140,
    "text": "フォーカスを外したら、フォーカスをfalseに戻したい。"
  },
  {
    "start": 13342760,
    "end": 13345700,
    "text": "そして、その結果をここに示したい。"
  },
  {
    "start": 13346290,
    "end": 13349910,
    "text": "has focusがtrueの場合のみ。"
  },
  {
    "start": 13350370,
    "end": 13354050,
    "text": "今は他の場所をクリックすると消えてしまう。"
  },
  {
    "start": 13354090,
    "end": 13356554,
    "text": "もう一度クリックすると、そこにある。"
  },
  {
    "start": 13356682,
    "end": 13357898,
    "text": "クールだろ？"
  },
  {
    "start": 13358074,
    "end": 13362346,
    "text": "あとはこの検索結果のクリックを処理するだけだ。"
  },
  {
    "start": 13362538,
    "end": 13365906,
    "text": "その場所で選択したコールバックを呼び出したい。"
  },
  {
    "start": 13366098,
    "end": 13371390,
    "text": "そのためにはもちろん、この下にあるリスト項目のボタンにクリック・ハンドラが必要だ。"
  },
  {
    "start": 13371850,
    "end": 13377670,
    "text": "私たちはonclickを使わず、代わりにon mouse downを使っています。"
  },
  {
    "start": 13378010,
    "end": 13378586,
    "text": "なぜですか？"
  },
  {
    "start": 13378698,
    "end": 13384442,
    "text": "なぜなら、onclickを使うと、クリックされる前にフォーカスを失ってしまうからだ。"
  },
  {
    "start": 13384586,
    "end": 13389690,
    "text": "フォーカスを失うと、結果を削除してしまい、クリックしても機能しなくなるからだ。"
  },
  {
    "start": 13389810,
    "end": 13395842,
    "text": "オンマウス・ダウンは、フォーカスを失う少し前にトリガーされる。"
  },
  {
    "start": 13395986,
    "end": 13398110,
    "text": "またしてもこの出来事を乗り越えてしまった。"
  },
  {
    "start": 13399410,
    "end": 13403066,
    "text": "この出来事に対して、e prevent defaultと呼ぶ。"
  },
  {
    "start": 13403258,
    "end": 13405590,
    "text": "そうすることで、集中力を切らさないようにするのだ。"
  },
  {
    "start": 13406370,
    "end": 13416550,
    "text": "そして、選択された場所でコールバックをトリガーしたい。このコールバックには、このボタンをマッピングした都市を渡す。"
  },
  {
    "start": 13417450,
    "end": 13422070,
    "text": "その場合、ロケーション検索入力に再び空文字列を設定したい。"
  },
  {
    "start": 13422930,
    "end": 13426450,
    "text": "何かをクリックすると、入力フィールドは空になる。"
  },
  {
    "start": 13427070,
    "end": 13430730,
    "text": "この入力フィールドの下に選択した都市を表示したい。"
  },
  {
    "start": 13431550,
    "end": 13434998,
    "text": "ああ、でもここでの位置検索入力は終わっている。"
  },
  {
    "start": 13435094,
    "end": 13442094,
    "text": "また、これは再利用可能なコンポーネントであり、さまざまな場所やプロジェクトで使用することができる。"
  },
  {
    "start": 13442222,
    "end": 13448782,
    "text": "さて、新しい求人フォームでは、すでにreactフックフォームでロケーション入力を配線しています。"
  },
  {
    "start": 13448886,
    "end": 13457622,
    "text": "検索結果をクリックしてこのコールバックをトリガーすると、すぐにこの値をreactフックフォームに渡して、後でこの値を送信することができます。"
  },
  {
    "start": 13457766,
    "end": 13473290,
    "text": "この入力フィールドの下に、現在選択されている都市を表示させたいと言ったが、このウォッチ関数から入力の現在の値を取得することができる。"
  },
  {
    "start": 13473910,
    "end": 13484956,
    "text": "そして、フォーム・コントロールの下、フォーム・メッセージの上に式を書きましょう。"
  },
  {
    "start": 13484988,
    "end": 13488204,
    "text": "ロケの様子を見守りたい。"
  },
  {
    "start": 13488372,
    "end": 13492600,
    "text": "これは常にロケーションの最新値を含む。"
  },
  {
    "start": 13493100,
    "end": 13497636,
    "text": "ここに値があれば、この場所をレンダリングしたい。"
  },
  {
    "start": 13497708,
    "end": 13502420,
    "text": "実際に何かが選択されていることを示すために、それをスクリーンに表示したい。"
  },
  {
    "start": 13502580,
    "end": 13508836,
    "text": "とりあえず、このウォッチ関数から得られる値そのものをレンダリングしてみよう。"
  },
  {
    "start": 13508988,
    "end": 13515320,
    "text": "このスタイルについては後ほど説明するが、ここではすでにベルリンを選択したときにどのように機能するかを見ていただきたい。"
  },
  {
    "start": 13515820,
    "end": 13524200,
    "text": "Berlinがここに書かれているのは、現在reactのフックフォームcupertinoの中に保存されている値だからです。"
  },
  {
    "start": 13524620,
    "end": 13525572,
    "text": "これは効く。"
  },
  {
    "start": 13525676,
    "end": 13532052,
    "text": "そして、この値を削除できるように、その横に削除ボタンを追加したい。"
  },
  {
    "start": 13532196,
    "end": 13536950,
    "text": "ここでただ見るのではなく、divをレンダリングしたい。"
  },
  {
    "start": 13538890,
    "end": 13545870,
    "text": "このdivはフレックス・アイテム・センターで、ギャップは1です。"
  },
  {
    "start": 13548010,
    "end": 13550850,
    "text": "ここではまず、小文字のボタンを置く。"
  },
  {
    "start": 13550970,
    "end": 13558242,
    "text": "デフォルトのボタン・スタイルにしたくないので、このボタンのタイプをボタンに設定する。"
  },
  {
    "start": 13558386,
    "end": 13567798,
    "text": "なぜなら、私たちはフォームの中にいるので、このタイプを設定しないと、ブラウザはこれを送信ボタンだと思い、フォームを送信しようとするからです。"
  },
  {
    "start": 13567894,
    "end": 13569046,
    "text": "こんなことは望んでいない。"
  },
  {
    "start": 13569158,
    "end": 13581570,
    "text": "これは通常のボタンで、これらのボタンタグの中に、lusit reactからZeiss 20で送られてきたxアイコンをレンダリングしています。"
  },
  {
    "start": 13582190,
    "end": 13585350,
    "text": "このボタンの隣にある。"
  },
  {
    "start": 13585470,
    "end": 13597330,
    "text": "このフレックスdivの内部では、もちろん都市名をレンダリングしたいので、テキストを少し小さくするために、これをspan with text smで囲みます。"
  },
  {
    "start": 13597870,
    "end": 13601730,
    "text": "ここで、ウォッチ・ロケーションと呼びたい。"
  },
  {
    "start": 13602630,
    "end": 13604370,
    "text": "ここには2つのレンダラーがある。"
  },
  {
    "start": 13604990,
    "end": 13612330,
    "text": "もちろん、ボタンにはクリック・ハンドラも必要で、そのハンドラにarrow関数を渡す。"
  },
  {
    "start": 13612710,
    "end": 13624820,
    "text": "このボタンをクリックすると、現在選択されている場所を削除することができる。"
  },
  {
    "start": 13625120,
    "end": 13628400,
    "text": "これらはすべてリアクトフックフォームに属する機能である。"
  },
  {
    "start": 13628520,
    "end": 13632240,
    "text": "この関数の最初の引数は、変更したいフィールドである。"
  },
  {
    "start": 13632400,
    "end": 13636064,
    "text": "番目の引数は、設定したい値である。"
  },
  {
    "start": 13636112,
    "end": 13641100,
    "text": "第3引数はコンフィギュレーション。"
  },
  {
    "start": 13641520,
    "end": 13649690,
    "text": "ここでshould validateを渡し、これをtrueに設定することで、このロケーションフィールドのバリデーションが再度実行されるようにすることができる。"
  },
  {
    "start": 13649810,
    "end": 13658630,
    "text": "もし、ロケーションを削除しても、オンサイトが選択されていれば、オンサイトのジョブにはロケーションが必要であるというエラーメッセージが表示されます。"
  },
  {
    "start": 13659010,
    "end": 13661546,
    "text": "よし、試してみよう。"
  },
  {
    "start": 13661698,
    "end": 13667790,
    "text": "これをクリックすれば、その都市は削除される。"
  },
  {
    "start": 13668530,
    "end": 13669310,
    "text": "クールだ。"
  },
  {
    "start": 13669740,
    "end": 13678396,
    "text": "しかし、応募メール、応募URL、給与、そして説明エディター用の入力フィールドがまだ必要です。"
  },
  {
    "start": 13678548,
    "end": 13686380,
    "text": "さて、このフォーム項目の下に、次の項目、応募メールと応募URLを入れます。"
  },
  {
    "start": 13686460,
    "end": 13693680,
    "text": "横並びにしたいし、その上に1つのラベルをつけたいので、これはちょっと違うレイアウトになる。"
  },
  {
    "start": 13694060,
    "end": 13698370,
    "text": "フォーム・アイテムではなく、divにラップします。"
  },
  {
    "start": 13699470,
    "end": 13709638,
    "text": "ここでは、クラス名スペースのyツールを垂直方向の間隔に設定し、上部にcomponentsフォルダからラベルを追加します。"
  },
  {
    "start": 13709734,
    "end": 13719490,
    "text": "フォーム・ラベルではなく、通常のラベルです。なぜなら、このラベルはフォーム・アイテムの中に入れないので、HTMLの4つのプロップが自動的に設定されないからです。"
  },
  {
    "start": 13720030,
    "end": 13726870,
    "text": "そのかわり、Eメール・フィールドに接続するために、アプリケーション・メールに設定しなければならない。"
  },
  {
    "start": 13727410,
    "end": 13729430,
    "text": "これには申請方法が書かれている。"
  },
  {
    "start": 13730970,
    "end": 13737066,
    "text": "この下に別のdivを置き、ここに実際のフォーム・フィールドを置く。"
  },
  {
    "start": 13737258,
    "end": 13740650,
    "text": "フォームフィールドコントロール。"
  },
  {
    "start": 13740810,
    "end": 13742510,
    "text": "私たちはもうドリルを知っている。"
  },
  {
    "start": 13743730,
    "end": 13746390,
    "text": "こちらは申し込みメール。"
  },
  {
    "start": 13747090,
    "end": 13759780,
    "text": "ここでもレンダー関数があり、フィールドを再構築してコンポーネントを返す。"
  },
  {
    "start": 13760760,
    "end": 13770860,
    "text": "フォーム・アイテムの中に、前と同じようにフォーム・コントロールを入れる。"
  },
  {
    "start": 13771800,
    "end": 13774820,
    "text": "ここにEメールの入力を入れる。"
  },
  {
    "start": 13776130,
    "end": 13781738,
    "text": "今回はidをラベルにつなげたいので、自分でidを設定する。"
  },
  {
    "start": 13781874,
    "end": 13785570,
    "text": "HTMLの4つの属性と同じidを設定します。"
  },
  {
    "start": 13785690,
    "end": 13794270,
    "text": "今回も、ラベルはフォーム・コントロールの外側にあるため、自動的に設定されないので、これは必要である。"
  },
  {
    "start": 13794810,
    "end": 13797070,
    "text": "プレースホルダーにはEメールと表示されます。"
  },
  {
    "start": 13798050,
    "end": 13806948,
    "text": "入力フィールドのタイプをEメールに設定し、他の入力フィールドと同じようにフィールドの値を広げる。"
  },
  {
    "start": 13807124,
    "end": 13810428,
    "text": "えーと、下にあります。"
  },
  {
    "start": 13810564,
    "end": 13814668,
    "text": "さらにこのdivの中に、別のフォーム・フィールドを置きたい。"
  },
  {
    "start": 13814764,
    "end": 13816440,
    "text": "これを複製しよう。"
  },
  {
    "start": 13817900,
    "end": 13821360,
    "text": "これはもちろん、アプリケーションのURLである。"
  },
  {
    "start": 13822420,
    "end": 13827040,
    "text": "今回はラベルがないので、IDは必要ない。"
  },
  {
    "start": 13827720,
    "end": 13834460,
    "text": "の場合、プレースホルダーはURLとなり、タイプもURLとなる。"
  },
  {
    "start": 13834800,
    "end": 13836936,
    "text": "これで縦に並んだ。"
  },
  {
    "start": 13837088,
    "end": 13839424,
    "text": "水平に並べたい。"
  },
  {
    "start": 13839592,
    "end": 13849460,
    "text": "このため、ラベルの下にこの差分ラッパーを置き、フレックスボックスと両端揃えにリセットしている。"
  },
  {
    "start": 13849920,
    "end": 13857330,
    "text": "これらの要素は、左側と右側に配置され、それぞれが利用可能なスペースを占めるようになる。"
  },
  {
    "start": 13857450,
    "end": 13869030,
    "text": "各フォーム・アイテムにクラスを設定し、これを成長させるように設定し、同じようにフォーム・アイテムを成長させていく。"
  },
  {
    "start": 13869570,
    "end": 13871826,
    "text": "今、彼らは利用可能な幅を占めている。"
  },
  {
    "start": 13871978,
    "end": 13882226,
    "text": "この2つの間にテキストとしてorを入れたいのですが、整列のためには、このテキストをこの2つの間に入れない方が簡単です。"
  },
  {
    "start": 13882378,
    "end": 13887522,
    "text": "その代わりに、このEメール入力フィールドと一緒にしたい。"
  },
  {
    "start": 13887706,
    "end": 13891950,
    "text": "アプリケーション・メールのフォーム・コントロールの中に入る。"
  },
  {
    "start": 13892690,
    "end": 13897790,
    "text": "これを次のように別のdivにまとめる。"
  },
  {
    "start": 13899290,
    "end": 13907350,
    "text": "その隣には、水平マージンであるmx 2のスパンを置く。"
  },
  {
    "start": 13908370,
    "end": 13914750,
    "text": "先ほど作成したdivにflexとitem centerを追加します。"
  },
  {
    "start": 13915090,
    "end": 13921562,
    "text": "今、テキストはツアーの真ん中にあり、またそれぞれにエラーメッセージが必要ですよね？"
  },
  {
    "start": 13921746,
    "end": 13930470,
    "text": "フォーム・コントロールの下には、フォーム・メッセージと同じものを置く。"
  },
  {
    "start": 13932020,
    "end": 13938160,
    "text": "また、プレースホルダーにURLではなくウェブサイトと表示させたい。"
  },
  {
    "start": 13939060,
    "end": 13947396,
    "text": "なぜなら、Eメールはウェブサイトを提供しない場合にのみ必要だからです。"
  },
  {
    "start": 13947548,
    "end": 13970966,
    "text": "つまり、emailを入力する必要があるというエラーメッセージが表示されているにもかかわらず、websiteフィールドに何かを入力した場合、emailフィールドを再度検証し、有効なwebsiteがあればエラーメッセージを削除したい。"
  },
  {
    "start": 13971078,
    "end": 13975766,
    "text": "そのためには、ここでonchangeイベントを上書きして、再び自分たちで処理すればいい。"
  },
  {
    "start": 13975878,
    "end": 13981558,
    "text": "もし本当にダイナミックな検証を望むなら、このようなロジックは自分で書かなければならない。"
  },
  {
    "start": 13981694,
    "end": 13985610,
    "text": "いつものように、ここでonchangeイベントをやり過ごす。"
  },
  {
    "start": 13986200,
    "end": 13997592,
    "text": "変更時にフィールド・ドットを呼び出す関数を通常通り実行したいので、以前と同じ動作になるが、バリデーションもトリガーしたい。"
  },
  {
    "start": 13997776,
    "end": 14003656,
    "text": "そのための特別な関数がある。"
  },
  {
    "start": 14003688,
    "end": 14006820,
    "text": "特定のフィールドの検証をトリガーすることができる。"
  },
  {
    "start": 14007520,
    "end": 14010460,
    "text": "Eメール・フィールドのバリデーションを行いたい。"
  },
  {
    "start": 14010800,
    "end": 14015054,
    "text": "これがどのように機能するかは、後で送信ボタンを設置したときに見てみよう。"
  },
  {
    "start": 14015232,
    "end": 14023170,
    "text": "そして、このリアクトドラフトを使用する説明文用のリッチテキストエディタを下に配置します。"
  },
  {
    "start": 14023210,
    "end": 14026354,
    "text": "先にインストールしたコンポーネントは、ご覧のとおりです。"
  },
  {
    "start": 14026482,
    "end": 14029670,
    "text": "リッチテキストエディタで、とてもカスタマイズしやすい。"
  },
  {
    "start": 14030090,
    "end": 14031442,
    "text": "これは気に入った。"
  },
  {
    "start": 14031546,
    "end": 14036750,
    "text": "繰り返しになるが、整理整頓と再利用性のために、これを別のコンポーネントに入れるべきだ。"
  },
  {
    "start": 14037490,
    "end": 14042910,
    "text": "リッチ・テキスト・エディターと呼ぶコンポーネントを作ろう。"
  },
  {
    "start": 14044930,
    "end": 14051618,
    "text": "このエディターはクライアント上でのみ動作するため、これもクライアント・コンポーネントとなる。"
  },
  {
    "start": 14051754,
    "end": 14054226,
    "text": "審判が必要だ"
  },
  {
    "start": 14054418,
    "end": 14058630,
    "text": "エクスポート・デフォルト・フォワード・レフを書こう。"
  },
  {
    "start": 14059890,
    "end": 14062658,
    "text": "ここでもタイプを定義しなければならない。"
  },
  {
    "start": 14062834,
    "end": 14068370,
    "text": "refの型は、今回はobjectである。"
  },
  {
    "start": 14068450,
    "end": 14070210,
    "text": "あなたが見たものが、あなたが得たものです。"
  },
  {
    "start": 14070330,
    "end": 14071990,
    "text": "これは私の管理下にはない。"
  },
  {
    "start": 14072930,
    "end": 14079190,
    "text": "小道具のタイプはeditor propsで、このパッケージからのインポートです。"
  },
  {
    "start": 14079810,
    "end": 14082738,
    "text": "それがこの編集者が受け入れる小道具だ。"
  },
  {
    "start": 14082834,
    "end": 14086330,
    "text": "このコンポーネントにも同じプロップを渡せるようにしたい。"
  },
  {
    "start": 14086410,
    "end": 14087030,
    "text": "そうだね。"
  },
  {
    "start": 14087850,
    "end": 14097612,
    "text": "リッチテキストエディタの括弧で囲まれた同じ名前の関数、forward ref passを呼び出す。"
  },
  {
    "start": 14097716,
    "end": 14101760,
    "text": "ここでは、いつものように小道具と審判を手に入れる。"
  },
  {
    "start": 14102220,
    "end": 14106764,
    "text": "そして、この2つの括弧の間にファンクション・ブロックを追加する。"
  },
  {
    "start": 14106892,
    "end": 14110840,
    "text": "このように、外側に括弧が1つ残っている。"
  },
  {
    "start": 14111380,
    "end": 14115880,
    "text": "オーケー、でもこれはロケーション入力ほど複雑にはならないだろう。"
  },
  {
    "start": 14116780,
    "end": 14121560,
    "text": "ここでは、React draftからのインポートであるエディタを返す。"
  },
  {
    "start": 14122070,
    "end": 14126370,
    "text": "そこに小道具を敷き詰めて塗る。"
  },
  {
    "start": 14126990,
    "end": 14129890,
    "text": "では、これを少しカスタマイズしてみよう。"
  },
  {
    "start": 14130390,
    "end": 14135790,
    "text": "カスタマイズする前に、とりあえず保存してUIに入れよう。"
  },
  {
    "start": 14135950,
    "end": 14142290,
    "text": "ここで注意しなければならないのは、アプリケーション・フィールドの差分ラッパーがあることだ。"
  },
  {
    "start": 14143070,
    "end": 14148860,
    "text": "フォームを閉じるタグの上に、別のフォーム・フィールドを置く。"
  },
  {
    "start": 14149030,
    "end": 14151952,
    "text": "心配しないで、すぐにここのフォームは完成する。"
  },
  {
    "start": 14152136,
    "end": 14154900,
    "text": "このアプリ全体の中で最も複雑な部分だ。"
  },
  {
    "start": 14155320,
    "end": 14160424,
    "text": "ここでもコントロールを渡す。"
  },
  {
    "start": 14160592,
    "end": 14173100,
    "text": "もう一度、フォーム・フィールドをレンダリングして、ここで閉じます。"
  },
  {
    "start": 14174650,
    "end": 14177230,
    "text": "ここでもフォーム・アイテムを置く。"
  },
  {
    "start": 14178410,
    "end": 14186338,
    "text": "フォーム・ラベルはid属性を持っていないので、このエディターでは使えないからです。"
  },
  {
    "start": 14186434,
    "end": 14188170,
    "text": "その代わりに、ラベルを処理しなければならない。"
  },
  {
    "start": 14188210,
    "end": 14189750,
    "text": "自分たちは後でクリックする。"
  },
  {
    "start": 14190210,
    "end": 14195550,
    "text": "とりあえず、ここに説明というラベルを貼るだけだ。"
  },
  {
    "start": 14196530,
    "end": 14199030,
    "text": "その下にフォーム・コントロールを置く。"
  },
  {
    "start": 14200540,
    "end": 14207760,
    "text": "ここにリッチ・テキスト・エディターを置く。"
  },
  {
    "start": 14209260,
    "end": 14210628,
    "text": "オーケー、ちょっと奇妙に見えるね。"
  },
  {
    "start": 14210684,
    "end": 14212196,
    "text": "すぐに修正します。"
  },
  {
    "start": 14212268,
    "end": 14218920,
    "text": "忘れないうちに、フォーム・コントロールの下にフォーム・メッセージも追加しておこう。"
  },
  {
    "start": 14219620,
    "end": 14222324,
    "text": "では、リッチテキストエディタに戻ってみよう。"
  },
  {
    "start": 14222492,
    "end": 14226800,
    "text": "このように見えるのは、CSSを追加していないからだ。"
  },
  {
    "start": 14227450,
    "end": 14233510,
    "text": "これは、このライブラリに付属しているCSSで、リッチテキストエディタのファイルに追加する必要があります。"
  },
  {
    "start": 14234090,
    "end": 14236842,
    "text": "これを手書きで入力し、保存する。"
  },
  {
    "start": 14236986,
    "end": 14239578,
    "text": "これでスタイリングは完璧だ。"
  },
  {
    "start": 14239754,
    "end": 14246150,
    "text": "このライブラリーのドキュメントに説明がある。"
  },
  {
    "start": 14246650,
    "end": 14248586,
    "text": "すべて私が準備した。"
  },
  {
    "start": 14248738,
    "end": 14253030,
    "text": "まず、エディタ・クラス名でエディタをスタイルすることができる。"
  },
  {
    "start": 14253910,
    "end": 14261650,
    "text": "ここではCND関数を呼び出して、デフォルトのスタイルを適用しつつ、外部からのスタイルを受け渡せるようにする。"
  },
  {
    "start": 14262150,
    "end": 14270022,
    "text": "ここではカンマ文字列を渡し、第2引数にはpropsエディタクラス名を指定します。"
  },
  {
    "start": 14270166,
    "end": 14275370,
    "text": "これはエディタプロップスを通して外部から渡されるエディタクラス名です。"
  },
  {
    "start": 14275990,
    "end": 14282596,
    "text": "この最初の文字列には、デフォルトのスタイルを設定する。"
  },
  {
    "start": 14282708,
    "end": 14286252,
    "text": "今のところ、これはまったくスタイルがなく、ボーダーさえない。"
  },
  {
    "start": 14286396,
    "end": 14301300,
    "text": "このボーダーの丸みを帯びたMDを処理しよう。ここでは自動補完が得られないので、ちょっと厄介なことになる。おそらくこのプロップの名前のせいだと思うが、よくわからない。"
  },
  {
    "start": 14301340,
    "end": 14306702,
    "text": "パディングのためにpxマイナス3は手で綴らなければならない。"
  },
  {
    "start": 14306876,
    "end": 14308790,
    "text": "今、すでに良くなっているように見える。"
  },
  {
    "start": 14310610,
    "end": 14318186,
    "text": "このエディタに最小の高さを与えたいのですが、ハードコードで150ピクセルにしました。"
  },
  {
    "start": 14318378,
    "end": 14325050,
    "text": "大きくなることはあっても、小さくなることはない。"
  },
  {
    "start": 14325210,
    "end": 14338612,
    "text": "このカーソルの上にカーソルを置くと、カーソルのアイコンは上だけで、下には普通のカーソルがあることがわかる。"
  },
  {
    "start": 14338796,
    "end": 14343720,
    "text": "カーソル・テキスト・クラスを追加することでこれを解決できる。"
  },
  {
    "start": 14344020,
    "end": 14349012,
    "text": "これで、この入力フィールドのどこにカーソルを置いても、テキスト・カーソルが表示されるようになった。"
  },
  {
    "start": 14349116,
    "end": 14355200,
    "text": "そして、他のフィールドにフォーカスを当てたときと同じリングを適用したい。"
  },
  {
    "start": 14355540,
    "end": 14372870,
    "text": "そのためには、リング・オフセット・マイナス・バックグラウンド、フォーカス・マイナス・インサイド・コロン・マイナス・アウトライン・マイナス・ノーといったクラスが必要だ。"
  },
  {
    "start": 14373890,
    "end": 14378670,
    "text": "そしてまた、コロンリング2の中に焦点を合わせる。"
  },
  {
    "start": 14379930,
    "end": 14384538,
    "text": "再度、コロンリング・マイナスリング内にピントを合わせる。"
  },
  {
    "start": 14384634,
    "end": 14389334,
    "text": "残念ながら、このすべてを手動で追加しなければならない。"
  },
  {
    "start": 14389502,
    "end": 14398130,
    "text": "最後の1つは、コロンリングマイナスオフセットマイナス2以内のフォーカスである。"
  },
  {
    "start": 14398750,
    "end": 14401454,
    "text": "これらのクラスを追加しなければならない。"
  },
  {
    "start": 14401582,
    "end": 14408894,
    "text": "繰り返しになるが、手書きで入力したくない場合は、ビデオの説明にあるリポジトリを開き、そこからコピーすることもできる。"
  },
  {
    "start": 14409022,
    "end": 14413410,
    "text": "これで、もうひとつの入力フィールドと同じリングができた。"
  },
  {
    "start": 14413770,
    "end": 14416402,
    "text": "これは必要ではないが、見た目は良くなる。"
  },
  {
    "start": 14416586,
    "end": 14419874,
    "text": "ツールバーに表示するものもカスタマイズできる。"
  },
  {
    "start": 14419962,
    "end": 14427550,
    "text": "実際には、画像や絵文字、見出しなどは必要ないので、このようなものはほとんど見せたくない。"
  },
  {
    "start": 14428090,
    "end": 14434870,
    "text": "ツールバー・プロップに中括弧を渡すことでカスタマイズできる。"
  },
  {
    "start": 14435650,
    "end": 14437842,
    "text": "ここで設定することができる。"
  },
  {
    "start": 14438026,
    "end": 14442850,
    "text": "例えば、配列を期待するオプションを設定することができる。"
  },
  {
    "start": 14443310,
    "end": 14452982,
    "text": "ここでは、文字列、インライン・リスト、リンク、履歴を渡す。"
  },
  {
    "start": 14453086,
    "end": 14457806,
    "text": "これを保存すると、これらのオプションのいくつかは削除される。"
  },
  {
    "start": 14457918,
    "end": 14461490,
    "text": "この配列で定義したものだ。"
  },
  {
    "start": 14463590,
    "end": 14474200,
    "text": "数学のオプションも取り除きたいが、これはインラインの中括弧を渡すことで行う。"
  },
  {
    "start": 14474620,
    "end": 14478960,
    "text": "ここでもまた、これは文字列配列である。"
  },
  {
    "start": 14479340,
    "end": 14488100,
    "text": "太字、斜体、下線を許可し、その他のオプションはすべて削除したい。"
  },
  {
    "start": 14488260,
    "end": 14497130,
    "text": "太字のリスト、リンク、アンドゥとリドゥのボタン。"
  },
  {
    "start": 14497510,
    "end": 14499342,
    "text": "また、レフェリーを割り当てる必要がある。"
  },
  {
    "start": 14499446,
    "end": 14503398,
    "text": "ここにあるけれど、何もしていないことを忘れないでほしい。"
  },
  {
    "start": 14503534,
    "end": 14510526,
    "text": "通常はこのようにrefを割り当てるが、このエディターにはこのrefプロップがない。"
  },
  {
    "start": 14510718,
    "end": 14513358,
    "text": "その代わりに、このエディター・レフ・プロップがある。"
  },
  {
    "start": 14513494,
    "end": 14515294,
    "text": "これは少し違う。"
  },
  {
    "start": 14515342,
    "end": 14517374,
    "text": "審判にパスを出すわけにはいかない。"
  },
  {
    "start": 14517502,
    "end": 14523050,
    "text": "その代わり、これは基本的にrefを渡される関数である。"
  },
  {
    "start": 14523210,
    "end": 14528418,
    "text": "このようにエラー関数を作成し、このrefはobject型である。"
  },
  {
    "start": 14528594,
    "end": 14533498,
    "text": "だから、refのタイプもオブジェクトにした。"
  },
  {
    "start": 14533674,
    "end": 14538670,
    "text": "ということは、エディターのrefをここで渡すrefに代入する必要がある。"
  },
  {
    "start": 14539090,
    "end": 14546508,
    "text": "さて、このフォワード・リファレンス関数で渡されるフォワード・リファレンスは、実際には2つのタイプのどちらかを持つことができる。"
  },
  {
    "start": 14546604,
    "end": 14550196,
    "text": "オブジェクト参照か関数参照のどちらかである。"
  },
  {
    "start": 14550308,
    "end": 14565640,
    "text": "この2つの異なる型について詳しくはGoogleを参照してほしいが、私たちがしなければならないのは、このコンポーネントに渡すrefの型がfunction型かどうかをチェックすることだ。"
  },
  {
    "start": 14566780,
    "end": 14570760,
    "text": "それからref関数を呼び出し、このrefを渡す必要がある。"
  },
  {
    "start": 14571980,
    "end": 14586924,
    "text": "もしrefが定義されていて、それが関数でなければ、このカレント・フィールドを持つことになる。"
  },
  {
    "start": 14587092,
    "end": 14589520,
    "text": "機能でなければ、これだ。"
  },
  {
    "start": 14589900,
    "end": 14592160,
    "text": "とすると、rはこのように割り当てられる。"
  },
  {
    "start": 14592500,
    "end": 14601770,
    "text": "繰り返しになるが、コンポーネントに渡すこのrefは、関数かこのミュータブルrefオブジェクトのどちらかであり、両者を使い分けている。"
  },
  {
    "start": 14602190,
    "end": 14606830,
    "text": "呼び出さなければならない関数と、現在のフィールドを介して割り当てなければならないオブジェクト。"
  },
  {
    "start": 14606950,
    "end": 14608766,
    "text": "これが我々の仕事だ。"
  },
  {
    "start": 14608958,
    "end": 14614330,
    "text": "少し複雑だったが、これでリッチ・テキスト・エディターが完成した。"
  },
  {
    "start": 14615750,
    "end": 14624522,
    "text": "ここでスタイルを追加したり、キーボードショートカットをサポートしたり、下線を引いたり、太字にしたりすることもできる。"
  },
  {
    "start": 14624626,
    "end": 14625722,
    "text": "クールだろ？"
  },
  {
    "start": 14625866,
    "end": 14631430,
    "text": "この履歴もあるので、これは完全に機能している。"
  },
  {
    "start": 14631930,
    "end": 14634290,
    "text": "ただひとつ、ここで修正しなければならないことがある。"
  },
  {
    "start": 14634330,
    "end": 14646634,
    "text": "コンソールを見ると、このエラーメッセージのウィンドウが定義されていないことがわかります。これは、このエディタをサーバー上で次のjでレンダリングしようとするためですが、これはクライアント上でしか動作しません。"
  },
  {
    "start": 14646762,
    "end": 14649770,
    "text": "これを解決するには、別の方法でインポートしなければならない。"
  },
  {
    "start": 14649890,
    "end": 14661098,
    "text": "ここでは直接インポートしたが、ここではこれを削除し、代わりにダイナミック・インポートを使用する。"
  },
  {
    "start": 14661194,
    "end": 14663378,
    "text": "そうすれば、このエラーメッセージは表示されなくなる。"
  },
  {
    "start": 14663514,
    "end": 14664634,
    "text": "こんな感じだ。"
  },
  {
    "start": 14664682,
    "end": 14675030,
    "text": "次のj's right hereから来るダイナミックと呼ばれるインポートを置き換えるconstエディターを作成する。"
  },
  {
    "start": 14675420,
    "end": 14677160,
    "text": "これは機能だ。"
  },
  {
    "start": 14677940,
    "end": 14680560,
    "text": "この関数にアロー関数を渡す。"
  },
  {
    "start": 14680980,
    "end": 14686164,
    "text": "ここでは、react draftのパッケージ名をimportと呼ぶ。"
  },
  {
    "start": 14686252,
    "end": 14687920,
    "text": "見たままが得られるものだ。"
  },
  {
    "start": 14688260,
    "end": 14693844,
    "text": "エディターはデフォルトのエクスポートではないので、ドットを追加する必要がある。"
  },
  {
    "start": 14693892,
    "end": 14702080,
    "text": "これが解決した後、MODという変数が表示される。"
  },
  {
    "start": 14703340,
    "end": 14706040,
    "text": "ここにエディターがいる。"
  },
  {
    "start": 14707860,
    "end": 14713080,
    "text": "ここでも、エディターがデフォルトのエクスポートではないため、この部分が必要である。"
  },
  {
    "start": 14713420,
    "end": 14718932,
    "text": "このようにして、クライアント上だけで動的にエディタをインポートする。"
  },
  {
    "start": 14719116,
    "end": 14727000,
    "text": "ページを更新してもエラーメッセージが表示されるのは、ダイナミックにコンフィギュレーションを追加しなければならないからだ。"
  },
  {
    "start": 14727930,
    "end": 14734394,
    "text": "このエディターがサーバー上でレンダリングされるのを避けるために、SSRをfalseに設定しなければなりません。"
  },
  {
    "start": 14734562,
    "end": 14739834,
    "text": "これでリフレッシュしてもエラーメッセージは表示されなくなった。"
  },
  {
    "start": 14739922,
    "end": 14744938,
    "text": "ターミナルをクリアしてページを更新すると、エラーメッセージは消えている。"
  },
  {
    "start": 14745114,
    "end": 14749562,
    "text": "エディターの読み込みが少し遅れていることもわかるだろう。"
  },
  {
    "start": 14749746,
    "end": 14755590,
    "text": "これもまたクライアントでしか実行されないので避けることはできないが、これは必要なことだ。"
  },
  {
    "start": 14755710,
    "end": 14760862,
    "text": "これでこのエディターが完成したので、これをフォームに入れることができる。"
  },
  {
    "start": 14761046,
    "end": 14766730,
    "text": "ここでも、onchangeコールバックは完全に互換性があるわけではないので、自分たちで処理する。"
  },
  {
    "start": 14767470,
    "end": 14773050,
    "text": "Onchangeでは、このエディターからドラフト・オブジェクトを取得する。"
  },
  {
    "start": 14773590,
    "end": 14779450,
    "text": "これは変更プロップにあるものだが、ここでは生のドラフト・コンテンツの状態を受け取っている。"
  },
  {
    "start": 14779760,
    "end": 14787872,
    "text": "これはテキストでもマークダウンでもないが、データベースに保存したいものなので、マークダウンにする必要がある。"
  },
  {
    "start": 14788056,
    "end": 14793712,
    "text": "そのために、依存関係のあるマークダウン・ドラフトJ'sを別にインストールした。"
  },
  {
    "start": 14793896,
    "end": 14804272,
    "text": "このドラフト・オブジェクトをマークダウン・フォーマットに変換するには、ドラフトをマークダウンに渡す関数を呼び出します。"
  },
  {
    "start": 14804456,
    "end": 14810234,
    "text": "そして、このマークダウン文字列をreactフック・フォームに渡して、後で送信できるようにする。"
  },
  {
    "start": 14810402,
    "end": 14817470,
    "text": "変化以外にも、フィールド・ドット・レフェリーから得られるレフェリーが必要なんだ。"
  },
  {
    "start": 14818570,
    "end": 14824586,
    "text": "reactフック・フォームが自動的に入力フィールドにフォーカスを当てるようにするためです。"
  },
  {
    "start": 14824738,
    "end": 14834880,
    "text": "さて、先に説明したように、今回インストールしたエディタはid属性をサポートしていないので、少なくともHTMLの4つのプロップでは、ラベルをラベルに接続することはできません。"
  },
  {
    "start": 14834970,
    "end": 14839360,
    "text": "ラベルをクリックするとエディターが選択されるようにしたい。"
  },
  {
    "start": 14839780,
    "end": 14845308,
    "text": "最後の回避策は、ラベルのonclickイベントを自分で処理することです。"
  },
  {
    "start": 14845484,
    "end": 14849040,
    "text": "他に方法がないから、ここでこうする。"
  },
  {
    "start": 14849380,
    "end": 14854172,
    "text": "実際、このエディターはテキストエリアですらなく、普通のdivだ。"
  },
  {
    "start": 14854236,
    "end": 14859404,
    "text": "通常のdivは、入力フィールドと同じアクセシビリティ属性をサポートしていません。"
  },
  {
    "start": 14859532,
    "end": 14861320,
    "text": "我々はこれを回避することができる。"
  },
  {
    "start": 14862330,
    "end": 14870070,
    "text": "ここではZ focusと呼んでいるが、これもフォーム・オブジェクトから抽出した値である。"
  },
  {
    "start": 14870690,
    "end": 14877550,
    "text": "その名の通り、特定のフィールドにフォーカスを当てることができる。"
  },
  {
    "start": 14878250,
    "end": 14879330,
    "text": "試してみよう。"
  },
  {
    "start": 14879370,
    "end": 14882450,
    "text": "説明をクリックすると、入力フィールドがフォーカスされる。"
  },
  {
    "start": 14882610,
    "end": 14896320,
    "text": "もしrefを削除してページをリフレッシュし、もう一度これを試してみると、reactフックフォームはこの入力フィールドにフォーカスを当てるためにrefを必要とするため、フォーカスは機能しなくなる。"
  },
  {
    "start": 14896780,
    "end": 14899480,
    "text": "であれば、セットフォーカス機能を使うことができる。"
  },
  {
    "start": 14901140,
    "end": 14909240,
    "text": "私たちがここで設定した方法で、それは機能し、この入力フィールドに欠けているアイデアの良い代替となる。"
  },
  {
    "start": 14909660,
    "end": 14914164,
    "text": "さて、最後に必要な入力フィールドは給与である。"
  },
  {
    "start": 14914212,
    "end": 14914800,
    "text": "もう一度言う。"
  },
  {
    "start": 14915190,
    "end": 14929770,
    "text": "ここでも、既存のテキスト入力をコピーして下に貼り付け、名前をサラリー、ラベルもサラリーに変更したい。"
  },
  {
    "start": 14931870,
    "end": 14941530,
    "text": "プレースホルダーを削除し、フィールドの値を広げ、さらにタイプを数字に設定する。"
  },
  {
    "start": 14942140,
    "end": 14946760,
    "text": "こうすると、ここには普通の文字は入力できず、数字だけが入力できる。"
  },
  {
    "start": 14948620,
    "end": 14951708,
    "text": "最後に、このフォームには送信ボタンが必要です。"
  },
  {
    "start": 14951804,
    "end": 14960932,
    "text": "というのも、reactフックフォームを使用する場合、このuseformステータスを介してこの処理を行わないからです。"
  },
  {
    "start": 14961036,
    "end": 14968000,
    "text": "その代わり、リアクトフックフォームは独自のローディング状態を持ち、それはフォームのステートがサブミットされている内部にある。"
  },
  {
    "start": 14968430,
    "end": 14970558,
    "text": "別のローディングボタンが必要だ。"
  },
  {
    "start": 14970654,
    "end": 14975654,
    "text": "このレイアウトを別のローディング・ボタンに取り出したいのです。"
  },
  {
    "start": 14975742,
    "end": 14978530,
    "text": "そうすれば、ここでも同じローディング・ボタンを使うことができる。"
  },
  {
    "start": 14979150,
    "end": 14980110,
    "text": "そうしよう"
  },
  {
    "start": 14980150,
    "end": 14984130,
    "text": "componentsフォルダに別のコンポーネントを作成しよう。"
  },
  {
    "start": 14984910,
    "end": 14987610,
    "text": "これをローディング・ボタンと呼ぼう。"
  },
  {
    "start": 14997280,
    "end": 15005460,
    "text": "それから画面を分割して、フォームの送信ボタンをここに、読み込みボタンをここに置きたい。"
  },
  {
    "start": 15006080,
    "end": 15006616,
    "text": "オーケー。"
  },
  {
    "start": 15006648,
    "end": 15008900,
    "text": "ローディングボタンには小道具が必要だ。"
  },
  {
    "start": 15010920,
    "end": 15013660,
    "text": "ボタンの小道具をロードする。"
  },
  {
    "start": 15014400,
    "end": 15017288,
    "text": "こちらと同じ型を拡張したい。"
  },
  {
    "start": 15017344,
    "end": 15019234,
    "text": "デフォルトのボタンが表示されます。"
  },
  {
    "start": 15019282,
    "end": 15019994,
    "text": "小道具。"
  },
  {
    "start": 15020122,
    "end": 15026482,
    "text": "ローディング・ボタン、プロップス、リアクト・ボタンの拡張、HTML属性、その他諸々。"
  },
  {
    "start": 15026666,
    "end": 15030230,
    "text": "ローディング・ブーリアンであるもう1つのプロパティを追加します。"
  },
  {
    "start": 15032810,
    "end": 15036710,
    "text": "そして、これらのプロップをボタンに渡す。"
  },
  {
    "start": 15037130,
    "end": 15038910,
    "text": "ボタンの小道具をロードする。"
  },
  {
    "start": 15040050,
    "end": 15047710,
    "text": "ここでは、チルドレン、ロード状態、残りの小道具を再構築する。"
  },
  {
    "start": 15052650,
    "end": 15057510,
    "text": "ここでは、このボタン（フォーム送信ボタン）を返したい。"
  },
  {
    "start": 15057930,
    "end": 15065790,
    "text": "これにはローディング状態のレイアウトが含まれているので、ボタンとローダーアイコンをインポートします。"
  },
  {
    "start": 15066290,
    "end": 15068690,
    "text": "私たちはまだここで小道具を広げている。"
  },
  {
    "start": 15068810,
    "end": 15074304,
    "text": "タイプをsubmit aに設定せず、保留状態を置き換える。"
  },
  {
    "start": 15074472,
    "end": 15080260,
    "text": "このボタンに渡すローディング状態では、スタイリングは同じままである。"
  },
  {
    "start": 15080640,
    "end": 15084296,
    "text": "ここでは、小道具の代わりに子どもたちと言っている。"
  },
  {
    "start": 15084368,
    "end": 15084980,
    "text": "子供たち"
  },
  {
    "start": 15085640,
    "end": 15089472,
    "text": "じゃあ、こっちのレイアウトは重複しないようにしよう。"
  },
  {
    "start": 15089576,
    "end": 15099580,
    "text": "その代わりに、新しいローディングボタンを返すだけで、そのボタンには、このコンポーネントに渡すプロップを再度渡します。"
  },
  {
    "start": 15100190,
    "end": 15107930,
    "text": "ここでは、タイプを再びサブミットに設定し、ロードのためにペンディング状態を渡す。"
  },
  {
    "start": 15111390,
    "end": 15116850,
    "text": "これで、フォーム送信ボタンと、より一般的な読み込みボタンが別々になった。"
  },
  {
    "start": 15118070,
    "end": 15127530,
    "text": "では、これらのファイルを閉じて、このボタンを新しい仕事フォームの一番下に入れましょう。"
  },
  {
    "start": 15128630,
    "end": 15136130,
    "text": "フォームを閉じるタグの直前に、新しいローディング・ボタンを配置します。"
  },
  {
    "start": 15136670,
    "end": 15139262,
    "text": "またここで提出するタイプにした。"
  },
  {
    "start": 15139406,
    "end": 15145478,
    "text": "フォームの外でこの型を使いたいかもしれないので、このコンポーネントにはこの型をハードコードしていない。"
  },
  {
    "start": 15145574,
    "end": 15149290,
    "text": "これが、プロップを介して外部からゼータタイプを使用する理由だ。"
  },
  {
    "start": 15150150,
    "end": 15157210,
    "text": "ローディングの状態には、先に説明したように、フォームが送信されている状態を使う。"
  },
  {
    "start": 15157990,
    "end": 15158318,
    "text": "そうだね。"
  },
  {
    "start": 15158334,
    "end": 15160038,
    "text": "をクリックするとsubmitと表示されます。"
  },
  {
    "start": 15160214,
    "end": 15162010,
    "text": "基本的にはそれだけだ。"
  },
  {
    "start": 15162830,
    "end": 15166446,
    "text": "さて、ここで1つだけ気づいたミスがある。"
  },
  {
    "start": 15166478,
    "end": 15174894,
    "text": "ドラフト2のマークダウンを呼び出したが、これはマークダウンを返すだけなので、変更時にフィールド・ドットも呼び出さなければならない。"
  },
  {
    "start": 15174982,
    "end": 15175610,
    "text": "そうだね。"
  },
  {
    "start": 15176190,
    "end": 15179710,
    "text": "ここでは、変更時にフィールド・ドットを呼び出す。"
  },
  {
    "start": 15179870,
    "end": 15184814,
    "text": "この関数にマークダウン文字列を渡す。"
  },
  {
    "start": 15184982,
    "end": 15186770,
    "text": "これが私たちが実際に望んでいることだ。"
  },
  {
    "start": 15187390,
    "end": 15187974,
    "text": "オーケー。"
  },
  {
    "start": 15188022,
    "end": 15192566,
    "text": "今、私たちのonsubmit関数では、アラートメッセージを表示するだけです。"
  },
  {
    "start": 15192638,
    "end": 15193158,
    "text": "そうだね。"
  },
  {
    "start": 15193294,
    "end": 15194890,
    "text": "試してみよう。"
  },
  {
    "start": 15195230,
    "end": 15198990,
    "text": "まず、このフォームを何も入力せずに送信してみよう。"
  },
  {
    "start": 15199150,
    "end": 15201090,
    "text": "すべてのエラーメッセージを見ることができる。"
  },
  {
    "start": 15201870,
    "end": 15203540,
    "text": "何か入力しよう。"
  },
  {
    "start": 15203710,
    "end": 15206380,
    "text": "エラーメッセージはリアルタイムで消える。"
  },
  {
    "start": 15207920,
    "end": 15211380,
    "text": "会社のロゴはとりあえず省こう。"
  },
  {
    "start": 15212160,
    "end": 15217096,
    "text": "サイト上の場所と、サイト上が選択され、これを送信しようとしたとき。"
  },
  {
    "start": 15217208,
    "end": 15219860,
    "text": "ああ、場所を選ぶ必要があるんだ。"
  },
  {
    "start": 15221200,
    "end": 15222900,
    "text": "例えばベルリンだ。"
  },
  {
    "start": 15224320,
    "end": 15227456,
    "text": "今はメールアドレスかウェブサイトを提供しなければならない。"
  },
  {
    "start": 15227568,
    "end": 15231040,
    "text": "私がちんぷんかんぷんな言葉を入力すると、無効な電子メールアドレスと表示される。"
  },
  {
    "start": 15231820,
    "end": 15236680,
    "text": "florianodinginfluor.comと入力しても有効です。"
  },
  {
    "start": 15237340,
    "end": 15246164,
    "text": "その代わり、codinginfluor.comのURLを挿入すれば、Eメールは必要なくなります。"
  },
  {
    "start": 15246332,
    "end": 15248720,
    "text": "ここにマークダウン・エディターがある。"
  },
  {
    "start": 15250020,
    "end": 15253652,
    "text": "試しにフォーマットしてみよう。"
  },
  {
    "start": 15253836,
    "end": 15259678,
    "text": "給与123 これでフォームを送信することができ、すべての値が表示されました。"
  },
  {
    "start": 15259814,
    "end": 15261334,
    "text": "マークダウンをご覧ください。"
  },
  {
    "start": 15261462,
    "end": 15266170,
    "text": "太字の部分には星が2つあり、そこに私たちの価値観がすべて書かれている。"
  },
  {
    "start": 15266870,
    "end": 15267998,
    "text": "これが効いた。"
  },
  {
    "start": 15268094,
    "end": 15274582,
    "text": "これで、これらの値をサーバーアクションとしてバックエンドに送り、新しいデータベースエントリーを作成することができます。"
  },
  {
    "start": 15274686,
    "end": 15276030,
    "text": "基本的にはそれだけだ。"
  },
  {
    "start": 15276150,
    "end": 15277798,
    "text": "もうひとつ変えたいことがある。"
  },
  {
    "start": 15277934,
    "end": 15281250,
    "text": "都市を選択しないと、このようなエラーメッセージが表示されますね。"
  },
  {
    "start": 15281580,
    "end": 15288668,
    "text": "もしこれをリモートに戻したら、このエラーメッセージをすぐに削除したい。"
  },
  {
    "start": 15288724,
    "end": 15292772,
    "text": "これを送信することはできますが、エラーメッセージが自動的に削除されるわけではありません。"
  },
  {
    "start": 15292876,
    "end": 15294660,
    "text": "自分たちで対処しなければならない。"
  },
  {
    "start": 15294820,
    "end": 15302960,
    "text": "このトリガー関数を使えば、先ほどのアプリケーション・メールの処理と同じように、この処理を行うことができる。"
  },
  {
    "start": 15303620,
    "end": 15307440,
    "text": "ロケーション・タイプの入力フィールドに行ってみよう。"
  },
  {
    "start": 15308180,
    "end": 15315520,
    "text": "selectフィールドのon changeハンドラーをオーバーライドすれば、イベントを過去のものにできる。"
  },
  {
    "start": 15316620,
    "end": 15322320,
    "text": "まず、変更時にフィールド・ドットを呼び出し、イベントを渡す。"
  },
  {
    "start": 15323180,
    "end": 15326836,
    "text": "であれば、その値がリモートかどうかをチェックしたい。"
  },
  {
    "start": 15326908,
    "end": 15329100,
    "text": "そして再びバリデーションを発動させたい。"
  },
  {
    "start": 15329260,
    "end": 15338890,
    "text": "もしeドットの現在のターゲット・ドット値がリモートと等しければ、これは入力がある場所である。"
  },
  {
    "start": 15340030,
    "end": 15345010,
    "text": "次に、ロケーション・フィールドのバリデーションを行いたい。"
  },
  {
    "start": 15345870,
    "end": 15347750,
    "text": "試してみよう。"
  },
  {
    "start": 15347910,
    "end": 15351970,
    "text": "オンサイトが選択された状態で送信しようとする。"
  },
  {
    "start": 15352710,
    "end": 15354530,
    "text": "それには場所が必要だ。"
  },
  {
    "start": 15355110,
    "end": 15359102,
    "text": "リモートを選択すると、このエラーメッセージは消える。"
  },
  {
    "start": 15359286,
    "end": 15362254,
    "text": "さて、このチュートリアルで一番大変だったのはこの部分だ。"
  },
  {
    "start": 15362342,
    "end": 15366006,
    "text": "このフォームはかなり複雑だが、ここからが本番だ。"
  },
  {
    "start": 15366078,
    "end": 15368358,
    "text": "ここで、新しいサーバーアクションを作成します。"
  },
  {
    "start": 15368454,
    "end": 15373810,
    "text": "このフォームを送信し、新しいエントリーをデータベースに保存するときに思い出してほしい。"
  },
  {
    "start": 15374230,
    "end": 15383670,
    "text": "サーバーアクションはサーバー上で実行され、クライアントコンポーネントはクライアント上で実行されるからだ。"
  },
  {
    "start": 15383790,
    "end": 15387494,
    "text": "しかし、クライアント・コンポーネントからサーバー・アクションを呼び出すことはできる。"
  },
  {
    "start": 15387542,
    "end": 15390078,
    "text": "別のファイルに入れるだけだ。"
  },
  {
    "start": 15390214,
    "end": 15394770,
    "text": "新しい求人フォームと同じフォルダに新しいファイルを作成しましょう。"
  },
  {
    "start": 15395150,
    "end": 15398970,
    "text": "という命名規則がある。"
  },
  {
    "start": 15399790,
    "end": 15403290,
    "text": "一番上にuse serverディレクティブを置く。"
  },
  {
    "start": 15403870,
    "end": 15411630,
    "text": "ここで、サーバーアクションを宣言するために、ジョブフィルターのサイドバーに同じ文字列を追加したことを思い出してください。"
  },
  {
    "start": 15411790,
    "end": 15416640,
    "text": "これをひとつの関数に追加する代わりに、ファイル全体に追加することもできる。"
  },
  {
    "start": 15416750,
    "end": 15420524,
    "text": "これで、このファイル内のすべての関数がサーバー・アクションになる。"
  },
  {
    "start": 15420692,
    "end": 15426840,
    "text": "ここでは、リコールが作成する非同期関数をエクスポートしている。"
  },
  {
    "start": 15427220,
    "end": 15435948,
    "text": "求人情報には、サーバーアクションがフォームデータを受け取らなければならないというルールはありません。"
  },
  {
    "start": 15436084,
    "end": 15437716,
    "text": "これらは通常の機能だ。"
  },
  {
    "start": 15437788,
    "end": 15440476,
    "text": "また、その他の価値を受け取ることもできる。"
  },
  {
    "start": 15440588,
    "end": 15445448,
    "text": "値はフロントエンドからバックエンドに送られるため、シリアライズ可能でなければならない。"
  },
  {
    "start": 15445524,
    "end": 15451192,
    "text": "基本的にプリミティブ型しか入れられないが、フォームデータである必要はない。"
  },
  {
    "start": 15451376,
    "end": 15460744,
    "text": "フォームアクションプロップを使用する場合、引数はフォームデータでなければなりません。"
  },
  {
    "start": 15460912,
    "end": 15464656,
    "text": "クライアント・コンポーネントからカリングする場合は、何でも渡すことができる。"
  },
  {
    "start": 15464768,
    "end": 15469168,
    "text": "例えば、私たちが別途作成する仕事の値を渡すことができる。"
  },
  {
    "start": 15469264,
    "end": 15472980,
    "text": "しかし、ここではまだフォーム・データを使いたい。"
  },
  {
    "start": 15474040,
    "end": 15474640,
    "text": "なぜですか？"
  },
  {
    "start": 15474760,
    "end": 15482616,
    "text": "なぜなら、バックエンドに画像ファイルを送ったからです。画像ファイルをサーバーアクションに送るときは、フォームデータにラップする必要があります。"
  },
  {
    "start": 15482688,
    "end": 15484008,
    "text": "そうでなければ機能しない。"
  },
  {
    "start": 15484104,
    "end": 15488096,
    "text": "一般的には、ここに他のオブジェクトを渡すこともできる。"
  },
  {
    "start": 15488248,
    "end": 15496300,
    "text": "次に、このフォームデータをJavaScriptオブジェクトに変換し、ジョブスキーマに渡します。"
  },
  {
    "start": 15496640,
    "end": 15497904,
    "text": "以前にもやったことがある。"
  },
  {
    "start": 15497992,
    "end": 15503928,
    "text": "エントリーからオブジェクトと呼ぶ制約値を作成します。"
  },
  {
    "start": 15504104,
    "end": 15506940,
    "text": "私たちは以前、ページフィルターでこれを行ったことがある。"
  },
  {
    "start": 15508240,
    "end": 15513940,
    "text": "この関数にフォームデータのドット・エントリーを渡す。"
  },
  {
    "start": 15515000,
    "end": 15522904,
    "text": "ここでクールなことは、フロントエンドですでに使用したcreate job validationスキーマを再利用できることです。"
  },
  {
    "start": 15522992,
    "end": 15530994,
    "text": "バックエンドでも同じスキーマを使い、入力を検証し、フォームデータから自動的に正しい型を取得します。"
  },
  {
    "start": 15531122,
    "end": 15537330,
    "text": "というのは、サーバーアクションは技術的には通常のポストエンドポイントに過ぎないからです。"
  },
  {
    "start": 15537410,
    "end": 15544634,
    "text": "少なくとも理論上は、ユーザーはフロントエンドを通してサーバーアクションを呼び出す必要はなく、直接サーバーにリクエストを送ることもできる。"
  },
  {
    "start": 15544762,
    "end": 15548762,
    "text": "あるいは、フロントエンドを改造して無効なデータを送信することもできる。"
  },
  {
    "start": 15548826,
    "end": 15555860,
    "text": "通常のサーバー・エンドポイントで行うのと同じように、バックエンドでも受信値を検証する必要があります。"
  },
  {
    "start": 15556520,
    "end": 15559900,
    "text": "別の定数を作り、それを再構築する。"
  },
  {
    "start": 15560760,
    "end": 15568580,
    "text": "ここで、create jobスキーマを取り出し、これらの値を渡すために再度passを呼び出します。"
  },
  {
    "start": 15569480,
    "end": 15573288,
    "text": "いずれかの値が無効な場合、エラーとなる。"
  },
  {
    "start": 15573464,
    "end": 15576300,
    "text": "そうでなければ、我々の価値観がここに入ってしまう。"
  },
  {
    "start": 15576800,
    "end": 15587010,
    "text": "そうすれば、例えばタイトルの正しい型ができ、それが必須の文字列となる。"
  },
  {
    "start": 15587990,
    "end": 15605100,
    "text": "会社名、会社のロゴ、任意の場所、種類、場所、任意のアプリケーション、電子メールまたはURL、説明、給与です。"
  },
  {
    "start": 15605640,
    "end": 15609100,
    "text": "これが、フォームを通して送信したすべての値である。"
  },
  {
    "start": 15609880,
    "end": 15614672,
    "text": "次に、このエントリーをデータベースに保存する前に、スラッグを作りたい。"
  },
  {
    "start": 15614736,
    "end": 15622072,
    "text": "というのも、各エントリーにはスラッグが必要で、それは単にそれを格納したい相対URLだからだ。"
  },
  {
    "start": 15622136,
    "end": 15634002,
    "text": "idを使うこともできるが、スラッグの方が読みやすいし、私がやりたいのは、タイトルを小文字にして、重複を避けるために最後にランダムな数字を加えることだ。"
  },
  {
    "start": 15634146,
    "end": 15637186,
    "text": "そのために、ちょっとしたユーティリティ関数を作ろう。"
  },
  {
    "start": 15637298,
    "end": 15648150,
    "text": "utilsファイルに入って、slugに呼び出す別の関数をエクスポートし、これに文字列を渡してみよう。"
  },
  {
    "start": 15649210,
    "end": 15652910,
    "text": "この関数や引数にどんな名前をつけるかはあなた次第だ。"
  },
  {
    "start": 15653650,
    "end": 15659200,
    "text": "ここでは文字列を返すが、すべて小文字で返す。"
  },
  {
    "start": 15660980,
    "end": 15679800,
    "text": "この正規表現は、スペース・スラッシュ・ギア・コンマのようなもので、これをダッシュに置き換えて、URLにスペースが入らないようにします。"
  },
  {
    "start": 15680140,
    "end": 15683208,
    "text": "この正規表現でもうひとつ置き換える。"
  },
  {
    "start": 15683294,
    "end": 15687644,
    "text": "これにより、複数のスペースやダッシュが連続しないようにする。"
  },
  {
    "start": 15687732,
    "end": 15693900,
    "text": "これは複数のスペースを1つのスペースに置き換える。"
  },
  {
    "start": 15694060,
    "end": 15699884,
    "text": "これを入力してファイルを保存し、サーバーで使用する。"
  },
  {
    "start": 15699932,
    "end": 15700520,
    "text": "アクション"
  },
  {
    "start": 15701220,
    "end": 15706960,
    "text": "constスラッグを作成し、これをバックティック文字列に代入する。"
  },
  {
    "start": 15707500,
    "end": 15719386,
    "text": "このバックティックの文字列は、まずCarlaというスラッグから始まり、そのスラッグにこの仕事のエントリーのタイトルを渡し、次にマイナス、そしてランダムなアイデアを渡す。"
  },
  {
    "start": 15719498,
    "end": 15730002,
    "text": "これには、先にインストールしたnano idを使うが、このimportはnano idからインポートする必要がある。"
  },
  {
    "start": 15730146,
    "end": 15738032,
    "text": "ここで呼び出したいのはnano id関数で、これに10という数字を渡す。"
  },
  {
    "start": 15738186,
    "end": 15744900,
    "text": "このナノIDは10文字だが、この閉じ中括弧の位置が間違っている。"
  },
  {
    "start": 15744980,
    "end": 15746280,
    "text": "こっちのはずだ。"
  },
  {
    "start": 15747260,
    "end": 15749476,
    "text": "これがこのスラッグを作る。"
  },
  {
    "start": 15749668,
    "end": 15753716,
    "text": "次に、会社のロゴファイルをブロブストレージにアップロードしたい。"
  },
  {
    "start": 15753828,
    "end": 15766944,
    "text": "今回は、文字列型またはundefined型のconst company logo URLではなく、letを作成し、undefinedで初期化します。"
  },
  {
    "start": 15767112,
    "end": 15772740,
    "text": "実際にバックエンドにロゴを送った場合のみ、ロゴをアップロードしてURLを返すことができる。"
  },
  {
    "start": 15773960,
    "end": 15777580,
    "text": "以下では、会社のロゴが定義されているかどうかをチェックする。"
  },
  {
    "start": 15779320,
    "end": 15797532,
    "text": "そして、awaitと呼ばれるconst blopを作り、putと呼びます。putはVesell blobからのインポートで、Verzel blobでの呼び方からするとここに入るはずです。"
  },
  {
    "start": 15797716,
    "end": 15800960,
    "text": "putを使えば、ファイルをブロブ・ストレージに入れることができる。"
  },
  {
    "start": 15802780,
    "end": 15806924,
    "text": "これはドキュメントに記載されているが、使い方はいたって簡単だ。"
  },
  {
    "start": 15807012,
    "end": 15809684,
    "text": "最初の引数はパス名である。"
  },
  {
    "start": 15809772,
    "end": 15812316,
    "text": "これはファイル名とフォルダ名である。"
  },
  {
    "start": 15812348,
    "end": 15816760,
    "text": "フォルダを作成したい場合は、バックテキスト文字列を作成する。"
  },
  {
    "start": 15817670,
    "end": 15824742,
    "text": "会社のロゴというフォルダを作り、ファイル名をつける。"
  },
  {
    "start": 15824886,
    "end": 15832078,
    "text": "ファイル名には生成したスラッグを使い、拡張子を付けたい。"
  },
  {
    "start": 15832134,
    "end": 15835230,
    "text": "pngでもドットJPEGでも何でもいい。"
  },
  {
    "start": 15835350,
    "end": 15839830,
    "text": "slackの後に、スペースを入れずに別の表現を加える。"
  },
  {
    "start": 15839990,
    "end": 15849240,
    "text": "ここでパスと呼んでいるのは、このインポートのドットxネームで、エクステンション・ネームの略である。"
  },
  {
    "start": 15849360,
    "end": 15854060,
    "text": "これを思い出して、会社のロゴ・ドット・ネームを付けてください。"
  },
  {
    "start": 15854600,
    "end": 15860344,
    "text": "これでcompany logosというフォルダが作成され、そこにこの画像ファイルが置かれる。"
  },
  {
    "start": 15860512,
    "end": 15864616,
    "text": "ファイル名はスラッグと拡張子。"
  },
  {
    "start": 15864768,
    "end": 15866168,
    "text": "よし、これが道だ。"
  },
  {
    "start": 15866264,
    "end": 15869660,
    "text": "番目の引数は、会社のロゴファイルそのものである。"
  },
  {
    "start": 15870030,
    "end": 15872930,
    "text": "第3引数には何らかのコンフィギュレーションを指定する。"
  },
  {
    "start": 15873910,
    "end": 15877810,
    "text": "誰でもこの画像を見ることができるように、アクセスをパブリックに設定しました。"
  },
  {
    "start": 15878590,
    "end": 15882934,
    "text": "デフォルトでは、Vesell blobは名前にランダムな接尾辞をつける。"
  },
  {
    "start": 15883022,
    "end": 15887478,
    "text": "すでにスラッグでユニークな名前を持っているからだ。"
  },
  {
    "start": 15887654,
    "end": 15895102,
    "text": "そして、このifブロックの最後に、まだその中にあるが、会社のロゴのURLを割り当てる。"
  },
  {
    "start": 15895206,
    "end": 15898782,
    "text": "変数をブロブURLに"
  },
  {
    "start": 15898926,
    "end": 15900806,
    "text": "これがアップロードされた画像だ。"
  },
  {
    "start": 15900998,
    "end": 15904382,
    "text": "見ての通り、ゼル・ブロブはかなり使いやすい。"
  },
  {
    "start": 15904486,
    "end": 15910654,
    "text": "ここで重要なのは、サーバーに送信できるファイルは4.5メガバイトまでということだ。"
  },
  {
    "start": 15910702,
    "end": 15911030,
    "text": "アクション"
  },
  {
    "start": 15911110,
    "end": 15911998,
    "text": "それが限界だ。"
  },
  {
    "start": 15912094,
    "end": 15916142,
    "text": "また、フロントエンドのファイルサイズは2メガバイトに制限されています。"
  },
  {
    "start": 15916246,
    "end": 15921912,
    "text": "より大きなファイルをアップロードしたい場合は、フロントエンドからアップロードする必要があります。"
  },
  {
    "start": 15922006,
    "end": 15930716,
    "text": "この仕組みは、基本的にユーザーがブラウザからファイルを直接Verzel blobにアップロードすることで、私たち自身のサーバーを経由せずに済むというものだ。"
  },
  {
    "start": 15930788,
    "end": 15937700,
    "text": "ファイル名を変更したり、ファイルを検証したりするのが難しくなるためだ。"
  },
  {
    "start": 15937820,
    "end": 15945620,
    "text": "小さなファイルであれば、私たちのサーバー経由で送信することをお勧めしますが、より大きなファイルをアップロードしたい場合は、こちらも可能です。"
  },
  {
    "start": 15945740,
    "end": 15948666,
    "text": "これはBazel blobのドキュメントに記載されている。"
  },
  {
    "start": 15948828,
    "end": 15955170,
    "text": "さて、このブロックの外で、実際のジョブをデータベースに作成することができる。"
  },
  {
    "start": 15955510,
    "end": 15958450,
    "text": "Prismaのクライアントが必要だろ？"
  },
  {
    "start": 15958990,
    "end": 15986122,
    "text": "lib PrismaからPrismaをインポートし、await Prisma dot job dot create括弧中括弧を呼び出す。"
  },
  {
    "start": 15986266,
    "end": 15996990,
    "text": "タイトルに不要な空白を取り除くために、タイトルをトリミングしたい。"
  },
  {
    "start": 15998050,
    "end": 16003950,
    "text": "次にタイプだが、これはドロップダウンリストの中から選ぶので、トリミングする必要はない。"
  },
  {
    "start": 16005250,
    "end": 16009110,
    "text": "社名もトリミングできる。"
  },
  {
    "start": 16010850,
    "end": 16016010,
    "text": "会社ロゴのURLは、実際にロゴをアップロードした場合にのみ定義されます。"
  },
  {
    "start": 16016090,
    "end": 16018190,
    "text": "そうでなければ、この値は無視される。"
  },
  {
    "start": 16019410,
    "end": 16025350,
    "text": "ロケーションタイプはトリミングの必要がない ロケーションタイプもトリミングの必要がない。"
  },
  {
    "start": 16027370,
    "end": 16037460,
    "text": "入力フィールドに空白を入力することができるので、アプリケーションのEメールをトリミングしよう。"
  },
  {
    "start": 16039320,
    "end": 16042256,
    "text": "今はGitHub copilotが恋しい。"
  },
  {
    "start": 16042408,
    "end": 16050020,
    "text": "この録音マシンにはインストールしていないけど、日常生活ではとても便利なんだ。"
  },
  {
    "start": 16050720,
    "end": 16063020,
    "text": "とにかく、説明文もトリミングし、自動的にセーブコールオペレーターを追加する。"
  },
  {
    "start": 16063140,
    "end": 16075600,
    "text": "フォーム・データを通して文字列を受け取るので、この数値をこのようにint型に渡す必要がある。"
  },
  {
    "start": 16076340,
    "end": 16084720,
    "text": "もしオプショナルでない値を削除した場合、プリズマは型安全であるため、プリズマもエラーを表示する。"
  },
  {
    "start": 16086000,
    "end": 16087376,
    "text": "それから下に行く。"
  },
  {
    "start": 16087568,
    "end": 16094744,
    "text": "この時点で新しいエントリーが作成され、ユーザーを確認ページにリダイレクトしたい。"
  },
  {
    "start": 16094912,
    "end": 16106620,
    "text": "次のスラッシュ・ナビゲーションからこれをインポートし、スラッシュ・ジョブ・サプライドにナビゲートします。"
  },
  {
    "start": 16106960,
    "end": 16109060,
    "text": "これが私たちのサーバー全体の動きだ。"
  },
  {
    "start": 16110010,
    "end": 16115210,
    "text": "ここで新しい求人フォームに入り、onsubmit関数に入ります。"
  },
  {
    "start": 16115250,
    "end": 16117270,
    "text": "このアラートコールを削除しよう。"
  },
  {
    "start": 16117970,
    "end": 16123586,
    "text": "ここでは、データをフォームデータとしてではなく、このcreate job valuesオブジェクトとして取得します。"
  },
  {
    "start": 16123738,
    "end": 16130270,
    "text": "というのも、ファイルを送信するために必要だからである。"
  },
  {
    "start": 16131490,
    "end": 16137070,
    "text": "フォーム・データを作成し、新しいフォーム・データをこのように初期化します。"
  },
  {
    "start": 16138910,
    "end": 16144886,
    "text": "その場合、各フィールドを1つずつ代入する代わりに、本物のプログラマーのようにループを使う。"
  },
  {
    "start": 16145078,
    "end": 16147530,
    "text": "これをオブジェクト・エントリーと呼ぶ。"
  },
  {
    "start": 16148750,
    "end": 16153370,
    "text": "このオブジェクトを配列に変える値を渡す。"
  },
  {
    "start": 16154390,
    "end": 16169730,
    "text": "そして、それぞれの括弧、括弧、角括弧、角括弧を思い出す。"
  },
  {
    "start": 16169810,
    "end": 16172550,
    "text": "ここでは、キーのカンマと値を持っている。"
  },
  {
    "start": 16173290,
    "end": 16176418,
    "text": "正しい構文を書くように。"
  },
  {
    "start": 16176594,
    "end": 16182738,
    "text": "このように見え、ここで値が定義されているかどうかをチェックしている。"
  },
  {
    "start": 16182914,
    "end": 16190634,
    "text": "valueであれば、フォームデータを取得し、この値をスキルの下に追加します。"
  },
  {
    "start": 16190802,
    "end": 16191990,
    "text": "単純なことだ。"
  },
  {
    "start": 16192440,
    "end": 16195864,
    "text": "これらの値は文字列かファイルである。"
  },
  {
    "start": 16195952,
    "end": 16202300,
    "text": "私たちの会社のロゴの場合、それらをすべてフォームデータに追加し、サーバーアクションを呼び出すことができます。"
  },
  {
    "start": 16203120,
    "end": 16205780,
    "text": "これをtry catchブロックにまとめる。"
  },
  {
    "start": 16206840,
    "end": 16210620,
    "text": "catchブロックでは、アラート・メッセージを表示したいだけだ。"
  },
  {
    "start": 16211000,
    "end": 16215160,
    "text": "また、トーストメッセージを表示したり、UIにエラーメッセージを表示することもできる。"
  },
  {
    "start": 16215240,
    "end": 16219064,
    "text": "ここではシンプルにしたいし、エラーは想定していない。"
  },
  {
    "start": 16219152,
    "end": 16221900,
    "text": "私はこのアラートダイアログを使っているだけだ。"
  },
  {
    "start": 16223000,
    "end": 16224940,
    "text": "何かが間違っていた。"
  },
  {
    "start": 16225400,
    "end": 16231060,
    "text": "正しいスペルで再試行してください。"
  },
  {
    "start": 16232520,
    "end": 16242888,
    "text": "先ほどのように、サーバーコンポーネントからサーバーアクションを呼び出す場合、try catchにラップすることはできません。"
  },
  {
    "start": 16242984,
    "end": 16245224,
    "text": "私たちのフィルターではこれで十分です。"
  },
  {
    "start": 16245272,
    "end": 16253548,
    "text": "エラーが発生した場合（これは単なるリダイレクトなので、ほとんど起こらないはずだが）、エラーページ、エラーTsXファイルが表示される。"
  },
  {
    "start": 16253644,
    "end": 16257508,
    "text": "もし、ここでこのエラーをキャッチしなければ、このエラーページも表示されることになる。"
  },
  {
    "start": 16257604,
    "end": 16266012,
    "text": "もしそうなれば、ユーザーはフォームの入力も失うことになる。すでに多くのことを入力しているかもしれないのだから、迷惑なことだ。"
  },
  {
    "start": 16266156,
    "end": 16272310,
    "text": "そのため、ここで潜在的なエラーを確実に捕捉するためだ。"
  },
  {
    "start": 16272460,
    "end": 16290950,
    "text": "データベースがダウンしている場合、エラーが発生するかもしれませんが、ここでそれをキャッチすることで、入力を失うことなく、ユーザーは再度submitボタンをクリックするだけで、tryブロックの中でサーバーアクションを呼び出し、フォームデータを渡すjob postingの作成を待ちます。"
  },
  {
    "start": 16293210,
    "end": 16298000,
    "text": "実際のジョブを投入する前に、ここでエラーメッセージを実際に試してみよう。"
  },
  {
    "start": 16298170,
    "end": 16307160,
    "text": "ちょっとだけ、ここにエラーを投げて、この他のものをコメントアウトします。"
  },
  {
    "start": 16308540,
    "end": 16311120,
    "text": "そして、フォームを送信しようとする。"
  },
  {
    "start": 16312020,
    "end": 16316780,
    "text": "そして、このアラートダイアログを見たが、まだ意見がある。"
  },
  {
    "start": 16316940,
    "end": 16318924,
    "text": "さて、ここで興味深いことがある。"
  },
  {
    "start": 16318972,
    "end": 16326624,
    "text": "ここで設定した方法では、サーバーアクションからフロントエンドにエラーメッセージを転送することはできません。"
  },
  {
    "start": 16326752,
    "end": 16333632,
    "text": "本番でこのエラーメッセージを出そうとしても、一般的なエラーメッセージしか表示できません。"
  },
  {
    "start": 16333736,
    "end": 16343688,
    "text": "そうしないと、バックエンドからフロントエンドに機密データを誤って漏らしてしまう可能性があるからだ。"
  },
  {
    "start": 16343864,
    "end": 16350884,
    "text": "このエラーにどのようなメッセージ（バジンガのテキストのような）を入れても、フロントエンドでは受け取られません。"
  },
  {
    "start": 16350992,
    "end": 16356212,
    "text": "バックエンドからフロントエンドに、実際に読めるエラーメッセージを表示したい場合。"
  },
  {
    "start": 16356276,
    "end": 16358484,
    "text": "そして、それを文字列として返さなければならない。"
  },
  {
    "start": 16358652,
    "end": 16362380,
    "text": "エラーがないため、このフォームでは必要ない。"
  },
  {
    "start": 16362420,
    "end": 16367420,
    "text": "このようなエラー・メッセージは、後で実装することになる。"
  },
  {
    "start": 16367500,
    "end": 16373332,
    "text": "このチュートリアルを最後までご覧ください。ここでは一般的なエラーメッセージで結構です。"
  },
  {
    "start": 16373476,
    "end": 16380594,
    "text": "ジョブを作成する前に、このジョブ送信ページ、確認ページも作成したいと思います。"
  },
  {
    "start": 16380692,
    "end": 16383450,
    "text": "これをappフォルダでやってみよう。"
  },
  {
    "start": 16384150,
    "end": 16396966,
    "text": "ジョブが送信したページ TsXエクスポートのデフォルト機能。"
  },
  {
    "start": 16397158,
    "end": 16399610,
    "text": "シンプルなレイアウトしかない。"
  },
  {
    "start": 16400270,
    "end": 16406010,
    "text": "メイン・タグとスタイリングが必要だ。"
  },
  {
    "start": 16406840,
    "end": 16415440,
    "text": "M auto max width five, xl my tenは他のページと同じ。"
  },
  {
    "start": 16415520,
    "end": 16421864,
    "text": "基本的には、スペースy5、px3、テキスト送信者。"
  },
  {
    "start": 16421952,
    "end": 16423060,
    "text": "それでいいはずだ。"
  },
  {
    "start": 16424680,
    "end": 16443940,
    "text": "ここに大文字のhと、求人広告が提出され、承認待ちであることを示す段落を入れたい。"
  },
  {
    "start": 16444320,
    "end": 16448500,
    "text": "というのも、私たちは仕事を表示する前にまず承認しなければならないことを覚えているからだ。"
  },
  {
    "start": 16448920,
    "end": 16450304,
    "text": "試してみよう。"
  },
  {
    "start": 16450352,
    "end": 16452680,
    "text": "まだ管理バックエンドがないんだ。"
  },
  {
    "start": 16452760,
    "end": 16459860,
    "text": "ただ今のところ、デフォルトでapprovedをtrueに設定しておく。"
  },
  {
    "start": 16460240,
    "end": 16462380,
    "text": "このフォームを試してみたいんだ。"
  },
  {
    "start": 16463280,
    "end": 16472336,
    "text": "ダミーのデータ、基本的な説明、マークダウンを追加する。"
  },
  {
    "start": 16472408,
    "end": 16480100,
    "text": "123123、ロゴもアップロードしたいんだけど、ここでは自分のロゴを使うよ。"
  },
  {
    "start": 16480520,
    "end": 16481040,
    "text": "オーケー。"
  },
  {
    "start": 16481080,
    "end": 16482480,
    "text": "今が正念場だ。"
  },
  {
    "start": 16482560,
    "end": 16492227,
    "text": "これでデータベースに新しいエントリーが作成され、Vesell blobに画像がアップロードされます。"
  },
  {
    "start": 16492363,
    "end": 16495403,
    "text": "開発モードでは、すべてが少し遅くなる。"
  },
  {
    "start": 16495531,
    "end": 16504719,
    "text": "確認ページがあるので、エラーは出なかったし、証明をtrueに設定したので、フロントページに表示されるはずだ。"
  },
  {
    "start": 16505179,
    "end": 16506039,
    "text": "おっと。"
  },
  {
    "start": 16506419,
    "end": 16508931,
    "text": "ああ、これもやらなければならないステップだ。"
  },
  {
    "start": 16509075,
    "end": 16513753,
    "text": "ブロブストレージのこのURLから画像をロードできるようにしなければならない。"
  },
  {
    "start": 16513931,
    "end": 16525494,
    "text": "次の設定ファイルに入りましょう。なぜこのようなことをしなければならないかというと、次の画像を使うからです。"
  },
  {
    "start": 16525622,
    "end": 16531830,
    "text": "誰にも我々の計算能力を悪用させないためには、特定のURLを許可しなければならない。"
  },
  {
    "start": 16531950,
    "end": 16536206,
    "text": "次の設定には、imagesフィールドがある。"
  },
  {
    "start": 16536238,
    "end": 16537610,
    "text": "オブジェクトを渡す。"
  },
  {
    "start": 16538190,
    "end": 16544406,
    "text": "ここでは、オブジェクトの配列を渡すリモートパターンを用意している。"
  },
  {
    "start": 16544518,
    "end": 16558050,
    "text": "中括弧で囲み、ホスト名をHTTPの背後にあるすべてを含む文字列に設定する。"
  },
  {
    "start": 16559310,
    "end": 16561970,
    "text": "これをここに貼り付けよう。"
  },
  {
    "start": 16562310,
    "end": 16570430,
    "text": "HTTPの後、この部分までは必要だが、この部分は必要ない。"
  },
  {
    "start": 16570810,
    "end": 16573190,
    "text": "ここに入れたいのはこれだ。"
  },
  {
    "start": 16574210,
    "end": 16578458,
    "text": "の場合は、NPMを使って開発サーバーを再起動する必要がある。"
  },
  {
    "start": 16578514,
    "end": 16581870,
    "text": "これらの変更を有効にするためにデバを走らせる。"
  },
  {
    "start": 16582610,
    "end": 16585190,
    "text": "ページを更新してください。"
  },
  {
    "start": 16585610,
    "end": 16586658,
    "text": "ほらね。"
  },
  {
    "start": 16586754,
    "end": 16592050,
    "text": "すべてのメタデータ、ロゴ、角丸の私たちの仕事がある。"
  },
  {
    "start": 16592170,
    "end": 16593268,
    "text": "クールだろ？"
  },
  {
    "start": 16593394,
    "end": 16597568,
    "text": "ブロブ・ストレージのバックエンドもここで見ることができる。"
  },
  {
    "start": 16597584,
    "end": 16601904,
    "text": "ここにはファイルブラウザがあり、会社のロゴを見ることができる。"
  },
  {
    "start": 16602032,
    "end": 16604136,
    "text": "これはすべてverzelle.comに掲載されている。"
  },
  {
    "start": 16604288,
    "end": 16609184,
    "text": "これが、スラッグと、このランダムなナノのアイデアを含む私たちのイメージです。"
  },
  {
    "start": 16609352,
    "end": 16616380,
    "text": "この画像はここで見ることもできるし、削除することもできる。"
  },
  {
    "start": 16616720,
    "end": 16618296,
    "text": "本当にクールだ。"
  },
  {
    "start": 16618488,
    "end": 16621568,
    "text": "これは、クライアントからサーバーのアクションを呼び出す方法です。"
  },
  {
    "start": 16621664,
    "end": 16626907,
    "text": "通常の関数と同じように呼び出し、引数を渡す。"
  },
  {
    "start": 16627043,
    "end": 16628467,
    "text": "我々はまだここで終わりではない。"
  },
  {
    "start": 16628523,
    "end": 16638059,
    "text": "他にもまだいくつかのページを実装しなければならないし、サーバーアクションに関連するもう一つの重要なフックであるフォームステートの使用についてもまだ学んでいない。"
  },
  {
    "start": 16638139,
    "end": 16646119,
    "text": "というのも、デフォルトでは新しいジョブは未承認であるべきだからです。"
  },
  {
    "start": 16646539,
    "end": 16653537,
    "text": "さて、次に求人の詳細ページをセットアップして、説明をマークダウン形式でレンダリングしたいと思います。"
  },
  {
    "start": 16653713,
    "end": 16656041,
    "text": "そのために新しいページを作りましょう。"
  },
  {
    "start": 16656185,
    "end": 16658449,
    "text": "ジョブズ・フォルダーに入れておこう。"
  },
  {
    "start": 16658489,
    "end": 16660089,
    "text": "ここに新しい仕事がある。"
  },
  {
    "start": 16660169,
    "end": 16662313,
    "text": "ここで新しい道を作りたい。"
  },
  {
    "start": 16662481,
    "end": 16664321,
    "text": "新しいファイルを作成する。"
  },
  {
    "start": 16664425,
    "end": 16669001,
    "text": "URLをスラッシュ・ジョブ・スラッシュにしたい。"
  },
  {
    "start": 16669185,
    "end": 16688339,
    "text": "そして、このluckは変数なので角括弧に入れ、ここにpage tsxを入れ、デフォルトの関数page Iを公開し、このダイナミック・スラッグはpropとしてページに渡される。"
  },
  {
    "start": 16689239,
    "end": 16692979,
    "text": "そのために、ページ・プロップス・インターフェースを宣言する。"
  },
  {
    "start": 16695279,
    "end": 16698455,
    "text": "ここで、再びパラメータを見つける。"
  },
  {
    "start": 16698567,
    "end": 16701375,
    "text": "これについては、次回のj's初心者チュートリアルで説明した。"
  },
  {
    "start": 16701487,
    "end": 16704607,
    "text": "これが相対URLパラメータの仕組みだ。"
  },
  {
    "start": 16704743,
    "end": 16712660,
    "text": "というのは、この動的変数につけた名前がスラッグで、スラックは文字列だからだ。"
  },
  {
    "start": 16713360,
    "end": 16724616,
    "text": "そして、これらのパラメーターをページ・プロップス型に再構築し、ここにdislocを配置する。"
  },
  {
    "start": 16724768,
    "end": 16732128,
    "text": "この運が、どの仕事をデータベースから取得し、他のページと同じように画面に表示するかを決定する。"
  },
  {
    "start": 16732184,
    "end": 16737666,
    "text": "これはサーバー・コンポーネントなので、これを非同期関数にして、ここでジョブをフェッチすることができる。"
  },
  {
    "start": 16737738,
    "end": 16747190,
    "text": "ここではプリズマ・コールを直接実行する代わりに、get jobと呼ばれる新しい変数を作成することでそれを実行する。"
  },
  {
    "start": 16748290,
    "end": 16765930,
    "text": "そして、reactからのインポートであるこのキャッシュ関数を呼び出し、キャッシュにこのような非同期矢印関数を渡す。"
  },
  {
    "start": 16766430,
    "end": 16770574,
    "text": "なぜこのキャッシュ関数にラップするのかは、後で説明しよう。"
  },
  {
    "start": 16770622,
    "end": 16772330,
    "text": "まずはこれを完成させよう。"
  },
  {
    "start": 16772710,
    "end": 16778486,
    "text": "ここでは、prismaを呼び出すconstジョブ・エントリーを作成する。"
  },
  {
    "start": 16778558,
    "end": 16791520,
    "text": "ここでもad lib prismaからimport prismaをインポートしなければならない。"
  },
  {
    "start": 16791640,
    "end": 16805256,
    "text": "prisma dot job, dot find unique parenthesis curly braces where そしてスラッグを比較したい。スラッグはURLパラメータとしてこのページに渡すものだからだ。"
  },
  {
    "start": 16805328,
    "end": 16810168,
    "text": "スラッグは一意なので、それを使ってデータベース内の一意なエントリーを見つけることができる。"
  },
  {
    "start": 16810264,
    "end": 16813848,
    "text": "URLに存在しないスラッグを入力するかもしれない。"
  },
  {
    "start": 16813904,
    "end": 16816444,
    "text": "この件も処理しなければならない。"
  },
  {
    "start": 16816572,
    "end": 16819360,
    "text": "この場合、ここで返される仕事は近いだろう。"
  },
  {
    "start": 16820900,
    "end": 16824160,
    "text": "ここでは、感嘆符の仕事かどうかをチェックする。"
  },
  {
    "start": 16824900,
    "end": 16839560,
    "text": "次のナビゲーションからインポートしたnot found関数を思い出してください。この関数は404 not foundページにリダイレクトしてくれます。"
  },
  {
    "start": 16840220,
    "end": 16857590,
    "text": "最後に、この関数からジョブを返し、それをページで呼び出すことができます。 const job equals await get jobに、paramsを通して受け取ったスラッグを渡します。"
  },
  {
    "start": 16857970,
    "end": 16868430,
    "text": "レイアウトをどうにかする前に、exportasync関数という別の関数をエクスポートする必要がある。"
  },
  {
    "start": 16869140,
    "end": 16879052,
    "text": "この関数を使えば、ページのメタデータを動的に生成できるからです。"
  },
  {
    "start": 16879196,
    "end": 16885564,
    "text": "このメタデータ・オブジェクトをエクスポートすることで、以前にもこのように静的にページ・メタデータを設定したことがある。"
  },
  {
    "start": 16885692,
    "end": 16896818,
    "text": "今の違いは、この詳細ページのメタデータがデータベースから取得したデータに依存していることです。"
  },
  {
    "start": 16896914,
    "end": 16899338,
    "text": "まず、データベースからそれを取得しなければならない。"
  },
  {
    "start": 16899434,
    "end": 16901522,
    "text": "だからこの関数が必要なのだ。"
  },
  {
    "start": 16901666,
    "end": 16911610,
    "text": "この関数は、静的メタデータのエクスポートに使ったのと同じメタデータ型の非同期なので、プロミスを返す。"
  },
  {
    "start": 16911770,
    "end": 16918550,
    "text": "この関数は、スラッグを含むページと同じパラメータを受け取ります。"
  },
  {
    "start": 16920170,
    "end": 16924526,
    "text": "ジョブデータを取得するには、ここでジョブをフェッチしなければならない。"
  },
  {
    "start": 16924558,
    "end": 16928214,
    "text": "繰り返しになるが、これが次のJのアプリ・ルーターでの動作である。"
  },
  {
    "start": 16928302,
    "end": 16933910,
    "text": "ページとこのメタデータ生成機能の間で直接データを共有することはできない。"
  },
  {
    "start": 16933990,
    "end": 16936742,
    "text": "このデータを両方の場所で取得しなければならない。"
  },
  {
    "start": 16936846,
    "end": 16943878,
    "text": "これが、この呼び出しをキャッシュ関数にラップした理由である。"
  },
  {
    "start": 16943974,
    "end": 16950660,
    "text": "この関数を2回呼び出しても、キャッシュは戻り値をキャッシュする。"
  },
  {
    "start": 16950700,
    "end": 16953924,
    "text": "これについては、次のjのドキュメントでも説明している。"
  },
  {
    "start": 16954092,
    "end": 16957036,
    "text": "唯一の例外はフェッチを使う場合だ。"
  },
  {
    "start": 16957188,
    "end": 16960228,
    "text": "Fetchは自動的に重複排除されます。"
  },
  {
    "start": 16960284,
    "end": 16968276,
    "text": "例えばオームやアクシオスを使うような他のデータ取得方法は、すべて自動的に重複排除されるわけではない。"
  },
  {
    "start": 16968348,
    "end": 16971196,
    "text": "このキャッシュ機能を使って自分でやらなければならない。"
  },
  {
    "start": 16971308,
    "end": 16971740,
    "text": "いいかい？"
  },
  {
    "start": 16971780,
    "end": 16977320,
    "text": "さて、ここで仕事を得たので、この情報からメタデータを生成することができる。"
  },
  {
    "start": 16977860,
    "end": 16980560,
    "text": "メタデータ・オブジェクトを返す。"
  },
  {
    "start": 16981300,
    "end": 16985924,
    "text": "肩書きには役職名を使いたい。"
  },
  {
    "start": 16985972,
    "end": 16991412,
    "text": "とりあえず空のメイン・タグを返して、メタデータが機能するかどうか確認してみよう。"
  },
  {
    "start": 16991596,
    "end": 16995884,
    "text": "これらの各項目は、詳細ページへのリンクにしたい。"
  },
  {
    "start": 16996052,
    "end": 17002480,
    "text": "求人結果コンポーネントに入り、各項目をリンクにまとめましょう。"
  },
  {
    "start": 17003000,
    "end": 17003856,
    "text": "次のリンク"
  },
  {
    "start": 17003888,
    "end": 17014440,
    "text": "もちろん、ジョブリストの項目内ではなく、ここにラップした理由は、管理ページでは後で別のリンクにしたいからです。"
  },
  {
    "start": 17014600,
    "end": 17016220,
    "text": "私たちはこれを外側でやっている。"
  },
  {
    "start": 17017240,
    "end": 17023140,
    "text": "まず、キーを外側のコンポーネントに移動させる。"
  },
  {
    "start": 17024000,
    "end": 17034510,
    "text": "そして、スラッシュ、ジョブズスラッシュ、スラッグを設定したURLのバックティック文字列にahrefを設定する。"
  },
  {
    "start": 17035730,
    "end": 17040090,
    "text": "スラッシュ・ジョブズ・スラッシュ"
  },
  {
    "start": 17040170,
    "end": 17043510,
    "text": "スラッグはジョブオブジェクトに含まれています。"
  },
  {
    "start": 17044010,
    "end": 17048510,
    "text": "を補間する。"
  },
  {
    "start": 17048930,
    "end": 17054218,
    "text": "ここでも、URLパラメータとして各仕事のユニークなアイデアを使うこともできた。"
  },
  {
    "start": 17054314,
    "end": 17055978,
    "text": "の方が読みやすい。"
  },
  {
    "start": 17056074,
    "end": 17059442,
    "text": "スラッグには、単なる数字ではなく、実際のタイトルが含まれている。"
  },
  {
    "start": 17059586,
    "end": 17061074,
    "text": "これを保存しよう。"
  },
  {
    "start": 17061202,
    "end": 17061554,
    "text": "そうだね。"
  },
  {
    "start": 17061602,
    "end": 17071074,
    "text": "これらの要素間の間隔を維持するために、このリンクにスタイルを設定し、このブロック・クラスでブロック表示に設定する必要があります。"
  },
  {
    "start": 17071202,
    "end": 17074922,
    "text": "現在、各リスト項目は詳細ページへのリンクとなっている。"
  },
  {
    "start": 17075026,
    "end": 17081528,
    "text": "クリックすると少しゆっくりロードされるが、本番ではこれらのページは静的にキャッシュされ、瞬時にロードされる。"
  },
  {
    "start": 17081634,
    "end": 17085092,
    "text": "今、私が気にしているのは、このタイトルが正しいかどうかだ。"
  },
  {
    "start": 17085196,
    "end": 17086840,
    "text": "フルスタック開発者"
  },
  {
    "start": 17087300,
    "end": 17090676,
    "text": "これがダイナミック・メタデータを生成する方法だ。"
  },
  {
    "start": 17090828,
    "end": 17093220,
    "text": "さて、ここでレイアウトを完成させよう。"
  },
  {
    "start": 17093300,
    "end": 17103724,
    "text": "まず最初に、他のページのm autoやtenと同じように、mainタグを最大幅5 xlでスタイルする。"
  },
  {
    "start": 17103772,
    "end": 17106400,
    "text": "このページはある程度一貫性を保ちたい。"
  },
  {
    "start": 17107110,
    "end": 17111010,
    "text": "デフォルトでフレックスボックスとフレックスカラムにします。"
  },
  {
    "start": 17112550,
    "end": 17126014,
    "text": "この詳細ページでは、左側に求人情報、右側に小さなサイドバーがあり、そこに応募リンクがあります。"
  },
  {
    "start": 17126102,
    "end": 17134050,
    "text": "小さい画面では下に、MD以上の画面では水平に並べたい。"
  },
  {
    "start": 17134230,
    "end": 17145210,
    "text": "そして、アラインメントのために中央のクラス項目をいくつか追加し、5つのギャップとMD項目を開始する。"
  },
  {
    "start": 17145370,
    "end": 17147474,
    "text": "どれも大丈夫だ。"
  },
  {
    "start": 17147522,
    "end": 17150922,
    "text": "そしてここに仕事の詳細ページを置く。"
  },
  {
    "start": 17151026,
    "end": 17157082,
    "text": "このコンポーネントは、後で管理ページで再利用したいので、別のコンポーネントにしたい。"
  },
  {
    "start": 17157146,
    "end": 17162066,
    "text": "管理画面はサイドバーが違うだけで、仕事内容も何もかも同じだ。"
  },
  {
    "start": 17162218,
    "end": 17169890,
    "text": "別のページで使うので、これを別のコンポーネントにしてcomponentsフォルダに入れよう。"
  },
  {
    "start": 17170050,
    "end": 17185802,
    "text": "求人ページ、求人詳細ページ、エクスポートデフォルト機能の求人ページと呼びますが、クライアントサイドの機能は必要ないので、これらはまだサーバーコンポーネントです。"
  },
  {
    "start": 17185946,
    "end": 17193540,
    "text": "さて、このジョブページコンポーネントには、情報を抽出できるように、prophとして1つのジョブを渡します。"
  },
  {
    "start": 17194160,
    "end": 17205540,
    "text": "ジョブページのプロップスで、再びプリズマクライアントからこのジョブタイプを使用し、これをこのコンポーネントに渡します。"
  },
  {
    "start": 17208920,
    "end": 17216340,
    "text": "また、ジョブを常に繰り返す必要がないように、このジョブ変数を再構築したい。"
  },
  {
    "start": 17216890,
    "end": 17235194,
    "text": "このページに表示したいすべてのデータ、タイトル、説明文、会社名、申し込みURL。"
  },
  {
    "start": 17235362,
    "end": 17240710,
    "text": "ここでは、会社のウェブサイトへのリンクを生成したいので、URLだけが欲しい。"
  },
  {
    "start": 17241530,
    "end": 17251310,
    "text": "次に、タイプ、場所のタイプ、場所の給与、会社のロゴのURLが必要です。"
  },
  {
    "start": 17251810,
    "end": 17254710,
    "text": "次にレイアウトそのものを返してみよう。"
  },
  {
    "start": 17255250,
    "end": 17261354,
    "text": "外側のタグにはセクションを使用する。"
  },
  {
    "start": 17261442,
    "end": 17263310,
    "text": "divを使うこともできる。"
  },
  {
    "start": 17263930,
    "end": 17277030,
    "text": "これをw foilとgrowでスタイルし、フレックスボックスの内側の空いているスペースを使用するようにし、スペースワイヤー5で縦のスペースを追加する。"
  },
  {
    "start": 17278850,
    "end": 17289510,
    "text": "ここに、flex item centerと3つのギャップでスタイルを設定した別のdivを置き、その下に別のdivを置く。"
  },
  {
    "start": 17290250,
    "end": 17295010,
    "text": "上部のdivには、タイプや場所などのメタ情報が入ります。"
  },
  {
    "start": 17295090,
    "end": 17299318,
    "text": "この下にあるdivには、マークダウンとしてレンダリングされた説明文が入ります。"
  },
  {
    "start": 17299454,
    "end": 17307170,
    "text": "ここではまず、会社のロゴをレンダリングしたいが、ロゴをアップロードする必要はないので、存在する場合に限る。"
  },
  {
    "start": 17307670,
    "end": 17314570,
    "text": "会社のロゴのURLが定義されているかどうかをチェックし、次の画像をレンダリングする。"
  },
  {
    "start": 17318390,
    "end": 17320670,
    "text": "予備のプレースホルダーは必要ない。"
  },
  {
    "start": 17320750,
    "end": 17324770,
    "text": "このエントリーにロゴがない場合は、画像をまったく表示しません。"
  },
  {
    "start": 17325320,
    "end": 17328700,
    "text": "SRZはもちろん会社のロゴURLである。"
  },
  {
    "start": 17329760,
    "end": 17334820,
    "text": "altテキストには、文字列の会社のロゴを挿入する。"
  },
  {
    "start": 17336280,
    "end": 17340580,
    "text": "幅と高さを100ピクセルに設定した。"
  },
  {
    "start": 17341680,
    "end": 17346340,
    "text": "最後に、丸みを帯びたエクセルを使って、再び丸みをつける。"
  },
  {
    "start": 17347240,
    "end": 17352790,
    "text": "すでにロゴがある仕事を選んで、画面上で確認できるようにしよう。"
  },
  {
    "start": 17353650,
    "end": 17364150,
    "text": "ページTSXファイルに移動して、ここにジョブページを入れて、フェッチしたジョブを渡してみましょう。"
  },
  {
    "start": 17364490,
    "end": 17367310,
    "text": "これを保存すると、すでにロゴが表示される。"
  },
  {
    "start": 17367810,
    "end": 17384120,
    "text": "そして、この会社ロゴのURLの表現の真下に、別のdivを配置します。これはフレックス行なので、ロゴは左側に表示され、この下のdivは右側に表示されます。"
  },
  {
    "start": 17384820,
    "end": 17392556,
    "text": "ここに別のdivを入れ、hを1つ、今度は小文字のhを入れる。"
  },
  {
    "start": 17392668,
    "end": 17402462,
    "text": "タイトルのレンダリングにデフォルトのスタイルを使いたくないので、少し小さめで、デフォルトのh oneスタイルを使わないようにしたい。"
  },
  {
    "start": 17402636,
    "end": 17409950,
    "text": "テキストをエクセルに設定し、フォントを太字にした。"
  },
  {
    "start": 17411610,
    "end": 17421674,
    "text": "次に、会社名をレンダリングし、アプリケーションのURLが提供されている場合は、この会社名を会社のウェブサイトのルートURLへのリンクにもしたい。"
  },
  {
    "start": 17421802,
    "end": 17428602,
    "text": "アプリケーションのリンクがapple.com applyの場合、このリンクはjustapple.comを指すようにしたい。"
  },
  {
    "start": 17428746,
    "end": 17441386,
    "text": "下に段落タグを置き、これを半太字にして、ここに三項演算子を使った式を置く。"
  },
  {
    "start": 17441538,
    "end": 17453110,
    "text": "アプリケーションのURLが提供されていれば、何かをレンダリングし、そうでなければ別のものをレンダリングする。"
  },
  {
    "start": 17453850,
    "end": 17461420,
    "text": "そうでない場合は、会社名だけの巨大なばんそうこうをレンダリングしたい。"
  },
  {
    "start": 17462640,
    "end": 17476940,
    "text": "アプリケーションのURLが存在する場合、私はここに会社名も表示し、ウェブサイトのURLも指すリンクをレンダリングしたい。"
  },
  {
    "start": 17477320,
    "end": 17484398,
    "text": "ahrefを追加し、前に説明したようにアプリケーションURLのルートURLが欲しい。"
  },
  {
    "start": 17484504,
    "end": 17489830,
    "text": "新しいURLオブジェクトをすべて大文字のURLで作成することで、これを得ることができる。"
  },
  {
    "start": 17490170,
    "end": 17501474,
    "text": "アプリケーションのURLを渡し、このオリジンフィールドにアクセスすると、相対パスや検索パラメータを含まないルートURLだけが格納される。"
  },
  {
    "start": 17501562,
    "end": 17508866,
    "text": "アプリケーションのURLがapple.comアプリケーションの場合、これはapple.comだけを指す。"
  },
  {
    "start": 17509058,
    "end": 17516520,
    "text": "また、このリンクに少しスタイルを付けたい。なぜなら、Taewinのcssリンクのデフォルトでは、スタイルが全く設定されていないからだ。"
  },
  {
    "start": 17517180,
    "end": 17528000,
    "text": "色をテキストグリーン500に設定し、リンクの上にカーソルを置くと下線が引かれるようにしたい。"
  },
  {
    "start": 17528340,
    "end": 17534044,
    "text": "ここにアプリケーションのURLがあるので、これはflow.comのコーディングを指すリンクになる。"
  },
  {
    "start": 17534172,
    "end": 17539996,
    "text": "求人エントリーに応募URLがない場合は、通常のテキストになります。"
  },
  {
    "start": 17540148,
    "end": 17549560,
    "text": "そして、このリンクの下に、リストにも表示されているのと同じように、タイプ、勤務地、給与などのメタ情報を表示したい。"
  },
  {
    "start": 17550580,
    "end": 17559960,
    "text": "この内側のdivの下に、私たちのhを包むdivと、Natahに入れた会社名があります。"
  },
  {
    "start": 17561060,
    "end": 17568248,
    "text": "この差分では、テキストをミュートし、前景色をライトグレーに戻した。"
  },
  {
    "start": 17568384,
    "end": 17573860,
    "text": "というのも、この項目は非常によく似ているからだ。"
  },
  {
    "start": 17574200,
    "end": 17578500,
    "text": "実際、ここにも同じテキストをミュートした前景ディブがある。"
  },
  {
    "start": 17578880,
    "end": 17584020,
    "text": "このdivの内容をコピーして、ここに貼り付けよう。"
  },
  {
    "start": 17585120,
    "end": 17605418,
    "text": "これらのアイコンとユーティリティ関数をインポートする必要があるが、実はこの詳細ページでは、作成されたタイムスタンプを表示したくない。"
  },
  {
    "start": 17605594,
    "end": 17610770,
    "text": "また、この項目が小さな画面で削除されるのも避けたい。"
  },
  {
    "start": 17610850,
    "end": 17615952,
    "text": "SMの非表示を削除すると、そこにある。"
  },
  {
    "start": 17616146,
    "end": 17622636,
    "text": "次に、先ほど作成した空のdivの下に、説明をレンダリングしたい。"
  },
  {
    "start": 17622668,
    "end": 17626324,
    "text": "もちろんデフォルトでは、ここに生のマークダウンが表示されるだけだ。"
  },
  {
    "start": 17626412,
    "end": 17628492,
    "text": "これを適切にフォーマットする必要がある。"
  },
  {
    "start": 17628596,
    "end": 17631204,
    "text": "また、ここで若干の水増しをしたい。"
  },
  {
    "start": 17631252,
    "end": 17640396,
    "text": "もう一度ページを見てみると、横方向のパディングが3px足りない。"
  },
  {
    "start": 17640588,
    "end": 17642532,
    "text": "さて、このマークダウンをレンダリングしたい。"
  },
  {
    "start": 17642676,
    "end": 17651960,
    "text": "マークダウン文字列を渡すとレンダリングしてくれる。"
  },
  {
    "start": 17652340,
    "end": 17654564,
    "text": "私たちはすでにこれを最初に設置した。"
  },
  {
    "start": 17654692,
    "end": 17660000,
    "text": "必要であれば別の場所でも再利用できるように、そのための新しいコンポーネントを作ろう。"
  },
  {
    "start": 17660540,
    "end": 17671290,
    "text": "マークダウンTSXエクスポート・デフォルト機能マークダウンと呼ぶことにする。"
  },
  {
    "start": 17673670,
    "end": 17680090,
    "text": "もちろん、マークダウン文字列そのものをこのタグの子として渡す必要がある。"
  },
  {
    "start": 17680430,
    "end": 17693650,
    "text": "というのも、このコンポーネントは文字列の子を渡して初めて意味を成すからだ。"
  },
  {
    "start": 17695150,
    "end": 17704284,
    "text": "そして、これらのプロップを渡し、再びこのリアクト・マークダウンを返す。"
  },
  {
    "start": 17704332,
    "end": 17721200,
    "text": "このコンポーネントを使用できるように、リアクト・マークダウンをリアクト・マイナス・マークダウンから手動でインポートし、子コンポーネントを転送します。"
  },
  {
    "start": 17721980,
    "end": 17724114,
    "text": "デフォルトではどうなっているか見てみよう。"
  },
  {
    "start": 17724212,
    "end": 17733510,
    "text": "これを保存し、ここで実際に説明が定義されているかどうかをチェックする。"
  },
  {
    "start": 17733670,
    "end": 17742570,
    "text": "そして、先ほど作成したマークダウン・コンポーネントをレンダリングし、ここでは説明文を子として渡したい。"
  },
  {
    "start": 17743910,
    "end": 17744790,
    "text": "ほらね。"
  },
  {
    "start": 17744870,
    "end": 17746542,
    "text": "これでテキストは太字になった。"
  },
  {
    "start": 17746686,
    "end": 17750010,
    "text": "もっと大きな説明のページを見てみよう。"
  },
  {
    "start": 17751020,
    "end": 17753388,
    "text": "これじゃない、これだ。"
  },
  {
    "start": 17753524,
    "end": 17755012,
    "text": "以前より良くなった。"
  },
  {
    "start": 17755116,
    "end": 17759908,
    "text": "少なくとも太字になったが、間隔が狭い。"
  },
  {
    "start": 17760004,
    "end": 17762092,
    "text": "また、私たちはリストをレンダリングしません。"
  },
  {
    "start": 17762196,
    "end": 17764500,
    "text": "この中には実際にリストになっているものもある。"
  },
  {
    "start": 17764620,
    "end": 17768960,
    "text": "このreactマークダウン・コンポーネントを独自のスタイルでカスタマイズすることができる。"
  },
  {
    "start": 17769380,
    "end": 17781036,
    "text": "まず最初に、この太字のテキストや段落のような異なるマークダウン要素の間に縦の間隔ができるように、クラス名のスペースyを3つ追加する。"
  },
  {
    "start": 17781188,
    "end": 17786084,
    "text": "そして、マークダウンから生成される各HTMLタグをカスタマイズすることができる。"
  },
  {
    "start": 17786252,
    "end": 17791924,
    "text": "これもまた、コンポーネントと呼ばれるreactマークダウンのプロップを介して行う。"
  },
  {
    "start": 17792012,
    "end": 17794172,
    "text": "にJavaScriptオブジェクトを渡す。"
  },
  {
    "start": 17794276,
    "end": 17796320,
    "text": "中括弧を2つ。"
  },
  {
    "start": 17796860,
    "end": 17802124,
    "text": "ここでは、可能なHTMLタグごとにキーを用意している。"
  },
  {
    "start": 17802252,
    "end": 17805200,
    "text": "例えば、リストのレンダリング方法を指示することができる。"
  },
  {
    "start": 17805720,
    "end": 17817816,
    "text": "順序なしリストにはul colonを書き、ここではpropsを渡される関数を返す。"
  },
  {
    "start": 17818008,
    "end": 17826760,
    "text": "ここではULエレメントを返したいので、子エレメントを含む小道具を広げたい。"
  },
  {
    "start": 17826880,
    "end": 17835910,
    "text": "このリストの中に何を入れてもいいし、これを返す意味は、クラス名を追加することでこの要素をスタイル化できるということだ。"
  },
  {
    "start": 17836030,
    "end": 17841454,
    "text": "現在、各リストはスタイルなしですが、これもtailwind Cssのデフォルトです。"
  },
  {
    "start": 17841622,
    "end": 17853134,
    "text": "これらのリストをスタイリングするために、間隔を変更するlist insideと、リストの前に小さな点を追加するlist diskの2つのクラスを追加する。"
  },
  {
    "start": 17853302,
    "end": 17857124,
    "text": "これでUL要素がマークダウン・スタイルになりました。"
  },
  {
    "start": 17857302,
    "end": 17868192,
    "text": "このコンポーネント・コンフィギュレーションの中にあるすべてのHTMLタグに対してこれを行うことができます。アンカー・タグであるリンクにもスタイルを設定してみましょう。"
  },
  {
    "start": 17868296,
    "end": 17872500,
    "text": "再びコロンで小道具を通過する。"
  },
  {
    "start": 17872960,
    "end": 17886210,
    "text": "今回もリンクをレンダリングしたいが、今回はnextリンクではない。なぜなら、これらのリンクは通常外部URLを指し、nextリンクは内部URLに対してのみ意味があるからだ。"
  },
  {
    "start": 17887110,
    "end": 17893118,
    "text": "そしてまた、子供たちやagerefなどを含むすべての小道具を広げたい。"
  },
  {
    "start": 17893254,
    "end": 17897494,
    "text": "次に、これをテキスト・スクリーン500で再度スタイルしたい。"
  },
  {
    "start": 17897622,
    "end": 17900770,
    "text": "これはアンダーライン次第だ。"
  },
  {
    "start": 17901390,
    "end": 17910250,
    "text": "また、これらのリンクを新しいタブで開きたい。"
  },
  {
    "start": 17911150,
    "end": 17916358,
    "text": "その中にリンクがあるエントリーを探してみよう。"
  },
  {
    "start": 17916454,
    "end": 17917750,
    "text": "ああ、これがそうだ。"
  },
  {
    "start": 17917910,
    "end": 17922142,
    "text": "これはマークダウンの一部だが、実際のリンクとしてレンダリングされる。"
  },
  {
    "start": 17922326,
    "end": 17925478,
    "text": "ちなみにSmartdiaryは私が作っているスタートアップだ。"
  },
  {
    "start": 17925614,
    "end": 17927462,
    "text": "ぜひご覧になってください。"
  },
  {
    "start": 17927566,
    "end": 17930890,
    "text": "Smartdiary co.comではなく、co."
  },
  {
    "start": 17931310,
    "end": 17935388,
    "text": "マークダウンをレンダリングしない場合、どのように見えるか見てみよう。"
  },
  {
    "start": 17935574,
    "end": 17945736,
    "text": "ちょっとだけ、このマークダウン・パーサーを削除して、生の説明をレンダリングしてみよう。"
  },
  {
    "start": 17945808,
    "end": 17951940,
    "text": "これはマークダウンのリンク構文だが、実際のマークダウンをレンダリングする。"
  },
  {
    "start": 17952320,
    "end": 17954536,
    "text": "今のところ、スタイリングはこれで十分だ。"
  },
  {
    "start": 17954608,
    "end": 17964114,
    "text": "繰り返しになるが、このreactマークダウンタグにさらにコンポーネントを追加してカスタマイズすることもできるが、今のところはリンクとリストだけでいい。"
  },
  {
    "start": 17964242,
    "end": 17973670,
    "text": "次に、このスラッグのジョブが存在しない場合にリダイレクトするために、not foundページを作成したいと思います。"
  },
  {
    "start": 17974050,
    "end": 17975522,
    "text": "試してみよう。"
  },
  {
    "start": 17975706,
    "end": 17979082,
    "text": "ところで、このナメクジの見た目も見てみよう。"
  },
  {
    "start": 17979186,
    "end": 17987968,
    "text": "これはプレースホルダー・データの一部なので一桁の数字があるだけだが、フロントエンドで作成したものにはこのURLがある。"
  },
  {
    "start": 17988114,
    "end": 17993388,
    "text": "タイトルを小文字で入力し、次に10桁のランダムな文字列を入力する。"
  },
  {
    "start": 17993524,
    "end": 17999652,
    "text": "存在しない仕事を開こうとすると、デフォルトのnot foundページが表示される。"
  },
  {
    "start": 17999756,
    "end": 18006196,
    "text": "これはnext jsのデフォルトで提供されているが、これをカスタマイズして自分のページ用に置き換えることができる。"
  },
  {
    "start": 18006388,
    "end": 18020648,
    "text": "このために、私たちはアプリのフォルダに入り、アプリのフォルダの中に、この正確な名前で新しいファイルを作成する。"
  },
  {
    "start": 18020744,
    "end": 18028420,
    "text": "エラーTsXのように、not foundというデフォルトの関数をエクスポートする。"
  },
  {
    "start": 18028880,
    "end": 18032740,
    "text": "コンポーネントの名前はあなた次第。"
  },
  {
    "start": 18033160,
    "end": 18040140,
    "text": "ここでは、他のページと同じようにスタイルを設定したメイン・タグを返す。"
  },
  {
    "start": 18041170,
    "end": 18053110,
    "text": "最大幅5 xl m auto my ten space y five, px three and text center."
  },
  {
    "start": 18055770,
    "end": 18070480,
    "text": "ここには、not foundと書かれた大文字のhと、その下に小さなテキストを入れ、最大幅は5ではなく5xlとする。"
  },
  {
    "start": 18072900,
    "end": 18092610,
    "text": "テキストには、申し訳ありませんが、お探しのページは存在しませんと表示され、ユーザーにはいくつかの情報が表示されます。"
  },
  {
    "start": 18092740,
    "end": 18096462,
    "text": "そうすると、自動的に \"Not Found \"ページが表示される。"
  },
  {
    "start": 18096646,
    "end": 18100490,
    "text": "仕事の詳細ページのレイアウトは基本的に完成している。"
  },
  {
    "start": 18101030,
    "end": 18105790,
    "text": "また、右側にサイドバーを設け、申し込みのリンクを貼りたい。"
  },
  {
    "start": 18105910,
    "end": 18111030,
    "text": "求人ページに戻って、このリンクを生成しましょう。"
  },
  {
    "start": 18111150,
    "end": 18114702,
    "text": "申し込みのEメールが提供されていれば、それを使いたい。"
  },
  {
    "start": 18114766,
    "end": 18119950,
    "text": "URLが提供されている場合は、代わりにそのURLを使いたいが、これは私が思いついたロジックに過ぎない。"
  },
  {
    "start": 18119990,
    "end": 18124126,
    "text": "これは好きなように処理できるし、私たちのページでもそうしている。"
  },
  {
    "start": 18124198,
    "end": 18130638,
    "text": "ジョブを取得した後、このジョブからEメールとURLを再構築したい。"
  },
  {
    "start": 18130694,
    "end": 18136090,
    "text": "オブジェクト、アプリケーションの電子メール、アプリケーションのURL。"
  },
  {
    "start": 18138230,
    "end": 18141570,
    "text": "そして、アプリケーション・リンクというコンサを作成する。"
  },
  {
    "start": 18143510,
    "end": 18146650,
    "text": "ここでは、アプリケーションの電子メールが存在するかどうかをチェックします。"
  },
  {
    "start": 18146950,
    "end": 18148130,
    "text": "クエスチョンマーク。"
  },
  {
    "start": 18148710,
    "end": 18154090,
    "text": "そうすると、リンクは次のようになるはずだ。バックティック文字列、メールツアー、コロン。"
  },
  {
    "start": 18155150,
    "end": 18161166,
    "text": "ここに、メールツールを使ったアプリケーションの電子メールを入れます。"
  },
  {
    "start": 18161278,
    "end": 18165942,
    "text": "私たちは、この電子メールアドレスを自動的にデバイスの電子メールクライアントで開きます。"
  },
  {
    "start": 18166046,
    "end": 18167650,
    "text": "見たことがあるかもしれない。"
  },
  {
    "start": 18168550,
    "end": 18175930,
    "text": "アプリケーションのEメールが定義されていない場合は、代わりにアプリケーションのURLをレンダリングします。"
  },
  {
    "start": 18176870,
    "end": 18183730,
    "text": "バリデーションスキーマでは、新しい求人エントリーを作成するときにこれらの値の1つを渡さなければならないと定義しました。"
  },
  {
    "start": 18184190,
    "end": 18190638,
    "text": "とはいえ、typescriptはこれらのいずれかが定義されていなければならないことを実際には知らないので、アプリケーション・リンクはまだnullのままである可能性がある。"
  },
  {
    "start": 18190734,
    "end": 18196150,
    "text": "というのも、この検証は新しいジョブを投入するときに行っているからだ。"
  },
  {
    "start": 18196270,
    "end": 18201290,
    "text": "アプリケーションのリンクが未定義かどうかをチェックするのだ。"
  },
  {
    "start": 18202360,
    "end": 18207860,
    "text": "そしてまず、どこかが間違っているので、コンソールにエラーをロックしたい。"
  },
  {
    "start": 18208680,
    "end": 18212312,
    "text": "求人には応募リンクもメールもない。"
  },
  {
    "start": 18212496,
    "end": 18227484,
    "text": "本番のサーバーログでこれを確認し、not found againにリダイレクトしたいのですが、LinkedInに応募がない場合、求人を表示する意味がないので、再度404ページを表示します。"
  },
  {
    "start": 18227562,
    "end": 18230500,
    "text": "これは決してあってはならないことなのだ。"
  },
  {
    "start": 18231080,
    "end": 18235288,
    "text": "そして求人ページの横にサイドバーを表示したい。"
  },
  {
    "start": 18235424,
    "end": 18237180,
    "text": "ここにザイトを加える。"
  },
  {
    "start": 18238240,
    "end": 18243100,
    "text": "ここでは、componentsフォルダにあるボタンを表示したい。"
  },
  {
    "start": 18243760,
    "end": 18250200,
    "text": "アプリケーションのリンクを使うので、これはボタンではなくリンクですが、ボタンのように見えるはずです。"
  },
  {
    "start": 18250320,
    "end": 18266070,
    "text": "ここでもas childプロパティを持つボタン・コンポーネントを使用し、アプリケーション・リンクへの外部リンクを貼ります。"
  },
  {
    "start": 18266370,
    "end": 18268750,
    "text": "それから、これを少しスタイリングしたい。"
  },
  {
    "start": 18269170,
    "end": 18272750,
    "text": "幅は40に設定した。"
  },
  {
    "start": 18274530,
    "end": 18278522,
    "text": "MDのブレイクポイントでは、幅がフィットするように設定している。"
  },
  {
    "start": 18278626,
    "end": 18280830,
    "text": "これがどのように見えるかは、すぐにわかるだろう。"
  },
  {
    "start": 18281800,
    "end": 18286928,
    "text": "今すぐ申し込んでください。"
  },
  {
    "start": 18287024,
    "end": 18295820,
    "text": "これはフレックスコイルなので、互いが下にあり、下にあるときはこの固定幅でボタンを少し大きくした。"
  },
  {
    "start": 18296280,
    "end": 18310600,
    "text": "画面が大きくなると、右側に移動します。なぜなら、フレックス行、MDフレックス行になり、幅がz2になって、その中にテキストを収めるのに十分な大きさになるからです。"
  },
  {
    "start": 18311180,
    "end": 18316052,
    "text": "この上にカーソルを置くと、アプリケーションのURLを指していることがわかります。"
  },
  {
    "start": 18316116,
    "end": 18318040,
    "text": "もうひとつ見てみよう。"
  },
  {
    "start": 18318900,
    "end": 18325556,
    "text": "チャットGPTとURLはOpenAI.comが適用されます。"
  },
  {
    "start": 18325748,
    "end": 18328720,
    "text": "メールアドレスがあるかどうか確認してみよう。"
  },
  {
    "start": 18329540,
    "end": 18338030,
    "text": "このリンクをクリックすると、お使いのデバイスでメールクライアントが自動的に開きます。"
  },
  {
    "start": 18338150,
    "end": 18342694,
    "text": "さて、レイアウトは完成したが、まだデフォルトのキャッシュを処理しなければならない。"
  },
  {
    "start": 18342742,
    "end": 18346374,
    "text": "Next JSは可能な限り静的にページをキャッシュする。"
  },
  {
    "start": 18346502,
    "end": 18350878,
    "text": "これは、ページが開かれたときではなく、コンパイル時にデータがフェッチされることを意味する。"
  },
  {
    "start": 18350934,
    "end": 18360478,
    "text": "次にJSがレイアウト全体をレンダリングし、実行時にユーザーがページを開くと、この完成したレイアウトがユーザーに提供される。"
  },
  {
    "start": 18360614,
    "end": 18372462,
    "text": "問題は、ページがスラッグのような動的なパラメータを持っている場合、次のJSがスラッグに渡した値を事前に知ることができないため、静的キャッシュを無効にしてしまうことだ。"
  },
  {
    "start": 18372526,
    "end": 18377438,
    "text": "つまり、コンパイル時にフェッチすることができないのだ。"
  },
  {
    "start": 18377534,
    "end": 18380846,
    "text": "実際にページを開いたときに、実行時にフェッチしなければならない。"
  },
  {
    "start": 18380958,
    "end": 18394622,
    "text": "このプロジェクトをNPM run buildでコンパイルすると、このようなアイコンが表示され、丸印は静的にキャッシュされていることを意味する。"
  },
  {
    "start": 18394686,
    "end": 18396022,
    "text": "これはいいし、速い。"
  },
  {
    "start": 18396126,
    "end": 18403918,
    "text": "例えば、提出された求人の確認ページなどでは、特別なことは何もしていないので、可能な限り自動的にこれを行います。"
  },
  {
    "start": 18404054,
    "end": 18410198,
    "text": "このスラッグページは動的にレンダリングされる。"
  },
  {
    "start": 18410374,
    "end": 18414704,
    "text": "NPM startで本番モードで起動することもできる。"
  },
  {
    "start": 18414902,
    "end": 18417596,
    "text": "その後、ページを更新する必要がある。"
  },
  {
    "start": 18417788,
    "end": 18422172,
    "text": "これらのエントリーをクリックすると、ロードに時間がかかる。"
  },
  {
    "start": 18422316,
    "end": 18431172,
    "text": "遅くはないが、ページを開いたときにデータベースからデータを取得しなければならないので、即座にはできない。"
  },
  {
    "start": 18431276,
    "end": 18438988,
    "text": "このような動的ページで静的キャッシュを有効にするには、事前にnext jsに期待するスラッグを伝えておく必要がある。"
  },
  {
    "start": 18439124,
    "end": 18443300,
    "text": "データベースにどのようなエントリーがあるかわかっているからできることでしょう？"
  },
  {
    "start": 18443340,
    "end": 18451350,
    "text": "我々はすでにすべてのスラッグを知っており、それらを次のJに伝えるには、このファイルから別の関数をエクスポートしなければならない。"
  },
  {
    "start": 18451430,
    "end": 18463526,
    "text": "これはエクスポートの非同期関数で、非常に正確な名前がついている。"
  },
  {
    "start": 18463678,
    "end": 18472092,
    "text": "キャメルの場合、静的パラメータを生成する。"
  },
  {
    "start": 18472116,
    "end": 18495680,
    "text": "レンダリングしたいすべてのスラッグが必要なので、データベースから取得してみましょう。 const jobs equals arrayed prisma job dot findmenu approvedがtrueの場合、スラッグだけが必要で、他には何も必要ありません。"
  },
  {
    "start": 18496220,
    "end": 18513820,
    "text": "そして、各スラッグを文字列として含む配列を返すだけなので、次のようになる。"
  },
  {
    "start": 18513980,
    "end": 18519332,
    "text": "このジョブズ・オブジェクトは、スラッグを含むJavaScriptオブジェクトですよね？"
  },
  {
    "start": 18519516,
    "end": 18521964,
    "text": "この形にマッピングしなければならない。"
  },
  {
    "start": 18522132,
    "end": 18530396,
    "text": "ドットマップ、かっこ、中かっこ、中かっこ、中かっこ、中かっこ、中かっこ"
  },
  {
    "start": 18530588,
    "end": 18536840,
    "text": "スラッグ文字列は、このマップ呼び出しから文字列の配列に変換して返したいものだ。"
  },
  {
    "start": 18537460,
    "end": 18539324,
    "text": "私たちがすべきことはこれだけだ。"
  },
  {
    "start": 18539412,
    "end": 18550826,
    "text": "NPM run buildでプロジェクトを再度コンパイルすると、ルクスページが静的にキャッシュされ、静的なHTMLとしてレンダリングされていることがわかります。"
  },
  {
    "start": 18550948,
    "end": 18553166,
    "text": "ここには、静的な小道具を使用すると書いてある。"
  },
  {
    "start": 18553198,
    "end": 18556278,
    "text": "これはページ・ルーターでの古いやり方だった。"
  },
  {
    "start": 18556334,
    "end": 18559846,
    "text": "アプリのルーターでは、静的パラメーターを生成することで処理される。"
  },
  {
    "start": 18559998,
    "end": 18567422,
    "text": "さて、このページは静的にキャッシュされているので、もう一度始めてみると、読み込み時間に大きな違いがあることに気づくだろう。"
  },
  {
    "start": 18567566,
    "end": 18581010,
    "text": "というのも、next J'sはリンクも事前に取得し、この静的にキャッシュされたページと合わせて、ローディング時間はほぼゼロだからだ。"
  },
  {
    "start": 18581130,
    "end": 18588130,
    "text": "繰り返しになるが、next JSはページを開いた時ではなく、コンパイル時にすべてのジョブデータを取得する。"
  },
  {
    "start": 18588290,
    "end": 18594714,
    "text": "そして、このHTMLをレンダリングし、ページを開いたユーザーにキャッシュされたHTMLを返す。"
  },
  {
    "start": 18594802,
    "end": 18598630,
    "text": "もちろん、読み込み時間が速いことはSEOにとって非常に良いことだ。"
  },
  {
    "start": 18599210,
    "end": 18618572,
    "text": "静的パラメーターを生成するもう1つの良い副次的効果は、これを実装した後で、まだキャッシュしていない新しいスラッグを持つ新しいページがあった場合、フォームを通して新しい仕事を追加し、それを承認した後に起こります。"
  },
  {
    "start": 18618676,
    "end": 18627748,
    "text": "ここに含まれていないすべてのスラッグは、ユーザーが最初に開いたときにレンダリングされ、その後すべてのユーザーに対してキャッシュされます。"
  },
  {
    "start": 18627844,
    "end": 18633466,
    "text": "その場合、読み込みに時間がかかるのは、1人のユーザーに対して1回だけで、その後はキャッシュされる。"
  },
  {
    "start": 18633538,
    "end": 18637978,
    "text": "これは、最初に静的パラメーターを生成するように実装した場合にのみ起こる。"
  },
  {
    "start": 18638114,
    "end": 18640666,
    "text": "そうでなければ、常に動的にロードしていた。"
  },
  {
    "start": 18640818,
    "end": 18642630,
    "text": "オーケー、とてもクールだね。"
  },
  {
    "start": 18643090,
    "end": 18653186,
    "text": "もうひとつ、これはサーバー・コンポーネントなので、マークダウンもサーバー上でレンダリングされ、このマークダウン・ライブラリーがクライアントに届くことはない。"
  },
  {
    "start": 18653298,
    "end": 18657952,
    "text": "私たちはこれをサーバー上で実行し、クライアントは完成したHTMLだけを見る。"
  },
  {
    "start": 18658066,
    "end": 18666372,
    "text": "これはサーバー・コンポーネントの利点で、クライアントにすべてのパッケージを送信しないため、JavaScriptのバンドル・サイズが小さくなるからだ。"
  },
  {
    "start": 18666476,
    "end": 18669404,
    "text": "react markdownパッケージはサーバー上でのみ使用される。"
  },
  {
    "start": 18669492,
    "end": 18674532,
    "text": "また、これらによってページの読み込みがより速くなり、SEO対策にもなります。"
  },
  {
    "start": 18674636,
    "end": 18680820,
    "text": "このようなウェブサイトでSEOが重要なのは、これらのエントリーがGoogle検索で表示されるようにしたいからでしょう？"
  },
  {
    "start": 18680900,
    "end": 18686622,
    "text": "また、もしあなたが自分のブログやスタートアップを作っているのであれば、このようなことを知ることは本当に重要だ。"
  },
  {
    "start": 18686766,
    "end": 18689798,
    "text": "さて、私たちのウェブサイトはすでにとてもクールに見えますね。"
  },
  {
    "start": 18689894,
    "end": 18697166,
    "text": "求人をフィルタリングしたり、求人を見たり、新しい求人を投稿したりすることはできますが、それでも管理者のバックエンドが必要ですよね？"
  },
  {
    "start": 18697278,
    "end": 18699206,
    "text": "ここではページネーションも必要だ。"
  },
  {
    "start": 18699278,
    "end": 18700982,
    "text": "これを何とかしよう。"
  },
  {
    "start": 18701166,
    "end": 18701654,
    "text": "オーケー。"
  },
  {
    "start": 18701702,
    "end": 18708694,
    "text": "開発モードでプロジェクトを再度実行してください。"
  },
  {
    "start": 18708862,
    "end": 18713520,
    "text": "NPM run dev を実行し、ページを更新する。"
  },
  {
    "start": 18714180,
    "end": 18724164,
    "text": "認証には、認証プロバイダーであるlerkを使用する。lerkは、非常に強力な認証機能を簡単かつ迅速に実装できる。"
  },
  {
    "start": 18724252,
    "end": 18730012,
    "text": "認証の設定に1時間もかけたくないので、これは私たちの求人掲示板アプリケーションに最適です。"
  },
  {
    "start": 18730116,
    "end": 18731920,
    "text": "代わりに店員を使う。"
  },
  {
    "start": 18732580,
    "end": 18734396,
    "text": "ここでアカウントを作成しなければならない。"
  },
  {
    "start": 18734508,
    "end": 18737904,
    "text": "下のビデオの説明文に登録リンクを貼っておく。"
  },
  {
    "start": 18738052,
    "end": 18744312,
    "text": "アカウント作成は無料で、非常に寛大な無料ティアもあるので、何も支払う必要はない。"
  },
  {
    "start": 18744456,
    "end": 18748872,
    "text": "ここでアカウントを作成し、ダッシュボードにアクセスしてください。"
  },
  {
    "start": 18748936,
    "end": 18770452,
    "text": "ここで新しいアプリケーションを作成し、例えば次のj's job boardという名前を付けなければならない。"
  },
  {
    "start": 18770516,
    "end": 18777788,
    "text": "これは管理者用のダッシュボードなので、実際にはこれを無効にして、電子メールでのログインだけを可能にしたいのです。"
  },
  {
    "start": 18777964,
    "end": 18779556,
    "text": "もちろん、これはあなた次第だ。"
  },
  {
    "start": 18779628,
    "end": 18783388,
    "text": "どのソーシャル・プロバイダーでも有効にできるが、私はこれにこだわるつもりだ。"
  },
  {
    "start": 18783444,
    "end": 18785560,
    "text": "そしてアプリケーションを作成する。"
  },
  {
    "start": 18787180,
    "end": 18789300,
    "text": "それからセットアップガイドに入る。"
  },
  {
    "start": 18789420,
    "end": 18791688,
    "text": "次のJにもあるそうだ。"
  },
  {
    "start": 18791884,
    "end": 18800260,
    "text": "最初のステップは、これらのAPIキーをenvファイルにコピーすることだ。"
  },
  {
    "start": 18800680,
    "end": 18806080,
    "text": "いつものようにここに貼り付けてください。これは機密データなので、誰とも共有しないでください。"
  },
  {
    "start": 18806160,
    "end": 18809232,
    "text": "このチュートリアルを録画した後、これらのキーを削除します。"
  },
  {
    "start": 18809336,
    "end": 18815580,
    "text": "残りのセットアップ手順はドキュメントに記載されているが、もちろん私はすでに準備済みだ。"
  },
  {
    "start": 18815880,
    "end": 18820222,
    "text": "保護したいページをクロック・プロバイダに包まなければならない。"
  },
  {
    "start": 18820286,
    "end": 18830806,
    "text": "ウェブサイト全体を保護したいわけではないので、ルート・レイアウトには入れないようにしている。"
  },
  {
    "start": 18830918,
    "end": 18834130,
    "text": "私たちは、管理ページでの認証だけを望んでいます。"
  },
  {
    "start": 18834910,
    "end": 18837810,
    "text": "そのためにadminという新しいフォルダを作る。"
  },
  {
    "start": 18838470,
    "end": 18847490,
    "text": "ここにもう一つのレイアウト、TSXを配置し、管理ページでのみ有効なレイアウトを作成します。"
  },
  {
    "start": 18847800,
    "end": 18853020,
    "text": "ここでは、レイアウトエクスポートのデフォルト関数を作成します。"
  },
  {
    "start": 18853440,
    "end": 18880266,
    "text": "これをレイアウトと呼び、小道具としてルート・レイアウトと同じように子ノードを取り、このタイプはchildren colon react nodeで、店員プロバイダを返す。"
  },
  {
    "start": 18880338,
    "end": 18888710,
    "text": "どうやら、次の試合からはまた手動でインポートしなければならないようだ。"
  },
  {
    "start": 18889850,
    "end": 18892710,
    "text": "この中に時計のプロバイダーがある。"
  },
  {
    "start": 18895010,
    "end": 18909000,
    "text": "ここではこのタグを使って子ページをエントリーします。こうすることで、管理レイアウトのすべての子ページ（管理画面の下にあるすべてのページ）で時計が有効になります。"
  },
  {
    "start": 18909740,
    "end": 18913200,
    "text": "これらの管理ページのタイトルも変更したい。"
  },
  {
    "start": 18914700,
    "end": 18920120,
    "text": "metadata 型の const メタデータをエクスポートする。"
  },
  {
    "start": 18922060,
    "end": 18937410,
    "text": "タイトルをadminだけに設定したいのですが、ルートレイアウトのテンプレートがアクティブなままなので、実際にはadmin vertical bar flow jobsと表示され、adminレイアウトはこれで終わりです。"
  },
  {
    "start": 18937910,
    "end": 18940078,
    "text": "次にミドルウェアをセットアップする必要がある。"
  },
  {
    "start": 18940174,
    "end": 18944230,
    "text": "このミドルウェアは、店員が認証チェックを行うように配慮している。"
  },
  {
    "start": 18944310,
    "end": 18949958,
    "text": "管理ページを開く前に、これらのミドルウェアを直接SRCフォルダに入れる。"
  },
  {
    "start": 18950014,
    "end": 18954888,
    "text": "それらはここに置かれ、ミドルウェアと呼ばれなければならない。"
  },
  {
    "start": 18955064,
    "end": 18958900,
    "text": "これは、次のj'sアプリのルーターにあるもう一つの特別なファイルタイプである。"
  },
  {
    "start": 18959400,
    "end": 18971112,
    "text": "さて、ここでは次のj'sからインポートしたデフォルトの認証ミドルウェアをエクスポートし、空のコンフィギュレーションでこれを呼び出す。"
  },
  {
    "start": 18971296,
    "end": 18974620,
    "text": "これについても、クロックのドキュメントに記載されている。"
  },
  {
    "start": 18975640,
    "end": 18982526,
    "text": "次に、このミドルウェアの実行場所を定義するconst configをエクスポートする。"
  },
  {
    "start": 18982638,
    "end": 18990650,
    "text": "このマッチャーの値を文字列の配列の形で定義する。"
  },
  {
    "start": 18990950,
    "end": 18993490,
    "text": "の文字列に正規表現を入れる。"
  },
  {
    "start": 18993830,
    "end": 19004188,
    "text": "スラッシュ括弧を入力し、ここにもう1つの括弧を入力する。"
  },
  {
    "start": 19004374,
    "end": 19006080,
    "text": "これはダークマジックではない。"
  },
  {
    "start": 19006160,
    "end": 19013620,
    "text": "これは、すべての管理者ロールを保護し、クロック認証ミドルウェアを実行するための正規表現です。"
  },
  {
    "start": 19014120,
    "end": 19020840,
    "text": "これを保存して、次に未承認の仕事を見ることができる非常にシンプルな管理画面を設定したいと思います。"
  },
  {
    "start": 19021000,
    "end": 19033160,
    "text": "私たちは、このページTSXエクスポートデフォルトの機能ページまたは管理ページの管理フォルダに入れます。"
  },
  {
    "start": 19033820,
    "end": 19035640,
    "text": "繰り返すが、この名前は重要ではない。"
  },
  {
    "start": 19036180,
    "end": 19043428,
    "text": "とりあえず、認証がうまくいくかどうかを確認するために、管理ページと書かれたメイン・タグを返してみよう。"
  },
  {
    "start": 19043564,
    "end": 19053372,
    "text": "これを保存し、スラッシュ管理画面を開こうとすると、時計のログインが表示され、うまくいくはずだ。"
  },
  {
    "start": 19053516,
    "end": 19058282,
    "text": "デフォルトでは、この特別なURLでこのアカウントポータルを取得する。"
  },
  {
    "start": 19058476,
    "end": 19060110,
    "text": "これは事務員によって提供される。"
  },
  {
    "start": 19060150,
    "end": 19062238,
    "text": "これを自分のページに置き換えることができる。"
  },
  {
    "start": 19062334,
    "end": 19068934,
    "text": "他のチュートリアルではこのようにしましたが、このチュートリアルでは、単なる管理者ログインであり、URLは重要ではないので気にしませんでした。"
  },
  {
    "start": 19068982,
    "end": 19071686,
    "text": "我々はこの生成されたページにこだわることができる。"
  },
  {
    "start": 19071838,
    "end": 19089790,
    "text": "ここで、管理者用のバックエンドアカウントを作成します。florian@codinginflow.com。必要であれば、ソーシャルオフを有効にすることもできます。パスワードはflow jobs adminに設定します。"
  },
  {
    "start": 19090810,
    "end": 19109890,
    "text": "このような認証プロバイダーのクールなところは、このようなことを代行してくれることだ。"
  },
  {
    "start": 19109970,
    "end": 19112150,
    "text": "オーケー、すぐに確認させてくれ。"
  },
  {
    "start": 19112450,
    "end": 19118170,
    "text": "ログインした後、管理者ページに行き、認証された。"
  },
  {
    "start": 19118290,
    "end": 19119898,
    "text": "ページはまだ空のままだ。"
  },
  {
    "start": 19119954,
    "end": 19123522,
    "text": "今はこのメインタグを返していない。"
  },
  {
    "start": 19123706,
    "end": 19124890,
    "text": "私はいつもこれを忘れてしまう。"
  },
  {
    "start": 19124930,
    "end": 19126954,
    "text": "そこにテキスト管理ページがある。"
  },
  {
    "start": 19127122,
    "end": 19127442,
    "text": "そうだね。"
  },
  {
    "start": 19127466,
    "end": 19129906,
    "text": "では、この管理ページを作ってみよう。"
  },
  {
    "start": 19130098,
    "end": 19132354,
    "text": "まず、これを非同期関数にする。"
  },
  {
    "start": 19132402,
    "end": 19134114,
    "text": "これはサーバーコンポーネントである。"
  },
  {
    "start": 19134282,
    "end": 19137190,
    "text": "ここでは、未承認の仕事をすべて取得したい。"
  },
  {
    "start": 19137620,
    "end": 19143560,
    "text": "未承認ジョブの数は、レート・プリズマに等しい。"
  },
  {
    "start": 19144380,
    "end": 19164814,
    "text": "いつものように、このドットジョブをインポートしなければならない。"
  },
  {
    "start": 19164982,
    "end": 19171486,
    "text": "未承認の仕事だけを表示し、それをUIに表示したい。"
  },
  {
    "start": 19171678,
    "end": 19174318,
    "text": "まず、ここでスタイリングを付け加えたい。"
  },
  {
    "start": 19174414,
    "end": 19178130,
    "text": "通常通り、メイン・タグにクラス名を追加する。"
  },
  {
    "start": 19178590,
    "end": 19189410,
    "text": "Mオートマイテン最大幅5、XL、スペイシーテン、PXスリー。"
  },
  {
    "start": 19190350,
    "end": 19201610,
    "text": "そして、このメイン・タグの中に、管理ダッシュボードと書かれたクラス名テキストzenterを大文字のhで書く。"
  },
  {
    "start": 19203110,
    "end": 19214930,
    "text": "下に、フレックス・コイルと3つのギャップを持つ未承認求人のセクションを掲載した。"
  },
  {
    "start": 19216140,
    "end": 19224400,
    "text": "ここに、h2に未承認求人コロンという小見出しをつけたい。"
  },
  {
    "start": 19225140,
    "end": 19229012,
    "text": "管理ダッシュボードに異なるセクションがあるということです。"
  },
  {
    "start": 19229116,
    "end": 19248878,
    "text": "これは1つのセクションで、未承認求人のテキストを少し大きくして、テキストをlgにしてフォントを太くし、セクション内のhの2つの下に、これらの未承認求人を未承認求人にマッチするようにレンダリングしたい。"
  },
  {
    "start": 19249054,
    "end": 19253382,
    "text": "そして、それぞれの仕事をジョブ・リストに表示するんだ。"
  },
  {
    "start": 19253486,
    "end": 19258526,
    "text": "このリンクは、結果発表のページで行ったのと同じように、またリンクに巻き付ける。"
  },
  {
    "start": 19258718,
    "end": 19269330,
    "text": "これをここにコピーして貼り付け、次のリンクとジョブリストの項目をインポートしよう。"
  },
  {
    "start": 19269490,
    "end": 19282910,
    "text": "違いは、このリンクはスラッシュジョブではなく、管理ジョブスラッグを指すことです。スラッグは後で設定する新しいページで、そこでこれらのジョブを承認することができます。"
  },
  {
    "start": 19283250,
    "end": 19288106,
    "text": "未承認の仕事はないから、これを保存しても何も表示されない。"
  },
  {
    "start": 19288138,
    "end": 19290590,
    "text": "さっそくr1を作成しよう。"
  },
  {
    "start": 19290970,
    "end": 19294660,
    "text": "ちょっと、ちんぷんかんぷんなんだけど。"
  },
  {
    "start": 19295400,
    "end": 19296848,
    "text": "画像をアップロードする"
  },
  {
    "start": 19296904,
    "end": 19302460,
    "text": "この男のロケ地が遠隔地かどうかは知らない。"
  },
  {
    "start": 19302880,
    "end": 19306100,
    "text": "遠隔地の仕事でも場所を選ぶことはできる。"
  },
  {
    "start": 19307480,
    "end": 19330228,
    "text": "Blah@blah.com マークダウンの給料は、未承認の仕事が提出されたから、スラッシュ管理者に行く。管理者ページは管理者のためだけのものだから、フロントエンドに管理者ページへのリンクがないのは理にかなっていると思う。"
  },
  {
    "start": 19330284,
    "end": 19334156,
    "text": "いずれにせよ、そこに公開リンクがあってはならない。"
  },
  {
    "start": 19334228,
    "end": 19337292,
    "text": "これで管理者バックエンドに未承認のジョブが表示されました。"
  },
  {
    "start": 19337396,
    "end": 19343388,
    "text": "次に、これらの仕事を承認し、説明を見ることができる別のページを作成します。"
  },
  {
    "start": 19343524,
    "end": 19354170,
    "text": "もうひとつ、未承認ジョブの長さがゼロの場合、マップ・コールの下に空のテキストを表示したい。"
  },
  {
    "start": 19354790,
    "end": 19370370,
    "text": "そして、未承認の仕事はありませんというテキストを前景にミュートした段落タグをレンダリングしたい。"
  },
  {
    "start": 19370950,
    "end": 19378340,
    "text": "この作業を行う前に、店員のログインページを少しカスタマイズしたいと思います。"
  },
  {
    "start": 19378380,
    "end": 19383588,
    "text": "このページのクッキーを削除することでログアウトできます。"
  },
  {
    "start": 19383764,
    "end": 19386708,
    "text": "これにより、認証クッキーも削除されます。"
  },
  {
    "start": 19386844,
    "end": 19390412,
    "text": "クッキーとサイトデータについては、ここをクリックしてください。"
  },
  {
    "start": 19390596,
    "end": 19393480,
    "text": "サイトのデータのみを管理し、クッキーを削除します。"
  },
  {
    "start": 19393820,
    "end": 19399116,
    "text": "もしこれが見つからなくても、後で適切なログアウトボタンを追加するので、大した問題ではない。"
  },
  {
    "start": 19399308,
    "end": 19403968,
    "text": "そして、ページをリロードしなければならない。"
  },
  {
    "start": 19404164,
    "end": 19411160,
    "text": "店員ダッシュボードでは、一人のユーザーを見ることができ、認証の見た目や動作をカスタマイズすることができる。"
  },
  {
    "start": 19411280,
    "end": 19418280,
    "text": "まず、ソーシャル・プロバイダーを含め、さまざまなメール・プロバイダーを有効にすることができる。"
  },
  {
    "start": 19418400,
    "end": 19424784,
    "text": "ひとつクールなのは、制限にアクセスして許可リストを有効にすることだ。"
  },
  {
    "start": 19424912,
    "end": 19429504,
    "text": "これはプロ向けの機能だが、開発段階では無料で使うことができる。"
  },
  {
    "start": 19429592,
    "end": 19431548,
    "text": "これも本当に必要ない。"
  },
  {
    "start": 19431664,
    "end": 19438760,
    "text": "これにより、実際に管理者として想定されるメールアドレスのみを許可することができます。"
  },
  {
    "start": 19439260,
    "end": 19445732,
    "text": "florian@codingandflow.com、その後は誰もここに登録できない。"
  },
  {
    "start": 19445876,
    "end": 19455084,
    "text": "もしslash admin blah blah.comで新しいアカウントを作ろうとしたら、これはもう機能しないはずだ。"
  },
  {
    "start": 19455252,
    "end": 19457580,
    "text": "このメールアドレスは1つしか使用できません。"
  },
  {
    "start": 19457700,
    "end": 19458340,
    "text": "続ける。"
  },
  {
    "start": 19458500,
    "end": 19466036,
    "text": "このアプリケーションへのアクセスは許可されていません。不特定多数の人がここにサインアップしてほしくないので、管理者用ダッシュボードには最適です。"
  },
  {
    "start": 19466108,
    "end": 19476012,
    "text": "これを有効にしなくても、アプリケーションは安全です。なぜなら、後でユーザーに管理者ロールを与え、彼らだけが実際に管理者操作を実行できるからです。"
  },
  {
    "start": 19476156,
    "end": 19482276,
    "text": "ランダムなユーザーがここに登録したとしても、それは問題ではなく、あなたのデータベースに新しいユーザーが追加されるだけです。"
  },
  {
    "start": 19482428,
    "end": 19486118,
    "text": "また、このアカウントポータルの見栄えもここでカスタマイズできる。"
  },
  {
    "start": 19486204,
    "end": 19491330,
    "text": "このアカウントポータルオプションには、カスタマイズフィールドがあります。"
  },
  {
    "start": 19491450,
    "end": 19498122,
    "text": "繰り返しますが、これをあなた自身のログインページに置き換えることもできますが、これらの生成されたページを使うのはとても便利です。"
  },
  {
    "start": 19498226,
    "end": 19504430,
    "text": "このスレートカラーに原色を設定したい。"
  },
  {
    "start": 19504810,
    "end": 19512078,
    "text": "私たちのアプリでも使っているinterなどのフォントを設定することもできる。"
  },
  {
    "start": 19512194,
    "end": 19515990,
    "text": "これは本当に必要なことではない。"
  },
  {
    "start": 19516150,
    "end": 19521730,
    "text": "カスタマイズやブランディングでは、アプリのロゴをアップロードすることもできる。"
  },
  {
    "start": 19522390,
    "end": 19527050,
    "text": "このプロジェクトでは、assetsフォルダにロゴがありますよね？"
  },
  {
    "start": 19527710,
    "end": 19532010,
    "text": "Fufのアイコンであるクロスをアップロードすることができます。"
  },
  {
    "start": 19532710,
    "end": 19534410,
    "text": "これもやろう。"
  },
  {
    "start": 19535310,
    "end": 19536770,
    "text": "ページを更新する。"
  },
  {
    "start": 19537190,
    "end": 19542406,
    "text": "そして、このロゴがまた少し良く見える。"
  },
  {
    "start": 19542558,
    "end": 19544806,
    "text": "このダッシュボードを探索することもできる。"
  },
  {
    "start": 19544878,
    "end": 19549582,
    "text": "また、ソーシャルログインを有効にしたり、ユーザーアカウントにデータを追加したりすることもできる。"
  },
  {
    "start": 19549686,
    "end": 19556310,
    "text": "また、多要素認証を有効にすることもできる。これは、管理者ダッシュボードがハッキングされないようにするのに便利かもしれない。"
  },
  {
    "start": 19556390,
    "end": 19563894,
    "text": "また、clockのような認証プロバイダーを使うことで、多くの手間を省くことができる。"
  },
  {
    "start": 19564022,
    "end": 19568410,
    "text": "とりあえずこれを閉じて、自分のアカウントにログインし直します。"
  },
  {
    "start": 19569110,
    "end": 19580210,
    "text": "フロリアンはコーディングとフロー・フロー・ジョブの管理者で、我々はそこにいる。"
  },
  {
    "start": 19580710,
    "end": 19586646,
    "text": "さて、管理者として仕事を承認したり削除したりするときは、もちろんサーバーアクションを実行します。"
  },
  {
    "start": 19586758,
    "end": 19591610,
    "text": "管理フォルダに直接、新しいアクションファイルを作成しよう。"
  },
  {
    "start": 19592200,
    "end": 19593980,
    "text": "行動ts。"
  },
  {
    "start": 19594680,
    "end": 19611672,
    "text": "ここでは、approve submissionという非同期関数をエクスポートしています。"
  },
  {
    "start": 19611816,
    "end": 19617032,
    "text": "さて、新しいジョブ・フォームにはこのtry catchブロックがあることを思い出してほしい。"
  },
  {
    "start": 19617136,
    "end": 19629840,
    "text": "デフォルトでは、next JSは機密データの漏えいを避けるために、サーバーアクションからフロントエンドにエラーメッセージを送信しないので、何か問題が発生すると、私たちは常にこの一般的なエラーメッセージを見ることになると説明した。"
  },
  {
    "start": 19630000,
    "end": 19635872,
    "text": "より具体的なエラーメッセージが欲しい場合は、サーバーアクションから文字列として返さなければならない。"
  },
  {
    "start": 19636016,
    "end": 19643372,
    "text": "管理者として、何が起こっているのかを常に正確に把握したいからだ。"
  },
  {
    "start": 19643436,
    "end": 19647164,
    "text": "一般的なエラーメッセージではなく、特定のエラーメッセージが欲しいのだ。"
  },
  {
    "start": 19647252,
    "end": 19652892,
    "text": "また、サーバー・アクションで特定のエラーをどのように処理できるかを確認する良い機会でもある。"
  },
  {
    "start": 19652996,
    "end": 19658100,
    "text": "管理関数の戻り値の型を作成します。"
  },
  {
    "start": 19658220,
    "end": 19662160,
    "text": "これをフォーム・ステート・イコールと呼ぼう。"
  },
  {
    "start": 19662460,
    "end": 19668000,
    "text": "これは、このオプションのエラー文字列フィールドを含むJavaScriptオブジェクトになります。"
  },
  {
    "start": 19668340,
    "end": 19677224,
    "text": "successメソッドのようにreturn stateにさらに値を追加することもできるが、私が気にするのはエラーメッセージだけだ。"
  },
  {
    "start": 19677312,
    "end": 19685808,
    "text": "成功の場合は何も返す必要はありません。そして、関数の戻り値の型をこのフォームの状態に設定します。"
  },
  {
    "start": 19685864,
    "end": 19694860,
    "text": "なぜなら、これは非同期関数であり、非同期関数は常にプロミスを返すからだ。"
  },
  {
    "start": 19695800,
    "end": 19704844,
    "text": "そしてここにtry catchブロックを置き、catchブロックの中でエラーメッセージを取得し、フォームのステートを通じてそれを返すことができる。"
  },
  {
    "start": 19705012,
    "end": 19709788,
    "text": "予期せぬエラーというメッセージを作りましょう。"
  },
  {
    "start": 19709844,
    "end": 19713764,
    "text": "エラーの種類が不明なため、これがフォールバックとなる。"
  },
  {
    "start": 19713812,
    "end": 19715160,
    "text": "これは何でもいい。"
  },
  {
    "start": 19715780,
    "end": 19721040,
    "text": "以下では、エラー・クラスのインスタンスかどうかをチェックする。"
  },
  {
    "start": 19721820,
    "end": 19724520,
    "text": "ここで実際のエラーメッセージを見つける。"
  },
  {
    "start": 19724970,
    "end": 19736510,
    "text": "この場合、let変数にエラーメッセージを代入し、catchブロックでフォームの状態を返す。"
  },
  {
    "start": 19737130,
    "end": 19747106,
    "text": "このエラーメッセージを返し、フロントエンドでこの戻り値を受け取り、そこでエラーメッセージを処理することができる。"
  },
  {
    "start": 19747218,
    "end": 19755384,
    "text": "もう一回、ここでこのエラーをキャッチせず、代わりにフロントエンドでこのエラーをキャッチすれば、このエラーメッセージは削除される。"
  },
  {
    "start": 19755472,
    "end": 19761504,
    "text": "セキュリティ上の理由から、フロントエンドで受け取りたい場合は明示的に返さなければならない。"
  },
  {
    "start": 19761632,
    "end": 19766840,
    "text": "よし、このフォームデータには承認したい仕事のIDを送信しよう。"
  },
  {
    "start": 19766920,
    "end": 19771872,
    "text": "そこに他のデータはないので、ゾット・スキーマはちょっとやりすぎだろう。"
  },
  {
    "start": 19772016,
    "end": 19774060,
    "text": "その代わり、手動で処理する。"
  },
  {
    "start": 19774480,
    "end": 19791460,
    "text": "Cons job idea equals pass int ここでは、フォーム・データを渡してdot get job ideaを取得する。"
  },
  {
    "start": 19792080,
    "end": 19797856,
    "text": "次に、このサーバーアクションを呼び出そうとするユーザーが実際に管理者であることを検証しなければならない。"
  },
  {
    "start": 19797968,
    "end": 19801280,
    "text": "繰り返すが、フロントエンドの保護だけでは十分ではないからだ。"
  },
  {
    "start": 19801360,
    "end": 19804480,
    "text": "その気になれば、誰でもこのエンドポイントを呼び出すことができる。"
  },
  {
    "start": 19805820,
    "end": 19813436,
    "text": "現在のユーザーを取得したいのだが、そのために店員からこのカレント・ユーザー関数を呼び出している。"
  },
  {
    "start": 19813548,
    "end": 19816052,
    "text": "そして、ユーザーがログインしているかどうかをチェックすることができる。"
  },
  {
    "start": 19816116,
    "end": 19825996,
    "text": "また、ユーザーが管理者ロールを持っているかどうかをチェックし、誰でもサインアップしてアカウントを作成し、ここで管理者アクションを呼び出すことができないようにしたい。"
  },
  {
    "start": 19826068,
    "end": 19828480,
    "text": "管理者だけが許可されるべきです。"
  },
  {
    "start": 19828780,
    "end": 19832560,
    "text": "そして再びダッシュボードにアクセスする。"
  },
  {
    "start": 19833160,
    "end": 19840528,
    "text": "ユーザーに行き、このユーザーを開くと、この下に公開メタデータがある。"
  },
  {
    "start": 19840624,
    "end": 19849580,
    "text": "これを編集し、ここにroleと書かれたキーを1つ入れて、これをadminにリセットする。"
  },
  {
    "start": 19850080,
    "end": 19855980,
    "text": "この値をフロントエンドで読み取ることで、このユーザーが実際に管理者であることを知ることができる。"
  },
  {
    "start": 19856480,
    "end": 19867500,
    "text": "プロジェクトに戻ってutilsフォルダに入り、isadminという新しい関数を作りましょう。"
  },
  {
    "start": 19868520,
    "end": 19873820,
    "text": "これは現在のユーザーを入力として受け取る。"
  },
  {
    "start": 19874240,
    "end": 19876100,
    "text": "手動でインポートしなければならない。"
  },
  {
    "start": 19877360,
    "end": 19888080,
    "text": "時計から輸入しているが、スラッシュネクストJではなく、スラッシュタイプである。"
  },
  {
    "start": 19888780,
    "end": 19893760,
    "text": "ここにユーザー・リソースがあり、さらにもうひとつ必要だ。"
  },
  {
    "start": 19894900,
    "end": 19902956,
    "text": "次のものは、店員の次のjスラッシュ・サーバーからただのユーザーと呼ばれる。"
  },
  {
    "start": 19903148,
    "end": 19906540,
    "text": "バックエンドで現在のユーザーを取得すると、このような型が得られる。"
  },
  {
    "start": 19906580,
    "end": 19909212,
    "text": "フロントエンドでこれを取得すると、このような型が得られる。"
  },
  {
    "start": 19909316,
    "end": 19915020,
    "text": "どちらも、このユーザーが管理者であるかどうかをチェックするために使用できる公開メタデータを含んでいる。"
  },
  {
    "start": 19915840,
    "end": 19920928,
    "text": "ここで渡すユーザーは、ユーザー・リソースかユーザーである。"
  },
  {
    "start": 19921104,
    "end": 19936140,
    "text": "この縦棒で交差タイプを作成し、user dot public metadata dot roleを返す。"
  },
  {
    "start": 19936880,
    "end": 19940020,
    "text": "もしそうなら、このユーザーは管理者であることがわかる。"
  },
  {
    "start": 19940560,
    "end": 19945944,
    "text": "これを保存して、下のアクションファイルに戻る。"
  },
  {
    "start": 19946032,
    "end": 19956980,
    "text": "現在のユーザは、感嘆符のユーザか感嘆符の管理者かをチェックし、そのユーザを渡す。"
  },
  {
    "start": 19958200,
    "end": 19968756,
    "text": "そして、再びnot authorizedという新しいエラーを投げたい。"
  },
  {
    "start": 19968828,
    "end": 19973124,
    "text": "こうすることで、不特定多数のユーザーがこのサーバー・アクションを呼び出すことを避けることができる。"
  },
  {
    "start": 19973212,
    "end": 19975844,
    "text": "これを実行できるのは管理者だけであるべきだ。"
  },
  {
    "start": 19975972,
    "end": 19982444,
    "text": "この認証チェックを通過したら、データベース内のジョブを更新したい。"
  },
  {
    "start": 19982612,
    "end": 19984800,
    "text": "ここでもプリズマ・クライアントが必要だ。"
  },
  {
    "start": 19985740,
    "end": 20010420,
    "text": "インポート Prisma from lib prisma await prisma job update アイデアはこのジョブIDで、修理し、データは実際に更新したいものです。"
  },
  {
    "start": 20011200,
    "end": 20016380,
    "text": "私たちは、承認された真のナイスを設定したい。"
  },
  {
    "start": 20017400,
    "end": 20023420,
    "text": "そして最後に、更新されたデータを表示するために、フロントページを再レンダリングするようnext jsに指示したい。"
  },
  {
    "start": 20024020,
    "end": 20032956,
    "text": "これは、next cacheからのインポートで、スラッシュを含む文字列を渡すrevalidate pathで行う。"
  },
  {
    "start": 20033068,
    "end": 20035280,
    "text": "トップページを再検証したい。"
  },
  {
    "start": 20035620,
    "end": 20038732,
    "text": "これで、サーバーアクションでパスの再検証を呼び出したときに"
  },
  {
    "start": 20038836,
    "end": 20041668,
    "text": "また、クライアント側のルーターキャッシュもクリアされる。"
  },
  {
    "start": 20041764,
    "end": 20046740,
    "text": "画面に表示されているものは、現在どのページにいてもリフレッシュされる。"
  },
  {
    "start": 20046820,
    "end": 20049548,
    "text": "これでページもリフレッシュされる。"
  },
  {
    "start": 20049724,
    "end": 20054280,
    "text": "ジョブを削除するために、もうひとつサーバーアクションを追加したい。"
  },
  {
    "start": 20055500,
    "end": 20060560,
    "text": "delete jobと呼ばれる別のエクスポート非同期関数。"
  },
  {
    "start": 20061740,
    "end": 20067960,
    "text": "ここでも、ジョブIDを含むフォームデータを渡す。"
  },
  {
    "start": 20068580,
    "end": 20074240,
    "text": "実は、認証も含めて、この冒頭の部分は同じなんだ。"
  },
  {
    "start": 20075550,
    "end": 20082370,
    "text": "これをtry catchにラップしてここに貼り付け、catchブロックも同じにする。"
  },
  {
    "start": 20085110,
    "end": 20087570,
    "text": "では、トライブロックの中に入ってみよう。"
  },
  {
    "start": 20088070,
    "end": 20095462,
    "text": "今回はジョブを削除したいが、ブロブストレージから対応するロゴファイルも削除したい。"
  },
  {
    "start": 20095566,
    "end": 20099086,
    "text": "最初のステップは、ジョブのconstをフェッチすることである。"
  },
  {
    "start": 20099158,
    "end": 20111550,
    "text": "job変数には、Prismaを使ってidがjobIdである一意のジョブを非同期に検索して取得した結果が代入される。"
  },
  {
    "start": 20115250,
    "end": 20120830,
    "text": "次に、求人企業のロゴのURLを確認します。"
  },
  {
    "start": 20123210,
    "end": 20132720,
    "text": "この会社のロゴが存在するのであれば、それを削除したい。そのためには、zブロブから別のインポートであるdelを待つ。"
  },
  {
    "start": 20133020,
    "end": 20142100,
    "text": "これは削除関数で、この画像job.comのロゴのURLを渡すだけです。"
  },
  {
    "start": 20142260,
    "end": 20144280,
    "text": "これは本当に使いやすい。"
  },
  {
    "start": 20144580,
    "end": 20147520,
    "text": "この画像が存在する場合、削除されます。"
  },
  {
    "start": 20148140,
    "end": 20151916,
    "text": "その場合、データベースからジョブ・エントリーを削除したい。"
  },
  {
    "start": 20152028,
    "end": 20161380,
    "text": "コロンのアイデアが再び仕事のアイデアとなるプリズマジョブの削除を待つ。"
  },
  {
    "start": 20162160,
    "end": 20169860,
    "text": "もう一度、フロントページを再検証して再レンダリングしたい。"
  },
  {
    "start": 20170480,
    "end": 20177640,
    "text": "今回は、管理ダッシュボードにリダイレクトさせたい。"
  },
  {
    "start": 20177720,
    "end": 20187888,
    "text": "404ページにランディングしたくないので、リダイレクト関数を用意したのだが、このリダイレクト関数をtryブロックに入れてはいけないので注意しなければならない。"
  },
  {
    "start": 20188024,
    "end": 20190860,
    "text": "トライキャッチの下に置かなければならない。"
  },
  {
    "start": 20191680,
    "end": 20203808,
    "text": "ここでは、次のナビゲーションからredirectを呼び出し、adminにリダイレクトするようにしている。tryキャッチの外にこれを置かなければならない理由は、内部的にこれがエラーを投げるからである。"
  },
  {
    "start": 20203864,
    "end": 20212970,
    "text": "これは、next JSが特別なエラーによってリダイレクトを処理する方法であり、この関数がエラーを投げる境界は自動的にこれをキャッチしてリダイレクトする。"
  },
  {
    "start": 20213050,
    "end": 20217506,
    "text": "というのも、このエラーをキャッチしてしまうからだ。"
  },
  {
    "start": 20217578,
    "end": 20219626,
    "text": "あなたはいつもこれを外に置かなければならない。"
  },
  {
    "start": 20219818,
    "end": 20220330,
    "text": "いいかい？"
  },
  {
    "start": 20220370,
    "end": 20221570,
    "text": "忘れるところだった。"
  },
  {
    "start": 20221650,
    "end": 20227466,
    "text": "これらはサーバーアクションなので、use serverディレクティブを一番上に置く必要がありますね？"
  },
  {
    "start": 20227538,
    "end": 20242556,
    "text": "他のアクションファイルとの唯一の違いは、今回は特定のエラーを処理することで、try catchを使わず、一般的なエラーメッセージでクライアント側のエラーをキャッチしています。"
  },
  {
    "start": 20242708,
    "end": 20248068,
    "text": "現在では、これらのカードのいずれかをクリックすると、より具体的なエラーメッセージが表示される。"
  },
  {
    "start": 20248124,
    "end": 20259340,
    "text": "このページはまだ作成されていないので、今すぐ作成しましょう。このページは既存の詳細ページと非常によく似ています。"
  },
  {
    "start": 20259420,
    "end": 20264828,
    "text": "今回はSEOもキャッシュも気にしないので、ここではこれらのことをすべて省くことができる。"
  },
  {
    "start": 20264924,
    "end": 20268020,
    "text": "管理フォルダに新しいパスを作成します。"
  },
  {
    "start": 20268100,
    "end": 20294660,
    "text": "admin new file jobs slash slash in scrap records slash page tsxを右クリックし、slug paramをURLから読み取る必要があるので、slugを含むparamsを含むインターフェイスページpropsを作成する。"
  },
  {
    "start": 20296400,
    "end": 20300540,
    "text": "そして、pageというデフォルトの関数をエクスポートする。"
  },
  {
    "start": 20302960,
    "end": 20306260,
    "text": "ここでナメクジを見つける。"
  },
  {
    "start": 20310760,
    "end": 20340630,
    "text": "このページのジョブをフェッチする必要がある const job equals await prismaをインポートしなければならない これを非同期関数にする prisma dot job dot find unique 今回は管理ページにいるので、このジョブが承認されているかどうかは気にしない。"
  },
  {
    "start": 20341130,
    "end": 20344880,
    "text": "このナメクジの仕事を取ってきたいだけなんだ。"
  },
  {
    "start": 20346340,
    "end": 20350880,
    "text": "ジョブが存在しない場合は、not foundにリダイレクトする。"
  },
  {
    "start": 20351260,
    "end": 20353960,
    "text": "これは管理ページでも意味がある。"
  },
  {
    "start": 20354980,
    "end": 20361948,
    "text": "ちなみに、recall not foundの場合、これはneverを返す。"
  },
  {
    "start": 20362044,
    "end": 20363708,
    "text": "このページをレンダリングすることはありません。"
  },
  {
    "start": 20363804,
    "end": 20367040,
    "text": "このページは求人がある場合のみ表示されます。"
  },
  {
    "start": 20368350,
    "end": 20372690,
    "text": "そしてここにメイン・タグを置き、いつものようにスタイリングする。"
  },
  {
    "start": 20373710,
    "end": 20383170,
    "text": "ここにもツァイトバーがあるので、私の10番幅の5XLフレックスコールをMオートで。"
  },
  {
    "start": 20384150,
    "end": 20404758,
    "text": "アイテム・センター・ギャップは5、pxは3、MDフレックス行はレスポンシビリティのため、そしてMDアイテム・スタートはもう1つ。"
  },
  {
    "start": 20404894,
    "end": 20410970,
    "text": "求人の詳細とマークダウンの説明を含む求人ページをレンダリングします。"
  },
  {
    "start": 20411590,
    "end": 20422306,
    "text": "そして、公開されている仕事の詳細ページと同じように、右側か下に小さな管理サイズのバーを表示したいと思います。"
  },
  {
    "start": 20422418,
    "end": 20433830,
    "text": "ただ、ここではアプリケーションのリンクはなく、管理アクションがあるので、この管理サイトバーを作成しよう。"
  },
  {
    "start": 20434890,
    "end": 20471946,
    "text": "Admin zitebar Tsx export default function admin zeitbarouse and it needs a job as a prop Edman sidebar props job of type job as usual we pass this prop here and from this component I want to return an Zeit tag to create zeitbarous."
  },
  {
    "start": 20472008,
    "end": 20474110,
    "text": "少しスタイルを変えなければならない。"
  },
  {
    "start": 20474270,
    "end": 20476206,
    "text": "これをフレックスボックスにしたい？"
  },
  {
    "start": 20476358,
    "end": 20480770,
    "text": "幅を200ピクセルに固定したい。"
  },
  {
    "start": 20481830,
    "end": 20487598,
    "text": "flex noneを使えば、画面に十分なスペースがないときにサイドバーが縮小するのを避けることができる。"
  },
  {
    "start": 20487774,
    "end": 20492014,
    "text": "デフォルトでフレックス・ローになっている。"
  },
  {
    "start": 20492182,
    "end": 20501210,
    "text": "小さな画面では、ここにあるボタンは水平に並んでいるが、大きな画面では、これをフレックスコイルにして、ボタンが下になるようにしている。"
  },
  {
    "start": 20501950,
    "end": 20516166,
    "text": "また、アイテム・センターと2つのギャップを追加し、最後にMDアイテムのストレッチを追加することで、大きな画面ではここに配置したボタンが200ピクセルの幅いっぱいに表示されるようになります。"
  },
  {
    "start": 20516278,
    "end": 20518222,
    "text": "ただ、私の意見では、より良く見える。"
  },
  {
    "start": 20518406,
    "end": 20526130,
    "text": "とりあえず、ここにadmin Sidebarというテキストを入れて、admin job detailsページに入れましょう。"
  },
  {
    "start": 20526560,
    "end": 20540940,
    "text": "どのジョブを承認もしくは削除すべきかを知るためにジョブIDが必要だからです。"
  },
  {
    "start": 20541240,
    "end": 20543160,
    "text": "ここで1つ欠けているクラスがある。"
  },
  {
    "start": 20543200,
    "end": 20545340,
    "text": "これもフレックスボックスである必要がある。"
  },
  {
    "start": 20545840,
    "end": 20554150,
    "text": "さて、これでサイドバーが画面サイズに応じてここか右側に表示されるはずだ。"
  },
  {
    "start": 20554530,
    "end": 20561026,
    "text": "ここで、ジョブを承認または削除するための2つの管理アクションを呼び出す2つのボタンを配置します。"
  },
  {
    "start": 20561138,
    "end": 20566898,
    "text": "繰り返しますが、このページは管理者しか見ないので、キャッシュやSEOは気にしていません。"
  },
  {
    "start": 20566954,
    "end": 20571202,
    "text": "これはグーグルでは表示されず、通常のユーザーもこのページを見ることはない。"
  },
  {
    "start": 20571306,
    "end": 20575522,
    "text": "管理サイドバーに戻り、この設定を終わらせよう。"
  },
  {
    "start": 20575626,
    "end": 20583538,
    "text": "最初のアイデアとしては、ここに2つのボタンを置き、クリック・ハンドラでサーバー・アクションを呼び出せばうまくいくかもしれない。"
  },
  {
    "start": 20583594,
    "end": 20589734,
    "text": "繰り返しになるが、この方法の問題点は、JavaScriptを必要とするため、プログレッシブ・エンハンスメントに対応していないことだ。"
  },
  {
    "start": 20589822,
    "end": 20593382,
    "text": "プログレッシブ強化は、常に持っていて損はない目標だ。"
  },
  {
    "start": 20593486,
    "end": 20596486,
    "text": "その代わりに、フォームアクションでこれを処理する。"
  },
  {
    "start": 20596518,
    "end": 20599542,
    "text": "繰り返すが、フォームアクションはJavaScriptなしで動作するからだ。"
  },
  {
    "start": 20599646,
    "end": 20610482,
    "text": "実は、サーバーコンポーネントができた今、リアクトのベストプラクティスは、より多くのフォームアクションを使用し、クリックハンドラを使用しない方向に向かっているとどこかで読みました。"
  },
  {
    "start": 20610606,
    "end": 20613034,
    "text": "これが組織にどう作用するか見てみよう。"
  },
  {
    "start": 20613162,
    "end": 20615870,
    "text": "別々のコンポーネントにしたい。"
  },
  {
    "start": 20616210,
    "end": 20622430,
    "text": "以下に、承認送信ボタンという関数を作成します。"
  },
  {
    "start": 20623170,
    "end": 20626830,
    "text": "そのために、私たちは仕事のアイデアを渡す。"
  },
  {
    "start": 20627170,
    "end": 20629070,
    "text": "そのためのインターフェイスを作ろう。"
  },
  {
    "start": 20629650,
    "end": 20632170,
    "text": "私たちはそれを管理ボタンの小道具と呼んでいる。"
  },
  {
    "start": 20632250,
    "end": 20634570,
    "text": "削除ボタンにも同じ小道具を使っている。"
  },
  {
    "start": 20634610,
    "end": 20639962,
    "text": "後でジョブIDを渡さなければならないが、これは実際には数字である。"
  },
  {
    "start": 20640066,
    "end": 20641874,
    "text": "これがデータベースに登録されているIDだ。"
  },
  {
    "start": 20641962,
    "end": 20645550,
    "text": "スラッグを渡すこともできるが、ここではidで十分だ。"
  },
  {
    "start": 20647050,
    "end": 20661178,
    "text": "これはadmin button propsタイプで、ここでは小文字のフォームをレンダリングし、サーバーアクションを実行します。"
  },
  {
    "start": 20661274,
    "end": 20665760,
    "text": "このフォームには、実際の入力フィールドではなく、ボタンだけが含まれているはずです。"
  },
  {
    "start": 20665840,
    "end": 20667736,
    "text": "私たちにはまだ仕事のアイデアが必要だ。"
  },
  {
    "start": 20667808,
    "end": 20674144,
    "text": "フォームにデータを挿入することなく追加する方法は、隠し入力を追加することです。"
  },
  {
    "start": 20674312,
    "end": 20681256,
    "text": "小文字の入力を追加し、hiddenに設定し、job ideaという名前をつける。"
  },
  {
    "start": 20681448,
    "end": 20696670,
    "text": "この名前はアクションファイルで使用したものと同じでなければなりません。なぜなら、これはフォームデータから取得しようとする値であり、入力フィールドの値をこの関数に渡したジョブIDにリセットするからです。"
  },
  {
    "start": 20697130,
    "end": 20704626,
    "text": "この入力フィールドは実際にはUIには表示されませんが、ジョブIDを含み、それをフォームデータに入れます。"
  },
  {
    "start": 20704818,
    "end": 20710562,
    "text": "その下にフォーム送信ボタンを置き、このフォームを送信する。"
  },
  {
    "start": 20710666,
    "end": 20714150,
    "text": "サーバーアクションが実行され、ジョブアイデアが送信される。"
  },
  {
    "start": 20714610,
    "end": 20718320,
    "text": "Wフルで少しスタイリッシュに。"
  },
  {
    "start": 20719300,
    "end": 20732920,
    "text": "背景色を緑にして、カーソルを合わせると少し濃い緑になり、ボタンのテキストには承認済みと表示されるようにしたい。"
  },
  {
    "start": 20733700,
    "end": 20736476,
    "text": "これを管理サイドバーのレイアウトに入れてみよう。"
  },
  {
    "start": 20736548,
    "end": 20742720,
    "text": "このテキストを削除して、まず仕事がすでに承認されているかどうかをチェックしたい。"
  },
  {
    "start": 20743130,
    "end": 20745630,
    "text": "それならボタンは表示したくない。"
  },
  {
    "start": 20746170,
    "end": 20750338,
    "text": "その代わりに、承認されたというテキストを表示したい。"
  },
  {
    "start": 20750474,
    "end": 20759030,
    "text": "ここでは、クラス名、テキスト中央のフォント、セミボールド、テキスト緑500を持つスパンを配置します。"
  },
  {
    "start": 20761130,
    "end": 20762950,
    "text": "これで承認されたと表示される。"
  },
  {
    "start": 20764010,
    "end": 20773500,
    "text": "ジョブがまだ承認されていない場合、ジョブIDを渡す承認済み投稿ボタンをレンダリングします。"
  },
  {
    "start": 20776600,
    "end": 20777936,
    "text": "これを保存しよう。"
  },
  {
    "start": 20778128,
    "end": 20779360,
    "text": "これだ。"
  },
  {
    "start": 20779520,
    "end": 20781384,
    "text": "この仕事はまだ承認されていない。"
  },
  {
    "start": 20781472,
    "end": 20782760,
    "text": "このボタンが見える。"
  },
  {
    "start": 20782880,
    "end": 20787104,
    "text": "さて、ここまではジョブ・フィルターのサイドバーとよく似ているだろう？"
  },
  {
    "start": 20787152,
    "end": 20791816,
    "text": "サーバーコンポーネントとフォームがあり、このフォームがサーバーアクションを実行する。"
  },
  {
    "start": 20791968,
    "end": 20798390,
    "text": "今回の違いは、エラーメッセージがあれば、それを読めるようにすることだ。"
  },
  {
    "start": 20798470,
    "end": 20801622,
    "text": "それでもプログレッシブ・エンハンスメントを認めたい。"
  },
  {
    "start": 20801686,
    "end": 20804638,
    "text": "私たちは、このページがJavaScriptなしで動くことを望んでいる。"
  },
  {
    "start": 20804734,
    "end": 20809238,
    "text": "ここで、reactの新しいuseformステート・フックが登場する。"
  },
  {
    "start": 20809334,
    "end": 20815286,
    "text": "以前に使用したフォーム・ステータスと混同しないように、このフォームは少し違う仕組みになっている。"
  },
  {
    "start": 20815398,
    "end": 20824514,
    "text": "基本的には、サーバー・アクションをこのアクションに渡して、フォームの状態を返します。"
  },
  {
    "start": 20824662,
    "end": 20827386,
    "text": "我々の場合は、それがオプションのエラーメッセージだ。"
  },
  {
    "start": 20827498,
    "end": 20834906,
    "text": "フォームの状態を使用することのクールな点は、フォームのアクションプロップが使用されるため、プログレッシブ・エンハンスメントを使用できることです。"
  },
  {
    "start": 20835018,
    "end": 20836570,
    "text": "どうなるか見てみよう。"
  },
  {
    "start": 20836650,
    "end": 20842898,
    "text": "まず第一に、これはフックなので、このページをクライアント・コンポーネントにしなければならない。"
  },
  {
    "start": 20842994,
    "end": 20847306,
    "text": "サーバー・コンポーネントの内部でフックを呼び出すことはできないからだ。"
  },
  {
    "start": 20847458,
    "end": 20851670,
    "text": "プログレッシブ・エンハンスメントはまだ機能する。"
  },
  {
    "start": 20852460,
    "end": 20855700,
    "text": "次に、承認された送信ボタン・コンポーネントに入ります。"
  },
  {
    "start": 20855740,
    "end": 20860880,
    "text": "ここでもconstのスクラップ・ブラケットを作成する。"
  },
  {
    "start": 20861260,
    "end": 20867720,
    "text": "最初の値がフォームの状態になり、2番目の値がフォームのアクションになる。"
  },
  {
    "start": 20868260,
    "end": 20871080,
    "text": "この2つの変数をどう呼ぶかはあなた次第だ。"
  },
  {
    "start": 20871940,
    "end": 20894438,
    "text": "リアクトフックのフォームフックではなく、リアクトドムのインポートを使用したいので、リアクトドムのインポートを使用し、呼び出したいサーバーアクションを渡します。"
  },
  {
    "start": 20894614,
    "end": 20906594,
    "text": "そして2番目の引数はデフォルトのステートで、これはZoeの戻り値の型と同じ型を持っている。"
  },
  {
    "start": 20906762,
    "end": 20912430,
    "text": "これはundefinedにもなると言ったので、undefinedで初期化することができる。"
  },
  {
    "start": 20913090,
    "end": 20937276,
    "text": "なぜなら、useformステートからサーバーアクションを呼び出すと、追加の引数が渡されるからです。"
  },
  {
    "start": 20937468,
    "end": 20942692,
    "text": "これはその名の通り前の状態だが、通常、これを何かに使うことはない。"
  },
  {
    "start": 20942796,
    "end": 20944800,
    "text": "これは完全に無視する。"
  },
  {
    "start": 20945500,
    "end": 20953480,
    "text": "また、2番目のサーバー・アクションにこれを追加する必要があり、これを第1引数とし、第2引数をフォーム・データとする必要がある。"
  },
  {
    "start": 20953860,
    "end": 20957386,
    "text": "さて、これを追加したところ、このエラーは消えた。"
  },
  {
    "start": 20957548,
    "end": 20981210,
    "text": "この新しいアクションはアクションプロップフォームアクションとしてフォームに渡します。また、ボタンの下にフォームの状態のエラーをレンダリングしたいので、スペースy1、スペースy1にスタイルを追加します。"
  },
  {
    "start": 20981510,
    "end": 20984724,
    "text": "ここではformstate dot errorと表記する。"
  },
  {
    "start": 20984902,
    "end": 20996232,
    "text": "もしそれが存在すれば、エラーメッセージを表示することになる。"
  },
  {
    "start": 20996296,
    "end": 21004780,
    "text": "このため、エラーが発生した場合は、呼び出し演算子を保存しなければならない。"
  },
  {
    "start": 21005520,
    "end": 21012470,
    "text": "赤にすると、フォームステート・エラーになる。"
  },
  {
    "start": 21013130,
    "end": 21016910,
    "text": "フォームの状態はuseformstateフックから来ている。"
  },
  {
    "start": 21017330,
    "end": 21023202,
    "text": "さて、おさらいすると、formstateを使う代わりに、通常のuse stateを使うこともできた。"
  },
  {
    "start": 21023306,
    "end": 21030138,
    "text": "次に、onclickハンドラを通してサーバーアクションを実行し、もしエラーメッセージがあれば、返されたエラーメッセージを読み、それをステートに入れます。"
  },
  {
    "start": 21030234,
    "end": 21041102,
    "text": "useformstateがもたらす利点は、JavaScriptを必要としないネイティブのフォームアクションプロップを使用するため、プログレッシブエンハンスメントが可能であることです。"
  },
  {
    "start": 21041166,
    "end": 21046790,
    "text": "このフックを使うことで、より多くのフォームの状態をサーバーから返すことができる。"
  },
  {
    "start": 21046830,
    "end": 21050790,
    "text": "アクションは、成功メッセージや他の値を含むこともできる。"
  },
  {
    "start": 21050910,
    "end": 21052342,
    "text": "では、これを試してみよう。"
  },
  {
    "start": 21052406,
    "end": 21059210,
    "text": "このファイルを保存して、承認関数からエラーを返そう。"
  },
  {
    "start": 21059630,
    "end": 21065230,
    "text": "エラーは後で取り除く。"
  },
  {
    "start": 21066370,
    "end": 21074150,
    "text": "このようなことをコメントアウトしてから、これを承認と呼ぼう。"
  },
  {
    "start": 21074490,
    "end": 21081362,
    "text": "フォームの送信ボタンを使用したため、ローディング状態が発生し、しばらくするとエラーメッセージが表示されます。"
  },
  {
    "start": 21081506,
    "end": 21084626,
    "text": "さて、これがフォーム・ステートの使い方だ。"
  },
  {
    "start": 21084778,
    "end": 21095732,
    "text": "また、開発中の仕事をもう一度承認してみよう。少し時間がかかるが、このように承認されたテキストが表示される。"
  },
  {
    "start": 21095876,
    "end": 21099156,
    "text": "ここで削除ボタンも追加しよう。"
  },
  {
    "start": 21099348,
    "end": 21109440,
    "text": "管理サイドバーにDelete job buttonという別のコンポーネントを作成します。"
  },
  {
    "start": 21109860,
    "end": 21114160,
    "text": "また、これは仕事のアイデアを取り入れたもので、レイアウトもよく似ている。"
  },
  {
    "start": 21114550,
    "end": 21121730,
    "text": "これをコピーしておくよ。もちろん、ここで仕事を削除したいんだ。"
  },
  {
    "start": 21123070,
    "end": 21128290,
    "text": "赤500と赤600に色を変えたい。"
  },
  {
    "start": 21129910,
    "end": 21134942,
    "text": "テキストには削除と書かれているはずで、私はこれを削除すべきだと思う。"
  },
  {
    "start": 21135086,
    "end": 21137810,
    "text": "サイドバー・レイアウトに入れてみよう。"
  },
  {
    "start": 21138750,
    "end": 21146730,
    "text": "このブロックの下には削除ボタンがあり、ジョブIDが必要です。"
  },
  {
    "start": 21148590,
    "end": 21149970,
    "text": "これだ。"
  },
  {
    "start": 21150310,
    "end": 21152830,
    "text": "仕事も削除してみよう。"
  },
  {
    "start": 21152990,
    "end": 21155970,
    "text": "JavaScriptなしで動くかどうか見てみよう。"
  },
  {
    "start": 21156510,
    "end": 21161450,
    "text": "もう1度、まずここでもエラーを投げたい。"
  },
  {
    "start": 21162310,
    "end": 21168024,
    "text": "削除ジョブの内容をコメントアウトすると、新しいエラーがスローされる。"
  },
  {
    "start": 21168112,
    "end": 21170420,
    "text": "今度は別のエラーメッセージを使ってみよう。"
  },
  {
    "start": 21171040,
    "end": 21176696,
    "text": "JavaScriptがあればうまくいくことはすでに見た。"
  },
  {
    "start": 21176848,
    "end": 21183512,
    "text": "JavaScriptを無効にして、ページを更新し、削除をクリックしよう。"
  },
  {
    "start": 21183616,
    "end": 21186624,
    "text": "クールなのは、エラーメッセージがまだ表示されていることだ。"
  },
  {
    "start": 21186712,
    "end": 21196932,
    "text": "通常、エラーメッセージを動的に表示するにはステート（状態）が必要で、ステートにはJavaScriptが必要だが、フォーム・ステートは必要ないからだ。"
  },
  {
    "start": 21196996,
    "end": 21199520,
    "text": "これはJavaScriptなしでも機能する。"
  },
  {
    "start": 21199860,
    "end": 21206164,
    "text": "では、このエラーを取り除き、実際にこのジョブを削除してみよう。"
  },
  {
    "start": 21206252,
    "end": 21208380,
    "text": "JavaScriptはまだ無効です。"
  },
  {
    "start": 21208420,
    "end": 21214172,
    "text": "ローディング・インジケータは表示されないが、削除操作は成功した。"
  },
  {
    "start": 21214276,
    "end": 21215644,
    "text": "JavaScriptを有効にしましょう。"
  },
  {
    "start": 21215692,
    "end": 21226676,
    "text": "繰り返すが、未承認のジョブはもうない。データベースからエントリーは消え、ブロブストレージを見ると、画像ももうない。"
  },
  {
    "start": 21226828,
    "end": 21229652,
    "text": "ただ、2つだけ訂正したいことがある。"
  },
  {
    "start": 21229836,
    "end": 21236120,
    "text": "ここにスペルミスがあり、ダッシュが抜けている。"
  },
  {
    "start": 21237700,
    "end": 21243844,
    "text": "また、管理サイドバーと同じフォルダにアクションファイルを置きたい。"
  },
  {
    "start": 21243892,
    "end": 21246266,
    "text": "誤って1つ上のフォルダに入れてしまった。"
  },
  {
    "start": 21246388,
    "end": 21248930,
    "text": "どうでもいいことだ。"
  },
  {
    "start": 21249270,
    "end": 21254886,
    "text": "これをここに移動させれば、インポート文が自動的に更新されるはずだ。"
  },
  {
    "start": 21254998,
    "end": 21260570,
    "text": "そうでない場合は、管理サイドバーのファイルを更新し、変更を保存してください。"
  },
  {
    "start": 21261070,
    "end": 21270590,
    "text": "さて、最後にこの管理部分でやりたいことは、ログアウトボタンとリンクのある小さな管理ナビバーをトップに追加することだ。"
  },
  {
    "start": 21270630,
    "end": 21272732,
    "text": "これで管理ダッシュボードにたどり着いた。"
  },
  {
    "start": 21272886,
    "end": 21274456,
    "text": "もう一度やろう。"
  },
  {
    "start": 21274528,
    "end": 21304684,
    "text": "このファイルでは、管理者用ナビゲーションバーのコンポーネントを定義しています。このコンポーネントはプロパティを受け取りませんが、ログアウト機能のためのクリックハンドラーが必要なので、クライアントサイドのコンポーネントである必要があります。"
  },
  {
    "start": 21304812,
    "end": 21312700,
    "text": "さて、まず最初に、constを作り、それを再構築して店員からuseclerkを呼び出す。"
  },
  {
    "start": 21312780,
    "end": 21313920,
    "text": "次のページ"
  },
  {
    "start": 21314860,
    "end": 21318480,
    "text": "ここでは、現在のユーザーとサインアウト関数を取得する。"
  },
  {
    "start": 21319540,
    "end": 21325680,
    "text": "また、クライアント側でログアウトしたユーザーをリダイレクトしたいので、ルーターも必要だ。"
  },
  {
    "start": 21326550,
    "end": 21335926,
    "text": "ここで注意しなければならないのは、nextスラッシュ・ルーターではなく、nextスラッシュ・ナビゲーションからランをインポートすることだ。"
  },
  {
    "start": 21336078,
    "end": 21339822,
    "text": "ルーターはpagesディレクトリでしか使えない。"
  },
  {
    "start": 21339966,
    "end": 21342758,
    "text": "appディレクトリにはこれが必要だ。"
  },
  {
    "start": 21342934,
    "end": 21343366,
    "text": "オーケー。"
  },
  {
    "start": 21343398,
    "end": 21347126,
    "text": "となると、ここでは比較的シンプルなコンポーネントを返すことになる。"
  },
  {
    "start": 21347198,
    "end": 21352010,
    "text": "これはpxが3のdivである。"
  },
  {
    "start": 21354690,
    "end": 21357230,
    "text": "とりあえずレイアウトに入れてみよう。"
  },
  {
    "start": 21357610,
    "end": 21365346,
    "text": "管理レイアウトのTSXでこうしているのは、管理ページだけにこの管理ナビバーを表示したいからですよね？"
  },
  {
    "start": 21365458,
    "end": 21369274,
    "text": "ネストされたレイアウトを使えば、これを簡単に実現できる。"
  },
  {
    "start": 21369362,
    "end": 21372150,
    "text": "これはnext jsのクールな機能だ。"
  },
  {
    "start": 21372650,
    "end": 21378466,
    "text": "クロック・プロバイダの子プロバイダの上に、管理ナビバーをレンダリングする。"
  },
  {
    "start": 21378658,
    "end": 21384550,
    "text": "保存すると、左上に表示される。"
  },
  {
    "start": 21384930,
    "end": 21393470,
    "text": "フロントページや管理者以外のページでは、スナッフバーは表示されません。"
  },
  {
    "start": 21394090,
    "end": 21396430,
    "text": "よし、セットアップを終わらせよう。"
  },
  {
    "start": 21397650,
    "end": 21418160,
    "text": "ここに、m auto flex h ten max width 5, xl item center justify between, gap of twoでスタイル設定した別のdivを置く。"
  },
  {
    "start": 21420020,
    "end": 21429334,
    "text": "そして最初の要素として、スラッシュ管理に戻るための次のリンクを貼りたい。"
  },
  {
    "start": 21429412,
    "end": 21436070,
    "text": "これは例えば、求人の詳細ページにいて、管理ページに戻りたい場合に便利です。"
  },
  {
    "start": 21436530,
    "end": 21443390,
    "text": "また、これがリンクであることを示すために、フォントを半太字にし、アンダーラインを引いたスタイルにしたい。"
  },
  {
    "start": 21444290,
    "end": 21448110,
    "text": "管理ダッシュボードと表示されます。"
  },
  {
    "start": 21449250,
    "end": 21450746,
    "text": "こんな感じだ。"
  },
  {
    "start": 21450938,
    "end": 21453830,
    "text": "いつもここに戻ってくるリンクだ。"
  },
  {
    "start": 21455940,
    "end": 21463400,
    "text": "そして、このリンクの後に、スペースXの2人による別のディブを置いた。"
  },
  {
    "start": 21464580,
    "end": 21473964,
    "text": "ここでは、現在ログインしているユーザーの電子メールアドレスを表示するスパンを置きます。"
  },
  {
    "start": 21474092,
    "end": 21475924,
    "text": "これは事務員が管理している。"
  },
  {
    "start": 21476012,
    "end": 21478720,
    "text": "メールアドレスはアカウント作成時に保存されます。"
  },
  {
    "start": 21479060,
    "end": 21481960,
    "text": "ここで、このメールアドレス・フィールドにアクセスしなければならない。"
  },
  {
    "start": 21483410,
    "end": 21487234,
    "text": "また、このスパンを半太字にしたい。"
  },
  {
    "start": 21487362,
    "end": 21492150,
    "text": "現在ログインしている人を確認するために、私のメールアドレスを書いておきます。"
  },
  {
    "start": 21493370,
    "end": 21502030,
    "text": "そして、スパンの下に、onclickハンドラでログアウトできるスタイルのないボタンを置く。"
  },
  {
    "start": 21503170,
    "end": 21510630,
    "text": "onclick関数が非同期なのは、サインアウト関数が非同期で、それを待ちたいからだ。"
  },
  {
    "start": 21511980,
    "end": 21519640,
    "text": "ここではサインアウト待ちを呼び出し、フロントページにリダイレクトする。"
  },
  {
    "start": 21521540,
    "end": 21524160,
    "text": "ルーターを経由してクライアント側で行う。"
  },
  {
    "start": 21524940,
    "end": 21532320,
    "text": "また、このボタンに下線を引いて、リンクのように見せ、ログアウトと表示されるようにしたい。"
  },
  {
    "start": 21532740,
    "end": 21533988,
    "text": "これだ。"
  },
  {
    "start": 21534124,
    "end": 21539028,
    "text": "十分美しいバーではないが、スタイリングにあまり時間をかけたくなかった。"
  },
  {
    "start": 21539084,
    "end": 21540284,
    "text": "これで十分だと思う。"
  },
  {
    "start": 21540372,
    "end": 21543524,
    "text": "私より優れていると思うなら、これを改良するのは自由だ。"
  },
  {
    "start": 21543612,
    "end": 21544380,
    "text": "よくもそんなことを"
  },
  {
    "start": 21544420,
    "end": 21546092,
    "text": "私のデザイン能力を傷つける。"
  },
  {
    "start": 21546196,
    "end": 21548200,
    "text": "よし、これでうまくいくか見てみよう。"
  },
  {
    "start": 21548620,
    "end": 21553200,
    "text": "ログアウトするとフロントページにリダイレクトされる。"
  },
  {
    "start": 21553620,
    "end": 21558240,
    "text": "次にスラッシュ・アドミニストレータに行くときは、もう一度ログインしなければならない。"
  },
  {
    "start": 21559980,
    "end": 21565588,
    "text": "既存のジョブを削除したい場合は、そのジョブを開きます。"
  },
  {
    "start": 21565764,
    "end": 21576444,
    "text": "URLを変更して、求人の前に行き、管理画面に入り、このページを開くと、削除ボタンのある管理サイドバーが表示されます。"
  },
  {
    "start": 21576572,
    "end": 21579724,
    "text": "ところで、ブロブ・ストレージも見てみよう。"
  },
  {
    "start": 21579772,
    "end": 21582068,
    "text": "画像は1枚しかないはずだよね？"
  },
  {
    "start": 21582124,
    "end": 21584600,
    "text": "他のものは削除されたからだ。"
  },
  {
    "start": 21585180,
    "end": 21589680,
    "text": "ああ、確かに会社のロゴには、僕たちのイメージしかない。"
  },
  {
    "start": 21590120,
    "end": 21593380,
    "text": "このエントリーを削除する際に、もう1つのエントリーを削除した。"
  },
  {
    "start": 21594680,
    "end": 21597896,
    "text": "まだ2歩残っている。"
  },
  {
    "start": 21597928,
    "end": 21605456,
    "text": "100件でも1000件でも、一度に全部を読み込ませたくないからだ。"
  },
  {
    "start": 21605608,
    "end": 21610360,
    "text": "そして、このプロジェクトをデプロイしたい。"
  },
  {
    "start": 21610440,
    "end": 21612648,
    "text": "このビデオを最後まで見てください。"
  },
  {
    "start": 21612744,
    "end": 21614824,
    "text": "まだの方は「いいね！」をお願いします。"
  },
  {
    "start": 21614912,
    "end": 21617984,
    "text": "このビデオをシェアしてくれたら、もっとすごいことになる。"
  },
  {
    "start": 21618032,
    "end": 21620942,
    "text": "このチャンネルを成長させるために、誰かと一緒に。"
  },
  {
    "start": 21621056,
    "end": 21625938,
    "text": "ツイッターやフェイスブックに投稿するだけでもいい。"
  },
  {
    "start": 21626034,
    "end": 21627410,
    "text": "本当に助かるよ。"
  },
  {
    "start": 21627490,
    "end": 21635350,
    "text": "このビデオの再生回数が増えれば増えるほど、このような無料のチュートリアルをもっと作る意欲が湧いてくるからだ。"
  },
  {
    "start": 21635650,
    "end": 21645426,
    "text": "そのページが別のURLパラマウントになるのは、ひとつには共有性のためだが、もうひとつは、ステートやJavaScriptなしで動作するようになるためだ。"
  },
  {
    "start": 21645538,
    "end": 21656600,
    "text": "ルートページのTSXに入り、一番上にある検索パラメータを読み込む。"
  },
  {
    "start": 21657460,
    "end": 21670760,
    "text": "検索パラメータは文字列なので、この値をページコンポーネントに読み込んで、求人結果コンポーネントに転送します。"
  },
  {
    "start": 21671180,
    "end": 21674800,
    "text": "そこに新しいページ・プロップを置くことにしよう。"
  },
  {
    "start": 21675160,
    "end": 21677540,
    "text": "ここでは、ページが定義されているかどうかをチェックする。"
  },
  {
    "start": 21678400,
    "end": 21686300,
    "text": "この場合、文字列からページ番号を渡す。"
  },
  {
    "start": 21687320,
    "end": 21691616,
    "text": "次に、ジョブ結果コンポーネントに入り、この新しいプロップを処理する。"
  },
  {
    "start": 21691688,
    "end": 21697448,
    "text": "ここでは、フィルター値の隣にジョブ結果プロップスに追加します。"
  },
  {
    "start": 21697504,
    "end": 21704870,
    "text": "私たちは今、このオプションのページも期待している。"
  },
  {
    "start": 21705370,
    "end": 21710514,
    "text": "これはオプションなので、デフォルト値を1に設定することができる。"
  },
  {
    "start": 21710602,
    "end": 21715194,
    "text": "ページを渡さなければ、自動的に1ページに設定される。"
  },
  {
    "start": 21715362,
    "end": 21724682,
    "text": "このフィルター値をページネーション・コンポーネントに渡す必要があるからだ。"
  },
  {
    "start": 21724746,
    "end": 21728354,
    "text": "ここで再構築すると、このオブジェクトを直接渡すことはできない。"
  },
  {
    "start": 21728482,
    "end": 21733514,
    "text": "その代わり、この部分はカットしたが、以下では再び再構築する。"
  },
  {
    "start": 21733682,
    "end": 21742490,
    "text": "ここでは、このカラムを除いたconstを作成し、フィルター値から再構築する。"
  },
  {
    "start": 21742610,
    "end": 21747350,
    "text": "違いは、このフィルター値変数を直接使うこともできるようになったことだ。"
  },
  {
    "start": 21747690,
    "end": 21754894,
    "text": "次に、jobsperpageと呼ばれるconstを作成し、ページごとに表示したいジョブの数を定義します。"
  },
  {
    "start": 21755082,
    "end": 21759846,
    "text": "私たちのデータベースにはそれほど多くの仕事はないので、この値を小さく設定しました。"
  },
  {
    "start": 21760038,
    "end": 21766118,
    "text": "より合理的な値は10点、あるいはそれ以上だろう。"
  },
  {
    "start": 21766214,
    "end": 21769774,
    "text": "マジックナンバーを避けるため、この値を変数に格納する。"
  },
  {
    "start": 21769862,
    "end": 21774302,
    "text": "こうすることで、どこにでも6つ並べるのではなく、より読みやすいコードになる。"
  },
  {
    "start": 21774446,
    "end": 21778998,
    "text": "なるほど、ページネーションは、ある数の結果をスキップすることで機能する。"
  },
  {
    "start": 21779134,
    "end": 21783154,
    "text": "データベースから読み込むとき、いくつの結果をスキップするか？"
  },
  {
    "start": 21783242,
    "end": 21788042,
    "text": "さて、最初のページ、1ページ目では、どのページもスキップしたくない。"
  },
  {
    "start": 21788106,
    "end": 21791790,
    "text": "その後、これらの結果のページ数をスキップしたい。"
  },
  {
    "start": 21792490,
    "end": 21798430,
    "text": "を作成し、それをPrismaクエリに渡します。"
  },
  {
    "start": 21799250,
    "end": 21805950,
    "text": "このツールのページ数から1ページあたりの求人数を引いたものを（ ）内に割り当てている。"
  },
  {
    "start": 21806370,
    "end": 21811244,
    "text": "最初のページでは0、2ページ目では6、といった具合だ。"
  },
  {
    "start": 21811332,
    "end": 21813040,
    "text": "常にページサイズ。"
  },
  {
    "start": 21813460,
    "end": 21823716,
    "text": "それでは、Prismaのクエリーで、order byの後に検索メニューを表示し、返したい結果の数を追加します。"
  },
  {
    "start": 21823908,
    "end": 21831364,
    "text": "1ページにつき6つの結果ジョブと、スキップロジックを含むskipも渡す。"
  },
  {
    "start": 21831452,
    "end": 21835384,
    "text": "ページに到達するまでに、いくつの結果をスキップしたいのか？"
  },
  {
    "start": 21835532,
    "end": 21858416,
    "text": "プリズマ・ドット・ジョブ・ドット・カウントという特別な関数があり、ここに同じフィルターを追加することができる。"
  },
  {
    "start": 21858528,
    "end": 21860648,
    "text": "多くの人を見つけるために通過するのと同じものだ。"
  },
  {
    "start": 21860744,
    "end": 21862564,
    "text": "この結果をカウントしてみよう。"
  },
  {
    "start": 21862712,
    "end": 21867812,
    "text": "もちろん、この値を変数に格納する必要があり、これは同様にプロミスを返す。"
  },
  {
    "start": 21867996,
    "end": 21872268,
    "text": "このように書くと、await find many、await countとなる。"
  },
  {
    "start": 21872364,
    "end": 21881700,
    "text": "なぜなら、2つ目の結果を取得する前に、1つ目の結果を待つ理由がないからだ。"
  },
  {
    "start": 21881780,
    "end": 21884028,
    "text": "その代わり、同時にフェッチする必要がある。"
  },
  {
    "start": 21884124,
    "end": 21891410,
    "text": "私たちがすることは、この待ち行列を取り除くことだ。"
  },
  {
    "start": 21892470,
    "end": 21898090,
    "text": "このcountの前にconst count promiseを作る。"
  },
  {
    "start": 21898710,
    "end": 21906342,
    "text": "ここでも、まだawaitを呼び出していない。なぜなら、以下のようにpromise allで行うからだ。"
  },
  {
    "start": 21906486,
    "end": 21914478,
    "text": "これは、これら2つの操作の2つの値、ジョブ、合計結果またはカウントを持つ配列を返します。"
  },
  {
    "start": 21914574,
    "end": 21929688,
    "text": "これは好きな名前をつけていい。これをawait promise allに代入し、その配列に2つの約束、jobs promiseとcount promiseを渡す。"
  },
  {
    "start": 21929864,
    "end": 21933960,
    "text": "この2つは同時に実行される。"
  },
  {
    "start": 21934080,
    "end": 21943206,
    "text": "このようにして、リアクト・サーバー・コンポーネントでいわゆるウォーターフォールと呼ばれる、1つのリクエストが終わるのを待ってから次のリクエストを実行するような事態を避けることができる。"
  },
  {
    "start": 21943398,
    "end": 21952570,
    "text": "さて、整理のためにページネーションを別のコンポーネントに入れたいと思う。"
  },
  {
    "start": 21954750,
    "end": 21962130,
    "text": "プロップ、インターフェイス、ページネーションのプロップも受け取る。"
  },
  {
    "start": 21963590,
    "end": 21987780,
    "text": "次のページに移動するときにURLのページパラメータを変更するので、新しいリンクを構築するために必要だからです。"
  },
  {
    "start": 21987900,
    "end": 21991316,
    "text": "フィルター・パラメーターもURLに残しておきたいんだよね？"
  },
  {
    "start": 21991428,
    "end": 21999970,
    "text": "ここで転送しなければならないので、コンポーネントに渡して再構築する。"
  },
  {
    "start": 22003350,
    "end": 22012870,
    "text": "フィルタの値を再構築して、ナビゲーションがリンクで処理されるようにすることもできる。"
  },
  {
    "start": 22012950,
    "end": 22017650,
    "text": "説明したように、これらの検索パラメータをこのリンクに保持したい。"
  },
  {
    "start": 22018470,
    "end": 22032070,
    "text": "ここでは、generate page linkという再利用可能な関数を作り、そこに新しいページ番号を渡す。"
  },
  {
    "start": 22033130,
    "end": 22035990,
    "text": "ここで、検索パラメータを作成する必要がある。"
  },
  {
    "start": 22036370,
    "end": 22038670,
    "text": "を作成する。"
  },
  {
    "start": 22039330,
    "end": 22049386,
    "text": "これを新しいURLのsearch params括弧、中括弧に代入し、ここに検索パラメータが定義されている場合は、それをすべて入れる。"
  },
  {
    "start": 22049498,
    "end": 22057794,
    "text": "前にも使ったスプレッド構文を使って、ここに条件付きで値を入れることができる。"
  },
  {
    "start": 22057962,
    "end": 22061350,
    "text": "qが定義されている場合のみ、ここに入れる。"
  },
  {
    "start": 22061970,
    "end": 22083280,
    "text": "タイプ、ロケーション、リモートも同様だが、リモートはブール値なので、文字列のremote colon trueに変換しなければならない。"
  },
  {
    "start": 22085340,
    "end": 22091080,
    "text": "最後に、ここに新しいページを追加する。"
  },
  {
    "start": 22091660,
    "end": 22097000,
    "text": "uiの検索パラメータは常に文字列だからだ。"
  },
  {
    "start": 22098140,
    "end": 22100720,
    "text": "この新しい検索パラメータができた。"
  },
  {
    "start": 22101520,
    "end": 22123528,
    "text": "エントリーは文字列をバックスティック文字列として返すことができ、スラッシュ疑問符変数プレースホルダ検索パラメータを文字列にすることができる。"
  },
  {
    "start": 22123704,
    "end": 22127568,
    "text": "レイアウトを書く前に、それをUIに組み込んでみよう。"
  },
  {
    "start": 22127744,
    "end": 22137020,
    "text": "この結果の下に、まずジョブのドット長がゼロより大きいかどうかをチェックする別の式を置く。"
  },
  {
    "start": 22137480,
    "end": 22140980,
    "text": "実際に結果が出た場合のみ、ページネーションを表示したい。"
  },
  {
    "start": 22141920,
    "end": 22158136,
    "text": "次にページネーションをレンダリングし、現在のページを渡す。"
  },
  {
    "start": 22158328,
    "end": 22177024,
    "text": "このために、結果の総数を取得した。しかし、これをページ・サイズで割り算しなければならない。"
  },
  {
    "start": 22177072,
    "end": 22189860,
    "text": "総結果をページあたりのジョブ数で割ったもの、ページサイズ、そして最後にフィルター値を渡して、これを閉じる必要がある。"
  },
  {
    "start": 22190960,
    "end": 22193940,
    "text": "では、もう一度ディビジョンに降りてみよう。"
  },
  {
    "start": 22194480,
    "end": 22206238,
    "text": "左側に戻るボタン、右側に次のページボタンを配置したいので、このdivを少しフレックスとジャスティファイでスタイルしたい。"
  },
  {
    "start": 22206374,
    "end": 22215918,
    "text": "このようなレイアウトを設定するのはいつも少し面倒だし、ここではシンプルにしたいので、実際にはすべてのページ番号を表示していない。"
  },
  {
    "start": 22216054,
    "end": 22216550,
    "text": "オーケー。"
  },
  {
    "start": 22216590,
    "end": 22219262,
    "text": "ここでは基本的に2つのリンクを貼っている。"
  },
  {
    "start": 22219446,
    "end": 22231570,
    "text": "次のリンクのhrefには、現在のページマイナス1を渡すページリンク生成関数を使用します。"
  },
  {
    "start": 22233950,
    "end": 22236170,
    "text": "では、このリンクにスタイルをつけたい。"
  },
  {
    "start": 22236510,
    "end": 22242870,
    "text": "ここでzエンド関数を使いたいのは、ここにロジックを入れたいからだ。"
  },
  {
    "start": 22242910,
    "end": 22245806,
    "text": "これはcn関数を使えば簡単に書ける。"
  },
  {
    "start": 22245998,
    "end": 22255010,
    "text": "最初のクラス名の文字列は、デフォルトのスタイリングであるフレックス・アイテムのセンター・ギャップ2とセミボールド・フォントです。"
  },
  {
    "start": 22256400,
    "end": 22260860,
    "text": "このリンクは前のページとリンクしています。"
  },
  {
    "start": 22262240,
    "end": 22264928,
    "text": "さて、この下にあるのが前のページのボタンです。"
  },
  {
    "start": 22264984,
    "end": 22267808,
    "text": "私たちは最初のページにいるので、これを隠したいのです。"
  },
  {
    "start": 22267904,
    "end": 22275060,
    "text": "ここでcn関数を追加したのは、2番目の値としてちょっとした条件を渡すためだ。"
  },
  {
    "start": 22275560,
    "end": 22280220,
    "text": "現在のページが1以下かどうかをチェックする。"
  },
  {
    "start": 22281410,
    "end": 22285202,
    "text": "そして、これを隠すためにinvisibleクラスを追加したい。"
  },
  {
    "start": 22285306,
    "end": 22290210,
    "text": "では、なぜこのコンポーネントを条件付きでレンダリングする代わりにinvisibleを使うのか？"
  },
  {
    "start": 22290330,
    "end": 22292266,
    "text": "この正当性を保ちたいからだ。"
  },
  {
    "start": 22292338,
    "end": 22296098,
    "text": "アクティブの間に、次のページボタンを右側に表示したい。"
  },
  {
    "start": 22296194,
    "end": 22304282,
    "text": "これを非表示にすることで、要素はまだ存在し、この位置を占めているので、私が望むレイアウトを簡単に作ることができる。"
  },
  {
    "start": 22304426,
    "end": 22310958,
    "text": "もしこのリンクをまったくレンダリングしなければ、次ページのボタンは左側に移動してしまう。"
  },
  {
    "start": 22311094,
    "end": 22315278,
    "text": "これで、2ページ目に移動したときだけ、これが表示される。"
  },
  {
    "start": 22315334,
    "end": 22319454,
    "text": "私たちは、URLにクエスチョンマーク・ページ・イコール2を入力する。"
  },
  {
    "start": 22319622,
    "end": 22321070,
    "text": "ここにまたボタンがある。"
  },
  {
    "start": 22321230,
    "end": 22330254,
    "text": "私は実際に左の矢印に左のエラーを置くことができる明晰な反応エントリを入れたい。"
  },
  {
    "start": 22330302,
    "end": 22333210,
    "text": "ツァイスを16にセットする。"
  },
  {
    "start": 22333950,
    "end": 22334930,
    "text": "見てみよう。"
  },
  {
    "start": 22335360,
    "end": 22336328,
    "text": "あれだ。"
  },
  {
    "start": 22336464,
    "end": 22339860,
    "text": "クリックすると最初のページに戻る。"
  },
  {
    "start": 22340400,
    "end": 22343696,
    "text": "次のページボタンも追加しよう。"
  },
  {
    "start": 22343888,
    "end": 22351496,
    "text": "最初のリンクの下に、もうひとつリンクを貼ったので、ここにある既存のリンクをコピーして、修正しよう。"
  },
  {
    "start": 22351688,
    "end": 22358740,
    "text": "生成ページ・リンクはもちろん現在のページであり、この要素を非表示にしたい。"
  },
  {
    "start": 22359440,
    "end": 22370860,
    "text": "現在のページが総ページ数以上であれば、次のページと表示され、エラーになるはずですよね？"
  },
  {
    "start": 22373120,
    "end": 22374016,
    "text": "ほらね。"
  },
  {
    "start": 22374088,
    "end": 22374768,
    "text": "あれだ。"
  },
  {
    "start": 22374864,
    "end": 22377780,
    "text": "矢印は実際にはテキストの右側にあるべきである。"
  },
  {
    "start": 22378320,
    "end": 22379460,
    "text": "この方がいい。"
  },
  {
    "start": 22380200,
    "end": 22381832,
    "text": "うまくいくかどうか見てみよう。"
  },
  {
    "start": 22381976,
    "end": 22383880,
    "text": "ああ、ナビもできる。"
  },
  {
    "start": 22384000,
    "end": 22385180,
    "text": "クールだろ？"
  },
  {
    "start": 22385720,
    "end": 22390004,
    "text": "途中でもうひとつ、総ページ数も表示したい。"
  },
  {
    "start": 22390192,
    "end": 22398240,
    "text": "この2つのリンクの間に、フォントをZimmyの太字にしたスパンを追加する。"
  },
  {
    "start": 22399140,
    "end": 22408800,
    "text": "ここで、現在のページの総ページ数を示すテキストを表示したい。"
  },
  {
    "start": 22409500,
    "end": 22414680,
    "text": "2ページ中1ページ目、次のページ、ツールの2ページ目。"
  },
  {
    "start": 22415140,
    "end": 22418008,
    "text": "このようにページネーションが実装された。"
  },
  {
    "start": 22418164,
    "end": 22420648,
    "text": "さて、このウェブサイトは完成したと考えている。"
  },
  {
    "start": 22420744,
    "end": 22423616,
    "text": "最後のステップは、本番環境へのデプロイだ。"
  },
  {
    "start": 22423808,
    "end": 22427616,
    "text": "よし、パーティーのみんな、今こそこれを配備する時だ。"
  },
  {
    "start": 22427648,
    "end": 22437860,
    "text": "Prismaを使用する次のJのプロジェクトをVerzelにデプロイするとき、このポスト・インストール・スクリプトを追加しなければならない。"
  },
  {
    "start": 22438600,
    "end": 22457420,
    "text": "プロジェクトに戻り、パッケージJSONのdescriptsに新しい1つのコンマpost installを追加し、このプロジェクトがコンパイルされるたびに新しいPrismaクライアントが生成されるようにPrisma generateを実行します。"
  },
  {
    "start": 22458360,
    "end": 22459632,
    "text": "私たちはこれを保存する。"
  },
  {
    "start": 22459816,
    "end": 22463904,
    "text": "このプロジェクトをVerzelにデプロイするには、GitHubにプッシュする必要がある。"
  },
  {
    "start": 22464032,
    "end": 22469792,
    "text": "対コードのソース管理はここをクリックすると、GitHubリポジトリを作成できます。"
  },
  {
    "start": 22469856,
    "end": 22472180,
    "text": "非公開でもいいし、公開する必要もない。"
  },
  {
    "start": 22472670,
    "end": 22480490,
    "text": "Vezelのダッシュボードでデータベースを設定し、新しいプロジェクトを追加します。"
  },
  {
    "start": 22481710,
    "end": 22487382,
    "text": "Vesell アカウントが GitHub アカウントに接続されていれば、ここにリポジトリが表示されます。"
  },
  {
    "start": 22487486,
    "end": 22499130,
    "text": "そうでなければ、設定からログイン接続を追加し、このログイン接続メニューのオプションでGitHubアカウントを接続する必要があります。"
  },
  {
    "start": 22499460,
    "end": 22503932,
    "text": "そして、次のj's job boardでこのレポジトリを選択する。"
  },
  {
    "start": 22503996,
    "end": 22508372,
    "text": "この場合、これは次のJのものだと自動的に検出される。"
  },
  {
    "start": 22508556,
    "end": 22514480,
    "text": "それから環境変数を挿入しなければならない。"
  },
  {
    "start": 22514780,
    "end": 22523444,
    "text": "postgresのURLを1つずつコピーし、その値をここに持ってくる。"
  },
  {
    "start": 22523492,
    "end": 22528810,
    "text": "引用符の間には、それぞれを付けなければならない。"
  },
  {
    "start": 22530310,
    "end": 22534766,
    "text": "時間を無駄にしないために、このビデオではこの部分は省略する。"
  },
  {
    "start": 22534958,
    "end": 22536730,
    "text": "ここに全部入れてくれ。"
  },
  {
    "start": 22537470,
    "end": 22540646,
    "text": "よし、すべての環境変数を追加した。"
  },
  {
    "start": 22540758,
    "end": 22546214,
    "text": "それからデプロイをクリックし、完了するまで待つ。"
  },
  {
    "start": 22546382,
    "end": 22559012,
    "text": "ビルドしている間、すべての静的ページも生成されるので、データをフェッチする必要があり、1、2分かかるかもしれない。"
  },
  {
    "start": 22559116,
    "end": 22559920,
    "text": "ウェイウェイ。"
  },
  {
    "start": 22560780,
    "end": 22566116,
    "text": "さて、素晴らしいウェブサイトをオープンする前に、ちょっとした変更をしなければならない。"
  },
  {
    "start": 22566268,
    "end": 22572040,
    "text": "ここでプロジェクトを開き、設定に入りましょう。"
  },
  {
    "start": 22572460,
    "end": 22576840,
    "text": "ここでは、generalの下にあるnode JS versionを20に設定しなければならない。"
  },
  {
    "start": 22577180,
    "end": 22585768,
    "text": "私たちのマシンにnode js 20をインストールしたことを思い出してほしい。サーバー・アクションのこのファイル・タイプは、それ以前のバージョンでは動作しないと言ったからだ。"
  },
  {
    "start": 22585904,
    "end": 22588392,
    "text": "ここでも20に設定しなければならない。"
  },
  {
    "start": 22588456,
    "end": 22592088,
    "text": "そうしないと、サーバーアクションを実行するときにエラーが発生します。"
  },
  {
    "start": 22592264,
    "end": 22603744,
    "text": "20を選択して保存し、デプロイメント・タブに移動してこれを再デプロイしなければならない。"
  },
  {
    "start": 22603872,
    "end": 22611082,
    "text": "再デプロイをクリックし、それが終わるまで2分ほど待たなければならない。"
  },
  {
    "start": 22611226,
    "end": 22614630,
    "text": "これが終わったら、ようやくページを開くことができる。"
  },
  {
    "start": 22615770,
    "end": 22617122,
    "text": "これだ。"
  },
  {
    "start": 22617266,
    "end": 22619018,
    "text": "これは本物のURLだ。"
  },
  {
    "start": 22619074,
    "end": 22620978,
    "text": "これを誰かと共有することもできる。"
  },
  {
    "start": 22621114,
    "end": 22624002,
    "text": "一番きれいなURLではないが、うまくいく。"
  },
  {
    "start": 22624146,
    "end": 22628950,
    "text": "ここでのフィルターが現地でも機能するか見てみよう。"
  },
  {
    "start": 22630410,
    "end": 22631950,
    "text": "これだ。"
  },
  {
    "start": 22632750,
    "end": 22635878,
    "text": "それでもページを開くのはとても速い。"
  },
  {
    "start": 22636054,
    "end": 22637770,
    "text": "キャッシュはここにある。"
  },
  {
    "start": 22638310,
    "end": 22641130,
    "text": "超クールなページネーション。"
  },
  {
    "start": 22641590,
    "end": 22643374,
    "text": "素晴らしいポストだ。"
  },
  {
    "start": 22643422,
    "end": 22648650,
    "text": "新しい仕事を検証しても、すべてが同じように機能するはずだ。"
  },
  {
    "start": 22649270,
    "end": 22663814,
    "text": "Vesellのクールなところは、新しい変更をリポジトリのメインブランチにプッシュすると、次のJSが自動的にプロジェクトを再デプロイし、2分後には本番環境に適用されることだ。"
  },
  {
    "start": 22663942,
    "end": 22669198,
    "text": "であれば、常に手動でデプロイする必要はなく、変更をメインブランチにプッシュするだけです。"
  },
  {
    "start": 22669294,
    "end": 22673502,
    "text": "また、ブラジルのどこかで直接ドメインを購入することもできる。"
  },
  {
    "start": 22673566,
    "end": 22679534,
    "text": "ここでは、このドメインのオプションがあり、ここで直接ドメインを購入する必要はありません。"
  },
  {
    "start": 22679582,
    "end": 22685376,
    "text": "他のプロバイダーで購入してここに接続することもできるが、もうひとつ可能性がある。"
  },
  {
    "start": 22685478,
    "end": 22688980,
    "text": "時計ダッシュボードでは、本番モードに切り替えることもできる。"
  },
  {
    "start": 22689060,
    "end": 22691620,
    "text": "詳しくはドキュメントをご覧ください。"
  },
  {
    "start": 22691700,
    "end": 22698348,
    "text": "これにはほんの少しの変更が必要で、実際にプロジェクトを本番にデプロイしたいのであれば、これを行うべきである。"
  },
  {
    "start": 22698484,
    "end": 22705876,
    "text": "私たちのウェブサイトの時計認証は、本番モードに設定しなくても機能します。"
  },
  {
    "start": 22705988,
    "end": 22716210,
    "text": "管理者のバックエンドにログインして、未承認のジョブを確認することができます。"
  },
  {
    "start": 22716630,
    "end": 22720134,
    "text": "オーケー、この素晴らしいプロジェクトを立ち上げたことを祝福するよ。"
  },
  {
    "start": 22720302,
    "end": 22722534,
    "text": "このチュートリアルがお役に立てば幸いです。"
  },
  {
    "start": 22722662,
    "end": 22725110,
    "text": "もしそうなら、このビデオに「いいね！」をお願いします。"
  },
  {
    "start": 22725230,
    "end": 22727358,
    "text": "チャンネル登録がお済みでない方は、チャンネル登録をしてください。"
  },
  {
    "start": 22727454,
    "end": 22737992,
    "text": "このビデオを誰かにシェアしてくれたら、もっとうれしい。"
  },
  {
    "start": 22738166,
    "end": 22740068,
    "text": "ありがとうございました。"
  },
  {
    "start": 22740204,
    "end": 22741100,
    "text": "ハッピーなコーディングだ。"
  },
  {
    "start": 22741180,
    "end": 22742040,
    "text": "気をつけて。"
  }
]