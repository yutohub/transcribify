[
  {
    "start": 250,
    "end": 6926,
    "text": "このビデオでは、Langraph、Gemini Pro、またはお好きなモデルでチャットボットを作成する方法をご紹介します。"
  },
  {
    "start": 7028,
    "end": 16666,
    "text": "ユーザーからのサポート要求に応えるカスタム関数とストリームリット Langraphは、LLMを使ってステートフルなマルチ・アクター・アプリケーションを構築するためのライブラリです。"
  },
  {
    "start": 16778,
    "end": 25794,
    "text": "ラングチェーン式言語は、複数のチェーンやアクターが複数のステップにわたって循環的に連携できるように拡張できる。"
  },
  {
    "start": 25922,
    "end": 30898,
    "text": "ラングチェーンの大きな価値のひとつは、カスタムチェーンを簡単に作れることです。"
  },
  {
    "start": 30994,
    "end": 38534,
    "text": "そのための機能としてラングチェーン式言語を提供してきたが、サイクルを簡単に導入する方法がなかった。"
  },
  {
    "start": 38662,
    "end": 42934,
    "text": "Langraphは、LLMアプリケーションにサイクルを導入することを容易にします。"
  },
  {
    "start": 43062,
    "end": 54318,
    "text": "Langchain式言語はサイクルのループを記述するのに適していないが、Langraphを使用することで、エージェントに必要なサイクルを記述し、導入することが可能になる。"
  },
  {
    "start": 54484,
    "end": 57742,
    "text": "このビデオの最後まで、ぜひ注目してほしい。"
  },
  {
    "start": 57876,
    "end": 65122,
    "text": "まだフォローしていない人は、ぜひフォローして最新のAIニュースをチェックすることをお勧めする。"
  },
  {
    "start": 65256,
    "end": 76066,
    "text": "最後に、このビデオを購読し、「いいね！」を押して、過去のビデオをチェックしてください。"
  },
  {
    "start": 76168,
    "end": 81078,
    "text": "アプリケーションに入る前に、ビデオに戻ろう。"
  },
  {
    "start": 81244,
    "end": 84742,
    "text": "私たちは、コードが機能するための理想的な環境を作ります。"
  },
  {
    "start": 84876,
    "end": 88618,
    "text": "そのためには、必要なpythonライブラリをインストールする必要がある。"
  },
  {
    "start": 88784,
    "end": 93002,
    "text": "まず、このモデルをサポートするライブラリをインストールすることから始める。"
  },
  {
    "start": 93136,
    "end": 97094,
    "text": "そのために、以下のライブラリをpipでインストールする。"
  },
  {
    "start": 97222,
    "end": 110250,
    "text": "インストールすると、Langchain、Langchain、Google LangchainコミュニティOS、タイピングLangchain、コア演算子Langchai、プリビルドLangraphとStreamlitをインポートする。"
  },
  {
    "start": 110330,
    "end": 115106,
    "text": "Streamlitウェブアプリケーションのページタイトルとレイアウトスタイルを設定します。"
  },
  {
    "start": 115288,
    "end": 121954,
    "text": "まず、streamlitアプリケーションの中心となるmain関数を定義する。"
  },
  {
    "start": 122152,
    "end": 127542,
    "text": "次に、ウェブページのタイトルを設定し、テキストエリアを作成する。"
  },
  {
    "start": 127676,
    "end": 130994,
    "text": "このテキストエリアはユーザー入力用に設計されている。"
  },
  {
    "start": 131122,
    "end": 134214,
    "text": "さらに、ページにボタンを設置。"
  },
  {
    "start": 134332,
    "end": 146214,
    "text": "ユーザーがこのボタンをクリックすると、対応するifブロック内のコードが実行され、Serper API keyという変数にAPI keyの値が設定されます。"
  },
  {
    "start": 146342,
    "end": 154234,
    "text": "次に、Google Serper APIラッパー・モジュールを使い、Serper APIを使って関連するニュース検索結果を取得する。"
  },
  {
    "start": 154362,
    "end": 162266,
    "text": "単語のリストをアルファベット順に並べ替えるソート・ツールや、文字を小文字や大文字に変換するトグル・ケース・ツールを追加してみよう。"
  },
  {
    "start": 162378,
    "end": 164958,
    "text": "次に、関数を作成する。"
  },
  {
    "start": 165054,
    "end": 169406,
    "text": "まず、単語をアルファベット順にソートするソート関数を定義する。"
  },
  {
    "start": 169518,
    "end": 175198,
    "text": "次に、文字を小文字と大文字に変換する大文字小文字切り替え関数を定義する。"
  },
  {
    "start": 175294,
    "end": 180422,
    "text": "ここまでで、すべてのカスタムツールを定義し、いよいよエージェントに追加します。"
  },
  {
    "start": 180556,
    "end": 183938,
    "text": "tools配列では、ツールのリストを定義した。"
  },
  {
    "start": 184034,
    "end": 189874,
    "text": "検索、並べ替え、文字変換ツールは、パラメータが1つしかないので、直接定義することができます。"
  },
  {
    "start": 190002,
    "end": 204574,
    "text": "我々は、ツールの名前、エージェントがそれを使いたいときに呼び出される関数、そしてエージェントがこのツールをいつ使うか判断するために読む説明を定義した、name funk属性とdescription属性を使用しました。"
  },
  {
    "start": 204692,
    "end": 210590,
    "text": "チャットのGoogle Generative AIは、ジェミニLLMを機能させるために協力しているクラスである。"
  },
  {
    "start": 210740,
    "end": 218946,
    "text": "次に、チャットのGoogle Generative AIクラスにGeminiモデルを渡して、LLMクラスを作成する。"
  },
  {
    "start": 219128,
    "end": 226334,
    "text": "次に、リアクト・アプローチを使用して、ツールや道具と相互作用できるAIシステムであるエージェントを作成する。"
  },
  {
    "start": 226462,
    "end": 230054,
    "text": "まず、エージェント内の状態を保持するクラスを定義します。"
  },
  {
    "start": 230172,
    "end": 234694,
    "text": "エージェント処理中の内部状態は、このクラスのインスタンスに保持される。"
  },
  {
    "start": 234812,
    "end": 237586,
    "text": "このクラスは後でlangraphの中で使われる。"
  },
  {
    "start": 237708,
    "end": 240662,
    "text": "ステータスとして保持されている情報は以下の通り。"
  },
  {
    "start": 240806,
    "end": 259690,
    "text": "エージェント実行前のユーザチャット履歴会話履歴からの入力入力内容エージェント処理中の中間ステップ中間実行の詳細と結果エージェントの結果、エージェントの応答結果、エージェントのアクション、またはエージェントの終了インスタンスが格納されます。"
  },
  {
    "start": 259770,
    "end": 263866,
    "text": "応答結果がエージェント終了の場合、プロセスは終了すべきである。"
  },
  {
    "start": 263978,
    "end": 270434,
    "text": "そうでなければ、エージェントが実行するプロセスを定義したツールを実行することになる。"
  },
  {
    "start": 270552,
    "end": 273230,
    "text": "これらの関数はグラフのノードに対応する。"
  },
  {
    "start": 273310,
    "end": 276386,
    "text": "ここで定義されているノードの機能は以下の通り。"
  },
  {
    "start": 276498,
    "end": 288966,
    "text": "ステップ4で定義したエージェントチェーンを実行するエージェントプロセスを実行するために、toolsにexecute関数を定義し、パラメータstateを受け取り、ツール名と引数を取得します。"
  },
  {
    "start": 288998,
    "end": 295274,
    "text": "ツール名が検索ソートかトグルケースかどうかをチェックするif文を設定する。"
  },
  {
    "start": 295392,
    "end": 300162,
    "text": "もし、return to directが引数のキーであれば、それは削除される。"
  },
  {
    "start": 300326,
    "end": 308158,
    "text": "次に、指定された入力と戻り文でツールを起動するためのツール起動を準備する。"
  },
  {
    "start": 308324,
    "end": 316286,
    "text": "この関数は、直前の応答結果の内容をチェックし、それを使用してエージェント処理を終了するか継続するかを決定する。"
  },
  {
    "start": 316398,
    "end": 330818,
    "text": "通常はこれだけで良いのですが、今回使用するモデルはあまりツールを使用しないようなので、最初のエージェントがツールを使用することを確認するために追加のノード関数を定義し、エージェント処理のグラフを定義します。"
  },
  {
    "start": 330914,
    "end": 333618,
    "text": "グラフは大まかにノードとエッジで構成される。"
  },
  {
    "start": 333714,
    "end": 337538,
    "text": "ウィキペディアのグラフ理論を見れば、このことがよくわかるだろう。"
  },
  {
    "start": 337634,
    "end": 343670,
    "text": "エージェントは、コンパイル後、これまでに定義されたエージェントのグラフを実行する準備ができました。"
  },
  {
    "start": 343750,
    "end": 352590,
    "text": "これはlang chain runnableオブジェクトなので、langchain expression languageやlcel chainと同じように使うことができる。"
  },
  {
    "start": 352660,
    "end": 357486,
    "text": "エージェントがグラフの各ノードを処理した結果は、順番に出力される。"
  },
  {
    "start": 357588,
    "end": 368034,
    "text": "特に実行ログの呼び出しが必要ない場合は、最後の行のエージェントの結果の内容が、最終的に得られた結果となる。"
  },
  {
    "start": 368152,
    "end": 371806,
    "text": "別のクエリーを実行し、最終結果だけを表示してみよう。"
  },
  {
    "start": 371918,
    "end": 372962,
    "text": "終わりにしよう。"
  },
  {
    "start": 373016,
    "end": 376282,
    "text": "それはlangraphを使ったエージェントの実装だった。"
  },
  {
    "start": 376366,
    "end": 385618,
    "text": "この実行例では、プロセスは一方向に循環せず、そのまま終了するので、ラングラフを使う意味はほとんどない。"
  },
  {
    "start": 385714,
    "end": 395930,
    "text": "それでもLLM応答ツール実行llm応答結果を使用して、私はそれが別のツールを実行するためにエージェントを構築する際に非常に強力なフレームワークになると思います。"
  },
  {
    "start": 396000,
    "end": 400666,
    "text": "簡単にアクセスできるように、これらのリンクはすべて以下の説明に残しておく。"
  },
  {
    "start": 400768,
    "end": 406126,
    "text": "それは素晴らしい読み物で、彼らが基本的にどのようにこれを達成するのかについて、より多くの理解を与えてくれるだろう。"
  },
  {
    "start": 406228,
    "end": 410746,
    "text": "そのような思いから、私は純粋に、あなたがこの記事を有益で価値のあるものだと感じてくれることを願っている。"
  },
  {
    "start": 410858,
    "end": 414554,
    "text": "もしそうなら、親指を立てて購読を検討してほしい。"
  },
  {
    "start": 414602,
    "end": 421070,
    "text": "このようなコンテンツについては、通知ベルをクリックすることをお忘れなく。"
  },
  {
    "start": 421140,
    "end": 424806,
    "text": "質問や感想があれば、下のコメント欄に書き込んでください。"
  },
  {
    "start": 424948,
    "end": 426534,
    "text": "いつもあなたからの連絡を楽しみにしています。"
  },
  {
    "start": 426572,
    "end": 429540,
    "text": "次回まで、好奇心を持ち続け、学び続けよう。"
  }
]