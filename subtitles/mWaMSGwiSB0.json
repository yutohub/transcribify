[
  {
    "start": 5130,
    "end": 6970,
    "text": "皆さん、2ミニッツPIへようこそ。"
  },
  {
    "start": 7050,
    "end": 12686,
    "text": "今日はPythonのinit pyの謎を解き明かします。大きなことをする小さなファイルです。"
  },
  {
    "start": 12788,
    "end": 17338,
    "text": "技術的な専門用語は抜きにして、本題に入ろう。"
  },
  {
    "start": 17434,
    "end": 21866,
    "text": "pythonファイルがたくさんあるディレクトリがあって、それをパッケージとして扱いたいとします。"
  },
  {
    "start": 21978,
    "end": 25634,
    "text": "中にinit pyファイルをドロップするだけで、ブームが起こる。"
  },
  {
    "start": 25762,
    "end": 28498,
    "text": "Pythonはそのディレクトリをパッケージとして認識する。"
  },
  {
    "start": 28594,
    "end": 31618,
    "text": "それは、あなたのコードとPythonの間の秘密の握手のようなものだ。"
  },
  {
    "start": 31714,
    "end": 34866,
    "text": "さて、このinit pyファイルの中身は？"
  },
  {
    "start": 34978,
    "end": 40730,
    "text": "空のファイルのようにシンプルにすることもできるし、特別なセットアップが必要な場合は初期化コードを含めることもできる。"
  },
  {
    "start": 40880,
    "end": 45020,
    "text": "ほとんどの場合、空のinit pyで十分だ。"
  },
  {
    "start": 45470,
    "end": 50346,
    "text": "init py は、パッケージが「私は使われる準備ができています。"
  },
  {
    "start": 50528,
    "end": 57950,
    "text": "他の誰かがあなたのパッケージを使いたいとき、彼らはそのコードでそれをインポートし、Pythonは魔法のinit pyを探すことを知る。"
  },
  {
    "start": 58370,
    "end": 67806,
    "text": "init Pyがなければ、Pythonはあなたのディレクトリをパッケージとして認識せず、標準のimport文を使ってそこからモジュールをインポートすることができません。"
  },
  {
    "start": 67998,
    "end": 71090,
    "text": "init Py はパッケージの作成にどのように役立ちますか？"
  },
  {
    "start": 71990,
    "end": 79190,
    "text": "Init pyを使用すると、コードをモジュールの塊に整理することができ、管理や再利用が容易になります。"
  },
  {
    "start": 79530,
    "end": 82002,
    "text": "パッケージの設計図だと思ってください。"
  },
  {
    "start": 82146,
    "end": 91210,
    "text": "init py の中で、共通の関数や変数を定義したり、他のモジュールをインポートして、パッケージの機能の基礎を作ることができます。"
  },
  {
    "start": 91950,
    "end": 98380,
    "text": "init py がどのように動作するかを説明するために、my underscore package というシンプルなパッケージを作成してみましょう。"
  },
  {
    "start": 98830,
    "end": 104910,
    "text": "my underscore パッケージディレクトリに init py という空のファイルを作成します。"
  },
  {
    "start": 105410,
    "end": 114100,
    "text": "次にgreetings pyという別のファイルを作り、hello worldと表示するsay underscore helloという関数を書く。"
  },
  {
    "start": 114710,
    "end": 123300,
    "text": "これで、my underscoreパッケージ・ディレクトリの外のどのファイルからでも、greetingsモジュールをインポートして、underscoreのhello関数を使うことができる。"
  },
  {
    "start": 124230,
    "end": 133590,
    "text": "なぜなら init py は my underscore パッケージの名前空間から greetings モジュールにアクセスできるからです。"
  },
  {
    "start": 135690,
    "end": 141670,
    "text": "Init py は、構造化され整理された Python パッケージを作成するための基本的なビルディングブロックです。"
  },
  {
    "start": 142330,
    "end": 148600,
    "text": "見えない接着剤のようにコードをまとめ、管理、再利用、共有を容易にする。"
  },
  {
    "start": 149290,
    "end": 154734,
    "text": "簡単に言うと、init pyはpythonプロジェクトのスタートラインのようなものです。"
  },
  {
    "start": 154932,
    "end": 156142,
    "text": "ご視聴ありがとう。"
  },
  {
    "start": 156196,
    "end": 157022,
    "text": "今は以上だ。"
  },
  {
    "start": 157076,
    "end": 158490,
    "text": "いつものように、コーディングを続けてください。"
  }
]