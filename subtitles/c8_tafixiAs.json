[
  {
    "start": 250,
    "end": 6606,
    "text": "ヴェルサイユは、現在最大のクラウドプロバイダーの1つだ。"
  },
  {
    "start": 6788,
    "end": 10234,
    "text": "3億ドル以上の資金を持つ企業。"
  },
  {
    "start": 10362,
    "end": 17230,
    "text": "最小限の労力でインターネット上にアプリケーションを展開できる会社だが、同時に暗黒面も持っている。"
  },
  {
    "start": 17380,
    "end": 20938,
    "text": "よくAWSのラッパーと呼ばれる会社だ。"
  },
  {
    "start": 21114,
    "end": 29000,
    "text": "Versailleは規模が大きくなると高くつくという批判が複数投稿されており、技術会社と比較してマーケティング会社というレッテルを貼られている。"
  },
  {
    "start": 29530,
    "end": 30966,
    "text": "これらの主張は本当なのか？"
  },
  {
    "start": 31068,
    "end": 33682,
    "text": "ヴェルセルがボンネットの中でどのように機能しているのか、不思議に思ったことはないだろうか。"
  },
  {
    "start": 33746,
    "end": 37350,
    "text": "本当にAWSの上にアプリを載せただけなのか、それともそれ以上のものがあるのか？"
  },
  {
    "start": 37420,
    "end": 39434,
    "text": "今日のエピソードでは、それを探ってみよう。"
  },
  {
    "start": 39472,
    "end": 42374,
    "text": "ヴェルセルのようなものをゼロから作るにはどうすればいいのか？"
  },
  {
    "start": 42502,
    "end": 44060,
    "text": "さっそく本題に入ろう。"
  },
  {
    "start": 46430,
    "end": 47286,
    "text": "いいだろう。"
  },
  {
    "start": 47398,
    "end": 51002,
    "text": "まず、私たちが今日何を作ろうとしているのかを理解することから始めよう。"
  },
  {
    "start": 51136,
    "end": 54890,
    "text": "私たちは、ヴェルサイユによく似たウェブサイトを構築している。"
  },
  {
    "start": 55050,
    "end": 65630,
    "text": "ご存じない方のために説明すると、VersailleはサインアップしてGitHubにリンクすると、ワンクリックでインターネット上にプロジェクトをデプロイできるウェブサイトだ。"
  },
  {
    "start": 65780,
    "end": 68482,
    "text": "ここを見ると、ここに新規追加ボタンがある。"
  },
  {
    "start": 68536,
    "end": 74382,
    "text": "新しいプロジェクトの追加をクリックすると、GitHubに存在するすべてのリポジトリが表示される。"
  },
  {
    "start": 74526,
    "end": 86898,
    "text": "これらのライブラリの一つ、例えばGitHubに書いたreactのボイラープレート・コードをインポートして、ワンクリックでデプロイをクリックすると、私のGitHubリポジトリがインターネット上にデプロイされる。"
  },
  {
    "start": 86994,
    "end": 92234,
    "text": "僕のGitHubリポジトリを見てみると、とてもシンプルなリアクト・アプリケーションで、大したものはない。"
  },
  {
    "start": 92272,
    "end": 96362,
    "text": "配備されれば、それがどのようなものかは分かるだろう。"
  },
  {
    "start": 96416,
    "end": 98358,
    "text": "それがヴェルサイユのモードだ。"
  },
  {
    "start": 98454,
    "end": 104718,
    "text": "これをGCPやAWSのような他のクラウドプロバイダーと比較すると、フロントエンドのプロジェクトをそこにデプロイするのはずっと難しい。"
  },
  {
    "start": 104804,
    "end": 107754,
    "text": "AWS特有の構造を理解する必要がある。"
  },
  {
    "start": 107802,
    "end": 117266,
    "text": "毎月20ドル、30ドル払ってサーバーを用意し、そこにアプリケーションをデプロイしなければならない。"
  },
  {
    "start": 117288,
    "end": 123074,
    "text": "私がここのプロジェクトを更新すると、いつでもデプロイされ、ここのプロジェクトも更新される。"
  },
  {
    "start": 123272,
    "end": 131430,
    "text": "これをクリックすると、最終的に私のウェブサイトがデプロイされるリンクが表示され、そのコードは私のGitHubリポジトリに存在する。"
  },
  {
    "start": 131850,
    "end": 133686,
    "text": "私たちもよく似たものを作るつもりだ。"
  },
  {
    "start": 133788,
    "end": 149850,
    "text": "最終的なプロジェクトを見ると、GitHubプロジェクトへのリンクを貼り付ける入力ボックスがあり、アップロードをクリックすると、インターネット上にデプロイされます。"
  },
  {
    "start": 149920,
    "end": 153998,
    "text": "そこに行けば、あなたのリアクト・プロジェクトがインターネット上に展開される。"
  },
  {
    "start": 154084,
    "end": 154430,
    "text": "クールだ。"
  },
  {
    "start": 154500,
    "end": 158730,
    "text": "それが今日、私たちが作っているもので、ベルサイユのこのブログ記事に従っている。"
  },
  {
    "start": 158810,
    "end": 164718,
    "text": "ブログ記事のタイトルは、最適なスケーラビリティとパフォーマンスを実現するヴェルサイユ・インフラの舞台裏だ。"
  },
  {
    "start": 164814,
    "end": 170670,
    "text": "このブログ記事を読めば、ヴェルセルのインフラが3つの部分に分かれていることがわかるだろう。"
  },
  {
    "start": 170830,
    "end": 173518,
    "text": "その1、プロジェクトファイルのアップロード。"
  },
  {
    "start": 173614,
    "end": 178482,
    "text": "これは、あなたのGitHubからVersaillesサーバーにプロジェクトをコピーオーバーすることです。"
  },
  {
    "start": 178626,
    "end": 181170,
    "text": "その2、配備の作成。"
  },
  {
    "start": 181330,
    "end": 188210,
    "text": "これは、実際にプロジェクトを構築し、HTML、CSS、JavaScriptの適切なアセットのセットを吐き出すことを含む。"
  },
  {
    "start": 188370,
    "end": 197142,
    "text": "最後に、リクエスト段階。世界中の人々があなたのウェブサイトにアクセスしようとし、Versailleサーバーがそれらのリクエストを処理する。"
  },
  {
    "start": 197286,
    "end": 206122,
    "text": "このブログ記事の一番下までスクロールすると、これらの3つのフェーズを作るためにAWSのコンストラクトに大きく依存していることがわかるだろう。"
  },
  {
    "start": 206266,
    "end": 213790,
    "text": "必要なのはこれらのAWSテクノロジーのサブセットだけであり、それこそが今日我々がVerselに似たものを構築するために使おうとしているものなのだ。"
  },
  {
    "start": 214230,
    "end": 219570,
    "text": "次は、ヴェルセルのようなシステムを構築するためのハイレベルなシステム設計に入ろう。"
  },
  {
    "start": 222250,
    "end": 234358,
    "text": "さて、第一原理からベルセルを構築するこのセクションでは、もし私がシステムデザインの面接でこの質問をされたら、どのようにゼロからベルサイユの構築に取り組むかを紹介しよう。"
  },
  {
    "start": 234454,
    "end": 242830,
    "text": "私たちはヴェルサイユの建築を建てなければならない。ブログの記事にあったように、そしてブログの記事を読んでもらわなくても、私の頭に真っ先に浮かぶのはこれだ。"
  },
  {
    "start": 242900,
    "end": 252066,
    "text": "アップロード・サービス、デプロイ・サービス、そしてリクエスト・ハンドラ・サービスだ。"
  },
  {
    "start": 252248,
    "end": 256802,
    "text": "この3つが何なのか、1つずつ高いレベルで見ていこう。"
  },
  {
    "start": 256936,
    "end": 266530,
    "text": "アップロードサービスの仕事は、ユーザーコードをversaillesystemsにアップロードすることである。"
  },
  {
    "start": 266870,
    "end": 279526,
    "text": "ユーザーから得たGitHubのURLが何であれ、そのソースコードをすべて自分のシステムにコピーして、ユーザーがデプロイしたいプロジェクトの適切なローカルコピーを持つようにする必要がある。"
  },
  {
    "start": 279718,
    "end": 291662,
    "text": "デプロイメント・サービスをデプロイし、さらにその前にプロジェクトをビルドしてデプロイする必要がある。"
  },
  {
    "start": 291796,
    "end": 292958,
    "text": "ビルドとはどういう意味か？"
  },
  {
    "start": 293044,
    "end": 299594,
    "text": "これは、reactプロジェクトをHTML、CSS、JSファイルに変換することを意味する。"
  },
  {
    "start": 299642,
    "end": 300926,
    "text": "デプロイとは何か？"
  },
  {
    "start": 301028,
    "end": 310370,
    "text": "つまり、これらのHTML CSS Javascriptファイルをどこかに置き、他のユーザーがあなたがユーザーのためにデプロイしたウェブサイトにアクセスしようとしたときにアクセスできるようにするのだ。"
  },
  {
    "start": 310710,
    "end": 313202,
    "text": "最後に、リクエスト・ハンドラ・サービスである。"
  },
  {
    "start": 313336,
    "end": 318534,
    "text": "これらのHTML CSS Javascriptファイルをどこかに置いてしまえば、世界中のユーザーがアクセスしようとする。"
  },
  {
    "start": 318572,
    "end": 329946,
    "text": "彼らはversailles.comを展開し、Herkirathに行こうとします。あなたはこのリクエストを処理し、HTMLのCSSとJavaScriptのコードをユーザーに返す必要があります。"
  },
  {
    "start": 330048,
    "end": 332666,
    "text": "これがリクエスト・ハンドラ・サービスに必要なことである。"
  },
  {
    "start": 332848,
    "end": 336570,
    "text": "この2つは、リクエストハンドラーサービスの前提条件のようなものだ。"
  },
  {
    "start": 336720,
    "end": 344410,
    "text": "プロジェクトがversaillesystemsにアップロードされ、デプロイまたはビルドされるまでは、実際にリクエストを処理することはできません。"
  },
  {
    "start": 344490,
    "end": 349002,
    "text": "Versaillのダッシュボードを見ると、実際にはデプロイ中と表示され、ステータスは黄色だ。"
  },
  {
    "start": 349146,
    "end": 356946,
    "text": "実際にデプロイされ、ステータスがグリーンになったときに初めて、ユーザーが実際にサービスを利用し、ウェブサイトを訪問し始めることができる。"
  },
  {
    "start": 357128,
    "end": 357666,
    "text": "クールだ。"
  },
  {
    "start": 357768,
    "end": 360034,
    "text": "これら3つのサービスについて深く掘り下げてみよう。"
  },
  {
    "start": 360152,
    "end": 364174,
    "text": "もし私がヴェルサイユを自分で作るとしたら、1、2、3をどのように作るかを見てみよう。"
  },
  {
    "start": 364312,
    "end": 366886,
    "text": "さて、アップロードサービスから始めよう。"
  },
  {
    "start": 367068,
    "end": 381930,
    "text": "アップロード・サービスは、GitHubのURLを入力として受け取り、このGitHubプロジェクトのすべてのコンテンツをversaillesystemsにコピーする必要があるバックエンド・サーバーにすぎません。"
  },
  {
    "start": 383390,
    "end": 387786,
    "text": "これは、もし私が同じようなことを達成しようとするならば、従うであろう一般的なアーキテクチャーである。"
  },
  {
    "start": 387968,
    "end": 401358,
    "text": "アップロードサービスはGitHubのURLを入力として受け取り、GitHubにアクセスしてこのプロジェクトのすべてのコンテンツ、基本的にはすべてのリアクトファイルを取得し、オブジェクトストアと呼ばれるものにプッシュします。"
  },
  {
    "start": 401524,
    "end": 404820,
    "text": "これは、あなたが聞いたことがないかもしれない新しいことかもしれない。"
  },
  {
    "start": 405590,
    "end": 410606,
    "text": "オブジェクト・ストアは、通常アセットを保管する場所です。"
  },
  {
    "start": 410718,
    "end": 411742,
    "text": "資産とは何か？"
  },
  {
    "start": 411886,
    "end": 419346,
    "text": "mp4ファイルや画像、あるいはHTMLのJavaScriptファイルなどだ。"
  },
  {
    "start": 419458,
    "end": 421442,
    "text": "これらをデータベースに保存することはない。"
  },
  {
    "start": 421506,
    "end": 425686,
    "text": "これらを自分で保存したい場合は、オブジェクト・ストアに保存する。"
  },
  {
    "start": 425788,
    "end": 428370,
    "text": "S threeはAWSのオブジェクトストアである。"
  },
  {
    "start": 428530,
    "end": 429622,
    "text": "グーグルには独自のものがある。"
  },
  {
    "start": 429676,
    "end": 430714,
    "text": "Cloudflareには独自のものがある。"
  },
  {
    "start": 430752,
    "end": 438422,
    "text": "これらのファイルをどこに保存するかは自由だが、データベースにHTML CSS JavaScript reactファイルを保存することはない。"
  },
  {
    "start": 438486,
    "end": 439994,
    "text": "オブジェクトストアに保存するのだ。"
  },
  {
    "start": 440032,
    "end": 445680,
    "text": "ベルサイユが使っているもので、私がシステム設計のインタビューでも薦めるのは、この3つだ。"
  },
  {
    "start": 446050,
    "end": 454082,
    "text": "最後に、このアップロード・サービスがこのオブジェクト・ストアにすべてをコピーし終えたら、もうひとつやることがある。"
  },
  {
    "start": 454216,
    "end": 458322,
    "text": "デプロイメント・サービスに、私は準備ができていると伝える必要がある。"
  },
  {
    "start": 458376,
    "end": 460322,
    "text": "ここにその内容をコピーしておく。"
  },
  {
    "start": 460456,
    "end": 466294,
    "text": "ここに、この特定のアップロードのIDが配置プロセスを開始します。"
  },
  {
    "start": 466492,
    "end": 468598,
    "text": "どうなるかはすぐにわかるだろう。"
  },
  {
    "start": 468684,
    "end": 470598,
    "text": "アップロード・サービスは何をする必要があるのか？"
  },
  {
    "start": 470684,
    "end": 475014,
    "text": "その1、S3に内容をコピーする。"
  },
  {
    "start": 475132,
    "end": 478898,
    "text": "その2、次のサービス、デプロイメント・サービスに伝える。"
  },
  {
    "start": 479004,
    "end": 480902,
    "text": "プロジェクトファイルをアップロードしました。"
  },
  {
    "start": 481046,
    "end": 482102,
    "text": "配備を開始する。"
  },
  {
    "start": 482166,
    "end": 483674,
    "text": "リアクトファイルはこちら。"
  },
  {
    "start": 483792,
    "end": 489178,
    "text": "それらをコピーし、HTML、CSS、JavaScriptに変換し、別の場所に置く。"
  },
  {
    "start": 489344,
    "end": 491638,
    "text": "それでは、2つ目のサービスに移ろう。"
  },
  {
    "start": 491824,
    "end": 494766,
    "text": "この時点までがソースコードのアップロードである。"
  },
  {
    "start": 494868,
    "end": 497758,
    "text": "やるべきことは、実際にソースコードを構築することだ。"
  },
  {
    "start": 497844,
    "end": 499694,
    "text": "配備サービスの目標"
  },
  {
    "start": 499812,
    "end": 507220,
    "text": "Kbai、S3にこのプロジェクトがあるとして、S3からシステムにこのプロジェクトをコピーしてくれ。"
  },
  {
    "start": 508710,
    "end": 529186,
    "text": "つまり、基本的にはreactプロジェクトをHTML CSS NJSに変換してS3に戻し、最終的にユーザーに提供する必要のあるHTML CSSとJavaScriptのファイル・セットを完成させる。"
  },
  {
    "start": 529218,
    "end": 538374,
    "text": "次の段階では、GitHubからコピーされたプロジェクトであるKbaiが、リアクトのコードをHTMLのCSSとJavaScriptに変換していることを確認する必要がある。"
  },
  {
    "start": 538502,
    "end": 540682,
    "text": "デプロイメント・サービスは何をする必要があるのか？"
  },
  {
    "start": 540736,
    "end": 542454,
    "text": "名前そのものが配備されている。"
  },
  {
    "start": 542582,
    "end": 549306,
    "text": "Kbaiは、GitHubからコピーしたreactのコード、s3にあったコードを確認する必要がある。"
  },
  {
    "start": 549418,
    "end": 554958,
    "text": "私はそのコードを構築し、HTMLのCSSとJavaScriptに変換して、3つのサイトにアップロードし直す。"
  },
  {
    "start": 555044,
    "end": 558782,
    "text": "これで最終的なファイル一式が揃ったので、これをエンドユーザーに提供することができる。"
  },
  {
    "start": 558846,
    "end": 563922,
    "text": "ユーザーは実際に私たちのウェブサイトにアクセスし、そこからこのHTML CSSとJavaScriptを取り戻すことができる。"
  },
  {
    "start": 564056,
    "end": 565362,
    "text": "このシステムをどのように構築しますか？"
  },
  {
    "start": 565416,
    "end": 571446,
    "text": "これはまた別の問題だが、配備サービスに何が必要なのかを理解してほしい。"
  },
  {
    "start": 571468,
    "end": 572822,
    "text": "3つ目のサービスに移ります。"
  },
  {
    "start": 572956,
    "end": 580054,
    "text": "HTML、CSS、JavaScriptのアセットがすでにs threeに保存されているとして、それらをどのようにエンドユーザーに提供するのか？"
  },
  {
    "start": 580182,
    "end": 583514,
    "text": "それはKに与えられたリクエストサービスによって処理される。"
  },
  {
    "start": 583552,
    "end": 589882,
    "text": "バンダニージョ・プロジェクト・ダラ......アップロードされ、S3にアップロードされ、デプロイされたプロジェクト。"
  },
  {
    "start": 590026,
    "end": 592442,
    "text": "ユーザーからのリクエストにどのように応えるのか？"
  },
  {
    "start": 592506,
    "end": 615342,
    "text": "ユーザーがあなたのウェブサイトにやってきて、オーケー、私にHerkirath Versaillアプリ、コード、HTML CSS JavaScript、このデプロイメントを指すウェブサイトをよこせと要求するとき、リクエストサービスはs 3に行き、あなたが最後のステップで作成したHTML CSS JavaScriptファイルを取り戻し、エンドユーザーにそれらを提供する必要がある。"
  },
  {
    "start": 615486,
    "end": 618094,
    "text": "より速くするためには、ここに10種類のものが必要だ。"
  },
  {
    "start": 618142,
    "end": 624150,
    "text": "ここでキャッシュのようなものを追加して、S3を何度も繰り返さないようにする必要がある。"
  },
  {
    "start": 624220,
    "end": 628550,
    "text": "リクエスト・サービスは、ユーザーが実際にこのウェブサイトにアクセスできるようにする必要がある。"
  },
  {
    "start": 628620,
    "end": 632390,
    "text": "このユーザーが訪問しようとしているIDは何なのか？"
  },
  {
    "start": 632470,
    "end": 636486,
    "text": "それに基づいて、S3からアセットを取得し、それをユーザーに返す。"
  },
  {
    "start": 636598,
    "end": 641602,
    "text": "この3つのサービスがあれば、Versaillのようなアプリケーションに必要なものはすべて揃う。"
  },
  {
    "start": 641686,
    "end": 645150,
    "text": "どのように構築されるのか、実際のシステム設計、利用するサービス。"
  },
  {
    "start": 645220,
    "end": 656370,
    "text": "次のセクションに進む前に、いくつかのよくある質問と、面接に臨む際に知っておいた方がいい定番の質問を紹介しよう。"
  },
  {
    "start": 656710,
    "end": 660846,
    "text": "その1、なぜアップロード・サービスとデプロイメント・サービスが別々なのか？"
  },
  {
    "start": 660958,
    "end": 664082,
    "text": "なぜ、この2つを一度にできないのか？"
  },
  {
    "start": 664136,
    "end": 666882,
    "text": "なぜ複数のステップに分けたのか？"
  },
  {
    "start": 666946,
    "end": 670902,
    "text": "アップロード・サービスが終了すると、なぜデプロイメント・サービスにシグナルが送られるのか。"
  },
  {
    "start": 670956,
    "end": 672150,
    "text": "カビ 終わったよ。"
  },
  {
    "start": 672220,
    "end": 673714,
    "text": "配備を開始してください。"
  },
  {
    "start": 673842,
    "end": 677862,
    "text": "その理由は、アップロードサービスが非常に単純なことをしているからだ。"
  },
  {
    "start": 677996,
    "end": 682950,
    "text": "GitHubからファイルをコピーしてs threeストアに置くのは簡単で、多くのCPUを必要としない。"
  },
  {
    "start": 683030,
    "end": 687658,
    "text": "これらのサービスを10個まとめて行うことができるので、必ずしもこのサービスをオートスケールで行う必要はない。"
  },
  {
    "start": 687744,
    "end": 692330,
    "text": "一方、この配置は、第一に、非常にCPUを消費する。"
  },
  {
    "start": 692410,
    "end": 693902,
    "text": "NPMを実行している場合は、buildを実行する。"
  },
  {
    "start": 693956,
    "end": 707522,
    "text": "JavascriptのプロジェクトをHTML、CSS、Javascriptに変換する際に多くのCPUを必要とし、マシン上で多くのCPUを消費しているプロジェクトが1つでもあった場合にアップロードサービスに影響が出ないようにするためです。"
  },
  {
    "start": 707576,
    "end": 709154,
    "text": "このような建築は使えるのか？"
  },
  {
    "start": 709192,
    "end": 711938,
    "text": "Kbhaiのアップロードサービスは別にあり、シンプルだ。"
  },
  {
    "start": 712024,
    "end": 713362,
    "text": "サーバーは1台でも動く。"
  },
  {
    "start": 713416,
    "end": 716062,
    "text": "アップロードを処理するサーバーは1つだ。"
  },
  {
    "start": 716126,
    "end": 717906,
    "text": "この1つのサーバーに複数の人がアクセスできる。"
  },
  {
    "start": 717938,
    "end": 719766,
    "text": "やるべきことをやってくれる。"
  },
  {
    "start": 719868,
    "end": 724806,
    "text": "デプロイメントサーバーは、一度にNPMのビルドを実行する必要があるサーバーです。"
  },
  {
    "start": 724908,
    "end": 730486,
    "text": "これらのデプロイメントサーバは多くのCPUを消費する可能性があるため、単一のプロジェクトのみを実行する必要があります。"
  },
  {
    "start": 730598,
    "end": 732362,
    "text": "彼らはアービトコードも実行している。"
  },
  {
    "start": 732416,
    "end": 738666,
    "text": "NPM run buildを実行すると、ユーザがアップロードしたものを取り込み、それに対してNPM run buildを実行することになる。"
  },
  {
    "start": 738768,
    "end": 742050,
    "text": "あなたは彼らのreactプロジェクトをHTML、CSS、Javascriptに変換しています。"
  },
  {
    "start": 742150,
    "end": 746462,
    "text": "そのため、アップロードサービスを分ける必要がある。"
  },
  {
    "start": 746516,
    "end": 748526,
    "text": "シンプルなものと配備サービスだ。"
  },
  {
    "start": 748628,
    "end": 755198,
    "text": "非常に複雑なもので、デプロイメント・サービスは、1つのサーバーが1度に1つのリクエストしか処理しないようにする必要がある。"
  },
  {
    "start": 755284,
    "end": 757550,
    "text": "同じサーバーで2つのビルドが行われることはない。"
  },
  {
    "start": 757630,
    "end": 762994,
    "text": "ビルドが行われている場合、Rbitコードを実行しているため、非常に分離された方法で実行されている。"
  },
  {
    "start": 763032,
    "end": 768742,
    "text": "自分のマシン上で他の人のコードを実行するわけだから、サーバーが爆発しないように、しっかりと隔離しておきたい。"
  },
  {
    "start": 768796,
    "end": 769254,
    "text": "クールだ。"
  },
  {
    "start": 769372,
    "end": 770534,
    "text": "それが最初の答えだ。"
  },
  {
    "start": 770652,
    "end": 773718,
    "text": "その2、プロジェクトの建設とは何を意味するのか？"
  },
  {
    "start": 773884,
    "end": 794266,
    "text": "過去に基本的なリアクトをやったことがある人なら、Npm run devというコマンドを実行してローカルで実行したことがあるかもしれないが、少なくとも実際にリアクト・プロジェクトをインターネット上にデプロイするときは、まずそのリアクト・プロジェクトをシンプルなHTMLのCSファイルとJsファイルに変換し、それからこれらのファイルを普通に提供する。"
  },
  {
    "start": 794298,
    "end": 795982,
    "text": "余計なことをする必要はない。"
  },
  {
    "start": 796116,
    "end": 800270,
    "text": "これらのHTML CSSおよびJavascriptファイルを生のプロジェクトに提供する方法は何でしたか？"
  },
  {
    "start": 800340,
    "end": 802382,
    "text": "生というのは、反応しないプロジェクトのことだ。"
  },
  {
    "start": 802516,
    "end": 804046,
    "text": "ここでも同じように使える。"
  },
  {
    "start": 804148,
    "end": 809730,
    "text": "このリアクトをHTML CSS JavaScriptに変換するプロセスが、プロジェクトの構築と呼ばれるものだ。"
  },
  {
    "start": 809800,
    "end": 812642,
    "text": "これは、私が話したCPU集約型のタスクである。"
  },
  {
    "start": 812776,
    "end": 816878,
    "text": "その3、なぜHTMLのCSSとJavascriptのファイルを提供する必要があったのですか？"
  },
  {
    "start": 816974,
    "end": 818994,
    "text": "なぜ私たちは直接反応することができないのか？"
  },
  {
    "start": 819042,
    "end": 821266,
    "text": "答えは、あなたのブラウザが反応することを理解していないからです。"
  },
  {
    "start": 821298,
    "end": 823810,
    "text": "ブラウザはHTML CSS JavaScriptしか理解できません。"
  },
  {
    "start": 823890,
    "end": 825986,
    "text": "これはよくあるお決まりのパターンだ。"
  },
  {
    "start": 826098,
    "end": 830246,
    "text": "reactのプロジェクトを書く場合、まずHTML CSS JavaScriptに変換する。"
  },
  {
    "start": 830358,
    "end": 832054,
    "text": "これが本番サーバーが提供するものだ。"
  },
  {
    "start": 832102,
    "end": 835238,
    "text": "ブラウザに反応するファイルを提供することはない。"
  },
  {
    "start": 835254,
    "end": 837398,
    "text": "ブラウザはリアクトファイルさえ理解できない。"
  },
  {
    "start": 837494,
    "end": 841494,
    "text": "最後に、面接官がもうひとつ尋ねるかもしれない良い質問がある。"
  },
  {
    "start": 841542,
    "end": 846640,
    "text": "生のHTML CSS JavaScriptプロジェクトでこれを行うのであれば、答えはイエスだ。"
  },
  {
    "start": 847490,
    "end": 852318,
    "text": "生のHTML CSSとJavaScriptのプロジェクトでこれを行うのであれば、デプロイのステップを気にする必要はない。"
  },
  {
    "start": 852404,
    "end": 856914,
    "text": "GitHubのプロジェクトをs threeにアップロードするだけでいい。"
  },
  {
    "start": 856952,
    "end": 860654,
    "text": "あなたはHTML CSS JavaScriptファイルを前もってアップロードしています。"
  },
  {
    "start": 860702,
    "end": 862418,
    "text": "このプロジェクトは反応プロジェクトですらない。"
  },
  {
    "start": 862504,
    "end": 864238,
    "text": "シンプルなJSファイルがあった。"
  },
  {
    "start": 864254,
    "end": 865746,
    "text": "それをコピーすればOKだ。"
  },
  {
    "start": 865768,
    "end": 867278,
    "text": "デプロイメント・ステージは必要ない。"
  },
  {
    "start": 867454,
    "end": 868990,
    "text": "同じ質問をひねることができる。"
  },
  {
    "start": 869070,
    "end": 872006,
    "text": "次のJSプロジェクトで、その答えが「ノー」だった場合、これはどのように機能するのだろうか？"
  },
  {
    "start": 872028,
    "end": 875222,
    "text": "アプローチを少し変えなければならないが、それはこのビデオの範囲外だ。"
  },
  {
    "start": 875276,
    "end": 883366,
    "text": "次のページ Versailleはそうしているが、我々が話しているアーキテクチャはreactプロジェクトかHTML CSSおよびJavaScriptプロジェクトにしか使えない。"
  },
  {
    "start": 883398,
    "end": 888634,
    "text": "サーバー・サイド・レンダリングを持ち込んでもうまくいかないだろうが、それはこのビデオの範囲外だ。"
  },
  {
    "start": 888672,
    "end": 890090,
    "text": "別のビデオでお話しできれば幸いです。"
  },
  {
    "start": 890160,
    "end": 891194,
    "text": "それでいいのか？"
  },
  {
    "start": 891232,
    "end": 892726,
    "text": "では、TGの話に入ろう。"
  },
  {
    "start": 892758,
    "end": 895674,
    "text": "これからスライドを使って、3つの段階をすべて説明する。"
  },
  {
    "start": 895722,
    "end": 896334,
    "text": "一人ずつだ。"
  },
  {
    "start": 896372,
    "end": 899034,
    "text": "少し繰り返しになるので、次のセクションは読み飛ばして構わない。"
  },
  {
    "start": 899082,
    "end": 901360,
    "text": "早送りもご自由にどうぞ。"
  },
  {
    "start": 905510,
    "end": 909654,
    "text": "よし、もう1度、この建築について包括的に議論してみよう。"
  },
  {
    "start": 909772,
    "end": 915602,
    "text": "Versailleのアーキテクチャは、アップロードフェーズ、デプロイメントフェーズ、リクエストフェーズの3つに分かれている。"
  },
  {
    "start": 915746,
    "end": 917730,
    "text": "アップロードの段階から始めよう。"
  },
  {
    "start": 917810,
    "end": 918854,
    "text": "何を話し合ったのか？"
  },
  {
    "start": 918972,
    "end": 926458,
    "text": "アップロードの段階では、ユーザーはGitHubのURLをアップロードサーバーに送ります。"
  },
  {
    "start": 926544,
    "end": 928458,
    "text": "アップロード・サービスは何をする必要があるのか？"
  },
  {
    "start": 928544,
    "end": 932314,
    "text": "まず、GitHubからこのサーバーにプロジェクトをクローンする必要がある。"
  },
  {
    "start": 932442,
    "end": 936846,
    "text": "その2、クローン化したプロジェクトをその3に送る必要がある。"
  },
  {
    "start": 936948,
    "end": 942170,
    "text": "これは、GitHubのコードが保存される最後の永続的な場所です。"
  },
  {
    "start": 942250,
    "end": 944978,
    "text": "この後、アップロードサーバーから削除されます。"
  },
  {
    "start": 945144,
    "end": 947714,
    "text": "それからが最も重要な部分だ。"
  },
  {
    "start": 947832,
    "end": 958598,
    "text": "これが成功した場合、アップロードサーバーがプロジェクト全体をs threeに置くことができたのであれば、デプロイサービスKibroに終了の合図を送る必要がある。"
  },
  {
    "start": 958684,
    "end": 961446,
    "text": "準備ができたらいつでもデプロイメント・プロセスを開始してください。"
  },
  {
    "start": 961548,
    "end": 965800,
    "text": "別のバックエンド・サービスと非同期で会話する必要がある。"
  },
  {
    "start": 966350,
    "end": 975498,
    "text": "ここでは、キューと呼ばれる新しい用語を紹介する。これは、バックエンド・サービスが互いに会話するための効率的な方法である。"
  },
  {
    "start": 975664,
    "end": 978730,
    "text": "この場合、アップロードサーバーは何をする必要があるのか？"
  },
  {
    "start": 978800,
    "end": 980826,
    "text": "別のバックエンド・サービスに伝える必要がある。"
  },
  {
    "start": 980928,
    "end": 982554,
    "text": "キハビ アップロードが終わりました。"
  },
  {
    "start": 982602,
    "end": 984138,
    "text": "配備を開始してください。"
  },
  {
    "start": 984314,
    "end": 988074,
    "text": "アップロードサーバがデプロイサーバを直接叩かないようにします。"
  },
  {
    "start": 988122,
    "end": 990538,
    "text": "デプロイメントサーバーに直接伝えるべきではありません。"
  },
  {
    "start": 990554,
    "end": 991902,
    "text": "ケハバイ 終わったよ。"
  },
  {
    "start": 992036,
    "end": 993498,
    "text": "次のプロジェクトのデプロイを開始する。"
  },
  {
    "start": 993604,
    "end": 996750,
    "text": "アップロードサーバーはこれをキューに入れるはずだ。"
  },
  {
    "start": 996830,
    "end": 999838,
    "text": "これは私が最近アップロードしたファイルのIDです。"
  },
  {
    "start": 1000014,
    "end": 1005966,
    "text": "これをキューにプッシュして、デプロイメント・サーバーがキューからデータを取り出せるようにする。"
  },
  {
    "start": 1006078,
    "end": 1008866,
    "text": "ハルキラス......キューに入れるメリットは何ですか？"
  },
  {
    "start": 1008978,
    "end": 1012482,
    "text": "なぜアップロードサーバーはデプロイサーバーと直接話すことができないのですか？"
  },
  {
    "start": 1012546,
    "end": 1014134,
    "text": "結局、同じことが起こっているんだろう？"
  },
  {
    "start": 1014172,
    "end": 1016130,
    "text": "アップロードサーバーが何かをキューにプッシュしている。"
  },
  {
    "start": 1016210,
    "end": 1019462,
    "text": "デプロイメント・サーバーはそこからデータを取り出し、実際にプロジェクトをデプロイする。"
  },
  {
    "start": 1019596,
    "end": 1023334,
    "text": "なぜプロットサーバーはデプロイサーバーと直接話すことができないのですか？"
  },
  {
    "start": 1023462,
    "end": 1024186,
    "text": "いい質問だね。"
  },
  {
    "start": 1024288,
    "end": 1028826,
    "text": "答えは、ここに置かれているデプロイメント・サーバーは無料ではないかもしれないということだ。"
  },
  {
    "start": 1028928,
    "end": 1030906,
    "text": "別のデプロイメントを実行しているのかもしれない。"
  },
  {
    "start": 1030938,
    "end": 1032986,
    "text": "古いデプロイメントを実行しているのかもしれない。"
  },
  {
    "start": 1033098,
    "end": 1037550,
    "text": "アップロードサーバーは、デプロイサーバーに直接これを実行するように指示すべきではありません。"
  },
  {
    "start": 1037700,
    "end": 1042026,
    "text": "ケバイ、キューに入れているんだ」と非同期に伝えるべきだ。"
  },
  {
    "start": 1042138,
    "end": 1043970,
    "text": "暇があれば、いつでも引っ張ればいい。"
  },
  {
    "start": 1044040,
    "end": 1048510,
    "text": "そうすれば、デプロイメントサーバーが空くたびに、キューからそれを引き出すことができる。"
  },
  {
    "start": 1048590,
    "end": 1054110,
    "text": "アップロードサーバーは、デプロイサーバーに直接、デプロイ開始の合図を送るべきではありません。"
  },
  {
    "start": 1054190,
    "end": 1057842,
    "text": "なるほど、それがキューにプッシュしたい理由だ。"
  },
  {
    "start": 1057986,
    "end": 1059494,
    "text": "今使っているキューは何ですか？"
  },
  {
    "start": 1059532,
    "end": 1064310,
    "text": "SQSと書いてあるが、これはシンプル・キュー・サービスの略だ。"
  },
  {
    "start": 1064460,
    "end": 1068214,
    "text": "これはアマゾンのサービスであり、基本的にこのような使い方をすることができる。"
  },
  {
    "start": 1068252,
    "end": 1072870,
    "text": "キューにプッシュし、他のサービスがキューからプルすることができる。"
  },
  {
    "start": 1072950,
    "end": 1075526,
    "text": "キューにプッシュする方法はこれだけではない。"
  },
  {
    "start": 1075558,
    "end": 1079498,
    "text": "他にも複数のプロトコルがあり、中にはオープンソースのものもある。"
  },
  {
    "start": 1079584,
    "end": 1083898,
    "text": "SQSを使う必要はないが、SQsはヴェルセルが使っているサービスだ。"
  },
  {
    "start": 1083994,
    "end": 1085466,
    "text": "SQSとは何か？"
  },
  {
    "start": 1085658,
    "end": 1092398,
    "text": "これは単純なキューイング・サービスであり、物事をキューに入れたり、別のサービスがキューから物事を引き出したりすることができる。"
  },
  {
    "start": 1092494,
    "end": 1094706,
    "text": "他に使えるオープンソースはありますか？"
  },
  {
    "start": 1094808,
    "end": 1097730,
    "text": "redisキューを使うことができる。"
  },
  {
    "start": 1098070,
    "end": 1100450,
    "text": "rabbitmqというものが使える。"
  },
  {
    "start": 1101510,
    "end": 1107038,
    "text": "他にも複数のオープンソースのキューイングシステムがあるが、Versailleが使用しているのはSQSだ。"
  },
  {
    "start": 1107214,
    "end": 1111794,
    "text": "アップロード・サービスがこれをキューに入れたら、私はそれをデプロイキューに入れた。"
  },
  {
    "start": 1111842,
    "end": 1113862,
    "text": "いずれ、どこかの時点で取り上げられることになるだろう。"
  },
  {
    "start": 1113996,
    "end": 1117240,
    "text": "アップロードサーバーは、そのIDをユーザーにも返すことができる。"
  },
  {
    "start": 1117610,
    "end": 1122746,
    "text": "覚えているかと思いますが、最初にGitHubのレポを最終プロジェクトに入れたとき、アップロードボタンをクリックしました。"
  },
  {
    "start": 1122848,
    "end": 1125290,
    "text": "数秒後、IDが返ってきた。"
  },
  {
    "start": 1125360,
    "end": 1128778,
    "text": "アップロードが完了し、そのIDをデプロイしていると表示された。"
  },
  {
    "start": 1128864,
    "end": 1132282,
    "text": "フロントエンドはバックエンドから得る必要があり、それが最終段階となる。"
  },
  {
    "start": 1132346,
    "end": 1135738,
    "text": "アップロードサーバーは、それが完了したら、まず第一に、GitHubからものを引っ張ってくる。"
  },
  {
    "start": 1135834,
    "end": 1137726,
    "text": "その2、物事をS3に押し進めること。"
  },
  {
    "start": 1137828,
    "end": 1139850,
    "text": "その3、物事をキューに入れること。"
  },
  {
    "start": 1139930,
    "end": 1141066,
    "text": "エンドユーザーに伝えるべきだ。"
  },
  {
    "start": 1141098,
    "end": 1142094,
    "text": "キハビ、いいぞ。"
  },
  {
    "start": 1142132,
    "end": 1142878,
    "text": "これがあなたのIDです。"
  },
  {
    "start": 1142964,
    "end": 1145502,
    "text": "配備が成功したかどうかを追跡するために使用します。"
  },
  {
    "start": 1145566,
    "end": 1146990,
    "text": "アップロードは成功した。"
  },
  {
    "start": 1147070,
    "end": 1148900,
    "text": "これがあなたのIDです。"
  },
  {
    "start": 1149590,
    "end": 1151678,
    "text": "アップロードの段階は以上だ。"
  },
  {
    "start": 1151774,
    "end": 1154642,
    "text": "私がここで紹介したのは、キューイングだけだ。"
  },
  {
    "start": 1154696,
    "end": 1165398,
    "text": "Kehaはそれが終わると、次のサービスであるデプロイメント・サービスがキューからデータを取り出し、実際にプロジェクトをデプロイできるように、最終的なidをキューに入れる。"
  },
  {
    "start": 1165564,
    "end": 1167166,
    "text": "アップロードの段階は終わった。"
  },
  {
    "start": 1167298,
    "end": 1169642,
    "text": "使用したAWSのテクノロジーは？"
  },
  {
    "start": 1169696,
    "end": 1171974,
    "text": "ファイルのアップロードには3つを使用した。"
  },
  {
    "start": 1172022,
    "end": 1174940,
    "text": "キューイングシステムにはSQSを使用した。"
  },
  {
    "start": 1175310,
    "end": 1178262,
    "text": "次は、デプロイメントの段階を見てみよう。"
  },
  {
    "start": 1178406,
    "end": 1182122,
    "text": "配備段階はSNSのキューから始まる。"
  },
  {
    "start": 1182266,
    "end": 1184958,
    "text": "最後のステップから埋められているキュー。"
  },
  {
    "start": 1185124,
    "end": 1188986,
    "text": "アップロードの段階では、ファイルをアップロードし、このキューにプッシュする。"
  },
  {
    "start": 1189098,
    "end": 1191418,
    "text": "誰がキューからこれらを取り出しているのか？"
  },
  {
    "start": 1191514,
    "end": 1193530,
    "text": "デプロイメント・サーバーだ。"
  },
  {
    "start": 1193610,
    "end": 1196230,
    "text": "ビルドサーバーはkbhaiの仕事である。"
  },
  {
    "start": 1196250,
    "end": 1199010,
    "text": "第一に、これらのキューから物事を引き出す。"
  },
  {
    "start": 1199510,
    "end": 1202962,
    "text": "その2、それらを処理し、構築し始める。"
  },
  {
    "start": 1203016,
    "end": 1208610,
    "text": "reactプロジェクトのHTML、CSS、Javascriptファイルへの変換を開始します。"
  },
  {
    "start": 1208770,
    "end": 1217250,
    "text": "それが終わったら、ワーカーがプロジェクトをビルドし、最終的にHTML、CSS、JavaScriptファイルをビルドしたとしよう。"
  },
  {
    "start": 1217330,
    "end": 1219270,
    "text": "それは彼らをS3に押し上げる。"
  },
  {
    "start": 1219420,
    "end": 1220462,
    "text": "その必要はない。"
  },
  {
    "start": 1220546,
    "end": 1222134,
    "text": "これらはすべて同じペースで走る。"
  },
  {
    "start": 1222182,
    "end": 1223802,
    "text": "これは非常に大きなプロジェクトになるかもしれない。"
  },
  {
    "start": 1223856,
    "end": 1225386,
    "text": "これはとても小さなプロジェクトかもしれない。"
  },
  {
    "start": 1225568,
    "end": 1227994,
    "text": "各作業員はそれぞれ独立して仕事をしている。"
  },
  {
    "start": 1228112,
    "end": 1231722,
    "text": "ワーカーを1人、3人、5人とオートスケールすることができる。"
  },
  {
    "start": 1231786,
    "end": 1234560,
    "text": "キューの長さにもよるが。"
  },
  {
    "start": 1234930,
    "end": 1239978,
    "text": "時間が経つにつれて、ワーカーがこれらのビルドをピックアップするにつれて、このキューは小さくなっていく。"
  },
  {
    "start": 1240074,
    "end": 1245866,
    "text": "また、どれだけの人がプロジェクトをアップロードしているか、最終的にキューがどのように埋まっているかによって、もっと長くなるかもしれない。"
  },
  {
    "start": 1245908,
    "end": 1251710,
    "text": "目標は、このキューがあまり長くならないようにすることと、トラフィックが多いと感じたらサーバーを自動でスケールアップすることだ。"
  },
  {
    "start": 1251790,
    "end": 1258934,
    "text": "そうでない場合は、サーバーを自動スケールダウンして、最終的にすべてのビルドを処理するワーカーを1人稼働させるようにすればいい。"
  },
  {
    "start": 1258972,
    "end": 1261414,
    "text": "時間が経つにつれて、これらの労働者は何をする必要があるのだろうか？"
  },
  {
    "start": 1261532,
    "end": 1263714,
    "text": "ファイルを処理し、次のファイルに移る。"
  },
  {
    "start": 1263762,
    "end": 1266582,
    "text": "例えば、作業員1が最初に7番のファイルを手に取った。"
  },
  {
    "start": 1266716,
    "end": 1269830,
    "text": "デプロイを終えて、3つのサイトに公開した。"
  },
  {
    "start": 1269900,
    "end": 1272058,
    "text": "そして、4番目のプロジェクトを取り上げた。"
  },
  {
    "start": 1272144,
    "end": 1273930,
    "text": "こうしてキューはどんどん弾き飛ばされていく。"
  },
  {
    "start": 1274000,
    "end": 1276474,
    "text": "ディプロイメント・サービスがやるべきことはそれだけだ。"
  },
  {
    "start": 1276592,
    "end": 1289818,
    "text": "このステップが終わるころには、プロジェクトの2つのコピー、つまり、あなたが書いたオリジナルのreactコードベースと、最後のステップでデプロイサーバーが作成した最終的なデプロイ可能なHTML CSS JavaScriptファイルがあることになる。"
  },
  {
    "start": 1289914,
    "end": 1296526,
    "text": "オリジナルのソースコードと、エンドユーザーに提供する最終的なアセットという、プロジェクトの2つのコピーを効果的に持つことができる。"
  },
  {
    "start": 1296638,
    "end": 1298222,
    "text": "展開段階は以上だ。"
  },
  {
    "start": 1298286,
    "end": 1319494,
    "text": "ここで使用したAWSコンストラクトを見ると、最終的なアセットのアップロードにはs threeを使用し、プルにはsqsを使用し、最終的なビルドパイプラインを実行するために基本的にAWSサーバーであるEC 2インスタンスと、このような方法でオートスケールを可能にするAWS Fargateと呼ばれるものを使用することができます。"
  },
  {
    "start": 1319532,
    "end": 1334058,
    "text": "キューがあって、キューの長さに応じてサーバーの自動スケールアップや自動スケールダウンが必要なユースケースを想定した場合、最適なスタックはこれだ。"
  },
  {
    "start": 1334154,
    "end": 1336058,
    "text": "もっとファンシーな円形のスタックはありますか？"
  },
  {
    "start": 1336154,
    "end": 1338190,
    "text": "はい、kubernetesを使うことができます。"
  },
  {
    "start": 1338260,
    "end": 1343902,
    "text": "AWSのオートスケーリング・グループと呼ばれるものを使えば、同じことができる。"
  },
  {
    "start": 1343966,
    "end": 1350702,
    "text": "このようなユースケース、つまりキューと自動スケーリング・サービスがある場合、通常はECの2つのインスタンスでFargateを使う。"
  },
  {
    "start": 1350766,
    "end": 1352622,
    "text": "よし、これが第2ステージだ。"
  },
  {
    "start": 1352766,
    "end": 1355326,
    "text": "最後の段階はリクエストの段階である。"
  },
  {
    "start": 1355518,
    "end": 1356866,
    "text": "これは冷や汗ものだ。"
  },
  {
    "start": 1356968,
    "end": 1358994,
    "text": "あなたはすでに力仕事をすべて終えている。"
  },
  {
    "start": 1359042,
    "end": 1363394,
    "text": "あなたはプロジェクトをコピーし、プロジェクトを構築し、最終フェーズに保存した。"
  },
  {
    "start": 1363442,
    "end": 1371654,
    "text": "Varcelがすることは、人々があなたのウェブサイトを訪問しようとするとき、ブラウザで訪問する場合、HTML、CSS、JavaScriptを要求する傾向がある。"
  },
  {
    "start": 1371782,
    "end": 1379302,
    "text": "Versaillesはインターネット上にサーバー群を持ち、リクエストを最も近いサーバーにルーティングする。"
  },
  {
    "start": 1379366,
    "end": 1383902,
    "text": "例えば、あなたが当社からid varcel.comを要求した場合、あなたの要求はここに送られます。"
  },
  {
    "start": 1383956,
    "end": 1387434,
    "text": "インドから要請があれば、こちらへ、といった具合だ。"
  },
  {
    "start": 1387562,
    "end": 1393760,
    "text": "リクエストがここに到達した後、このユーザーがこの特定のウェブサイトにアクセスしようとしているIDを抽出する必要がある。"
  },
  {
    "start": 1394130,
    "end": 1398846,
    "text": "idを取得したら、HTML、CSS、JavaScriptのビットを取得する必要がある。"
  },
  {
    "start": 1398878,
    "end": 1404430,
    "text": "リアクト・プロジェクトを取得するのではなく、最終ビルドを取得し、それをユーザーに返す必要がある。"
  },
  {
    "start": 1404510,
    "end": 1406566,
    "text": "それが、我々がサポートしなければならない最後の段階だ。"
  },
  {
    "start": 1406668,
    "end": 1420758,
    "text": "具体的には、このコードを書くときには、ブラックボックス、つまりxYz.comというIDでリクエストを受け、IDを抽出し、リクエストをs threeに転送し、レスポンスを返してユーザーに返すサーバーのコードを書く必要がある。"
  },
  {
    "start": 1420854,
    "end": 1427846,
    "text": "理想的には、複数のユーザーが同じものを要求した場合、サーバー上にキャッシュするようなレイヤーも必要だ。"
  },
  {
    "start": 1427878,
    "end": 1430650,
    "text": "すべてのリクエストをS3に転送するわけではない。"
  },
  {
    "start": 1430720,
    "end": 1434510,
    "text": "よし、これでリクエスト・フェーズのアーキテクチャーは完了だ。"
  },
  {
    "start": 1434660,
    "end": 1452382,
    "text": "AmazonクラウドアクセラレータとAmazonグローバルネットワークを使えば、基本的にどのようなキャストIPSでも作成することができ、ユーザーが1つのURLにアクセスすると、そのリクエストは最も近いAWSサーバーにルーティングされる。"
  },
  {
    "start": 1452526,
    "end": 1460082,
    "text": "今日はこのようなことはしませんが、もし本当にグローバルなステージでこのようなものを作り、最も近いサーバーの利点をエンドユーザーに与えたいのであれば、このようなことをする必要があります。"
  },
  {
    "start": 1460146,
    "end": 1464930,
    "text": "AWSグローバルアクセラレーターやAWSグローバルネットワークのようなものを使うのが理想的だ。"
  },
  {
    "start": 1465090,
    "end": 1470150,
    "text": "最後に、ヴェルセルが今日欲しいもう一つのものは、アマゾンのeksである。"
  },
  {
    "start": 1470310,
    "end": 1475014,
    "text": "これにより、基本的にVersailles用のKubernetesクラスタをAWS内に作成することができる。"
  },
  {
    "start": 1475062,
    "end": 1482486,
    "text": "具体的には、このリクエスト・ハンドラ・コードはすべてKubernetesクラスタ内に配置されるため、生でデプロイする場合はeksが必要になる。"
  },
  {
    "start": 1482518,
    "end": 1484654,
    "text": "kubernetesを使いたくなければ、それでも構わない。"
  },
  {
    "start": 1484692,
    "end": 1486814,
    "text": "サーバーの立ち上げ方は自由だ。"
  },
  {
    "start": 1486852,
    "end": 1491994,
    "text": "これはシンプルなエクスプレス・サーバーで、リクエストをs3に転送し、レスポンスを返すだけでよい。"
  },
  {
    "start": 1492122,
    "end": 1492510,
    "text": "クールだ。"
  },
  {
    "start": 1492580,
    "end": 1494738,
    "text": "次にコーディングするのは、この3つのサービスだ。"
  },
  {
    "start": 1494824,
    "end": 1503346,
    "text": "アップロードフェーズ、デプロイメントフェーズ、リクエストフェーズ、そしてフロントエンドのためのシンプルなリアクトプロジェクト。"
  },
  {
    "start": 1503528,
    "end": 1505220,
    "text": "コーディングの話に入ろう。"
  },
  {
    "start": 1507930,
    "end": 1509718,
    "text": "よし、コーディングに入ろう。"
  },
  {
    "start": 1509804,
    "end": 1514310,
    "text": "コーディングの部分に構造を加えたいと思うので、もしよければ一緒にフォローしてほしい。"
  },
  {
    "start": 1514380,
    "end": 1520566,
    "text": "私はすべてをゼロからコーディングするつもりだが、すべてのポイントを消化しやすい小さな塊に書き出してみた。"
  },
  {
    "start": 1520678,
    "end": 1522698,
    "text": "コードを書きたいなら、そうすればいい。"
  },
  {
    "start": 1522784,
    "end": 1525722,
    "text": "ヒントが欲しければ、各ポイントにヒントがある。"
  },
  {
    "start": 1525776,
    "end": 1532522,
    "text": "例えば、あなたのマシンにまだnode JSがない場合、これを切り替えて、どうすればできるかのヒントを見ることができる。"
  },
  {
    "start": 1532656,
    "end": 1539230,
    "text": "一般的には、ポイントを見て、ガラスを噛んでみて、理解できなければ自分でコーディングしてみることをお勧めする。"
  },
  {
    "start": 1539300,
    "end": 1543022,
    "text": "解決策は至るところにあるし、傍らで私がコーディングしていることもある。"
  },
  {
    "start": 1543076,
    "end": 1545106,
    "text": "一般的に、学ぶための最良の方法は自分でコードを書くことだ。"
  },
  {
    "start": 1545208,
    "end": 1546338,
    "text": "これはどこで手に入りますか？"
  },
  {
    "start": 1546424,
    "end": 1553886,
    "text": "projects 100 xteps.comにアクセスして、そこにあるVersaille trackに沿ったコードで、これらのステップをすべて見つけることができる。"
  },
  {
    "start": 1553918,
    "end": 1558374,
    "text": "今日取り上げるすべてのトラックについて、これは我々が構築している最初のサービス、アップロード・サービスだ。"
  },
  {
    "start": 1558492,
    "end": 1559926,
    "text": "これには4つのパートがある。"
  },
  {
    "start": 1559948,
    "end": 1564450,
    "text": "アップロード・サービス、デプロイ・サービス、リクエスト・ハンドラ・サービス、そしてreactのフロント・エンドだ。"
  },
  {
    "start": 1564530,
    "end": 1568706,
    "text": "私たちはこれらすべてをゼロから書いていくので、以下のステップを参考にしてほしい。"
  },
  {
    "start": 1568738,
    "end": 1572122,
    "text": "僕と一緒にコードを書きたいなら、すぐに取り掛かろう。"
  },
  {
    "start": 1572176,
    "end": 1576790,
    "text": "node jsをインストールするという最初のポイントに移ろう。"
  },
  {
    "start": 1576870,
    "end": 1579226,
    "text": "まだノードJSを持っていないなら、今がチャンスだ。"
  },
  {
    "start": 1579248,
    "end": 1582166,
    "text": "もし私と一緒にコードを書きたいなら、ここにいくつか説明がある。"
  },
  {
    "start": 1582208,
    "end": 1585230,
    "text": "私のマシンにはすでにあるので、このステップは省略する。"
  },
  {
    "start": 1585380,
    "end": 1588782,
    "text": "第2のステップは、空のタイプスクリプト・プロジェクトを初期化することだ。"
  },
  {
    "start": 1588916,
    "end": 1596494,
    "text": "typescriptを使いたくない、JavaScriptを使いたいという人には、このチュートリアルに沿って進むのが難しくなるので、そうしないことを強く勧める。"
  },
  {
    "start": 1596542,
    "end": 1598114,
    "text": "これにはタイプスクリプトは必要ない。"
  },
  {
    "start": 1598152,
    "end": 1601298,
    "text": "JavaScriptだけで作業することもできるが、一般的に学ぶべき良いことだ。"
  },
  {
    "start": 1601384,
    "end": 1609894,
    "text": "今回は、タイプスクリプトの奥深さにはあまり立ち入らないので、ここに書かれている手順に従って、基本的なタイプスクリプトの設定を作成すれば問題ない。"
  },
  {
    "start": 1609932,
    "end": 1612182,
    "text": "タイプスクリプトのコードをたくさん書く必要はない。"
  },
  {
    "start": 1612236,
    "end": 1614120,
    "text": "基本的なJavascriptのコードで問題ないはずだ。"
  },
  {
    "start": 1619050,
    "end": 1620922,
    "text": "大丈夫か？"
  },
  {
    "start": 1620976,
    "end": 1622698,
    "text": "ステップ2は終わった。"
  },
  {
    "start": 1622784,
    "end": 1628678,
    "text": "空のパッケージJSonファイルと空のtsconfig JSOnファイルを作成することができました。"
  },
  {
    "start": 1628774,
    "end": 1634640,
    "text": "以上が、空のタイプスクリプト・プロジェクトを初期化するために必要な手順である。"
  },
  {
    "start": 1635490,
    "end": 1639034,
    "text": "第3段階は、基本的なタイプスクリプトの設定である。"
  },
  {
    "start": 1639162,
    "end": 1641214,
    "text": "これは本当に、どうしたいかによる。"
  },
  {
    "start": 1641252,
    "end": 1658246,
    "text": "一般的には、ルート・ディレクトリをsourceにして、すべてのソース・コードがsrcと呼ばれるトップ・レベルのルート・ディレクトリに存在するようにし、outdirは基本的にすべてのJavaScriptコードが出てくる場所にする。"
  },
  {
    "start": 1658348,
    "end": 1660642,
    "text": "タイプスクリプトのコードはすべて、最終的にジャバスクリプトに変換される。"
  },
  {
    "start": 1660706,
    "end": 1661702,
    "text": "これはどこに出るのですか？"
  },
  {
    "start": 1661756,
    "end": 1665894,
    "text": "これを変更しない限り、このルート・フォルダーに保存される。"
  },
  {
    "start": 1666012,
    "end": 1671114,
    "text": "これをdistまたはbuildに変更するのが一般的なやり方だ。"
  },
  {
    "start": 1671232,
    "end": 1672314,
    "text": "自由に選んでください。"
  },
  {
    "start": 1672352,
    "end": 1674122,
    "text": "このステップも完全に省略できる。"
  },
  {
    "start": 1674176,
    "end": 1676794,
    "text": "これは、タイプスクリプト・アプリケーションを構成するためのより良い方法である。"
  },
  {
    "start": 1676992,
    "end": 1678346,
    "text": "勝点2で終了。"
  },
  {
    "start": 1678448,
    "end": 1679642,
    "text": "いや、勝ち点3で終わりだ。"
  },
  {
    "start": 1679696,
    "end": 1681354,
    "text": "4点目に移ろう。"
  },
  {
    "start": 1681472,
    "end": 1683838,
    "text": "プロジェクトにいくつかの依存関係を追加する。"
  },
  {
    "start": 1684004,
    "end": 1687518,
    "text": "どのライブラリーを使うか決めるためにテコ入れをした。"
  },
  {
    "start": 1687604,
    "end": 1689786,
    "text": "HTTPサーバーを作る方法はたくさんある。"
  },
  {
    "start": 1689818,
    "end": 1691066,
    "text": "エクスプレスを使う必要はない。"
  },
  {
    "start": 1691178,
    "end": 1693050,
    "text": "キューにはいろいろなやり方がある。"
  },
  {
    "start": 1693210,
    "end": 1699726,
    "text": "AWSへの依存を最小限にするためにredisを使いたいが、verselが実際に使っているサービスであるsqsを使うこともできる。"
  },
  {
    "start": 1699758,
    "end": 1701906,
    "text": "ウサギのMQを使えるかどうかは、本当にあなた次第です。"
  },
  {
    "start": 1702008,
    "end": 1707894,
    "text": "AWS SDKは、AWSとやり取りする必要があるため、実際にS3にデータを入れる必要がある。"
  },
  {
    "start": 1707932,
    "end": 1709654,
    "text": "これは、AWSアカウントが必要であることも意味する。"
  },
  {
    "start": 1709692,
    "end": 1711574,
    "text": "どうすればすぐに手に入れられるかを紹介しよう。"
  },
  {
    "start": 1711772,
    "end": 1717266,
    "text": "Simple git これは NPM リポジトリで、基本的に git コマンドを実行できます。"
  },
  {
    "start": 1717298,
    "end": 1718934,
    "text": "シンプルなgitなしで実行することもできる。"
  },
  {
    "start": 1718972,
    "end": 1723386,
    "text": "node jsでコマンドを実行するのはとても簡単だが、この種のコマンドは、それを実行するためのとても優れた関数を与えてくれる。"
  },
  {
    "start": 1723408,
    "end": 1724890,
    "text": "これは我々が使っている外部ライブラリだ。"
  },
  {
    "start": 1724960,
    "end": 1733998,
    "text": "最後に、フロントエンドとバックエンドが別々のポートでホストされていたり、別々のバックエンド、別々のURLでホストされている場合、フロントエンドとバックエンドを知っている人はコースを使うべきだ。"
  },
  {
    "start": 1734164,
    "end": 1737674,
    "text": "これは、あなたのバックエンドにコースを紹介するライブラリです。"
  },
  {
    "start": 1737722,
    "end": 1742714,
    "text": "このビデオの範囲外ですが、この特定のビデオに必要なライブラリです。"
  },
  {
    "start": 1742852,
    "end": 1744814,
    "text": "これらの依存関係をすべてインストールするには？"
  },
  {
    "start": 1744862,
    "end": 1753954,
    "text": "すでにnode jsを使ったことがあるのなら、このコマンドでNPMをインストールし、必要な依存関係をすべてインストールする。"
  },
  {
    "start": 1754072,
    "end": 1767210,
    "text": "ご覧のように、typescriptを使用しているため、余分な依存関係を追加しました。Expressのようなタイプのライブラリをローカルに持ってきたい場合は、このat type library name NPMモジュールもローカルに持ってくる必要があります。"
  },
  {
    "start": 1767280,
    "end": 1773690,
    "text": "よし、このコマンドを実行して、最初の4ステップを終了しよう。"
  },
  {
    "start": 1774590,
    "end": 1777100,
    "text": "よし、ここでちょっと間を置こう。"
  },
  {
    "start": 1777470,
    "end": 1790814,
    "text": "これはMernstackのビデオではないので、基本的にこれからいくつかのことをやっていきます。Mernstackをやったことがない人、エクスプレスがわからない人、HTPサーバーが何なのかわからない人は、頭の上を通り過ぎるかもしれませんが、遠慮なくビデオに張り付いてください。"
  },
  {
    "start": 1790852,
    "end": 1793566,
    "text": "理解できなかったら、遠慮なく飛び降りてくれ。"
  },
  {
    "start": 1793668,
    "end": 1795454,
    "text": "私がやっていることをすべて説明するつもりはない。"
  },
  {
    "start": 1795492,
    "end": 1803282,
    "text": "もちろん、何が起きているのかを高いレベルで説明するつもりだが、もしあなたがエクスプレスをやったことがなかったり、この時点でHTTPサーバーが何なのかを知らなかったりすると、事態は圧倒的に理解できなくなるだろう。"
  },
  {
    "start": 1803346,
    "end": 1813206,
    "text": "必要であれば自由にフォローしてほしいが、それよりも基本的なマージスタックのチュートリアルに行き、HTPサーバーとは何かを理解してから、何が起こっているのかを実際に理解できるように、ここに戻ってきてほしい。"
  },
  {
    "start": 1813308,
    "end": 1813814,
    "text": "そうだね。"
  },
  {
    "start": 1813932,
    "end": 1815382,
    "text": "それでは次のポイントに移ろう。"
  },
  {
    "start": 1815436,
    "end": 1817670,
    "text": "イニシャライズと表示され、ああ、申し訳ない。"
  },
  {
    "start": 1817740,
    "end": 1826438,
    "text": "次のポイントは、expressをやったことがあるなら、index TSでシンプルなExprsアプリを初期化してポート3000でリッスンすることだ。"
  },
  {
    "start": 1826534,
    "end": 1830720,
    "text": "フロントエンドとバックエンドは異なるので、コアも追加する必要がある。"
  },
  {
    "start": 1836450,
    "end": 1839118,
    "text": "よし、ここから予想されたことは以上だ。"
  },
  {
    "start": 1839204,
    "end": 1840158,
    "text": "我々は何をしたのか？"
  },
  {
    "start": 1840244,
    "end": 1844762,
    "text": "Exprsモジュールから空のアプリを初期化した。"
  },
  {
    "start": 1844826,
    "end": 1846174,
    "text": "Exprsモジュールとは何ですか？"
  },
  {
    "start": 1846302,
    "end": 1849550,
    "text": "HTTPサーバーを作成できるNPMモジュールです。"
  },
  {
    "start": 1849630,
    "end": 1850562,
    "text": "これだけですか？"
  },
  {
    "start": 1850616,
    "end": 1850834,
    "text": "いや。"
  },
  {
    "start": 1850872,
    "end": 1854622,
    "text": "node JSでHTTPサーバーを作成する方法はたくさんあります。"
  },
  {
    "start": 1854766,
    "end": 1856366,
    "text": "ノードJSだけでできますか？"
  },
  {
    "start": 1856398,
    "end": 1857826,
    "text": "いや、Javaでもできる。"
  },
  {
    "start": 1857858,
    "end": 1859986,
    "text": "これはどのバックエンド言語でもできる。"
  },
  {
    "start": 1860018,
    "end": 1865574,
    "text": "Colangの錆は、すべてのライブラリがこれを行うための独自の一般的なフレームワークのセットを持っています。"
  },
  {
    "start": 1865692,
    "end": 1870394,
    "text": "Node JSで最もポピュラーなのはExpressで、今日我々が使っているのはこれだ。"
  },
  {
    "start": 1870512,
    "end": 1877158,
    "text": "これは基本的な定型コードで、ローカルでHTTPサーバーを起動し、バックエンドサーバーにアクセスできるようにするものです。"
  },
  {
    "start": 1877254,
    "end": 1879402,
    "text": "これがローカルで実行されているかどうかは、どうやってわかるのですか？"
  },
  {
    "start": 1879536,
    "end": 1885918,
    "text": "第一に、TSC BまたはNPXt Bを実行してプロジェクトを構築する。"
  },
  {
    "start": 1886084,
    "end": 1894326,
    "text": "これであなたのプロジェクトが構築され、このindex tsファイルが、このdisk index jsの基本的なJavascriptコードに変換されます。"
  },
  {
    "start": 1894458,
    "end": 1901342,
    "text": "初期設定時にoutdirをdiskに変更した場合のみ、このdiskフォルダに入ります。"
  },
  {
    "start": 1901406,
    "end": 1911010,
    "text": "これをbuildに変更すれば、何も変更しなかった場合はbuildフォルダに、元の設定でコメントしたままであればルートフォルダにindex jsがあることになる。"
  },
  {
    "start": 1911170,
    "end": 1914914,
    "text": "このindex jsファイルを手に入れたら、あとはnodeを使って実行するだけだ。"
  },
  {
    "start": 1914962,
    "end": 1919506,
    "text": "実行するコマンドはnode distsである。"
  },
  {
    "start": 1919698,
    "end": 1924918,
    "text": "これを実行し、ターミナルがハングアップしていることが確認できれば、基本的にサーバーは正しく動作していることになる。"
  },
  {
    "start": 1925014,
    "end": 1927274,
    "text": "走っているかどうかを100％確認する方法は？"
  },
  {
    "start": 1927392,
    "end": 1936782,
    "text": "localhost 3000にアクセスし、以下のようなページが表示されていることを確認する。"
  },
  {
    "start": 1936916,
    "end": 1941262,
    "text": "もしこれが表示されなくても、このようなものが表示されれば、それは問題があるということだ。"
  },
  {
    "start": 1941396,
    "end": 1947060,
    "text": "このように表示されれば、HTTPサーバーは問題なく動作していることになり、次のステップに進むことができる。"
  },
  {
    "start": 1947510,
    "end": 1954046,
    "text": "次のステップでは、ユーザーがヒットするエンドポイントを初期化し、入力としてレポのURLを送信します。"
  },
  {
    "start": 1954158,
    "end": 1955186,
    "text": "これは何を意味するのか？"
  },
  {
    "start": 1955288,
    "end": 1962262,
    "text": "つまり、最終的なアプリケーションでは、ユーザーが入力ボックスに行ってGitHubのURLを入力し、ボタンをクリックすることになります。"
  },
  {
    "start": 1962396,
    "end": 1963782,
    "text": "リクエストは外に出る。"
  },
  {
    "start": 1963836,
    "end": 1966810,
    "text": "そのリクエストを処理するエンドポイントを作成する必要がある。"
  },
  {
    "start": 1972910,
    "end": 1975018,
    "text": "よし、コードを書いたぞ。"
  },
  {
    "start": 1975184,
    "end": 1981638,
    "text": "これは、ユーザーがバックエンドのエンドポイントをヒットできるように、1つのエンドポイントを初期化するものだ。"
  },
  {
    "start": 1981734,
    "end": 1983790,
    "text": "この特定のエンドポイントはいつヒットするのか？"
  },
  {
    "start": 1983860,
    "end": 1988080,
    "text": "これは、ユーザーがレポのURLを入力し、送信ボタンをクリックしたときにヒットします。"
  },
  {
    "start": 1988450,
    "end": 1991090,
    "text": "そうなれば、コントロールはここに到達する。"
  },
  {
    "start": 1991160,
    "end": 1996078,
    "text": "ユーザーがリクエスト本文にレポのURLを送ることを期待しています。"
  },
  {
    "start": 1996174,
    "end": 1998606,
    "text": "これが実際のGitHubのURLだ。"
  },
  {
    "start": 1998638,
    "end": 2002830,
    "text": "例えば、GitHub.com hke react boilerplate。"
  },
  {
    "start": 2002990,
    "end": 2008322,
    "text": "このレポのURL変数にこの値を入れたら、あとはそれを画面に記録するだけだ。"
  },
  {
    "start": 2008376,
    "end": 2010662,
    "text": "最終的にはもちろん、ここでいろいろなことをやらなければならない。"
  },
  {
    "start": 2010716,
    "end": 2012850,
    "text": "レポをクローンし、S3に置く。"
  },
  {
    "start": 2012930,
    "end": 2016226,
    "text": "ここまでくれば、エクスプレスを知っていれば簡単なことだ。"
  },
  {
    "start": 2016258,
    "end": 2023674,
    "text": "もしあなたがexprsを知らないのであれば、これはHTTPサーバーを起動し、フロントエンドがアクセスできるエンドポイントを公開する。"
  },
  {
    "start": 2023792,
    "end": 2030698,
    "text": "ここでは、レポをクローンし、それを実際にs threeに置く、といったロジックの本分を書かなければならない。"
  },
  {
    "start": 2030874,
    "end": 2032190,
    "text": "ここで1つ手短に呼びかけよう。"
  },
  {
    "start": 2032260,
    "end": 2039386,
    "text": "postリクエストからボディを抽出したい場合は、Exprs JSONのようなミドルウェアを使う必要がある。"
  },
  {
    "start": 2039578,
    "end": 2043834,
    "text": "このリクエストを行わなければ、ボディは常に未定義となる。"
  },
  {
    "start": 2043962,
    "end": 2044686,
    "text": "なぜそうなるのか？"
  },
  {
    "start": 2044708,
    "end": 2050466,
    "text": "彼女のキラスを端的に言えば、エクスプルスはこの体が何なのか知らないし、気にもしていない。"
  },
  {
    "start": 2050488,
    "end": 2053410,
    "text": "これは文字列かもしれないし、JSONかもしれないし、バイナリデータかもしれない。"
  },
  {
    "start": 2053560,
    "end": 2058622,
    "text": "そのためexpressは、入力データに基づいてそれぞれのミドルウェアを使用することを期待する。"
  },
  {
    "start": 2058696,
    "end": 2063730,
    "text": "今回のケースでは、入力データはJSONなので、Exprs JSONミドルウェアを使っている。"
  },
  {
    "start": 2063810,
    "end": 2066610,
    "text": "他のものだったら、別のミドルウェアを使わなければならない。"
  },
  {
    "start": 2066770,
    "end": 2069594,
    "text": "これは、あなたのアプリケーションのための素晴らしい出発点です。"
  },
  {
    "start": 2069712,
    "end": 2071578,
    "text": "あなたはアプリケーションをブートストラップした。"
  },
  {
    "start": 2071664,
    "end": 2074442,
    "text": "あなたは基本的な定型コードを作成した。"
  },
  {
    "start": 2074576,
    "end": 2082010,
    "text": "あとは、ロジックの核となる部分、つまりs threeの中に実際にものを入れるロジック、実際にリポジトリをクローンするロジックを書かなければならない。"
  },
  {
    "start": 2082090,
    "end": 2085822,
    "text": "次のポイントは、ランダムにIDを生成する関数を作れ、というものだ。"
  },
  {
    "start": 2085876,
    "end": 2086730,
    "text": "このセッションのために"
  },
  {
    "start": 2086810,
    "end": 2088426,
    "text": "それをジェネレートと呼ぶ。"
  },
  {
    "start": 2088618,
    "end": 2093694,
    "text": "これには基本的に、ランダムにIDを生成する関数を作成する必要がある。"
  },
  {
    "start": 2093812,
    "end": 2097534,
    "text": "versaill.comにアクセスし、新しいデプロイメントを作成します。"
  },
  {
    "start": 2097662,
    "end": 2100500,
    "text": "すべての配備はここにログインしていない。"
  },
  {
    "start": 2100870,
    "end": 2106322,
    "text": "versaille.comに行って、私が配備したアプリケーションのどれかを見てみよう。"
  },
  {
    "start": 2106466,
    "end": 2110134,
    "text": "すべてのアプリケーションデプロイメントには、それに関連する一意の ID があります。"
  },
  {
    "start": 2110172,
    "end": 2117314,
    "text": "例えば、このIはとても長いIで、見てもらえればわかると思うが、iazが9、Vが5、といった具合だ。"
  },
  {
    "start": 2117362,
    "end": 2120470,
    "text": "あなたの配備にはすべてユニークなIDが与えられている。"
  },
  {
    "start": 2120630,
    "end": 2126506,
    "text": "ここでやろうとすることは同じで、まずランダムなIDを作る関数を生成しなければならない。"
  },
  {
    "start": 2126608,
    "end": 2134880,
    "text": "必要であれば、このファイルの中に作成することもできるが、アプリケーションの構造をより良くするために、別のファイルに作成することをお勧めする。"
  },
  {
    "start": 2135650,
    "end": 2139262,
    "text": "utilsTSというファイルを作るつもりだが、これは最悪のIDだ。"
  },
  {
    "start": 2139316,
    "end": 2141006,
    "text": "決してファイル名をutils."
  },
  {
    "start": 2141038,
    "end": 2142930,
    "text": "これは小さなプロジェクトだから、大丈夫だよ。"
  },
  {
    "start": 2143080,
    "end": 2145106,
    "text": "ここでは、その定義について説明しよう。"
  },
  {
    "start": 2145208,
    "end": 2147620,
    "text": "ランダムにIDを生成する関数。"
  },
  {
    "start": 2157450,
    "end": 2160194,
    "text": "さて、generateという関数を書いてみた。"
  },
  {
    "start": 2160242,
    "end": 2161750,
    "text": "エクスポートもさせてください。"
  },
  {
    "start": 2161900,
    "end": 2166822,
    "text": "この関数は、長さ5のランダムな文字列を生成する。"
  },
  {
    "start": 2166956,
    "end": 2168266,
    "text": "どうすれば効果があるかどうかわかるのですか？"
  },
  {
    "start": 2168368,
    "end": 2170346,
    "text": "このコード全体をコピーした。"
  },
  {
    "start": 2170448,
    "end": 2175900,
    "text": "ターミナルを開き、ここでnodeを実行し、このコード全体を貼り付けた。"
  },
  {
    "start": 2176430,
    "end": 2178566,
    "text": "輸出ではすべてがうまくいかない。"
  },
  {
    "start": 2178598,
    "end": 2180880,
    "text": "エクスポートを削除してから貼り付けます。"
  },
  {
    "start": 2182290,
    "end": 2192778,
    "text": "ここでgenerateを呼び出すと、ランダムに生成された5文字の文字列が得られる。"
  },
  {
    "start": 2192874,
    "end": 2193966,
    "text": "この方法でテストする必要はない。"
  },
  {
    "start": 2193988,
    "end": 2208950,
    "text": "ところで、これは少し複雑すぎるように感じるが、自分の関数に自信がある限り、あるいはgenerate関数の呼び出しをログに記録し、それが期待通りに動作することを確認するだけで、問題ないことがわかる。この時点で期待されていた関数、generateというid生成関数を書くことができたのだ。"
  },
  {
    "start": 2209290,
    "end": 2212646,
    "text": "次は一番モテるところだ。"
  },
  {
    "start": 2212748,
    "end": 2221850,
    "text": "motiというのは、この特定のアプリケーションのmotiビットのことで、単純なgitを使ってレポを新しいフォルダにクローンするというものだ。"
  },
  {
    "start": 2222990,
    "end": 2225910,
    "text": "シンプルなgitとは？"
  },
  {
    "start": 2225990,
    "end": 2227002,
    "text": "まずはそこから始めよう。"
  },
  {
    "start": 2227056,
    "end": 2236122,
    "text": "Googleでsimple gitを検索してみると、基本的にリポジトリのクローンに使えるNPMモジュールであることがわかる。"
  },
  {
    "start": 2236266,
    "end": 2240414,
    "text": "node JSアプリケーションでgitコマンドを実行するための軽量なインターフェイスです。"
  },
  {
    "start": 2240612,
    "end": 2241502,
    "text": "必要ですか？"
  },
  {
    "start": 2241556,
    "end": 2251058,
    "text": "いや、node jsでspawnのようなものを使えば、生のgitコマンドを実行することはできる。"
  },
  {
    "start": 2251144,
    "end": 2254166,
    "text": "すでにローカルにインストールしてあるので、あとは使うだけだ。"
  },
  {
    "start": 2254188,
    "end": 2268310,
    "text": "そして、ユーザーから入力された特定のリポジトリをクローンするclone関数を実行します。"
  },
  {
    "start": 2297930,
    "end": 2299382,
    "text": "期待されたことはできた。"
  },
  {
    "start": 2299446,
    "end": 2304218,
    "text": "その方法と、実際にテストするために使ったツールを紹介しよう。"
  },
  {
    "start": 2304224,
    "end": 2305830,
    "text": "期待通りに動いている。"
  },
  {
    "start": 2305990,
    "end": 2312038,
    "text": "その1、シンプルなgitリポジトリを使い、シンプルなgitクローンを実行した。"
  },
  {
    "start": 2312134,
    "end": 2313134,
    "text": "どのようにしてこの大会に参加したのか？"
  },
  {
    "start": 2313172,
    "end": 2314414,
    "text": "サインはいい質問だ。"
  },
  {
    "start": 2314532,
    "end": 2321562,
    "text": "これは以前にもやったことがあるし、基本的にライブラリーの中に入って、それが期待する引数を見ることもできた。"
  },
  {
    "start": 2321626,
    "end": 2328562,
    "text": "引数には、レポ・パス（文字列）と、最終的にクローンされたプロジェクトを保存するローカル・パスを指定する。"
  },
  {
    "start": 2328696,
    "end": 2330066,
    "text": "私はどんなインプットをしたか？"
  },
  {
    "start": 2330168,
    "end": 2339634,
    "text": "入力として来たレポのURLが何であれ、それをクローンし、そのレポのURLでgit cloneを実行し、出力idフォルダに保存すると言った。"
  },
  {
    "start": 2339682,
    "end": 2340870,
    "text": "このIDは何だ？"
  },
  {
    "start": 2340940,
    "end": 2347042,
    "text": "これは前節で書いた、この関数が実行するランダムに生成されたIDである。"
  },
  {
    "start": 2347106,
    "end": 2352762,
    "text": "コントロールが1番に到達すると、いつでもランダムに5文字のIDを生成する。"
  },
  {
    "start": 2352896,
    "end": 2360474,
    "text": "その2、ランダムに生成されたidをoutputというフォルダに、ユーザーが望むリポジトリをクローンする。"
  },
  {
    "start": 2360592,
    "end": 2363454,
    "text": "私も地元でこれをテストし、それが機能することを知っている。"
  },
  {
    "start": 2363572,
    "end": 2365790,
    "text": "私がどのようにこれをテストしたかを紹介しよう。"
  },
  {
    "start": 2365940,
    "end": 2368702,
    "text": "node JSアプリケーションをテストする方法は複数あります。"
  },
  {
    "start": 2368836,
    "end": 2370494,
    "text": "基本的に、私は何をしたいのか？"
  },
  {
    "start": 2370532,
    "end": 2379742,
    "text": "ターミナルを開き、このアプリケーションをコンパイルし、ローカルで実行すると、このエンドポイントにヒットするようにしたい。"
  },
  {
    "start": 2379806,
    "end": 2387362,
    "text": "フロントエンドがこのエンドポイントをヒットしたときに、コントロールが最終的にここに到達するのと同じように。"
  },
  {
    "start": 2387506,
    "end": 2388726,
    "text": "どうやってテストするんだ？"
  },
  {
    "start": 2388828,
    "end": 2392710,
    "text": "これらのエンドポイントをテストする非常に有名な方法のひとつに、postmanというものがある。"
  },
  {
    "start": 2393050,
    "end": 2394758,
    "text": "郵便配達は何をさせてくれるの？"
  },
  {
    "start": 2394844,
    "end": 2406140,
    "text": "Postmanを使えば、このとても素敵なGUIから、特定のルートで特定のURLにリクエストを送ることができる。"
  },
  {
    "start": 2406670,
    "end": 2408154,
    "text": "この時点で何をしなければならないのか？"
  },
  {
    "start": 2408192,
    "end": 2409702,
    "text": "その1、postmanをインストールする。"
  },
  {
    "start": 2409846,
    "end": 2412142,
    "text": "その2、ここにもサインインする必要があるかもしれない。"
  },
  {
    "start": 2412276,
    "end": 2418638,
    "text": "そして3番目に、バックエンドサーバーのURLをここに入力する。"
  },
  {
    "start": 2418724,
    "end": 2420254,
    "text": "localhostはどこから来たのですか？"
  },
  {
    "start": 2420292,
    "end": 2423730,
    "text": "これは基本的に、あなた自身のコンピューターを指すURLだ。"
  },
  {
    "start": 2423800,
    "end": 2426370,
    "text": "ここでは127001を使うこともできる。"
  },
  {
    "start": 2426440,
    "end": 2428882,
    "text": "Localhostが一般的に好まれる。"
  },
  {
    "start": 2429016,
    "end": 2430546,
    "text": "3000はどこから来たのか？"
  },
  {
    "start": 2430568,
    "end": 2431182,
    "text": "ヘルキラス"
  },
  {
    "start": 2431246,
    "end": 2432562,
    "text": "ここから来ている。"
  },
  {
    "start": 2432616,
    "end": 2434610,
    "text": "我々のアプリはポート3000でリッスンしている。"
  },
  {
    "start": 2434680,
    "end": 2438920,
    "text": "だからlocalhost 3000のブラウザにアクセスできたのだ。"
  },
  {
    "start": 2439370,
    "end": 2450566,
    "text": "アプリはここでリッスンしているが、ブラウザからpostリクエストを送信できないので、Postmanからスラッシュ・デプロイ・エンドポイントにpostリクエストを送信し、リポジトリのURLを送信する。"
  },
  {
    "start": 2450678,
    "end": 2453738,
    "text": "コントロールがここに到達したらどうなるか？"
  },
  {
    "start": 2453824,
    "end": 2455366,
    "text": "レポのURLを抽出する。"
  },
  {
    "start": 2455398,
    "end": 2485016,
    "text": "入力リポジトリの URL が GitHub.com hkirath react boyerplate の場合、シンプルな git を使って出力フォルダの id フォルダにクローンされます。つまり、基本的にはこの herkirath react boilerplate リポジトリのすべてのファイルが、私が書いたコードのおかげで私のローカルマシンにやってくるということです。"
  },
  {
    "start": 2485128,
    "end": 2486140,
    "text": "どうすればテストできますか？"
  },
  {
    "start": 2486210,
    "end": 2488476,
    "text": "その1、アプリケーションをローカルで起動する。"
  },
  {
    "start": 2488508,
    "end": 2489808,
    "text": "もう僕のために動いてくれている。"
  },
  {
    "start": 2489894,
    "end": 2491964,
    "text": "その2、ポストマンからリクエストを送る。"
  },
  {
    "start": 2492092,
    "end": 2503376,
    "text": "時間はかかるが、最終的にはログは残らず、単純なオブジェクトが返ってくる。"
  },
  {
    "start": 2503488,
    "end": 2506980,
    "text": "確認させてください。"
  },
  {
    "start": 2507050,
    "end": 2511904,
    "text": "LSコマンドを押して、新しく生成された出力フォルダを見てみよう。"
  },
  {
    "start": 2511952,
    "end": 2515828,
    "text": "見ての通り、output idは私がリポジトリをクローンしたかった場所だ。"
  },
  {
    "start": 2515924,
    "end": 2517352,
    "text": "それは実際に起こったことなのか？"
  },
  {
    "start": 2517486,
    "end": 2520136,
    "text": "そう、ここにはランダムに生成されたIDがある。"
  },
  {
    "start": 2520158,
    "end": 2531852,
    "text": "このフォルダーに行くと、output JDL 87というフォルダーに私のリポジトリがローカルにクローンされているのが見える。"
  },
  {
    "start": 2531986,
    "end": 2537196,
    "text": "ひとつは、フロントエンドがそれを使って追跡できるように、ここからIDを返すことだろう。"
  },
  {
    "start": 2537218,
    "end": 2538824,
    "text": "この話をしたことを覚えているかい？"
  },
  {
    "start": 2538962,
    "end": 2543024,
    "text": "ここでいくつかのことが起こった後、実際にこれをS3にした。"
  },
  {
    "start": 2543142,
    "end": 2547808,
    "text": "私たちはidをユーザーに返したいのです。だからこのようなコードが書けるのです。"
  },
  {
    "start": 2547894,
    "end": 2561732,
    "text": "今、プロジェクトを再コンパイルしてnode dist index jsを実行し、Postmanにアクセスしてそれを叩こうとすると、返ってくるレスポンスはIdとランダムに生成されたIdだ。"
  },
  {
    "start": 2561866,
    "end": 2566424,
    "text": "なぜなら、このリクエストは最終的にフロントエンドから送られるからだ。"
  },
  {
    "start": 2566542,
    "end": 2575896,
    "text": "今現在はpostmanから発信している。なぜならこれはテストに使えるライブラリであって、HTTPルートをテストするために使えるアプリケーションのようなライブラリではないからだ。"
  },
  {
    "start": 2575918,
    "end": 2577804,
    "text": "実際にフロントエンドのコードを書き始めることができる。"
  },
  {
    "start": 2577922,
    "end": 2582796,
    "text": "まずはこれを完成させ、最終的にフロントエンドに到達する。"
  },
  {
    "start": 2582898,
    "end": 2589500,
    "text": "postmanを使い続けて、すべてが期待通りに動くことを確認する。"
  },
  {
    "start": 2589580,
    "end": 2593116,
    "text": "リポジトリをローカルに自分のマシンにクローンすることができる。"
  },
  {
    "start": 2593228,
    "end": 2600244,
    "text": "次のポイントに移ろう。out idにあるすべてのファイルのパスを取得する関数を書こう。"
  },
  {
    "start": 2600362,
    "end": 2602870,
    "text": "なぜそうしなければならないのか、少し話してみよう。"
  },
  {
    "start": 2604840,
    "end": 2614060,
    "text": "では、なぜidフォルダ内の全ファイルのパスを取得する関数を作るのか、その理由を説明しよう。"
  },
  {
    "start": 2614240,
    "end": 2615672,
    "text": "ここからどうしたいのか？"
  },
  {
    "start": 2615726,
    "end": 2622330,
    "text": "リポジトリをクローンしたのだから、あとは出力idフォルダを3つの中に入れるだけだ。"
  },
  {
    "start": 2622640,
    "end": 2626220,
    "text": "すでにAWS SDKというライブラリをインポートした。"
  },
  {
    "start": 2626720,
    "end": 2639160,
    "text": "もしこのSDKがSDK upload to s threeとかupload directory to s threeとかを提供してくれて、output idのパスを与えてくれれば、それで良いのですが。"
  },
  {
    "start": 2639250,
    "end": 2642796,
    "text": "でも、私の知識では、これは完全に変わったかもしれない。"
  },
  {
    "start": 2642828,
    "end": 2646704,
    "text": "現在、s threeにディレクトリをアップロードする簡単な方法はない。"
  },
  {
    "start": 2646822,
    "end": 2656644,
    "text": "SDKのアップロードファイルは簡単にできますが、SDKのアップロードディレクトリはできません。"
  },
  {
    "start": 2656682,
    "end": 2669476,
    "text": "例えば、kirathusersprojectversは12345 app TSXを出力する。"
  },
  {
    "start": 2669508,
    "end": 2682280,
    "text": "SDKアップロードフォルダを呼び出す簡単な方法はないので、この配列を繰り返し処理して、SDKアップロードファイルを1つずつ呼び出すことができます。"
  },
  {
    "start": 2682440,
    "end": 2682812,
    "text": "クールだ。"
  },
  {
    "start": 2682866,
    "end": 2684252,
    "text": "まず最初にしなければならないことは何だろう？"
  },
  {
    "start": 2684306,
    "end": 2693052,
    "text": "この配列は、この出力 ID フォルダに存在するすべてのファイル、または存在するすべてのファイルへのパスを見つけるために生成されます。"
  },
  {
    "start": 2693116,
    "end": 2742500,
    "text": "コードを書かせてくれ。"
  },
  {
    "start": 2742570,
    "end": 2753780,
    "text": "予想以上に時間がかかったが、最終的にgetall filesという関数を作ることができた。"
  },
  {
    "start": 2753860,
    "end": 2755460,
    "text": "変えたことはいくつかある。"
  },
  {
    "start": 2755540,
    "end": 2759770,
    "text": "具体的には、このパスへの参加は、あなたにとって非常に新鮮に映るかもしれない。"
  },
  {
    "start": 2760700,
    "end": 2767892,
    "text": "デバッグしているうちに、これは持っていて損はない、必要ないけど、プロジェクト全体の絶対パスがとてもきれいになることに気づいた。"
  },
  {
    "start": 2767966,
    "end": 2769576,
    "text": "絶対パスとはどういう意味か？"
  },
  {
    "start": 2769688,
    "end": 2774684,
    "text": "基本的にnode JSでは、アンダースコア(underscore)アンダースコア(underscore)のdir名で今いるカレント・ディレクトリがわかる。"
  },
  {
    "start": 2774722,
    "end": 2777260,
    "text": "このようにnodeをここで実行してテストしようとしても実行されない。"
  },
  {
    "start": 2777330,
    "end": 2779504,
    "text": "アンダースコアを記録する場合は、アンダースコア・ダート名。"
  },
  {
    "start": 2779542,
    "end": 2784336,
    "text": "例えば、ここにコンソール・ログ・アンダースコア・アンダースコアのdiv名を書くとする。"
  },
  {
    "start": 2784358,
    "end": 2800070,
    "text": "プロジェクトをリビルドして再実行すると、userkiratsing Versailles diskと表示される。"
  },
  {
    "start": 2800440,
    "end": 2805216,
    "text": "現在、プロジェクト全体を通して絶対パスを使用している。"
  },
  {
    "start": 2805248,
    "end": 2811892,
    "text": "パス結合をアンダースコアでやっているのですが、パスとは何ですか？"
  },
  {
    "start": 2811956,
    "end": 2813524,
    "text": "これもNPMモジュールである。"
  },
  {
    "start": 2813572,
    "end": 2815500,
    "text": "これはnode jsのデフォルトだと思う。"
  },
  {
    "start": 2815570,
    "end": 2831356,
    "text": "一番上にインポートして、ここにクローンするのではなく、ここにクローンしないで、ルートフォルダーに出力フォルダーを作成します。"
  },
  {
    "start": 2831468,
    "end": 2834508,
    "text": "私は、この出力フォルダをルートフォルダ内に作りたくない。"
  },
  {
    "start": 2834604,
    "end": 2836512,
    "text": "ディストの中にあるものすべてが欲しい。"
  },
  {
    "start": 2836646,
    "end": 2846740,
    "text": "つまり、distoutput idの中にkbaiを格納することもできるし、一番クリーンな方法はこの中にkbaiを格納することだ。"
  },
  {
    "start": 2846890,
    "end": 2847572,
    "text": "これは何だ？"
  },
  {
    "start": 2847626,
    "end": 2848724,
    "text": "もう一度記録しておこう。"
  },
  {
    "start": 2848762,
    "end": 2852024,
    "text": "コンソールでログを取るのではなく、彼らの名前をアンダースコアで囲む。"
  },
  {
    "start": 2852062,
    "end": 2860068,
    "text": "そうすれば、何が記録されるかわかるだろう。"
  },
  {
    "start": 2860164,
    "end": 2871464,
    "text": "Userkeira Singh versailoutput random string つまり、クローンするgitリポジトリを含め、すべてをディスク・フォルダー内に保存していることになります。"
  },
  {
    "start": 2871512,
    "end": 2872364,
    "text": "やらなければならないのか？"
  },
  {
    "start": 2872402,
    "end": 2874200,
    "text": "いいえ、ルート・フォルダに保存することはできます。"
  },
  {
    "start": 2874280,
    "end": 2876028,
    "text": "これはとても簡単なことだ。"
  },
  {
    "start": 2876194,
    "end": 2881872,
    "text": "しかし、フォルダー内のすべてのファイルを探す再帰的な道を行くとき、ぜひやっていただきたいことが2つある。"
  },
  {
    "start": 2881926,
    "end": 2884892,
    "text": "その1、パス参加に慣れること。"
  },
  {
    "start": 2884956,
    "end": 2887680,
    "text": "2つ目は、アンダースコアを使いこなすこと。"
  },
  {
    "start": 2887750,
    "end": 2888400,
    "text": "どちらもだ。"
  },
  {
    "start": 2888470,
    "end": 2892892,
    "text": "これは、絶対パスを使いたいときに多くのプロジェクトで見られる標準的なパターンだ。"
  },
  {
    "start": 2892956,
    "end": 2894656,
    "text": "絶対パスとはどういう意味か？"
  },
  {
    "start": 2894688,
    "end": 2901156,
    "text": "つまり、ルート・フォルダーから現在いるフォルダーまでの、非常に長い文字列、または非常に長いパスを意味する。"
  },
  {
    "start": 2901258,
    "end": 2901910,
    "text": "クールだ。"
  },
  {
    "start": 2902220,
    "end": 2905208,
    "text": "それが私たちがここでやったことだ。"
  },
  {
    "start": 2905294,
    "end": 2915032,
    "text": "今、この関数をコメントしても、私が書いたすべてのファイルを取得し、単純なgit clone関数呼び出しの上の関数呼び出しでさえ、少し変更されている。"
  },
  {
    "start": 2915166,
    "end": 2919672,
    "text": "具体的には、すべてをルート・フォルダーに保存するのではなく、ディスク・フォルダーに保存するようにした。"
  },
  {
    "start": 2919736,
    "end": 2920204,
    "text": "クールだ。"
  },
  {
    "start": 2920322,
    "end": 2922572,
    "text": "それでは、次に私が書いたものを見てみよう。"
  },
  {
    "start": 2922626,
    "end": 2928668,
    "text": "すべてのファイルとコンソールのログファイルを取得するために、const files equalと言った。"
  },
  {
    "start": 2928764,
    "end": 2931810,
    "text": "この出力を見て、コードを見てみよう。"
  },
  {
    "start": 2934020,
    "end": 2950640,
    "text": "Postmanでこの特定のプロジェクトをクローンしてログを見ると、reactプロジェクトのユーザーatkiratsing versailoutputのすべてのファイルがログに記録されているのがわかる。"
  },
  {
    "start": 2950720,
    "end": 2957976,
    "text": "gitがフックするユニークなidは、このアプリのjsxファイルかもしれない。"
  },
  {
    "start": 2958078,
    "end": 2967180,
    "text": "User Singh versatile disk output id srcap jsx 3つにアップロードしたいすべてのファイルのパスがあります。"
  },
  {
    "start": 2967250,
    "end": 2973356,
    "text": "この配列を単純に反復処理し、s three uploadを呼び出して実際にs threeにアップロードできるようになった。"
  },
  {
    "start": 2973458,
    "end": 2975630,
    "text": "問題は、どうやってこれを書いたかということだ。"
  },
  {
    "start": 2976000,
    "end": 2978776,
    "text": "なぜnode jsでこれを書く簡単な方法がないのか？"
  },
  {
    "start": 2978808,
    "end": 2983072,
    "text": "私はこれを成し遂げるために多くの再帰的な計算をしなければならなかった。"
  },
  {
    "start": 2983126,
    "end": 2987056,
    "text": "それでは、私が書いたコードをご覧ください。もし、もっと良い方法を見つけたら教えてください。"
  },
  {
    "start": 2987078,
    "end": 2990508,
    "text": "これ以上の方法はないと思うが、私が書いたコードを見てみよう。"
  },
  {
    "start": 2990684,
    "end": 2994752,
    "text": "ファイルシステム・ライブラリを意味するFSを一番上にインポートした。"
  },
  {
    "start": 2994816,
    "end": 3007460,
    "text": "ファイルの読み込み、ディレクトリの読み込みなど、ファイルシステム上で様々なことができる。特に、ディアシンクの読み込み関数は、その名の通り、ディレクトリの中身をすべて読み込むことができる。"
  },
  {
    "start": 3007620,
    "end": 3010772,
    "text": "全ファイル取得関数は何を入力として取得するのですか？"
  },
  {
    "start": 3010836,
    "end": 3017880,
    "text": "まず、このユーザー、アキラス・パーセルの出力を得る。"
  },
  {
    "start": 3020880,
    "end": 3021870,
    "text": "それだけだ。"
  },
  {
    "start": 3022800,
    "end": 3023950,
    "text": "ランダムID。"
  },
  {
    "start": 3024880,
    "end": 3026616,
    "text": "それが入力として得られるものだ。"
  },
  {
    "start": 3026728,
    "end": 3032640,
    "text": "ルート・フォルダーだけでなく、再帰的なすべてのフォルダーにあるすべてのファイルを返すために何が必要なのか。"
  },
  {
    "start": 3033060,
    "end": 3043424,
    "text": "私のリアクト・プロジェクトを見ると、クローンしているプロジェクトにはルート・フォルダーだけでなく、再帰的なフォルダーにもたくさんのファイルがある。"
  },
  {
    "start": 3043472,
    "end": 3052948,
    "text": "src app Jsx app cssでは、これらすべてのパスが必要で、そのために少々複雑なコードを書かなければならない。"
  },
  {
    "start": 3053114,
    "end": 3059764,
    "text": "fs read deer sync関数は、現在のフォルダーにあるすべてのファイルを取得するだけで、再帰的なファイルを取得することはできません。"
  },
  {
    "start": 3059812,
    "end": 3061768,
    "text": "もしそうなら、私たちの人生はとても楽だっただろう。"
  },
  {
    "start": 3061934,
    "end": 3064004,
    "text": "現在のフォルダにあるすべてのファイルが表示されます。"
  },
  {
    "start": 3064052,
    "end": 3069960,
    "text": "見てわかるように、この変数にはすべてのファイルとフォルダが格納されている。"
  },
  {
    "start": 3070040,
    "end": 3074680,
    "text": "この特定の入力フォルダー内のすべてのファイルとすべてのフォルダーが表示されます。"
  },
  {
    "start": 3074840,
    "end": 3078284,
    "text": "そして、それらを繰り返し、Kbaiをチェックする。"
  },
  {
    "start": 3078332,
    "end": 3081552,
    "text": "この特定のファイルはディレクトリですか？"
  },
  {
    "start": 3081686,
    "end": 3088732,
    "text": "特定のファイルがディレクトリでない場合、つまりコントロールがここに到達した場合、これを最終的な出力配列にプッシュする。"
  },
  {
    "start": 3088796,
    "end": 3091460,
    "text": "これが結局、私が返すことになるものだ。"
  },
  {
    "start": 3091610,
    "end": 3094020,
    "text": "もし、この論理を削除させてもらえるなら。"
  },
  {
    "start": 3094920,
    "end": 3099136,
    "text": "再帰的なフォルダ構造がなければ、私たちの生活はとてもシンプルになる。"
  },
  {
    "start": 3099248,
    "end": 3102884,
    "text": "残念ながら、我々はそうしている。"
  },
  {
    "start": 3103002,
    "end": 3104544,
    "text": "しかし、このコードはかなり単純だ。"
  },
  {
    "start": 3104592,
    "end": 3110516,
    "text": "Kibhiはすべてのファイルとフォルダを取得し、すべてのファイルに対して、現在のフォルダとファイルを結合するパスを実行する。"
  },
  {
    "start": 3110548,
    "end": 3117336,
    "text": "なぜなら、ファイル・パスはルートからの絶対パスではなく、ここに保存したいのは完全なパスだからだ。"
  },
  {
    "start": 3117368,
    "end": 3122604,
    "text": "また、これとこれをログに残し、私がなぜこのパスに参加しなければならなかったのか、ここで確認することができる。"
  },
  {
    "start": 3122642,
    "end": 3129436,
    "text": "ファイル名は基本的にJsXのアプリであれば何でもいいが、ここに保存したいのはフルパスだ。"
  },
  {
    "start": 3129468,
    "end": 3136844,
    "text": "フォルダー・パス（ルート・フォルダー・パス）を取り、これをアプリJsXに追加する。"
  },
  {
    "start": 3136892,
    "end": 3139936,
    "text": "これが、パス結合のフォルダーパスとファイルの役割だ。"
  },
  {
    "start": 3140038,
    "end": 3144032,
    "text": "それが終わるころには、この応答配列にすべてを格納できるようになっている。"
  },
  {
    "start": 3144176,
    "end": 3147888,
    "text": "再帰的なフォルダー構造でなければ、これはうまくいっただろう。"
  },
  {
    "start": 3147984,
    "end": 3150292,
    "text": "そうである以上、ここで2つのチェックをしなければならない。"
  },
  {
    "start": 3150346,
    "end": 3154308,
    "text": "もしこれがディレクトリでないなら、私たちは売られたことになる。"
  },
  {
    "start": 3154404,
    "end": 3158250,
    "text": "これがディレクトリであれば、再帰的に検索する必要がある。"
  },
  {
    "start": 3158860,
    "end": 3160520,
    "text": "少し話を広げよう。"
  },
  {
    "start": 3160670,
    "end": 3168312,
    "text": "サブフォルダー内のすべてのファイルを再帰的に検索し、それをレスポンスに連結する必要がある。"
  },
  {
    "start": 3168456,
    "end": 3170236,
    "text": "このコードは何をするのか？"
  },
  {
    "start": 3170338,
    "end": 3172524,
    "text": "同じ関数が再帰的に呼び出される。"
  },
  {
    "start": 3172642,
    "end": 3187360,
    "text": "この関数は、次のようなディレクトリで再度同じ関数を呼び出す。ディレクトリはdistのようなものなので、ファイルのフルパスはsrc src assetsになる。"
  },
  {
    "start": 3187510,
    "end": 3194032,
    "text": "そのフォルダー内のファイル群を返し、それをレスポンスに連結する。"
  },
  {
    "start": 3194176,
    "end": 3195830,
    "text": "なぜここでプッシュしないのか？"
  },
  {
    "start": 3196200,
    "end": 3201316,
    "text": "なぜコンケートにするのか？"
  },
  {
    "start": 3201418,
    "end": 3202920,
    "text": "配列が返される。"
  },
  {
    "start": 3203340,
    "end": 3205544,
    "text": "このような返答をお望みですか？"
  },
  {
    "start": 3205662,
    "end": 3223640,
    "text": "配列ファイルtxtの配列のコンマ アセットファイルtxtの配列のコンマ レスポンスがこのようになるのは避けたいが、ここでレスポンスをプッシュすると、配列がレスポンスにプッシュされる。"
  },
  {
    "start": 3223720,
    "end": 3226248,
    "text": "レスポンスに配列をプッシュしたくない。"
  },
  {
    "start": 3226344,
    "end": 3228290,
    "text": "中身は何でもいい。"
  },
  {
    "start": 3228900,
    "end": 3244660,
    "text": "文字列の配列であるget all filesから返されたものはすべて、このレスポンス配列に連結される。そのため、レスポンスを受け取り、get all filesが返す残りのファイルをすべて連結するconcatenate関数を呼び出さなければならない。"
  },
  {
    "start": 3244730,
    "end": 3247604,
    "text": "これが、この関数を再帰的に作成する方法である。"
  },
  {
    "start": 3247642,
    "end": 3250736,
    "text": "もし理解できないなら、GPTをチャットして、すべてのファイルをくれる機能を教えてくれと頼むんだ。"
  },
  {
    "start": 3250768,
    "end": 3252772,
    "text": "でも、一般的には自分で書くのがいい。"
  },
  {
    "start": 3252826,
    "end": 3257032,
    "text": "基礎をきれいにするのはいいことだから。"
  },
  {
    "start": 3257086,
    "end": 3262170,
    "text": "とはいえ、これはチャットでGPDにコーディングを依頼すれば、完全に抽象化できることだ。"
  },
  {
    "start": 3263740,
    "end": 3279964,
    "text": "これがうまくいけば、最初に見たように出力フォルダに存在するすべてのファイルの配列ができあがります。つまり、クローンした GitHub ファイルの配列ができあがるということです。"
  },
  {
    "start": 3280092,
    "end": 3282224,
    "text": "こうすればいいんだろ？"
  },
  {
    "start": 3282262,
    "end": 3287244,
    "text": "各ファイル、各ファイルごとにS3アップロードを行う。"
  },
  {
    "start": 3287292,
    "end": 3288336,
    "text": "さて、3はどこから来たのか？"
  },
  {
    "start": 3288358,
    "end": 3289296,
    "text": "すぐに分かるだろう。"
  },
  {
    "start": 3289398,
    "end": 3295040,
    "text": "がファイルをアップロードするシンプルな機能を提供してくれれば、私はこれだけで、私の人生は解決する。"
  },
  {
    "start": 3295120,
    "end": 3298980,
    "text": "私のコードの最初の部分を実行するロジックを作成した。"
  },
  {
    "start": 3299050,
    "end": 3300340,
    "text": "まだやるべきことがいくつかある。"
  },
  {
    "start": 3300410,
    "end": 3301432,
    "text": "これを元に戻すつもりだ。"
  },
  {
    "start": 3301486,
    "end": 3309988,
    "text": "少なくとも、入力ディレクトリを指定してすべてのファイルを抽出する方法は理解していただけたと思う。"
  },
  {
    "start": 3310084,
    "end": 3327324,
    "text": "具体的には、入力ディレクトリはリポジトリをクローンした場所であり、クローンした最終的なgitリポジトリへのすべてのパスを取得する。"
  },
  {
    "start": 3327522,
    "end": 3330576,
    "text": "ウェブサイトが私たちに次に何を期待しているのかを見てみよう。"
  },
  {
    "start": 3330598,
    "end": 3333504,
    "text": "すべてのパスを抽出する関数を書いた。"
  },
  {
    "start": 3333622,
    "end": 3339040,
    "text": "次にAWSアカウントを作成しなければならない。実際にAWSにアップロードする作業が始まるからだ。"
  },
  {
    "start": 3339700,
    "end": 3341988,
    "text": "ほとんどの人はAWSのアカウントを持っていないかもしれない。"
  },
  {
    "start": 3342154,
    "end": 3344992,
    "text": "彼らは非常に厳しいチェックとデビットカードを要求する。"
  },
  {
    "start": 3345056,
    "end": 3353284,
    "text": "まだAWSにアクセスしていないのであれば、まともなクレジットカードやデビットカードがなければ、ほぼ間違いなくAWSは使えないだろう。"
  },
  {
    "start": 3353402,
    "end": 3354600,
    "text": "あなたは2つのうちの1つをすることができる。"
  },
  {
    "start": 3354670,
    "end": 3358424,
    "text": "AWSを使わずにフォローすることもできる。"
  },
  {
    "start": 3358462,
    "end": 3359160,
    "text": "見てごらん。"
  },
  {
    "start": 3359230,
    "end": 3360488,
    "text": "友人に頼めばいい。"
  },
  {
    "start": 3360574,
    "end": 3370252,
    "text": "また、ありがたいことに、Cloudflareというクラウド・プロバイダーもあり、このプロバイダーはこの3つに非常によく似たものを提供してくれる。"
  },
  {
    "start": 3370386,
    "end": 3371710,
    "text": "3つ目とは？"
  },
  {
    "start": 3372800,
    "end": 3376112,
    "text": "S 3はオブジェクト・ストアだった。"
  },
  {
    "start": 3376166,
    "end": 3385500,
    "text": "mp4、MP3、JPEG、Jsx、HTMLファイルを置くことができます。"
  },
  {
    "start": 3385580,
    "end": 3389276,
    "text": "いつでもAWSのどこにでも置くことができる。"
  },
  {
    "start": 3389308,
    "end": 3390032,
    "text": "S 3"
  },
  {
    "start": 3390166,
    "end": 3396212,
    "text": "何が起こったかというと、これは基本的に非常に大きなサービスになり、すべてのクラウドプロバイダーがパイの一部を欲しがった。"
  },
  {
    "start": 3396346,
    "end": 3402336,
    "text": "Cloudflareも非常に大きなクラウド・プロバイダーで、名前自体にクラウドが含まれている、とKbhai氏は言う。"
  },
  {
    "start": 3402368,
    "end": 3404808,
    "text": "我々はS3の完全なコピーを作成した。"
  },
  {
    "start": 3404894,
    "end": 3407288,
    "text": "確かR2とかいう名前だったと思う。"
  },
  {
    "start": 3407454,
    "end": 3415624,
    "text": "我々はSDKをS3のものと完全に似せている。"
  },
  {
    "start": 3415662,
    "end": 3418380,
    "text": "みんなAWSを利用していて、みんなにここに移ってきてほしいと思っている。"
  },
  {
    "start": 3418530,
    "end": 3422348,
    "text": "彼らはクバイ、君はS3のようにコードを書きなさいと言った。"
  },
  {
    "start": 3422514,
    "end": 3427804,
    "text": "ほんの小さなことを1つ変えるだけで、ファイルをS3ではなくR2にアップロードするようになる。"
  },
  {
    "start": 3427842,
    "end": 3429824,
    "text": "R 2の方が安く、R 2の方が良い。"
  },
  {
    "start": 3429862,
    "end": 3438636,
    "text": "また、AWS SDKのNPMモジュールが使えるのは、s threeに比べて簡単にアカウントを取得できるからだ。"
  },
  {
    "start": 3438748,
    "end": 3444144,
    "text": "というのも、AWSはアカウントを取得するのが少し難しいからだ。"
  },
  {
    "start": 3444182,
    "end": 3444756,
    "text": "まだやれる。"
  },
  {
    "start": 3444778,
    "end": 3447764,
    "text": "私はアカウントを持っているので、AWSアカウントの認証情報も使えます。"
  },
  {
    "start": 3447802,
    "end": 3450656,
    "text": "やりたいなら、Cloudflareを使えばいい。"
  },
  {
    "start": 3450848,
    "end": 3452272,
    "text": "私はおそらくCloudflareを使うだろう。"
  },
  {
    "start": 3452336,
    "end": 3452884,
    "text": "関係ない。"
  },
  {
    "start": 3452922,
    "end": 3454904,
    "text": "いずれにせよ、コードは変わらない。"
  },
  {
    "start": 3454942,
    "end": 3460740,
    "text": "AWSかCloudflareのどちらに保存するかは、設定パラメータを少し反転させるだけだ。"
  },
  {
    "start": 3460820,
    "end": 3465452,
    "text": "このチュートリアルでは、簡単にアカウントを作成できるCloudflareを使用する。"
  },
  {
    "start": 3465506,
    "end": 3471150,
    "text": "次のステップは、Cloudflare Coに行き、サインアップするかサインインすることだ。"
  },
  {
    "start": 3476640,
    "end": 3477724,
    "text": "一度そうすればいい。"
  },
  {
    "start": 3477842,
    "end": 3480428,
    "text": "サインアップすると、次のようなページが表示されます。"
  },
  {
    "start": 3480514,
    "end": 3485952,
    "text": "ここにはR2があり、ご覧のように、そのすぐ隣にはオブジェクト・ストアがある。"
  },
  {
    "start": 3486006,
    "end": 3490880,
    "text": "それをクリックすると、おそらくカードを作成するように求められるだろう。"
  },
  {
    "start": 3490950,
    "end": 3492560,
    "text": "ここではほとんどのカードが使える。"
  },
  {
    "start": 3492710,
    "end": 3495936,
    "text": "多くのカードがここでは使えるが、AWSでは使えない。"
  },
  {
    "start": 3496048,
    "end": 3497428,
    "text": "あるいは、オートキャドでも使えるかもしれない。"
  },
  {
    "start": 3497434,
    "end": 3499796,
    "text": "カードを作るかどうかはわかりません。"
  },
  {
    "start": 3499898,
    "end": 3500724,
    "text": "それほど難しくはないはずだ。"
  },
  {
    "start": 3500762,
    "end": 3502068,
    "text": "つまり、友人の名刺を持っているなら、それを入れればいい。"
  },
  {
    "start": 3502074,
    "end": 3502996,
    "text": "自分のカードを持っているなら、それを入れてください。"
  },
  {
    "start": 3503018,
    "end": 3503716,
    "text": "料金はかからない。"
  },
  {
    "start": 3503738,
    "end": 3507396,
    "text": "また、本当に長い間無料であるようなものですが、あなたがしなければならない、私は知らない。"
  },
  {
    "start": 3507418,
    "end": 3508884,
    "text": "ここに名刺を入れなければならないかどうかはわからない。"
  },
  {
    "start": 3508922,
    "end": 3512084,
    "text": "推測するに、私の記憶が正しければ、カードを入れなければならないと思う。"
  },
  {
    "start": 3512282,
    "end": 3514140,
    "text": "それができたら、どちらか一方にする。"
  },
  {
    "start": 3514210,
    "end": 3517740,
    "text": "CloudflareであろうとAWSであろうと関係ない。"
  },
  {
    "start": 3518160,
    "end": 3519036,
    "text": "それを作ればいい。"
  },
  {
    "start": 3519058,
    "end": 3524408,
    "text": "そうしたら、AWSかCloudflareのどちらかにバケットと呼ばれるものを作成しなければならない。"
  },
  {
    "start": 3524584,
    "end": 3529460,
    "text": "バケットとは、すべてのアプリケーションファイルを置く場所のことだ。"
  },
  {
    "start": 3529560,
    "end": 3531488,
    "text": "基本的に、複数のアプリケーションを持つことができるだろう？"
  },
  {
    "start": 3531574,
    "end": 3532800,
    "text": "私たちは今日、ベルサイユ宮殿を創造している。"
  },
  {
    "start": 3532870,
    "end": 3536976,
    "text": "明日はゼロダを作るかもしれないし、明後日はソーシャル・ネットワーキング・アプリを作るかもしれない。"
  },
  {
    "start": 3537078,
    "end": 3543872,
    "text": "アプリケーションの構造を改善し、Zerodhaのコードをすべて別のバケツに入れたい。"
  },
  {
    "start": 3543936,
    "end": 3546532,
    "text": "バケツとは基本的に、これを保管する中心的な場所を意味する。"
  },
  {
    "start": 3546586,
    "end": 3562068,
    "text": "私たちのアプリケーションの場合、一般的には、新しいバケツを作って、それをVersailleバケツとかVersaillesとかいう名前にして、ここで自動を選択し、バケツの作成をクリックするのがいいかもしれません。"
  },
  {
    "start": 3562244,
    "end": 3566596,
    "text": "そうすれば、インターネット上にファイルを捨てられる場所ができる。"
  },
  {
    "start": 3566628,
    "end": 3568152,
    "text": "基本的に、これはグーグル・ドライブのようなものだと考えてほしい。"
  },
  {
    "start": 3568286,
    "end": 3569676,
    "text": "ここにファイルを置くことができる。"
  },
  {
    "start": 3569698,
    "end": 3571560,
    "text": "ご覧の通り、ドラッグ＆ドロップもできる。"
  },
  {
    "start": 3571720,
    "end": 3573144,
    "text": "ドラッグ＆ドロップはしない。"
  },
  {
    "start": 3573192,
    "end": 3583536,
    "text": "これらのファイルをひとつずつ、このバケツにプッシュしていくロジックを、コードを使って書いていく。"
  },
  {
    "start": 3583638,
    "end": 3584464,
    "text": "意味があるのか？"
  },
  {
    "start": 3584502,
    "end": 3585136,
    "text": "もう大丈夫ですか？"
  },
  {
    "start": 3585158,
    "end": 3585756,
    "text": "進めようか？"
  },
  {
    "start": 3585788,
    "end": 3587632,
    "text": "もしこれが人生の授業だったら、私はそう尋ねただろう。"
  },
  {
    "start": 3587686,
    "end": 3588876,
    "text": "そうでなければ、遠慮なく一時停止してほしい。"
  },
  {
    "start": 3588908,
    "end": 3595764,
    "text": "戻って、友人のアカウントを探して、ここで2つの認証情報を取得しよう。"
  },
  {
    "start": 3595802,
    "end": 3597124,
    "text": "この後、もうひとつやらなければならないことがある。"
  },
  {
    "start": 3597162,
    "end": 3597956,
    "text": "それを説明しよう。"
  },
  {
    "start": 3597978,
    "end": 3602676,
    "text": "また、バケツを作成した後、実際にそこにデータを入れるために必要なものがいくつかありますよね？"
  },
  {
    "start": 3602698,
    "end": 3604436,
    "text": "ここにランダムにデータを入れることはできない。"
  },
  {
    "start": 3604458,
    "end": 3605552,
    "text": "秘密が必要だ。"
  },
  {
    "start": 3605616,
    "end": 3610376,
    "text": "パスワードは基本的にここで作成する必要がある。"
  },
  {
    "start": 3610478,
    "end": 3611624,
    "text": "ぜひそうしてほしい。"
  },
  {
    "start": 3611662,
    "end": 3614440,
    "text": "次に、手元に必要なものがいくつかある。"
  },
  {
    "start": 3614510,
    "end": 3616316,
    "text": "私が知っている限りでは、これは公開できると思う。"
  },
  {
    "start": 3616418,
    "end": 3619544,
    "text": "最後に、2つのAPIトークンを管理する。"
  },
  {
    "start": 3619592,
    "end": 3620764,
    "text": "次に必要なのはこれだ。"
  },
  {
    "start": 3620802,
    "end": 3621756,
    "text": "これは重要なことだ。"
  },
  {
    "start": 3621938,
    "end": 3627240,
    "text": "これらのトークンによって、実際にcloudflare内にデータを置くことができる。"
  },
  {
    "start": 3627320,
    "end": 3629960,
    "text": "ここをクリックし、トークンの作成をクリックしてください。"
  },
  {
    "start": 3630040,
    "end": 3632332,
    "text": "管理者や対象は何でもいい。"
  },
  {
    "start": 3632386,
    "end": 3633020,
    "text": "読み書き。"
  },
  {
    "start": 3633090,
    "end": 3634176,
    "text": "オブジェクトの読み書きがうまくいく。"
  },
  {
    "start": 3634198,
    "end": 3635308,
    "text": "管理者権限を与える必要はない。"
  },
  {
    "start": 3635324,
    "end": 3636156,
    "text": "管理者権限を与えるつもりだ。"
  },
  {
    "start": 3636188,
    "end": 3637376,
    "text": "どちらにしてもうまくいかない。"
  },
  {
    "start": 3637558,
    "end": 3638544,
    "text": "どちらにしても機能する。"
  },
  {
    "start": 3638662,
    "end": 3643140,
    "text": "ここは空のままにしておき、APIトークンの作成をクリックする。"
  },
  {
    "start": 3645320,
    "end": 3648032,
    "text": "ご覧の通り、アクセスキーのIDとシークレットが表示された。"
  },
  {
    "start": 3648096,
    "end": 3655636,
    "text": "もちろん、再利用やスパムがないように、ビデオが公開される前にこれを取り消します。"
  },
  {
    "start": 3655818,
    "end": 3658596,
    "text": "これらは手元に置いておかなければならないものだ。"
  },
  {
    "start": 3658628,
    "end": 3660744,
    "text": "私のコードベースにコピーさせてください。"
  },
  {
    "start": 3660782,
    "end": 3665436,
    "text": "何度もこの秘密を手に入れることはできないのだから。"
  },
  {
    "start": 3665458,
    "end": 3690948,
    "text": "このアクセス・キー、シークレット、3番目のURLをコピーして、コード・ベースのどこかに置いておくと便利だ。"
  },
  {
    "start": 3691034,
    "end": 3691604,
    "text": "もう十分だ。"
  },
  {
    "start": 3691642,
    "end": 3692404,
    "text": "それだけで十分だ。"
  },
  {
    "start": 3692442,
    "end": 3700996,
    "text": "このGUIで必要なことはすべてできるし、AWS上でも同じような手順を踏むことができる。"
  },
  {
    "start": 3701098,
    "end": 3701972,
    "text": "S3に進む。"
  },
  {
    "start": 3702026,
    "end": 3709892,
    "text": "バケットを作成し、そのバケット用のクレデンシャルを作成し、そのバケットだけにアクセスできるクレデンシャルを作成し、コードベースのどこかに置く。"
  },
  {
    "start": 3709956,
    "end": 3716104,
    "text": "最終的には、これらの認証情報を使ってs threeまたはCloudflareにデータを置くことができるようになるだろう。"
  },
  {
    "start": 3716152,
    "end": 3724732,
    "text": "次のステップに進もう。s3で指定されたパスにファイルをアップロードする関数を書こう。"
  },
  {
    "start": 3724786,
    "end": 3725292,
    "text": "これは重要なことだ。"
  },
  {
    "start": 3725346,
    "end": 3729384,
    "text": "ここまで書けば、あとはご覧のように、次のステップですべてのファイルを反復処理するだけだ。"
  },
  {
    "start": 3729432,
    "end": 3734352,
    "text": "ファイルをアップロードする関数を書いてください。"
  },
  {
    "start": 3734406,
    "end": 3739024,
    "text": "ファイルのパスはすでにたくさんあるので、実際にアップロードする関数を書く必要がある。"
  },
  {
    "start": 3739062,
    "end": 3740150,
    "text": "次はそうしよう。"
  },
  {
    "start": 3741080,
    "end": 3753588,
    "text": "さて、このセクションは何を期待しているかというと、ファイル名を入力として、ファイルのローカルパスを入力として受け取るupload fileという関数を作ることを期待している。"
  },
  {
    "start": 3753684,
    "end": 3762424,
    "text": "このファイル名でAWSまたはCloudflareにローカルファイルをアップロードするロジックを記述する必要がある。"
  },
  {
    "start": 3762542,
    "end": 3767240,
    "text": "ファイル名を見ると、src app jsxだけではない。"
  },
  {
    "start": 3767400,
    "end": 3773676,
    "text": "入力ファイル名は、最終ファイルを保存する完全なパスで指定する。"
  },
  {
    "start": 3773858,
    "end": 3778892,
    "text": "ファイルがローカルに存在するからといって、それをS3に保存する必要はない。"
  },
  {
    "start": 3778946,
    "end": 3779724,
    "text": "ここにもいるよね？"
  },
  {
    "start": 3779762,
    "end": 3781724,
    "text": "S threeではディレクトリ構造も作成できる。"
  },
  {
    "start": 3781772,
    "end": 3790352,
    "text": "ここでCloudflareを開くと、ここにオブジェクトをアップロードすることができ、すべてのオブジェクトをルートフォルダに入れることもできるし、Google Driveのようにサブフォルダを作ることもできる。"
  },
  {
    "start": 3790406,
    "end": 3790576,
    "text": "そうだろう？"
  },
  {
    "start": 3790598,
    "end": 3795520,
    "text": "グーグル・ドライブでは、フォルダを作成し、その中に別のフォルダを作成してファイルを置くことができる。"
  },
  {
    "start": 3795680,
    "end": 3802320,
    "text": "プロジェクトがあるとき、ウェブサイトに何かをアップロードするユーザーがいるとき、そのひとつひとつを別々に構造化したい。"
  },
  {
    "start": 3802400,
    "end": 3813512,
    "text": "この特定のプロジェクトのすべてのファイルは、出力1231、またはそのプロジェクトのID、ファイル名、またはファイル名が何であれ、出力されます。"
  },
  {
    "start": 3813646,
    "end": 3816856,
    "text": "の場合、2番目の引数はローカルファイルのパスである。"
  },
  {
    "start": 3816888,
    "end": 3821384,
    "text": "ケハ、この特定のファイルはどこにあるんだ？"
  },
  {
    "start": 3821432,
    "end": 3822920,
    "text": "アップロードしたいもの"
  },
  {
    "start": 3823000,
    "end": 3826456,
    "text": "よし、この2つが与えられたら、実際にファイルをアップロードする関数を書かなければならない。"
  },
  {
    "start": 3826488,
    "end": 3883730,
    "text": "次に書くことはそれほど難しくなかった。"
  },
  {
    "start": 3883920,
    "end": 3891362,
    "text": "私がしなければならなかったのは、まずs threeオブジェクトを初期化することだった。"
  },
  {
    "start": 3891416,
    "end": 3892322,
    "text": "これはどこから来たのか？"
  },
  {
    "start": 3892376,
    "end": 3895262,
    "text": "これはAWS SDKから来ている。"
  },
  {
    "start": 3895406,
    "end": 3900002,
    "text": "名前そのものがSDKソフトウェア開発キットと書いてある。"
  },
  {
    "start": 3900146,
    "end": 3905938,
    "text": "このモジュール・パッケージ・ライブラリを使えば、AWSの様々な機能を使うことができる。"
  },
  {
    "start": 3906034,
    "end": 3908582,
    "text": "今日使っているのはS3だ。"
  },
  {
    "start": 3908636,
    "end": 3909894,
    "text": "これで何ができる？"
  },
  {
    "start": 3909932,
    "end": 3913110,
    "text": "これにより、s threeバケツの中にファイルを置くことができる。"
  },
  {
    "start": 3913270,
    "end": 3924358,
    "text": "まず、アクセスキー、id、secret、endpointの3つをバケットに与えて初期化する。"
  },
  {
    "start": 3924454,
    "end": 3930858,
    "text": "AWSで同じことをする場合、S3では、デフォルトで正しいエンドポイントをヒットするので、エンドポイントは必要ない。"
  },
  {
    "start": 3930954,
    "end": 3936190,
    "text": "必要なのはアクセスキーと、特定の3つのバケツにアクセスできるシークレットだけだ。"
  },
  {
    "start": 3936530,
    "end": 3937674,
    "text": "これで十分だ。"
  },
  {
    "start": 3937732,
    "end": 3941566,
    "text": "このバケツには、データをバケツに入れるためのすべての権限が与えられています。"
  },
  {
    "start": 3941678,
    "end": 3950726,
    "text": "このパーミッションがあるとして、アップロードファイル関数の中で何をすればいいのか。"
  },
  {
    "start": 3950748,
    "end": 3953526,
    "text": "この場合、ローカルファイルのパスは重要ではなかった。"
  },
  {
    "start": 3953548,
    "end": 3971142,
    "text": "そう、このローカル・ファイルのパスが与えられたら、その内容をすべて読み込む必要がある。"
  },
  {
    "start": 3971286,
    "end": 3976166,
    "text": "これがあれば、S3アップロードを行い、引数がそれを期待する。"
  },
  {
    "start": 3976208,
    "end": 3978574,
    "text": "あなたが置きたいボディとは何ですか？"
  },
  {
    "start": 3978772,
    "end": 3980446,
    "text": "どのバケツに入れる？"
  },
  {
    "start": 3980468,
    "end": 3982730,
    "text": "私たちの場合はversaillバケツを作った。"
  },
  {
    "start": 3982890,
    "end": 3990354,
    "text": "最後に、バケツに入れる場所のキーと、バケツに入れる場所の相対パスを教えてください。"
  },
  {
    "start": 3990552,
    "end": 3993186,
    "text": "なぜローカルファイルのパスをここに書かなかったのか？"
  },
  {
    "start": 3993288,
    "end": 4003266,
    "text": "Versailleにローカルファイルのパスを入れると、Herkirath SinghやVerselonなどのユーザーに保存される。"
  },
  {
    "start": 4003298,
    "end": 4004070,
    "text": "そんなことは望んでいない。"
  },
  {
    "start": 4004140,
    "end": 4013014,
    "text": "ここでは少しすっきりしたディレクトリ構造にしたいので、2つの引数を用意している。"
  },
  {
    "start": 4013062,
    "end": 4015690,
    "text": "鍵は何なのか、どこに保管するのか。"
  },
  {
    "start": 4015760,
    "end": 4024540,
    "text": "よりクリーンな場所で、単純に1、2、3のソースアプリJsXを出力し、プロジェクトIDが変われば、この特定のものも変わるだろう。"
  },
  {
    "start": 4024850,
    "end": 4026640,
    "text": "この機能に必要なのはそれだけだ。"
  },
  {
    "start": 4027970,
    "end": 4029758,
    "text": "ここにドットの約束を追加した。"
  },
  {
    "start": 4029844,
    "end": 4032186,
    "text": "これは関数をプロミス化する新しい方法だ。"
  },
  {
    "start": 4032218,
    "end": 4032794,
    "text": "約束とは何か？"
  },
  {
    "start": 4032842,
    "end": 4039780,
    "text": "このビデオの範囲外だが、ご存知の方のために説明すると、この関数呼び出しをプロミス化することで、awaitできるようになる。"
  },
  {
    "start": 4040310,
    "end": 4046362,
    "text": "これが実際に機能することを私が知っている方法は、ご覧の通り、現在私のヴェルサイユのバケツは空っぽなのだ。"
  },
  {
    "start": 4046526,
    "end": 4054438,
    "text": "この関数を呼び出すのは、とりあえずトップのインデックスtsの内部をテストするためだ。"
  },
  {
    "start": 4054524,
    "end": 4058790,
    "text": "インポートの直後に基本的な関数を呼び出す。"
  },
  {
    "start": 4058860,
    "end": 4061894,
    "text": "このアップロード機能が機能するかどうかを確認するためだ。"
  },
  {
    "start": 4062012,
    "end": 4068486,
    "text": "古いビルドで生成されたランダムなファイルを入力すると、ディスクの出力に現れる。"
  },
  {
    "start": 4068518,
    "end": 4071770,
    "text": "何度も走らせているので、今はたくさん持っている。"
  },
  {
    "start": 4071920,
    "end": 4081978,
    "text": "ここに適当なファイルを取ってきて、適当なパスを置いて、Herkirath a jsonとかpackage Jsonとか、好きなものを置けばいい。"
  },
  {
    "start": 4082074,
    "end": 4084506,
    "text": "それが、私が保存したいパスだ。"
  },
  {
    "start": 4084618,
    "end": 4086718,
    "text": "これはファイルのローカルパスである。"
  },
  {
    "start": 4086814,
    "end": 4098254,
    "text": "これを保存して実行しようとすると、やはりコマンドは同じで、tsc bで実際にコンパイルするか、npxt bでnode index jsを実行する。"
  },
  {
    "start": 4098382,
    "end": 4102706,
    "text": "このアップロードファイルを待つと、ご覧の通り、ついに成功する。"
  },
  {
    "start": 4102738,
    "end": 4104598,
    "text": "いいログを残してくれる。"
  },
  {
    "start": 4104684,
    "end": 4112534,
    "text": "ダッシュボードに行って更新すれば、彼女のパッケージJSonがここにあることがわかる。"
  },
  {
    "start": 4112652,
    "end": 4118986,
    "text": "Herkirath package json......入力したパスは、Google Driveのようなものですね？"
  },
  {
    "start": 4119008,
    "end": 4120186,
    "text": "アップロードしているだけだ。"
  },
  {
    "start": 4120288,
    "end": 4127166,
    "text": "UIを通してアップロードするのではなく、コードを通してライブラリ経由でアップロードする。"
  },
  {
    "start": 4127188,
    "end": 4131470,
    "text": "プロジェクトのクローンを作成し、すべてのファイルを3つにまとめたい。"
  },
  {
    "start": 4131540,
    "end": 4133550,
    "text": "そのためのワイヤーフレームがある。"
  },
  {
    "start": 4133620,
    "end": 4136494,
    "text": "あとは実際にここにデータを置くだけだ。"
  },
  {
    "start": 4136532,
    "end": 4138706,
    "text": "次のステップで配線しよう。"
  },
  {
    "start": 4138808,
    "end": 4144146,
    "text": "この次のステップを見ると、すべてのファイルを繰り返し、S3にアップロードしている。"
  },
  {
    "start": 4144168,
    "end": 4144946,
    "text": "一人ずつだ。"
  },
  {
    "start": 4145048,
    "end": 4146018,
    "text": "あるいは一緒に。"
  },
  {
    "start": 4146184,
    "end": 4148786,
    "text": "最適な方法と、少し最適でない方法がある。"
  },
  {
    "start": 4148808,
    "end": 4150990,
    "text": "一番簡単なものを見て、それをやる。"
  },
  {
    "start": 4151080,
    "end": 4152102,
    "text": "これが次のステップだ。"
  },
  {
    "start": 4152156,
    "end": 4153880,
    "text": "ぜひ自分で試してみてほしい。"
  },
  {
    "start": 4154330,
    "end": 4155606,
    "text": "もう全部持っているんだろう？"
  },
  {
    "start": 4155628,
    "end": 4157254,
    "text": "ファイルのアップロード機能があります。"
  },
  {
    "start": 4157452,
    "end": 4159142,
    "text": "その論拠はわかっているはずだ。"
  },
  {
    "start": 4159276,
    "end": 4162330,
    "text": "アップロードに必要なファイルはすべて揃っている。"
  },
  {
    "start": 4162910,
    "end": 4168042,
    "text": "この機能を使って、すべてのファイルを1つずつ3つ上にアップロードする方法は？"
  },
  {
    "start": 4168176,
    "end": 4168954,
    "text": "考えてみてほしい。"
  },
  {
    "start": 4168992,
    "end": 4170090,
    "text": "自分でコーディングするつもりだ。"
  },
  {
    "start": 4170160,
    "end": 4183600,
    "text": "ここで私はそれができた。"
  },
  {
    "start": 4183670,
    "end": 4185536,
    "text": "あなたにもそれができたと思う。"
  },
  {
    "start": 4185638,
    "end": 4186608,
    "text": "私が何をしたかって？"
  },
  {
    "start": 4186694,
    "end": 4188744,
    "text": "すべてのファイルを繰り返しチェックした。"
  },
  {
    "start": 4188812,
    "end": 4192656,
    "text": "アップデートのたびにファイルを作った。"
  },
  {
    "start": 4192768,
    "end": 4193856,
    "text": "ファイルをアップロードする。"
  },
  {
    "start": 4193968,
    "end": 4194788,
    "text": "これは重要なことだ。"
  },
  {
    "start": 4194874,
    "end": 4198896,
    "text": "ローカルファイルのパスにどのような引数を与えていますか？"
  },
  {
    "start": 4198928,
    "end": 4199584,
    "text": "簡単なことだ。"
  },
  {
    "start": 4199632,
    "end": 4201216,
    "text": "最終的なファイルパスだ。"
  },
  {
    "start": 4201248,
    "end": 4204896,
    "text": "覚えているだろうか、私たちが記録していたのはファイルへの完全なパスだった。"
  },
  {
    "start": 4204928,
    "end": 4207272,
    "text": "スラッシュ、ユーザーキラ、全部だ。"
  },
  {
    "start": 4207406,
    "end": 4209060,
    "text": "最初の引数は何にすべきか？"
  },
  {
    "start": 4209140,
    "end": 4211284,
    "text": "最初の引数はどうやって見つけるのですか？"
  },
  {
    "start": 4211332,
    "end": 4237168,
    "text": "ユーザーが123123 app jsを出力しているとして、どうやって最後の部分だけを取り出すんだ？"
  },
  {
    "start": 4237254,
    "end": 4238432,
    "text": "いくつかの方法が考えられる。"
  },
  {
    "start": 4238486,
    "end": 4240624,
    "text": "スラッシュで分割して最後の部分を見つけることができる。"
  },
  {
    "start": 4240662,
    "end": 4243300,
    "text": "出力には10通りの方法がある。"
  },
  {
    "start": 4243370,
    "end": 4249312,
    "text": "私がやったのはファイル・スライスで、これは文字列に対して実行できる関数だ。"
  },
  {
    "start": 4249456,
    "end": 4257828,
    "text": "これはファイル・スライスであり、この文字列から最初の何文字かを削除することを意味する。"
  },
  {
    "start": 4257924,
    "end": 4263224,
    "text": "これらの多くのアンダースコア アンダースコア ディレクトリ名 アンダースコア アンダースコア ディレクトリ名とは何ですか。"
  },
  {
    "start": 4263342,
    "end": 4265336,
    "text": "このことだ。"
  },
  {
    "start": 4265438,
    "end": 4274204,
    "text": "つまり、アンダースコアのアンダースコアの長さは、この長さに1を足した長さであり、このスラッシュの長さでもある。"
  },
  {
    "start": 4274322,
    "end": 4284172,
    "text": "ファイル全体をドット・スライスすると、この部分、つまり最初からこのスラッシュまでのすべてがスライスされる。"
  },
  {
    "start": 4284236,
    "end": 4285056,
    "text": "それなら、もう大丈夫だ。"
  },
  {
    "start": 4285078,
    "end": 4286176,
    "text": "それこそ私がやったことだ。"
  },
  {
    "start": 4286198,
    "end": 4291010,
    "text": "dirnameの長さをアンダースコアにする。"
  },
  {
    "start": 4291940,
    "end": 4298564,
    "text": "スラッシュも取り除きたいので、ディレクトリの文字数に1を足した長さになる。"
  },
  {
    "start": 4298682,
    "end": 4299604,
    "text": "それでどうなる？"
  },
  {
    "start": 4299642,
    "end": 4302948,
    "text": "この長さのファイルスライスで何ができるのか？"
  },
  {
    "start": 4303114,
    "end": 4309524,
    "text": "そうすれば、最終ファイルを保存するパスが非常にきれいに切り詰められた形で出力される。"
  },
  {
    "start": 4309572,
    "end": 4312920,
    "text": "これが圧倒的だと感じたら、スライス機能で遊んでみてほしい。"
  },
  {
    "start": 4313070,
    "end": 4314810,
    "text": "ここでコンソールを開いてみよう。"
  },
  {
    "start": 4315900,
    "end": 4320444,
    "text": "x は 12345 x ドットスライス1に等しい。"
  },
  {
    "start": 4320562,
    "end": 4321324,
    "text": "これは何をするものなのか？"
  },
  {
    "start": 4321362,
    "end": 4322664,
    "text": "最初の文字を削除する。"
  },
  {
    "start": 4322712,
    "end": 4324412,
    "text": "Xドットスライス3をやらせてくれ。"
  },
  {
    "start": 4324546,
    "end": 4325548,
    "text": "これは何をするものなのか？"
  },
  {
    "start": 4325634,
    "end": 4327240,
    "text": "最初の3文字を削除する。"
  },
  {
    "start": 4327320,
    "end": 4333824,
    "text": "x dot slice どんな引数を与えても、その文字列からできるだけ多くの文字を削除する。"
  },
  {
    "start": 4333942,
    "end": 4338080,
    "text": "ファイル・スライス アンダースコア アンダースコア dirname 長さに1を足したもの。"
  },
  {
    "start": 4338150,
    "end": 4340748,
    "text": "その、ディレクトリ名の長さは？"
  },
  {
    "start": 4340844,
    "end": 4342644,
    "text": "ここからここまでのすべての登場人物。"
  },
  {
    "start": 4342682,
    "end": 4345764,
    "text": "それがこの20歳以上の121人だ。"
  },
  {
    "start": 4345802,
    "end": 4350656,
    "text": "最初の21文字を削除すると、このようなきれいな出力になる。"
  },
  {
    "start": 4350768,
    "end": 4351700,
    "text": "それだけで十分だ。"
  },
  {
    "start": 4351770,
    "end": 4353140,
    "text": "いろいろなやり方がある。"
  },
  {
    "start": 4353210,
    "end": 4357060,
    "text": "ただ、最初の引数がクリーンな引数であることを確認する必要がある。"
  },
  {
    "start": 4357140,
    "end": 4360724,
    "text": "第2引数はローカル・パスで、ファイルの実際のパスである。"
  },
  {
    "start": 4360852,
    "end": 4367740,
    "text": "これができたとして、実際に試してみたい場合は、うまくいくかどうか、プロジェクトを再コンパイルし、再実行する。"
  },
  {
    "start": 4367810,
    "end": 4376840,
    "text": "つまり、文字通りこのデプロイ・エンドポイントを呼び出せば、うまくいくはずだ。"
  },
  {
    "start": 4376920,
    "end": 4380156,
    "text": "Postmanにアクセスしてエンドポイントを叩く。"
  },
  {
    "start": 4380268,
    "end": 4384652,
    "text": "私の場合のログを見てください。見ての通り、アップロードログの束です。"
  },
  {
    "start": 4384716,
    "end": 4389808,
    "text": "というのも、私のファイルアップロード機能では、最後にレスポンスのログが記録されるからだ。"
  },
  {
    "start": 4389894,
    "end": 4393536,
    "text": "アップロードのログが大量に表示されているが、これはおそらく期待通りに動いているということだろう。"
  },
  {
    "start": 4393728,
    "end": 4395764,
    "text": "行ってみたら、どんな反応が返ってきた？"
  },
  {
    "start": 4395802,
    "end": 4397984,
    "text": "ウムヒュルだ。"
  },
  {
    "start": 4398112,
    "end": 4402192,
    "text": "これが僕の現在のビルドのIDだ。"
  },
  {
    "start": 4402256,
    "end": 4411028,
    "text": "VersaillにアクセスしてVersailleのバケットをリフレッシュするか、あるいはcloudflareにアクセスしてVersaillのバケットをリフレッシュしてください。"
  },
  {
    "start": 4411124,
    "end": 4412360,
    "text": "内部出力。"
  },
  {
    "start": 4412860,
    "end": 4418248,
    "text": "私のUMHLJは、基本的に私のコードが期待通りに機能していることを意味する。"
  },
  {
    "start": 4418344,
    "end": 4426220,
    "text": "文字通り、あるユーザーからレポのURLを受け取り、それを自分のマシンにクローンし、オブジェクトストアに置くことができた。"
  },
  {
    "start": 4426290,
    "end": 4431136,
    "text": "私が選んだオブジェクトストアはCloudflareだったが、同じコードを使って3つのストアにアップロードすることもできる。"
  },
  {
    "start": 4431238,
    "end": 4432496,
    "text": "本当に何も変わらない。"
  },
  {
    "start": 4432678,
    "end": 4439792,
    "text": "s threeオブジェクトを初期化した場所に、適切な認証情報を入れればうまくいくだろう。"
  },
  {
    "start": 4439846,
    "end": 4442708,
    "text": "ここにs threeの認証情報を入れると、s threeにアップロードされる。"
  },
  {
    "start": 4442794,
    "end": 4446336,
    "text": "Cloudflareの認証情報を取得し、Cloudflareにアップロードした。"
  },
  {
    "start": 4446528,
    "end": 4448308,
    "text": "これで終わりということか？"
  },
  {
    "start": 4448474,
    "end": 4450340,
    "text": "私たちはほとんど、何でもやったように見える。"
  },
  {
    "start": 4450410,
    "end": 4457880,
    "text": "アーキテクチャ図を覚えているなら、ビデオのどこかに書いておくが、まずローカルにレポをクローンし、それをs threeに置くと言った。"
  },
  {
    "start": 4457950,
    "end": 4459370,
    "text": "次のステップは？"
  },
  {
    "start": 4459980,
    "end": 4462740,
    "text": "キューに入れるためだ。"
  },
  {
    "start": 4462900,
    "end": 4469672,
    "text": "生成したこのIDを使って、デプロイメント・サービスのKibaiに、私はファイルのローカルコピーを持っていると伝える必要がある。"
  },
  {
    "start": 4469736,
    "end": 4473132,
    "text": "今こそ、それを実際に配備し、実際に構築するときなのだ。"
  },
  {
    "start": 4473186,
    "end": 4475144,
    "text": "これをキューに入れる必要がある。"
  },
  {
    "start": 4475272,
    "end": 4476904,
    "text": "ヴェルサイユが使用したキューは？"
  },
  {
    "start": 4476952,
    "end": 4478408,
    "text": "彼らはスクエニを使っている。"
  },
  {
    "start": 4478584,
    "end": 4480220,
    "text": "使用しているキューは何ですか？"
  },
  {
    "start": 4480290,
    "end": 4482172,
    "text": "覚えているだろうか、redisを使っていると言ったはずだ。"
  },
  {
    "start": 4482236,
    "end": 4483676,
    "text": "ここではredisを使用する。"
  },
  {
    "start": 4483708,
    "end": 4485292,
    "text": "また、基本的にキューを作成することもできる。"
  },
  {
    "start": 4485436,
    "end": 4489052,
    "text": "キューにプッシュしたり、キューからポップしたりする、非常によく似たシンプルなAPIだ。"
  },
  {
    "start": 4489116,
    "end": 4490336,
    "text": "それを使うつもりだ。"
  },
  {
    "start": 4490438,
    "end": 4493156,
    "text": "SNSを使うことは可能だが、そのためにはAWSのアカウントが必要だ。"
  },
  {
    "start": 4493178,
    "end": 4500320,
    "text": "AWSアカウントを持っていれば、非常にシンプルなAPIでsqsを使用し、SQSキューに入れることができる。"
  },
  {
    "start": 4500480,
    "end": 4502180,
    "text": "そうでない場合は、RabbitMQが機能する。"
  },
  {
    "start": 4502250,
    "end": 4503124,
    "text": "Redisのキューは機能する。"
  },
  {
    "start": 4503162,
    "end": 4504624,
    "text": "ここではredisキューを使用する。"
  },
  {
    "start": 4504672,
    "end": 4518430,
    "text": "これからコードを書いていこうと思うんだけど、これが全部終わって、idにアクセスできるようになったとして、それをどうやってキューにプッシュして、別のノードJSプロセスがそのキューを引き出して、ファイルを1つずつデプロイし始めることができるようにするんだ。"
  },
  {
    "start": 4536830,
    "end": 4541674,
    "text": "よし、次の3つのステップ、あるいは4つのステップを合わせてみた。"
  },
  {
    "start": 4541792,
    "end": 4545994,
    "text": "次にしなければならないことは、基本的にキューが必要だということですね。"
  },
  {
    "start": 4546032,
    "end": 4550234,
    "text": "このノードJSプロセスの一部ではない、永続的なキュー。"
  },
  {
    "start": 4550272,
    "end": 4551840,
    "text": "別の場所に存在しているだけだ。"
  },
  {
    "start": 4552290,
    "end": 4554186,
    "text": "キューを作る方法はたくさんある。"
  },
  {
    "start": 4554218,
    "end": 4555194,
    "text": "sqsを使うことができる。"
  },
  {
    "start": 4555242,
    "end": 4555962,
    "text": "redisを使っています。"
  },
  {
    "start": 4556026,
    "end": 4559546,
    "text": "まず最初にしなければならないのは、redisをローカルで起動することだ。"
  },
  {
    "start": 4559738,
    "end": 4562882,
    "text": "redisをご存じない方は、redisを使えば10種類のことができます。"
  },
  {
    "start": 4563016,
    "end": 4570180,
    "text": "今日使っているredisの特定のサービスはキューで、基本的にはノードJSのプロセスがあればいい。"
  },
  {
    "start": 4572170,
    "end": 4577314,
    "text": "そのノードJsプロセスは、実際に何かをredisキューにプッシュすることができる。"
  },
  {
    "start": 4577362,
    "end": 4593094,
    "text": "ローカルでredisを起動すれば、l pushやr pushといったコマンドを実行することができる。"
  },
  {
    "start": 4593222,
    "end": 4602394,
    "text": "例えば、私が \"1 \"をプッシュしたとしよう。"
  },
  {
    "start": 4602522,
    "end": 4613306,
    "text": "その後、別のnode jsプロセス（デプロイする側のnode jsプロセスかもしれないし、パブリッシャーかもしれない）が、この特定のredisキューからポップできる。"
  },
  {
    "start": 4613338,
    "end": 4616114,
    "text": "を走らせることができますが、何を走らせるべきだと思いますか？"
  },
  {
    "start": 4616152,
    "end": 4617938,
    "text": "RポップかLポップか？"
  },
  {
    "start": 4618024,
    "end": 4618910,
    "text": "Lプッシュとは？"
  },
  {
    "start": 4618990,
    "end": 4619682,
    "text": "左に押す。"
  },
  {
    "start": 4619736,
    "end": 4620766,
    "text": "Rプッシュとは？"
  },
  {
    "start": 4620878,
    "end": 4622430,
    "text": "列の右側を押す。"
  },
  {
    "start": 4622590,
    "end": 4624354,
    "text": "おそらく、先着順を望んでいるのだろう。"
  },
  {
    "start": 4624392,
    "end": 4627014,
    "text": "もし、あるプロジェクトが最初にここに押し込まれたのであれば、それを最初に引っ張り出したい。"
  },
  {
    "start": 4627052,
    "end": 4630038,
    "text": "左からプッシュするなら、どこから飛び出すべきか？"
  },
  {
    "start": 4630124,
    "end": 4630806,
    "text": "おそらく右からだろう。"
  },
  {
    "start": 4630828,
    "end": 4632166,
    "text": "私はここで正しいと思う。"
  },
  {
    "start": 4632268,
    "end": 4634934,
    "text": "左に押し、右から弾く。"
  },
  {
    "start": 4634972,
    "end": 4639882,
    "text": "キューが埋まっていくと、最初に入ったものが最初に出ていく。"
  },
  {
    "start": 4640016,
    "end": 4649278,
    "text": "パブリッシャーはこの特定のIDを取得することができ、ここで1つ押すと、1つ返ってくる。"
  },
  {
    "start": 4649364,
    "end": 4650942,
    "text": "どうすればいいんだ？"
  },
  {
    "start": 4650996,
    "end": 4653710,
    "text": "その1、redisをローカルで起動する。"
  },
  {
    "start": 4654210,
    "end": 4657610,
    "text": "その2、redisパブリッシャーを初期化する。"
  },
  {
    "start": 4657690,
    "end": 4671442,
    "text": "もしnode JSで、キュー内にプッシュを始めたいのであれば、const publisher equal to create clientで、create clientがRedisから来て、publisher connectをすればいい。"
  },
  {
    "start": 4671496,
    "end": 4676546,
    "text": "パブリッシャーを初期化するには、基本的にこの3行のコードが必要です。"
  },
  {
    "start": 4676658,
    "end": 4680440,
    "text": "redisにパブリッシュできるもの。"
  },
  {
    "start": 4680810,
    "end": 4683074,
    "text": "redisにはいろいろなものを入れることができる。"
  },
  {
    "start": 4683122,
    "end": 4684422,
    "text": "今はキューを使っているだけだ。"
  },
  {
    "start": 4684476,
    "end": 4686326,
    "text": "この出版社をどこで使うのか？"
  },
  {
    "start": 4686438,
    "end": 4692186,
    "text": "ここを一番下までスクロールすると、すべてのファイルがs threeにアップロードされた後、すべてが完了する。"
  },
  {
    "start": 4692288,
    "end": 4697146,
    "text": "私はパブリッシャーlプッシュビルドqコンマIDを行う。"
  },
  {
    "start": 4697248,
    "end": 4701134,
    "text": "これは新しいキューで、いくつかのことを推し進めようとしているんだ。"
  },
  {
    "start": 4701172,
    "end": 4702474,
    "text": "私が押したものは何ですか？"
  },
  {
    "start": 4702522,
    "end": 4710466,
    "text": "私はただ、他のサービスがケータイを選べるようにIDをプッシュするだけで、このIDは完了し、クローンは作成され、S3にアップロードされる。"
  },
  {
    "start": 4710568,
    "end": 4712862,
    "text": "引き出して実際に展開することもできる。"
  },
  {
    "start": 4713006,
    "end": 4715138,
    "text": "これが実際に機能していることをどうやって確認するのですか？"
  },
  {
    "start": 4715304,
    "end": 4717410,
    "text": "このプロジェクトはローカルで始めることができる。"
  },
  {
    "start": 4724310,
    "end": 4727650,
    "text": "ポストマンに行って、いくつかのリクエストを送ることができる。"
  },
  {
    "start": 4728870,
    "end": 4738830,
    "text": "もし正常に動作していれば、パブリッシャーのlpushedが呼ばれたはずである。"
  },
  {
    "start": 4738990,
    "end": 4741906,
    "text": "このキューの長さを確認するにはどうすればいいのか？"
  },
  {
    "start": 4741938,
    "end": 4744450,
    "text": "何がキューに入れられたかをどうやって知るのか？"
  },
  {
    "start": 4744530,
    "end": 4749958,
    "text": "答えは、Redis cliを使う方法がいくつかあり、それが一番簡単な方法だ。"
  },
  {
    "start": 4750124,
    "end": 4763478,
    "text": "redisをローカルで起動した場合、起動方法はいくつかあるが、最も生々しい方法で起動したのであれば、redisをインストールした場所（私の場合はproject redis tablesource）で実行できる。"
  },
  {
    "start": 4763574,
    "end": 4767642,
    "text": "ここではRedis cliを実行できる。"
  },
  {
    "start": 4767776,
    "end": 4768554,
    "text": "なんて書いてある？"
  },
  {
    "start": 4768592,
    "end": 4773234,
    "text": "Redis cliコマンドラインインターフェイスでredisとやり取りする。"
  },
  {
    "start": 4773272,
    "end": 4776322,
    "text": "ここで実行できるコマンドは何でも実行できる。"
  },
  {
    "start": 4776376,
    "end": 4778622,
    "text": "ここならLプッシュかRプッシュができる。"
  },
  {
    "start": 4778766,
    "end": 4780866,
    "text": "ここでもLプッシュやRプッシュができるんだ。"
  },
  {
    "start": 4780888,
    "end": 4790866,
    "text": "ポップもできるし、それこそここでRポップビルドQをすれば、Q7不発弾を返してくれる。"
  },
  {
    "start": 4791058,
    "end": 4793538,
    "text": "これはまさに『ポストマン』で得たものなのだろうか？"
  },
  {
    "start": 4793634,
    "end": 4794230,
    "text": "そうだ。"
  },
  {
    "start": 4794380,
    "end": 4795558,
    "text": "それで何がわかる？"
  },
  {
    "start": 4795644,
    "end": 4796546,
    "text": "キバイ？"
  },
  {
    "start": 4796658,
    "end": 4803510,
    "text": "この関数が実行されているときはいつでも、プロジェクトは実際にgitでローカルマシンにクローンされる。"
  },
  {
    "start": 4803590,
    "end": 4808746,
    "text": "そして最後に、redisキューにパブリッシュされる。"
  },
  {
    "start": 4808848,
    "end": 4812282,
    "text": "他の誰かが、別のプロセスで実際にそれを弾き飛ばすことができる。"
  },
  {
    "start": 4812416,
    "end": 4814766,
    "text": "弾き飛ばすことができたかどうかは、どうすれば確認できるのだろう。"
  },
  {
    "start": 4814868,
    "end": 4816814,
    "text": "私はここで別のプロセスを始めた。"
  },
  {
    "start": 4816852,
    "end": 4829634,
    "text": "redisのcliを起動し、キューからものを取り出せるようになった。つまり、このキューからものを取り出して処理する2番目のサービスのコードを書き始めることができる。"
  },
  {
    "start": 4829672,
    "end": 4832062,
    "text": "よし、わかりやすかったかな。"
  },
  {
    "start": 4832206,
    "end": 4834098,
    "text": "そうではないかもしれないが、コードを書いてみよう。"
  },
  {
    "start": 4834184,
    "end": 4836018,
    "text": "ここには何も残っていないと思う。"
  },
  {
    "start": 4836184,
    "end": 4837562,
    "text": "redisキューを使う。"
  },
  {
    "start": 4837726,
    "end": 4839110,
    "text": "ここにはもう2つある。"
  },
  {
    "start": 4839180,
    "end": 4841446,
    "text": "それはまた後で。"
  },
  {
    "start": 4841468,
    "end": 4843000,
    "text": "今すぐにでもできる。"
  },
  {
    "start": 4844890,
    "end": 4846854,
    "text": "それは後ほど。"
  },
  {
    "start": 4846892,
    "end": 4849414,
    "text": "よし、この点もこの点も無視して構わない。"
  },
  {
    "start": 4849452,
    "end": 4851866,
    "text": "フロントエンドに到達する頃には、いずれ必要になるだろう。"
  },
  {
    "start": 4851968,
    "end": 4853466,
    "text": "今のところはまったく問題ない。"
  },
  {
    "start": 4853568,
    "end": 4855098,
    "text": "この2点は無視して構わない。"
  },
  {
    "start": 4855184,
    "end": 4856602,
    "text": "我々は素晴らしい出発点を得た。"
  },
  {
    "start": 4856656,
    "end": 4859418,
    "text": "アップロードサービスを作りました。"
  },
  {
    "start": 4859584,
    "end": 4862380,
    "text": "次に、デプロイメント・サービスを作成しよう。"
  },
  {
    "start": 4862830,
    "end": 4864626,
    "text": "よし、状況を整理しよう。"
  },
  {
    "start": 4864678,
    "end": 4866030,
    "text": "さて、我々は何をしたのか？"
  },
  {
    "start": 4866100,
    "end": 4867262,
    "text": "最初の部分は終わった。"
  },
  {
    "start": 4867316,
    "end": 4869294,
    "text": "アップロードサービスを作りました。"
  },
  {
    "start": 4869412,
    "end": 4870542,
    "text": "どうすればいいんだ？"
  },
  {
    "start": 4870596,
    "end": 4875406,
    "text": "デプロイメント・サービスを作成し、リクエスト・ハンドラ・サービスを作成し、そしてフロントエンドを作成しなければならない。"
  },
  {
    "start": 4875428,
    "end": 4878274,
    "text": "まだ先は長いが、これが一番難しい。"
  },
  {
    "start": 4878392,
    "end": 4880018,
    "text": "他のことはそれほど難しくない。"
  },
  {
    "start": 4880104,
    "end": 4884594,
    "text": "実際には、すでに書いたものからいくつかのコードをコピーできるので、ここからは少しスムーズになるはずだ。"
  },
  {
    "start": 4884632,
    "end": 4889030,
    "text": "あと1時間半もすれば、このプロジェクトは終わるはずだ。"
  },
  {
    "start": 4889180,
    "end": 4895334,
    "text": "次のセクション、デイリーコードの2ページ目に入ろう。"
  },
  {
    "start": 4895372,
    "end": 4901978,
    "text": "もしあなたがウェブサイトを利用していて、最後の2つ以外のすべてのステップを終えているなら、最後の2つについては後で説明しよう。"
  },
  {
    "start": 4902144,
    "end": 4914606,
    "text": "デプロイ・サービスは、実際にプロジェクトをビルドし、キューにあるものをピックアップし、最初に説明したジャズをすべて実行する。"
  },
  {
    "start": 4914708,
    "end": 4916430,
    "text": "トップから気合を入れていこう。"
  },
  {
    "start": 4916500,
    "end": 4918906,
    "text": "少しずつ作り始めよう。"
  },
  {
    "start": 4919098,
    "end": 4931998,
    "text": "ステップ1では、空のタイプスクリプト・プロジェクトを初期化する。"
  },
  {
    "start": 4932094,
    "end": 4939090,
    "text": "npm in it yとnpxte initの2つのコマンドを実行するだけだ。"
  },
  {
    "start": 4939450,
    "end": 4944102,
    "text": "ステップ2では、tsconfig JSonの設定を行う。"
  },
  {
    "start": 4944156,
    "end": 4944534,
    "text": "私にとってはね。"
  },
  {
    "start": 4944572,
    "end": 4947426,
    "text": "繰り返しますが、ルートディレクトリになります。"
  },
  {
    "start": 4947458,
    "end": 4950946,
    "text": "sourceに変更してからoutdirにします。"
  },
  {
    "start": 4950978,
    "end": 4953560,
    "text": "リストに変更するつもりだ。"
  },
  {
    "start": 4955950,
    "end": 4962598,
    "text": "第三段階として、redisキューから値を取り出す無限ループを作成する。"
  },
  {
    "start": 4962694,
    "end": 4963658,
    "text": "これは重要だ。"
  },
  {
    "start": 4963744,
    "end": 4965574,
    "text": "さて、いよいよロジックの本題に入る。"
  },
  {
    "start": 4965622,
    "end": 4968366,
    "text": "何度も繰り返し実行されるforループを作る必要がある。"
  },
  {
    "start": 4968468,
    "end": 4969790,
    "text": "何をする必要があるのか？"
  },
  {
    "start": 4969860,
    "end": 4971994,
    "text": "キューに何か入っているかチェックする必要がある。"
  },
  {
    "start": 4972042,
    "end": 4973954,
    "text": "もしあれば、その値を取得する必要がある。"
  },
  {
    "start": 4974072,
    "end": 4974594,
    "text": "それだけだ。"
  },
  {
    "start": 4974632,
    "end": 4975554,
    "text": "とりあえず値を記録しておく。"
  },
  {
    "start": 4975592,
    "end": 4977490,
    "text": "いずれ、もっといろいろなことができるようになるだろう。"
  },
  {
    "start": 4977560,
    "end": 4979300,
    "text": "とりあえず、その値を記録しておく。"
  },
  {
    "start": 5002920,
    "end": 5006948,
    "text": "さて、いくつかコードを書いてみたが、ここで一点見落としていたことに気づいた。"
  },
  {
    "start": 5007034,
    "end": 5009920,
    "text": "ポイントは、すべての依存関係をインストールすることだ。"
  },
  {
    "start": 5010000,
    "end": 5013108,
    "text": "このコードを書く前にしなければならないことは？"
  },
  {
    "start": 5013194,
    "end": 5016268,
    "text": "NPMからすべての依存関係をインストールする必要がある。"
  },
  {
    "start": 5016384,
    "end": 5024932,
    "text": "その方法はNPM install redis aws SDKで、他の依存関係が必要かどうかはわかりません。"
  },
  {
    "start": 5024996,
    "end": 5028312,
    "text": "今はこの2つで十分だと思う。"
  },
  {
    "start": 5028446,
    "end": 5031032,
    "text": "このコードを書くべきだったのは、これをやった後だ。"
  },
  {
    "start": 5031166,
    "end": 5033630,
    "text": "コードを見ると、何をしているのか？"
  },
  {
    "start": 5034080,
    "end": 5036664,
    "text": "まず加入者を作る。"
  },
  {
    "start": 5036712,
    "end": 5038684,
    "text": "今回は変数名だけが違う。"
  },
  {
    "start": 5038722,
    "end": 5040888,
    "text": "出版社と呼んでも構わない。"
  },
  {
    "start": 5041074,
    "end": 5042128,
    "text": "同じことだ。"
  },
  {
    "start": 5042214,
    "end": 5046610,
    "text": "クライアントとサブスクライバーの接続を作成するには、サブスクライバーがコンスタントでなければならない。"
  },
  {
    "start": 5046980,
    "end": 5052988,
    "text": "そして、無限ループのwhileループを持つmain関数を定義した。"
  },
  {
    "start": 5053164,
    "end": 5055092,
    "text": "この関数もここで呼び出す。"
  },
  {
    "start": 5055226,
    "end": 5056612,
    "text": "whileループは何をするのか？"
  },
  {
    "start": 5056666,
    "end": 5064704,
    "text": "加入者のBrポップ、つまりこのビルドキューから右サイドからのポップを行う。"
  },
  {
    "start": 5064752,
    "end": 5066064,
    "text": "アキラ、この構文は何なんだ？"
  },
  {
    "start": 5066112,
    "end": 5066976,
    "text": "これらの議論は何なのか？"
  },
  {
    "start": 5067008,
    "end": 5068916,
    "text": "なぜ複数の議論があるのか？"
  },
  {
    "start": 5068948,
    "end": 5071144,
    "text": "その答えがこのNPMJsモジュールだ。"
  },
  {
    "start": 5071182,
    "end": 5077816,
    "text": "ドキュメントでr popを検索して、このセクションにたどり着いた。"
  },
  {
    "start": 5077998,
    "end": 5079624,
    "text": "これはおそらく何らかの意味があるのだろう。"
  },
  {
    "start": 5079662,
    "end": 5081884,
    "text": "ゼロにはおそらく何らかの意味があるのだろうが、どこをどう推測すればいいのかわからない。"
  },
  {
    "start": 5081922,
    "end": 5084888,
    "text": "ゼロはおそらく、ここにブロックされていたいということだろう。"
  },
  {
    "start": 5084904,
    "end": 5085704,
    "text": "おそらくタイムアウトだろう。"
  },
  {
    "start": 5085752,
    "end": 5091336,
    "text": "これが10であれ何であれ、10を1000にした場合、おそらくここで10秒間待つことになる。"
  },
  {
    "start": 5091368,
    "end": 5093768,
    "text": "そうしないと、10秒間何も入ってこない。"
  },
  {
    "start": 5093864,
    "end": 5096320,
    "text": "脱走するか、例外をスローするかは分からない。"
  },
  {
    "start": 5096390,
    "end": 5098332,
    "text": "ゼロはおそらく永遠に待つという意味だろう。"
  },
  {
    "start": 5098396,
    "end": 5104016,
    "text": "キューが空の場合、コードは基本的にここで止まったままになる。"
  },
  {
    "start": 5104038,
    "end": 5105632,
    "text": "今、レスを記録しているところだ。"
  },
  {
    "start": 5105686,
    "end": 5112128,
    "text": "これが期待通りに動くかどうか、ローカルで動いているredisから実際に引き出せるかどうかを確かめたい。"
  },
  {
    "start": 5112304,
    "end": 5114304,
    "text": "この時点であなたが抱くかもしれない良い質問は、キルキラスだ。"
  },
  {
    "start": 5114352,
    "end": 5116736,
    "text": "redisの認証情報はどこで入手しましたか？"
  },
  {
    "start": 5116768,
    "end": 5118756,
    "text": "どこでredisをヒットさせたのですか？"
  },
  {
    "start": 5118868,
    "end": 5126212,
    "text": "その答えは、redis subscriber connectはローカルで動作しているため、デフォルトではローカルのredisに接続します。"
  },
  {
    "start": 5126356,
    "end": 5127172,
    "text": "すっかり忘れていたよ。"
  },
  {
    "start": 5127236,
    "end": 5131276,
    "text": "2473だったか、6473だったか、そんなところだ。"
  },
  {
    "start": 5131298,
    "end": 5131916,
    "text": "そんな港もある。"
  },
  {
    "start": 5131938,
    "end": 5139768,
    "text": "ローカルでredisを動かしているのなら、これだけでredisに接続し、データベースと呼び、キャッシュと呼ぶことができるはずだ。"
  },
  {
    "start": 5139864,
    "end": 5141256,
    "text": "Redisにはいくつかの名前がある。"
  },
  {
    "start": 5141368,
    "end": 5143504,
    "text": "期待通りに動くかどうか見てみよう。"
  },
  {
    "start": 5143542,
    "end": 5146332,
    "text": "キューからいろいろなものを取り出せるか見てみよう。"
  },
  {
    "start": 5146476,
    "end": 5161396,
    "text": "そして2つ目、このプロセスが別のターミナルで待機している間に、別のターミナルを開く。"
  },
  {
    "start": 5161418,
    "end": 5181820,
    "text": "ローカルにインストールしたredisに入り、redis CLIを実行し、キューへのパブリッシュを開始する。"
  },
  {
    "start": 5182160,
    "end": 5186028,
    "text": "前回のビデオでは、私はnode JSからパブリッシュし、ここから購読していた。"
  },
  {
    "start": 5186114,
    "end": 5190056,
    "text": "現在はCLIからパブリッシュし、node JSで購読している。"
  },
  {
    "start": 5190088,
    "end": 5191400,
    "text": "その逆をやろう"
  },
  {
    "start": 5191480,
    "end": 5192764,
    "text": "ここからどうやって出版するのですか？"
  },
  {
    "start": 5192882,
    "end": 5201104,
    "text": "Lpush space build q キュー・スペースの名前、送りたいエレメント、仮に1、2、3とする。"
  },
  {
    "start": 5201222,
    "end": 5205756,
    "text": "エンターキーを押すと、ここに到達したものが表示される。"
  },
  {
    "start": 5205868,
    "end": 5212740,
    "text": "オリジナルのnode jsがキューに何かをプッシュすれば、このnode jsはキューから何かをプッシュできる。"
  },
  {
    "start": 5212810,
    "end": 5216852,
    "text": "少なくとも、2つのバックエンドシステムを互いに通信させることはできる。"
  },
  {
    "start": 5216906,
    "end": 5226776,
    "text": "もし、私が1つ1つ大量に送れば、私のサーバーは1つ1つ取り出して処理することができるだろう。"
  },
  {
    "start": 5226798,
    "end": 5228152,
    "text": "それこそが私たちが望んでいたことだ。"
  },
  {
    "start": 5228286,
    "end": 5236536,
    "text": "これは、redisキューから値を取り出す無限に実行されるforループを作成することである。"
  },
  {
    "start": 5236568,
    "end": 5237416,
    "text": "私はwhileループを作った。"
  },
  {
    "start": 5237448,
    "end": 5242172,
    "text": "どちらにしても、redisキューから無限に値を引き出すことができる。"
  },
  {
    "start": 5242316,
    "end": 5245424,
    "text": "さて、ここですべての処理ロジックを書く必要がある。"
  },
  {
    "start": 5245462,
    "end": 5256628,
    "text": "実際にGitHubからコードをプルし、GitHubのs threeではなく、実際にNPM run buildを実行し、HTML CSS JavaScriptファイルをs threeにプッシュバックするロジックです。"
  },
  {
    "start": 5256714,
    "end": 5258790,
    "text": "そのコードはすべて、次に書かなければならない。"
  },
  {
    "start": 5259160,
    "end": 5260244,
    "text": "次のステップは？"
  },
  {
    "start": 5260362,
    "end": 5262736,
    "text": "つのフォルダをダウンロードするという関数を書く。"
  },
  {
    "start": 5262768,
    "end": 5272408,
    "text": "もうひとつ面倒なのは、フォルダーのURLや接頭辞を12345にする機能だ。"
  },
  {
    "start": 5272574,
    "end": 5276100,
    "text": "S3からすべてをマシンに引き込むことができる。"
  },
  {
    "start": 5276180,
    "end": 5277432,
    "text": "このステップで何をしたいのか？"
  },
  {
    "start": 5277486,
    "end": 5278616,
    "text": "クバイが欲しい。"
  },
  {
    "start": 5278728,
    "end": 5286876,
    "text": "ステップ1......ランダムなIDを出力する。"
  },
  {
    "start": 5287058,
    "end": 5299330,
    "text": "最初のプロセスはcloudflareのs threeだかr twoだかに何かを置いたが、ここからすべてのコンテンツをnode jsのプロセスに引き出す必要がある。"
  },
  {
    "start": 5300820,
    "end": 5306720,
    "text": "このフォルダーにあるすべてのコンテンツを、基本的に私のマシン内のフォルダーで実行しているnode jsプロセスに取り込む必要がある。"
  },
  {
    "start": 5306880,
    "end": 5308068,
    "text": "どうやるんですか？"
  },
  {
    "start": 5308154,
    "end": 5331266,
    "text": "この関数は、プレフィックスを入力として受け取り、Sスリーのどこからこれをコピーしたいのか、その特定のアセットのフォルダーの場所はどこなのか？"
  },
  {
    "start": 5331378,
    "end": 5332534,
    "text": "ここに何を置くのか？"
  },
  {
    "start": 5332572,
    "end": 5333446,
    "text": "これを何と呼ぶのか？"
  },
  {
    "start": 5333468,
    "end": 5334600,
    "text": "もうお分かりだろうか？"
  },
  {
    "start": 5334970,
    "end": 5337830,
    "text": "出力される。"
  },
  {
    "start": 5338650,
    "end": 5341110,
    "text": "この返答が何であれ。"
  },
  {
    "start": 5342570,
    "end": 5348156,
    "text": "どのような反応が記録されたのか？"
  },
  {
    "start": 5348188,
    "end": 5365430,
    "text": "右の反応、初歩の反応。"
  },
  {
    "start": 5372470,
    "end": 5377234,
    "text": "typescriptとこの関数が返す型がおかしい。"
  },
  {
    "start": 5377362,
    "end": 5383080,
    "text": "ログを取ってみると、この関数は次のようなオブジェクトを返している。"
  },
  {
    "start": 5387370,
    "end": 5391158,
    "text": "キーとなるビルドキューエレメント1、2、3がある。"
  },
  {
    "start": 5391244,
    "end": 5394166,
    "text": "ここでrestの型を見ると、文字列を返している。"
  },
  {
    "start": 5394198,
    "end": 5411630,
    "text": "しかし、奇妙な理由で、これを回避するために、今のところ、私はTS無視をしている。"
  },
  {
    "start": 5414450,
    "end": 5420654,
    "text": "ご覧の通り、ts ignoreを指定しないとエラーが出るので、本番ではやってはいけないことだが、とりあえずエラーを無視している。"
  },
  {
    "start": 5420702,
    "end": 5424878,
    "text": "今のところ、このライブラリはとても奇妙で間違ったタイプを教えてくれる。"
  },
  {
    "start": 5425054,
    "end": 5432360,
    "text": "返される値が文字列だと思い込んでいたり、他のものを返そうとするとオブジェクトを返したりする。"
  },
  {
    "start": 5432730,
    "end": 5436226,
    "text": "今のところ、エラーは無視している。"
  },
  {
    "start": 5436258,
    "end": 5438102,
    "text": "こちらではps無視がそうだ。"
  },
  {
    "start": 5438156,
    "end": 5445130,
    "text": "よし、このidがあれば、この特定のid、1、2、3は私がここでプッシュしたidだ。"
  },
  {
    "start": 5445280,
    "end": 5447722,
    "text": "ここでそのIDをつかむことができる。"
  },
  {
    "start": 5447856,
    "end": 5449850,
    "text": "どのフォルダから取り出したいのか？"
  },
  {
    "start": 5449920,
    "end": 5450490,
    "text": "S 3"
  },
  {
    "start": 5450560,
    "end": 5453166,
    "text": "スラッシュ出力のIDが欲しい。"
  },
  {
    "start": 5453268,
    "end": 5457994,
    "text": "覚えているかな、ここに最終的なアセット一式を保存していたんだ。"
  },
  {
    "start": 5458122,
    "end": 5466340,
    "text": "Cloudflareにアクセスし、オブジェクト・ストアの「s three」を開くと、「r two」が表示される。"
  },
  {
    "start": 5472250,
    "end": 5479610,
    "text": "Versailleに行くと、その特定のプロジェクトのidを出力するために、すべてのオブジェクトをどこに保存していたか。"
  },
  {
    "start": 5479760,
    "end": 5490170,
    "text": "ダウンロードの3つのフォルダは、特定のプロジェクトのIDを出力して、その特定のプロジェクトのすべてをダウンロードする必要があります。"
  },
  {
    "start": 5490240,
    "end": 5492720,
    "text": "それがここでの接頭辞である。"
  },
  {
    "start": 5493090,
    "end": 5498542,
    "text": "あとは、このフォルダからすべてのコードを引っ張ってくる実際のロジックを書かなければならない。"
  },
  {
    "start": 5498596,
    "end": 5500400,
    "text": "よし、次はそれを書こう。"
  },
  {
    "start": 5628510,
    "end": 5629690,
    "text": "書くことができる。"
  },
  {
    "start": 5629840,
    "end": 5637402,
    "text": "初めてこのコードを見る人は、プロミスのロジックに少し圧倒されるのではないかと心配する。"
  },
  {
    "start": 5637546,
    "end": 5640030,
    "text": "では、私が書いたものをご覧いただこう。"
  },
  {
    "start": 5640770,
    "end": 5646318,
    "text": "私が書いたこのダウンロードの3つのフォルダー機能をブラックボックスと考えることもできる。"
  },
  {
    "start": 5646484,
    "end": 5649586,
    "text": "AIに書かせるようなものだ。"
  },
  {
    "start": 5649768,
    "end": 5652994,
    "text": "構文を理解したければ、どうぞ。"
  },
  {
    "start": 5653192,
    "end": 5654382,
    "text": "あなたは接頭辞を持っている。"
  },
  {
    "start": 5654446,
    "end": 5659506,
    "text": "この特定の接頭辞からすべてのファイルをダウンロードする必要があります。"
  },
  {
    "start": 5659618,
    "end": 5660774,
    "text": "接頭辞とはどのようなものだろうか？"
  },
  {
    "start": 5660812,
    "end": 5665666,
    "text": "このようなパスが出力される。"
  },
  {
    "start": 5665858,
    "end": 5670150,
    "text": "この関数を呼び出しているのは、この関数だ。"
  },
  {
    "start": 5670220,
    "end": 5672550,
    "text": "当初はスラッシュの出力が間違っていた。"
  },
  {
    "start": 5672710,
    "end": 5677610,
    "text": "特定の配置のIDが出力される。"
  },
  {
    "start": 5678030,
    "end": 5682006,
    "text": "この接頭辞があるとして、すべてのファイルをローカルにダウンロードする方法は？"
  },
  {
    "start": 5682198,
    "end": 5684478,
    "text": "まず、そこにあるすべてのファイルをリストアップする。"
  },
  {
    "start": 5684564,
    "end": 5690650,
    "text": "このバケツでは、3つのリスト・オブジェクトと2つのキバイをこの接頭辞で実行できる。"
  },
  {
    "start": 5690730,
    "end": 5692106,
    "text": "すべてのファイルを渡せ。"
  },
  {
    "start": 5692218,
    "end": 5696578,
    "text": "これは基本的に、あそこにあるすべてのコンテンツの配列を返す。"
  },
  {
    "start": 5696664,
    "end": 5704706,
    "text": "すべてのファイルの内容を反復処理すると、ここにあるロジックは、そこにあるすべてのファイルに対して実行されることになる。"
  },
  {
    "start": 5704728,
    "end": 5715218,
    "text": "例えば、ASDSDを出力し、HTMLをインデックスし、そこにある別のファイル、インデックス、CSS、といった具合に同じロジックを実行する。"
  },
  {
    "start": 5715394,
    "end": 5721990,
    "text": "このロジックの中で、実際にファイルをローカルにコピー保存しなければならない。"
  },
  {
    "start": 5722150,
    "end": 5724762,
    "text": "それはそれほど難しいことではない。"
  },
  {
    "start": 5724816,
    "end": 5742238,
    "text": "もしこれが私の書いたコードなら、基本的には問題ないのだが、もしこれが私の書いたコードなら、もう少し理解しやすかっただろう。"
  },
  {
    "start": 5742324,
    "end": 5746766,
    "text": "Kbhai、すべてのコンテンツ、すべてのファイルが与えられたら、それを反復するんだ。"
  },
  {
    "start": 5746788,
    "end": 5749358,
    "text": "これはまた、それぞれが地図である必要はないからだ。"
  },
  {
    "start": 5749454,
    "end": 5754494,
    "text": "それらをすべて繰り返し、最終的にローカルに保存するパスを取得する。"
  },
  {
    "start": 5754542,
    "end": 5755890,
    "text": "その最終的な道はどうなるのか？"
  },
  {
    "start": 5755960,
    "end": 5766950,
    "text": "今いるカレント・ディレクトリー、つまりこのディレクトリーには、アンダースコア、アンダースコアの名前が出力されている。"
  },
  {
    "start": 5767290,
    "end": 5776950,
    "text": "特定のデプロイのidが何であれ、それがおそらくファイルを格納したい場所だ。"
  },
  {
    "start": 5777030,
    "end": 5779210,
    "text": "それがこの変数で得られるものだ。"
  },
  {
    "start": 5780190,
    "end": 5782246,
    "text": "そして出力ファイルを見つける。"
  },
  {
    "start": 5782278,
    "end": 5783562,
    "text": "これは新しいことだ。"
  },
  {
    "start": 5783696,
    "end": 5787162,
    "text": "これはFSの作成書き込みストリームである。"
  },
  {
    "start": 5787226,
    "end": 5792606,
    "text": "インターネットから何かをダウンロードする場合、まとめてダウンロードする方法がいくつかある。"
  },
  {
    "start": 5792708,
    "end": 5797482,
    "text": "あるいは、ファイルのような非常に大きなものであれば、塊でダウンロードすることもできる。"
  },
  {
    "start": 5797546,
    "end": 5800546,
    "text": "それが、書き込みストリームを作成することで可能になることだ。"
  },
  {
    "start": 5800568,
    "end": 5801198,
    "text": "その名の通りだ。"
  },
  {
    "start": 5801214,
    "end": 5804370,
    "text": "つまり、これはノードJSのAPIなんだけど、知らなきゃいけないの？"
  },
  {
    "start": 5804520,
    "end": 5815814,
    "text": "おそらくこのようなケースでは、大きなファイルをダウンロードする方法を知っておく必要がある。"
  },
  {
    "start": 5815852,
    "end": 5820850,
    "text": "同じネットワークにあるファイルを別の人からコピーしたい場合は、右ストリームを使えばいい。"
  },
  {
    "start": 5820930,
    "end": 5824874,
    "text": "これについてはビデオで詳しく説明することにしよう。"
  },
  {
    "start": 5824912,
    "end": 5832842,
    "text": "ストリームを作成し、そこからデータを取得し、awsからデータをストリームし、最終的にオブジェクトに格納する。"
  },
  {
    "start": 5832896,
    "end": 5835002,
    "text": "出力ファイルの変数には何が含まれていますか？"
  },
  {
    "start": 5835066,
    "end": 5840186,
    "text": "ストリームを置くことができる最終的なオブジェクトが含まれている。"
  },
  {
    "start": 5840378,
    "end": 5847790,
    "text": "そして最後に、ファイルをコピーする際に、ファイルを置くディレクトリが実際に存在することを確認するためのロジックを行う。"
  },
  {
    "start": 5847870,
    "end": 5850910,
    "text": "出力で何かをコピーすることは避けたい。"
  },
  {
    "start": 5850990,
    "end": 5855758,
    "text": "1、2、3、srcが存在しないのにsrc index js。"
  },
  {
    "start": 5855854,
    "end": 5866038,
    "text": "この3行のロジックは、どのようなファイルが来たとしても、パス・ディレクトリ名によって、来たファイルがこれであることを確認するだけである。"
  },
  {
    "start": 5866204,
    "end": 5868390,
    "text": "次にパスdirname。"
  },
  {
    "start": 5868730,
    "end": 5871890,
    "text": "この入力に対してpath dirnameを実行すると、次のようになる。"
  },
  {
    "start": 5871980,
    "end": 5874886,
    "text": "これはそのパスのディレクトリ名である。"
  },
  {
    "start": 5875078,
    "end": 5876794,
    "text": "この機能は何をするのか？"
  },
  {
    "start": 5876832,
    "end": 5877718,
    "text": "kバイトをチェックする。"
  },
  {
    "start": 5877734,
    "end": 5878982,
    "text": "このディレクトリは存在しますか？"
  },
  {
    "start": 5879126,
    "end": 5880794,
    "text": "そうでなければ、そうする。"
  },
  {
    "start": 5880832,
    "end": 5885930,
    "text": "実際にファイルをコピーする前に、何かが存在すること、少なくとも空のフォルダが存在することを確認してください。"
  },
  {
    "start": 5886000,
    "end": 5888494,
    "text": "そういうわけで、この3行のコードを追加しなければならなかった。"
  },
  {
    "start": 5888612,
    "end": 5890494,
    "text": "やらなくても、つまり、壊れる。"
  },
  {
    "start": 5890532,
    "end": 5891614,
    "text": "これがないとうまくいかない。"
  },
  {
    "start": 5891652,
    "end": 5896958,
    "text": "まずディレクトリ構造を作り、それから初めてファイルを取り出すことができる。"
  },
  {
    "start": 5896974,
    "end": 5900740,
    "text": "ここで何か議論を通せればよかったのだが......。"
  },
  {
    "start": 5901270,
    "end": 5907246,
    "text": "書き込みストリームを作成する フォルダが存在しない場合は作成する。"
  },
  {
    "start": 5907438,
    "end": 5908180,
    "text": "その通りだ。"
  },
  {
    "start": 5908710,
    "end": 5914146,
    "text": "もしこの書き込みストリームがこのような引数を期待したり与えたりするのであれば、私は派手なロジックをする必要はないだろう。"
  },
  {
    "start": 5914258,
    "end": 5916370,
    "text": "そうでない以上、おそらくそうだろう。"
  },
  {
    "start": 5916450,
    "end": 5924406,
    "text": "手作業でフォルダをたくさん作って、フォルダができたらファイルをコピーするだけでいい。"
  },
  {
    "start": 5924438,
    "end": 5926874,
    "text": "それが、この特定の関数呼び出しが行うことである。"
  },
  {
    "start": 5926912,
    "end": 5927610,
    "text": "何をするのですか？"
  },
  {
    "start": 5927680,
    "end": 5937134,
    "text": "S3のgetオブジェクトで読み込みストリームを作成し、読み込まれたすべてを出力ファイルにパイプする。"
  },
  {
    "start": 5937172,
    "end": 5943342,
    "text": "少し無理があるように感じるかもしれないが、そうだとしても驚かないだろう。"
  },
  {
    "start": 5943396,
    "end": 5951902,
    "text": "少しでも負担が軽くなるのであれば、読み取りストリーム書き込みストリームを作成し、読み取りストリームでAWSからすべてを取得する。"
  },
  {
    "start": 5952046,
    "end": 5954770,
    "text": "理解できない場合は、すべての出力をここにパイプしてください。"
  },
  {
    "start": 5954840,
    "end": 5955634,
    "text": "ほとんど問題ない。"
  },
  {
    "start": 5955672,
    "end": 5958878,
    "text": "ありがたいことに、多くの場合、このロジックの多くを自分で書くことはない。"
  },
  {
    "start": 5958894,
    "end": 5959526,
    "text": "この場合はそうだ。"
  },
  {
    "start": 5959548,
    "end": 5964230,
    "text": "私たちは、S3からあなたのマシンにコピーするという非常に微妙なものを作っている。"
  },
  {
    "start": 5966010,
    "end": 5977062,
    "text": "しかし、このgoogle.comのようなURLからjpegファイルをコピーするのであれば、もっと簡単なAPIがあるはずだ。"
  },
  {
    "start": 5977126,
    "end": 5987390,
    "text": "アクシオスを使えば、このようなことができる。私の基本的なポイントは、このコード行や関数がまったく理解できなくても、ブラックボックスとして自由に受け止めてほしいということだ。"
  },
  {
    "start": 5987460,
    "end": 5989598,
    "text": "理解できれば、それに越したことはない。"
  },
  {
    "start": 5989684,
    "end": 5991600,
    "text": "理解できなくても構わない。"
  },
  {
    "start": 5993010,
    "end": 5994718,
    "text": "このコードはいい。"
  },
  {
    "start": 5994884,
    "end": 5999234,
    "text": "もう一度、上から順番に説明しよう。少し無理のあるコードだと思うからだ。"
  },
  {
    "start": 5999432,
    "end": 6001074,
    "text": "この機能は何をする必要があるのか？"
  },
  {
    "start": 6001192,
    "end": 6005714,
    "text": "この接頭辞の3つのファイルをすべてローカルに持ってくる。"
  },
  {
    "start": 6005752,
    "end": 6012274,
    "text": "s threeオブジェクトを初期化し、正しい認証情報を与え、すべてのファイルを変数に取り込む。"
  },
  {
    "start": 6012402,
    "end": 6016406,
    "text": "すべてのファイルの内容は、次のような配列になる。"
  },
  {
    "start": 6016588,
    "end": 6023126,
    "text": "これはあるファイルで、これは別のファイル、といった具合だ。"
  },
  {
    "start": 6023158,
    "end": 6024950,
    "text": "文字列の配列だ。"
  },
  {
    "start": 6025110,
    "end": 6031462,
    "text": "この文字列の配列があるとして、それを反復処理し、1つずつマシンに取り込む。"
  },
  {
    "start": 6031526,
    "end": 6032778,
    "text": "どうすればいいのか？"
  },
  {
    "start": 6032944,
    "end": 6042414,
    "text": "ローカルに保存したい場所のフルパス、アンダースコア、アンダースコア・ディア名のコンマ、オブジェクトの実際のキー（thisまたはthis）を取得する。"
  },
  {
    "start": 6042532,
    "end": 6050446,
    "text": "そしてフルパスが決まったら、書き込みストリームを作成し、s3からのすべてをその出力ファイルにルーティングする。"
  },
  {
    "start": 6050478,
    "end": 6060038,
    "text": "この構文は少し噛み砕く必要があるが、リード・ストリームやライト・ストリームの例や、この構文を使って他にもいろいろなことができることを、将来もっと紹介できるだろう。"
  },
  {
    "start": 6060044,
    "end": 6062262,
    "text": "これは、それを使ってできることのひとつに過ぎない。"
  },
  {
    "start": 6062396,
    "end": 6075174,
    "text": "これができたら、次にこの関数をプロミファイして、このファイルがすべてコピーされたときだけkが終了するようにしなければならない。"
  },
  {
    "start": 6075222,
    "end": 6080154,
    "text": "繰り返すが、あなたはこのコードを実行しており、これは一種の非同期コードである。"
  },
  {
    "start": 6080272,
    "end": 6082314,
    "text": "S3からすべてのファイルがすぐに手に入るわけではない。"
  },
  {
    "start": 6082352,
    "end": 6084234,
    "text": "分かかるかもしれないし、2分かかるかもしれない。"
  },
  {
    "start": 6084352,
    "end": 6091822,
    "text": "理想的には、ここで1分か2分待ち、すべてがコピーされたことを確認してから、この関数を返すべきである。"
  },
  {
    "start": 6091876,
    "end": 6092974,
    "text": "リターンとはどういう意味か？"
  },
  {
    "start": 6093092,
    "end": 6096020,
    "text": "つまり、そうして初めて、機能制御がここに到達するはずなのだ。"
  },
  {
    "start": 6096390,
    "end": 6100594,
    "text": "そのために、このセクションをここで約束することができる。"
  },
  {
    "start": 6100632,
    "end": 6102274,
    "text": "約束するとはどういうことか？"
  },
  {
    "start": 6102392,
    "end": 6108866,
    "text": "基本的には、これを約束に変換して、ここにあるすべての約束を待つということだ。"
  },
  {
    "start": 6108968,
    "end": 6112054,
    "text": "そのためには、プロミス・オールAPIを知る必要があるが。"
  },
  {
    "start": 6112092,
    "end": 6113526,
    "text": "まだ約束を理解していないのなら。"
  },
  {
    "start": 6113548,
    "end": 6117862,
    "text": "もし、あなたがまだストリームを作成することを理解していないなら、ストリームを読むことをブラックボックスとして受け止めても構わない。"
  },
  {
    "start": 6117916,
    "end": 6125900,
    "text": "コードを元のコードに戻してみよう。これは約束されたバージョンで、次のようなものだ。"
  },
  {
    "start": 6129310,
    "end": 6136750,
    "text": "キバイ 私たちはすべてのコンテンツを反復しており、たくさんの約束を取り戻しています。"
  },
  {
    "start": 6137730,
    "end": 6141946,
    "text": "見ての通り、このall promises変数にはreturn new promiseと書かれている。"
  },
  {
    "start": 6142058,
    "end": 6150862,
    "text": "このマップが何度も何度も実行されるうちに、すべての約束が約束のリストを含むようになる。"
  },
  {
    "start": 6150926,
    "end": 6151486,
    "text": "約束とは何か？"
  },
  {
    "start": 6151518,
    "end": 6153026,
    "text": "ラキラスはこのビデオの対象外だ。"
  },
  {
    "start": 6153048,
    "end": 6154162,
    "text": "知らなければ、知らないままだ。"
  },
  {
    "start": 6154216,
    "end": 6160982,
    "text": "ブラックボックスとして捉えれば、約束の数々を手に入れ、そのすべてを待ち望むことができる。"
  },
  {
    "start": 6161036,
    "end": 6165970,
    "text": "この関数は、すべてのファイルがヒンディー語でコピーされた後にのみ終了する。"
  },
  {
    "start": 6166050,
    "end": 6175826,
    "text": "Yekam yukarna yekam isle karnapala ye promise evacuation kuliknipari or yeitana gandha lumba code create write stream create write stream kuliknapara yay."
  },
  {
    "start": 6175858,
    "end": 6181350,
    "text": "S three yehrikaまたはthree ki hongからコードをコピーする必要がある場合は、Siliknapara kyuki。"
  },
  {
    "start": 6181430,
    "end": 6183274,
    "text": "これは、ものをコピーする最も簡単な方法である。"
  },
  {
    "start": 6183312,
    "end": 6196222,
    "text": "このセクションは、S3やYAYセクションからコードをコピーする方法だけですが、ブラックボックスAI ligdegaスタックとして、またはligdegaマヌーバースタック用として、またはコピーカを失うことを自由に取ることができます我々はこれを行う必要があった方法は、関数によってkであることをkahi Yehスコープ。"
  },
  {
    "start": 6196276,
    "end": 6203474,
    "text": "すべてのファイルがダウンロードされるまで、この関数は八木のnikarachi japak sariファイルを返すべきではありません。"
  },
  {
    "start": 6203592,
    "end": 6204962,
    "text": "次のステップに進むべきじゃない。"
  },
  {
    "start": 6205016,
    "end": 6211890,
    "text": "すべてのファイルが来るのを待つ必要がある。そのため、この関数をプロミス化する必要があった。なぜなら、この関数はあまりきれいなプロミスAPIを持っていないからだ。"
  },
  {
    "start": 6211970,
    "end": 6216678,
    "text": "そして、私たちはすべての約束を待っていた。"
  },
  {
    "start": 6216764,
    "end": 6221186,
    "text": "推測するに、40％から50％は理解していると思う。"
  },
  {
    "start": 6221298,
    "end": 6228570,
    "text": "だから、あなたは50％台で問題ないし、心配する必要はない。"
  },
  {
    "start": 6229070,
    "end": 6239086,
    "text": "いくつかのガラスを選び、それをコード化して理解することもできるが、とりあえずブラックボックスとして受け止めても大丈夫だ。"
  },
  {
    "start": 6239108,
    "end": 6242270,
    "text": "私はそうしたくないので、ぜひ試してみてほしい。"
  },
  {
    "start": 6242340,
    "end": 6248666,
    "text": "このコードは、このセクションを拡大すれば、デイリーコードで見ることができる。"
  },
  {
    "start": 6248698,
    "end": 6251330,
    "text": "現地で試し、理解しようとし、時間を費やす。"
  },
  {
    "start": 6251400,
    "end": 6254926,
    "text": "自分で時間をかけてやっていくうちに、もっとよく理解できるようになるだろう。"
  },
  {
    "start": 6255038,
    "end": 6256826,
    "text": "よし、地元で試してみよう。"
  },
  {
    "start": 6256878,
    "end": 6259238,
    "text": "これが実際に機能するかどうか見てみよう。"
  },
  {
    "start": 6259324,
    "end": 6270082,
    "text": "そのために、実際には無限whileループを実行し、キューから何かを取得し、最後の要素を取得し、ダウンロードの3つのフォルダを呼び出している。"
  },
  {
    "start": 6270146,
    "end": 6271606,
    "text": "実際にダウンロードされるかどうか見てみよう。"
  },
  {
    "start": 6271628,
    "end": 6274170,
    "text": "これをブラックボックスと見なした場合、どういう関係があるのだろうか？"
  },
  {
    "start": 6274240,
    "end": 6286250,
    "text": "例えば、このターミナルからキューに何かが入れられた場合、その特定のIDのファイルが私のマシンにプルされることをkbai確認しなければならない。"
  },
  {
    "start": 6286330,
    "end": 6287950,
    "text": "このコードをローカルで実行してみよう。"
  },
  {
    "start": 6297910,
    "end": 6299006,
    "text": "ログは見当たらない。"
  },
  {
    "start": 6299038,
    "end": 6301860,
    "text": "意外なことに、バイはここにログを残さなかった。"
  },
  {
    "start": 6316260,
    "end": 6317172,
    "text": "それは私のミスだ。"
  },
  {
    "start": 6317226,
    "end": 6319270,
    "text": "ここに小さなバグがあった。"
  },
  {
    "start": 6319640,
    "end": 6327092,
    "text": "ドットオンはフィニッシュである必要があり、それが何であったかではなく、これは基本的に約束が解決していないことを意味する。"
  },
  {
    "start": 6327156,
    "end": 6329892,
    "text": "私のコードはこのawaitの約束で止まっていた。"
  },
  {
    "start": 6329956,
    "end": 6334552,
    "text": "すべてのファイルがダウンロードされたにもかかわらず、すべてのファイルがダウンロードされたように感じた。"
  },
  {
    "start": 6334616,
    "end": 6337710,
    "text": "小さなバグですが、ドットフィニッシュと置き換えてください。"
  },
  {
    "start": 6338160,
    "end": 6340590,
    "text": "今、このプロジェクトを再実行すると"
  },
  {
    "start": 6344240,
    "end": 6345756,
    "text": "知りたいなら、どうやってデバッグしているのか。"
  },
  {
    "start": 6345778,
    "end": 6349112,
    "text": "ファイルはダウンロードされているのが見えたが、約束は解決されていなかった。"
  },
  {
    "start": 6349256,
    "end": 6352416,
    "text": "だから、ここにログを残しておいた。"
  },
  {
    "start": 6352438,
    "end": 6354880,
    "text": "と思ってググったら、こんなところにたどり着いた。"
  },
  {
    "start": 6354950,
    "end": 6358560,
    "text": "よし、何かをキューに押し込もう。"
  },
  {
    "start": 6358920,
    "end": 6362660,
    "text": "待機中と表示され、ダウンロード済みと表示される。"
  },
  {
    "start": 6363800,
    "end": 6365684,
    "text": "ダウンロードはこちらから。"
  },
  {
    "start": 6365722,
    "end": 6379204,
    "text": "つまり、ディスクに行き、出力に行き、このフォルダに行くと、ファイルがS3からローカルマシンに引き出されているのがわかる。"
  },
  {
    "start": 6379332,
    "end": 6379672,
    "text": "クールだ。"
  },
  {
    "start": 6379726,
    "end": 6380776,
    "text": "このステップは完了した。"
  },
  {
    "start": 6380878,
    "end": 6382090,
    "text": "次はどうする？"
  },
  {
    "start": 6383660,
    "end": 6385112,
    "text": "次はどうなると思う？"
  },
  {
    "start": 6385166,
    "end": 6390136,
    "text": "リアクトのコードをHTML、CSS、Javascriptに変換するために、npm run buildを実行する必要があります。"
  },
  {
    "start": 6390248,
    "end": 6390888,
    "text": "ボーナスだ。"
  },
  {
    "start": 6390984,
    "end": 6394636,
    "text": "でも、これがコンテナ化されるなら、僕はコンテナ化するつもりはない。"
  },
  {
    "start": 6394658,
    "end": 6396316,
    "text": "コンテナ化するのはかなり簡単なはずだ。"
  },
  {
    "start": 6396338,
    "end": 6399736,
    "text": "この結果を開くと、このビデオを見るまでに両方のバージョンを見ることができる。"
  },
  {
    "start": 6399768,
    "end": 6402480,
    "text": "コンテナ化されたバージョンとコンテナ化されていないバージョンを見ることができる。"
  },
  {
    "start": 6403380,
    "end": 6404316,
    "text": "Dockerを知っているなら。"
  },
  {
    "start": 6404348,
    "end": 6408444,
    "text": "これをコンテナ化するのはそれほど難しくないが、今すぐ簡単なものを作ってみよう。"
  },
  {
    "start": 6408582,
    "end": 6441264,
    "text": "ファイルをダウンロードした特定のフォルダがあるとして、まずここでNPm installを実行し、成功したらここでNPm run buildを実行して、ここで作成されたアセット、インデックスのHTMLファイル、その他すべてをS3にパブリッシュするにはどうすればいいでしょうか。"
  },
  {
    "start": 6441302,
    "end": 6442640,
    "text": "この3つが私のやるべきことだ。"
  },
  {
    "start": 6442710,
    "end": 6446256,
    "text": "まず、NPm installとNPm run buildの2つを実行しなければならない。"
  },
  {
    "start": 6446358,
    "end": 6448160,
    "text": "それが次のステップでやらなければならないことだ。"
  },
  {
    "start": 6448230,
    "end": 6452800,
    "text": "リアクトのコードをHTMLのCSSファイルに変換するために、NPmのビルドを実行すると書いてある。"
  },
  {
    "start": 6452880,
    "end": 6453844,
    "text": "それが次のステップだ。"
  },
  {
    "start": 6453962,
    "end": 6455510,
    "text": "今すぐそうしよう。"
  },
  {
    "start": 6503980,
    "end": 6507736,
    "text": "さて、プロジェクトのビルドという関数を書いた。"
  },
  {
    "start": 6507918,
    "end": 6511004,
    "text": "こんな風に書いてはいけないから面白いんだ。"
  },
  {
    "start": 6511042,
    "end": 6512348,
    "text": "アプリケーションをコンテナ化すべきである。"
  },
  {
    "start": 6512434,
    "end": 6517436,
    "text": "物事をスタートさせるために、私はその非常にジャンキーなバージョンを書いた。"
  },
  {
    "start": 6517458,
    "end": 6518556,
    "text": "基本的にはどのように運営すればいいのか。"
  },
  {
    "start": 6518578,
    "end": 6521948,
    "text": "これは、自動スケーリングサーバーフリートを作成する場合、ほとんどの場合機能する。"
  },
  {
    "start": 6521964,
    "end": 6525712,
    "text": "各サーバーが独自にプロセスを選択するので、問題にもならない。"
  },
  {
    "start": 6525846,
    "end": 6535504,
    "text": "エンドユーザーがLNSコードやセキュリティ脆弱性コードを持っていたとしても、サーバーが起動し、それを実行すればサーバーは停止するので、それほど心配することはない。"
  },
  {
    "start": 6535552,
    "end": 6538704,
    "text": "たとえ悪いことが起きても、ナン・サマジャは大丈夫だ。"
  },
  {
    "start": 6538752,
    "end": 6539988,
    "text": "心配しなくていい。"
  },
  {
    "start": 6540154,
    "end": 6545988,
    "text": "要は、このコードを書くのに最適な方法ではないということだ。理想を言えば、コンテナ化することで、それほど難しいことではないはずだ。"
  },
  {
    "start": 6546074,
    "end": 6549544,
    "text": "これを他のものに変えればうまくいく。"
  },
  {
    "start": 6549582,
    "end": 6551672,
    "text": "今やっていることを理解しよう。"
  },
  {
    "start": 6551806,
    "end": 6552788,
    "text": "私はバイトと言う。"
  },
  {
    "start": 6552804,
    "end": 6555492,
    "text": "ビルド・プロジェクト関数はidを入力として受け取る。"
  },
  {
    "start": 6555556,
    "end": 6560184,
    "text": "キハマイ......これは建設中のプロジェクトの具体的なIDです。"
  },
  {
    "start": 6560302,
    "end": 6561724,
    "text": "すでにコピーしたはずだ。"
  },
  {
    "start": 6561762,
    "end": 6564840,
    "text": "インデックスTSを見ると、まずフォルダをダウンロードした。"
  },
  {
    "start": 6565000,
    "end": 6567768,
    "text": "フォルダがダウンロードされれば、すべてが出力される。"
  },
  {
    "start": 6567864,
    "end": 6572540,
    "text": "Idは、build projectが呼ばれ、実際にプロジェクトをビルドするときである。"
  },
  {
    "start": 6572690,
    "end": 6575020,
    "text": "プロミス化はひとまず無視する。"
  },
  {
    "start": 6575170,
    "end": 6581520,
    "text": "最初の2行のコードとこの1行のコードがなくても動作するので、約束について心配する必要はない。"
  },
  {
    "start": 6582500,
    "end": 6584104,
    "text": "なぜ約束が必要なのか？"
  },
  {
    "start": 6584172,
    "end": 6585620,
    "text": "なぜプロミスが良いのか？"
  },
  {
    "start": 6585690,
    "end": 6588260,
    "text": "プロジェクトを立ち上げるのを待ち望んでいるのだから。"
  },
  {
    "start": 6588330,
    "end": 6596148,
    "text": "この機能が完全に構築されるのを待ってから、次のピックアイテムに移りたい。"
  },
  {
    "start": 6596314,
    "end": 6604216,
    "text": "もしこれを待ちたいのであれば、spawnやexecを使うのであれば、簡単な方法はない。"
  },
  {
    "start": 6604398,
    "end": 6605736,
    "text": "プロミスは何をするのか？"
  },
  {
    "start": 6605758,
    "end": 6620044,
    "text": "Arkhirath......基本的には、ここで値を返すのではなく、この関数はプロミスを返す。"
  },
  {
    "start": 6620162,
    "end": 6621704,
    "text": "いつ決めるのか？"
  },
  {
    "start": 6621752,
    "end": 6625824,
    "text": "ケハ......この関数が呼ばれるのは、この関数が終了したときだ。"
  },
  {
    "start": 6625862,
    "end": 6631532,
    "text": "特に関数を入力とする新しいプロミスはそうだ。"
  },
  {
    "start": 6631596,
    "end": 6635364,
    "text": "また、もし望むなら、ブラックボックスとして自由に受け取ってくれて構わない。"
  },
  {
    "start": 6635402,
    "end": 6641350,
    "text": "とりあえず、これをコメントアウトして、これだけのコードを書けば大丈夫だ。"
  },
  {
    "start": 6641720,
    "end": 6643350,
    "text": "よし、クールだ。"
  },
  {
    "start": 6643800,
    "end": 6647992,
    "text": "このコードはプロミスを返すが、今は無視しよう。"
  },
  {
    "start": 6648046,
    "end": 6652420,
    "text": "ケバイと書いてある。"
  },
  {
    "start": 6652500,
    "end": 6658488,
    "text": "これは、node JSが子プロセスと呼ばれるモジュールから、すぐに提供してくれるものだ。"
  },
  {
    "start": 6658574,
    "end": 6664028,
    "text": "子プロセスと書かれているが、これはこのノードのJsプロセスが別のプロセスを起動していることを意味する。"
  },
  {
    "start": 6664114,
    "end": 6665132,
    "text": "それが私たちの望みでしょう？"
  },
  {
    "start": 6665186,
    "end": 6669752,
    "text": "Kihar nodeのコードは実行されており、npmを実行し、別のフォルダでビルドを実行することができます。"
  },
  {
    "start": 6669816,
    "end": 6671464,
    "text": "そのためにexecを使う。"
  },
  {
    "start": 6671512,
    "end": 6672712,
    "text": "エクゼクティブは何をしているのか？"
  },
  {
    "start": 6672786,
    "end": 6674444,
    "text": "あるいは、インプットとして何が必要なのか？"
  },
  {
    "start": 6674572,
    "end": 6686596,
    "text": "繰り返しになるが、これは最もクリーンな方法ではないが、とりあえずディレクトリをディスク・フォルダ＋output idに変更してnpm installを実行し、npm run buildを実行した。"
  },
  {
    "start": 6686698,
    "end": 6690644,
    "text": "このコマンドをターミナルで実行すると、どのように見えるだろうか？"
  },
  {
    "start": 6690682,
    "end": 6700612,
    "text": "私はディスク・フォルダー内にいて、CDからoutput aとnpm installとnpm run buildで実行できる。"
  },
  {
    "start": 6700666,
    "end": 6701556,
    "text": "それが僕の望みなんだ。"
  },
  {
    "start": 6701578,
    "end": 6702980,
    "text": "フォルダをコピーしました。"
  },
  {
    "start": 6703060,
    "end": 6704024,
    "text": "これを作る必要がある。"
  },
  {
    "start": 6704062,
    "end": 6707540,
    "text": "最終的なHTML、css、javascriptファイルを吐き出す必要がある。"
  },
  {
    "start": 6707620,
    "end": 6709236,
    "text": "私はこれだけを実行する必要がある。"
  },
  {
    "start": 6709278,
    "end": 6714104,
    "text": "私はこのコードをプログラムで実行する必要がある。"
  },
  {
    "start": 6714232,
    "end": 6715896,
    "text": "これでログが増えるだけだ。"
  },
  {
    "start": 6715928,
    "end": 6721376,
    "text": "この子プロセスが何かを記録しているので、ここにも記録してください。"
  },
  {
    "start": 6721478,
    "end": 6724992,
    "text": "子どもはデータを標準出力している。"
  },
  {
    "start": 6725046,
    "end": 6727584,
    "text": "データを記録してください。"
  },
  {
    "start": 6727702,
    "end": 6730576,
    "text": "これを取り除いても、完全に100％機能する。"
  },
  {
    "start": 6730678,
    "end": 6733276,
    "text": "ログを見たければ、持っているに越したことはない。"
  },
  {
    "start": 6733308,
    "end": 6736356,
    "text": "こうして、機能しているかどうかをデバッグすることができた。"
  },
  {
    "start": 6736458,
    "end": 6738388,
    "text": "コメントアウトすれば問題ない。"
  },
  {
    "start": 6738554,
    "end": 6744468,
    "text": "より重要なのは、このプロセスが終了したことがわかったら、クローズすることだ。"
  },
  {
    "start": 6744564,
    "end": 6759624,
    "text": "あなたが開始した子プロセスが終了し、npmがビルドを実行し、npmのインストールとnpmのビルドの実行が終了したことを意味します。"
  },
  {
    "start": 6759742,
    "end": 6760548,
    "text": "もう大丈夫だ。"
  },
  {
    "start": 6760574,
    "end": 6761372,
    "text": "もう終わりだ。"
  },
  {
    "start": 6761506,
    "end": 6763112,
    "text": "私の最後の仕事が終わった。"
  },
  {
    "start": 6763176,
    "end": 6768108,
    "text": "今やっていることを続けてください。そうすれば、キューから次のことを選んで、そこから進めてくれます。"
  },
  {
    "start": 6768194,
    "end": 6768636,
    "text": "クールだ。"
  },
  {
    "start": 6768738,
    "end": 6771164,
    "text": "私はダウンロードを3つのフォルダに書き込んだ。"
  },
  {
    "start": 6771212,
    "end": 6777836,
    "text": "ビルド・プロジェクトを書きましたので、このログを使って実行すると、とても素晴らしいログが表示されます。"
  },
  {
    "start": 6777868,
    "end": 6783412,
    "text": "基本的に本番さながらに動作し、それがどのように機能するかを見ることができるだろう。"
  },
  {
    "start": 6783466,
    "end": 6795640,
    "text": "これをビルドし、実行すると、何かが選ばれ、ダウンロードされ、そしてNPMのログがたくさん表示される。"
  },
  {
    "start": 6797180,
    "end": 6798996,
    "text": "NPMのログとは何ですか？"
  },
  {
    "start": 6799108,
    "end": 6811292,
    "text": "これはノード・プロジェクトのビルドであり、あなたのコードがs threeから何かをダウンロードし、ビルドしたかった特定のidプロジェクトをダウンロードすることを意味する。"
  },
  {
    "start": 6811426,
    "end": 6817384,
    "text": "そして、そのプロジェクトを構築し、HTML、CSS、Javascriptに変換する。"
  },
  {
    "start": 6817432,
    "end": 6819180,
    "text": "ハルキラート、これはどこで手に入りますか？"
  },
  {
    "start": 6819330,
    "end": 6820990,
    "text": "ここにありますよね？"
  },
  {
    "start": 6821440,
    "end": 6832000,
    "text": "現在作業しているファイルやプロジェクトにアクセスすると、その中にディスク・フォルダーがある。"
  },
  {
    "start": 6832070,
    "end": 6839492,
    "text": "繰り返すが、私はすでにディスク出力ePwicに入っているが、これ自体がreactプロジェクトなのだ。"
  },
  {
    "start": 6839546,
    "end": 6849176,
    "text": "これは私のreactプロジェクトで、もともとはGitHubにあった。"
  },
  {
    "start": 6849278,
    "end": 6855688,
    "text": "ここから吐き出されるディスクが、私の最終的なHTML、CSS、Javascriptのコードだ。"
  },
  {
    "start": 6855774,
    "end": 6856804,
    "text": "再帰のように感じる。"
  },
  {
    "start": 6856852,
    "end": 6859204,
    "text": "そうかもしれないが、これがわかりやすいものであればいいのだが...。"
  },
  {
    "start": 6859252,
    "end": 6860524,
    "text": "ケハム、いったい何が起こっているんだ？"
  },
  {
    "start": 6860562,
    "end": 6862856,
    "text": "少なくとも論理的には理解できるよ、ケハ。"
  },
  {
    "start": 6862888,
    "end": 6867310,
    "text": "このプロセスでは、まずS3からすべてをダウンロードし、それからプロジェクトを構築する。"
  },
  {
    "start": 6867680,
    "end": 6869372,
    "text": "その次のステップは？"
  },
  {
    "start": 6869426,
    "end": 6873516,
    "text": "プロジェクトをビルドした後、ディスク・フォルダーに何かがある。"
  },
  {
    "start": 6873628,
    "end": 6876636,
    "text": "これらの資産を使って何をしなければならないのか？"
  },
  {
    "start": 6876828,
    "end": 6878672,
    "text": "S3に戻さなければならない。"
  },
  {
    "start": 6878726,
    "end": 6880640,
    "text": "元のシステム設計に戻る。"
  },
  {
    "start": 6880790,
    "end": 6885684,
    "text": "S3に格納されているものには2つの部分がある、あるいは2つの部分があった。"
  },
  {
    "start": 6885722,
    "end": 6896464,
    "text": "この作業が終わるころには、すでにそこにあるオリジナルのリアクトコードと、これから作成する新しいコード、そしてHTML、CSS、JavaScriptファイルを含む最終的なアウトプットが完成している。"
  },
  {
    "start": 6896592,
    "end": 6899272,
    "text": "次にS3に入れる必要があるのはこれだ。"
  },
  {
    "start": 6899406,
    "end": 6902360,
    "text": "スライドを見ると、次のステップは？"
  },
  {
    "start": 6902430,
    "end": 6907236,
    "text": "ディレクトリをs threeにアップロードする関数を書いて、最後のモジュールからコピーすればいい。"
  },
  {
    "start": 6907268,
    "end": 6908264,
    "text": "私たちはすでにこれを作った。"
  },
  {
    "start": 6908302,
    "end": 6911464,
    "text": "ありがたいことに、これが入力ディレクトリかどうかはすでに分かっている。"
  },
  {
    "start": 6911592,
    "end": 6917356,
    "text": "第一に、その中にあるすべてのファイルを取得し、第二に、すべてのファイルを反復処理してアップロードするにはどうすればいいのか。"
  },
  {
    "start": 6917458,
    "end": 6918540,
    "text": "これはそれほど難しいことではない。"
  },
  {
    "start": 6918610,
    "end": 6919456,
    "text": "もう書いてあるんだ。"
  },
  {
    "start": 6919478,
    "end": 6920256,
    "text": "真似させてもらうよ。"
  },
  {
    "start": 6920278,
    "end": 6933780,
    "text": "このidを入力として、同じAws tsファイルに作成できるcopy final distという3番目の関数を作成しなければならない。"
  },
  {
    "start": 6941450,
    "end": 6952214,
    "text": "よし、コピー・パスタを繰り返して、前回のモジュールからアップロード・ファイル機能と全ファイル取得機能を手に入れることができた。"
  },
  {
    "start": 6952332,
    "end": 6958150,
    "text": "これは、フォルダー・パスを記憶していれば、その中にあるすべてのファイルの配列を与えてくれる。"
  },
  {
    "start": 6958240,
    "end": 6968462,
    "text": "例えば、1、2、3、インデックス、HTML、カンマなど、探そうとしている特定のフォルダーに存在するものなら何でも出力する。"
  },
  {
    "start": 6968596,
    "end": 6977726,
    "text": "つ目の入力は、3番目の最終ファイル名と、アップロードしようとしているファイルのローカルファイルパスだ。"
  },
  {
    "start": 6977918,
    "end": 6988406,
    "text": "前回のモジュールで書いたこの2つの関数をここにコピーし、最後にコピーしたfinal dist関数を書いた。"
  },
  {
    "start": 6988508,
    "end": 6997946,
    "text": "まず、最終的なアセットがある場所、インデックスHTML、インデックスCSS、最終的に構築したすべてのものの最終パスを取得する。"
  },
  {
    "start": 6998128,
    "end": 7000074,
    "text": "ターミナルを開いたら、そこはどこですか？"
  },
  {
    "start": 7000112,
    "end": 7004140,
    "text": "IDが何であろうと、それはdistoutにある。"
  },
  {
    "start": 7004510,
    "end": 7005306,
    "text": "ディスト"
  },
  {
    "start": 7005488,
    "end": 7015566,
    "text": "このフォルダoutput id distoutputidistに入り、これらすべてをs threeにコピーする必要がある。"
  },
  {
    "start": 7015668,
    "end": 7027380,
    "text": "その方法は、まずこのフォルダーの中にあるすべてのファイルを取得し、次にすべてのファイルを反復処理してs threeにアップロードする。"
  },
  {
    "start": 7027910,
    "end": 7030606,
    "text": "番目の入力は簡単だ。"
  },
  {
    "start": 7030718,
    "end": 7032638,
    "text": "ローカルファイルのパス。"
  },
  {
    "start": 7032734,
    "end": 7034942,
    "text": "最初の入力がまた少し変だ。"
  },
  {
    "start": 7035086,
    "end": 7043922,
    "text": "最初の入力はdist theidとして作成しました。ローカルファイルパスとはどういう意味ですか？"
  },
  {
    "start": 7043986,
    "end": 7053558,
    "text": "このファイルのインデックスHTML このファイルのインデックスsvg このファイルのアセットインデックス4何でも、などなど。"
  },
  {
    "start": 7053654,
    "end": 7060750,
    "text": "必要であれば、これをログに記録してください。そうすれば、最終的なコードを配置した実際のものがわかります。"
  },
  {
    "start": 7060820,
    "end": 7063066,
    "text": "あるいは、これをローカルで実行することもできる。"
  },
  {
    "start": 7063098,
    "end": 7101734,
    "text": "tsc vを実行してコードをコンパイルし、node disk index jsを実行して実際に実行する。このキューに何かを入れると、プロジェクトがプルされた後、プロジェクトがビルドされ、最終的にディスクepwicの3つの場所にプッシュされ、Cloudflareにアクセスすると、Versaillバケットに2つのフォルダがあることがわかる。"
  },
  {
    "start": 7101782,
    "end": 7106326,
    "text": "最初のアセットセットを入れていた出力フォルダがある。"
  },
  {
    "start": 7106358,
    "end": 7109498,
    "text": "これはおそらくinputとディスクフォルダーと呼ぶべきだった。"
  },
  {
    "start": 7109674,
    "end": 7114986,
    "text": "出力フォルダにはたくさんのファイルがあるが、ePwicがある。"
  },
  {
    "start": 7115098,
    "end": 7119470,
    "text": "これにはオリジナルのソースコード、リアクトのソースコードが含まれている。"
  },
  {
    "start": 7119620,
    "end": 7130734,
    "text": "Versailleのバケツに戻ると、ePwicというディスクフォルダがあり、そこにはリアクトコードではなく、最終的なHTML、CSS、JavaScriptのファイル一式が入っている。"
  },
  {
    "start": 7130862,
    "end": 7131394,
    "text": "クールだ。"
  },
  {
    "start": 7131512,
    "end": 7135042,
    "text": "それが、この第2次派遣サービスに期待されていることだ。"
  },
  {
    "start": 7135096,
    "end": 7137254,
    "text": "必要なことはほとんどやっている。"
  },
  {
    "start": 7137372,
    "end": 7145254,
    "text": "キューから何かをピックアップし、それを構築し、ローカルでそれをプルし、構築し、そしてそれをS3にプッシュバックする。"
  },
  {
    "start": 7145372,
    "end": 7148600,
    "text": "それこそがデプロイメント・サービスに期待されていることなのだ。"
  },
  {
    "start": 7148970,
    "end": 7156266,
    "text": "スライドに戻ると、これが2つ目の最後のステップで、すべてをS3にアップロードする関数を書いている。"
  },
  {
    "start": 7156368,
    "end": 7159762,
    "text": "ここでもうひとつステップがある。"
  },
  {
    "start": 7159846,
    "end": 7162110,
    "text": "では、第3部に移ろう。"
  },
  {
    "start": 7162180,
    "end": 7167594,
    "text": "エンドユーザーからの最終的なリクエストを処理するモジュールに移りましょう。"
  },
  {
    "start": 7167642,
    "end": 7177730,
    "text": "Versailles、あるいはdiskフォルダ内のオブジェクトストアに何かを置いたとすると、最終的なHTML、CSS、JavaScriptファイルが出来上がる。"
  },
  {
    "start": 7178070,
    "end": 7182046,
    "text": "次に、エンドユーザーのリクエストを処理するリクエストハンドラーサービスを作成する必要がある。"
  },
  {
    "start": 7182078,
    "end": 7188766,
    "text": "フロントエンドのUIを構築するまで、いや、少なくともフロントエンドのUIをお見せするまで、あと30分といったところだ。"
  },
  {
    "start": 7188798,
    "end": 7193842,
    "text": "この動画の長さを考えると、私が作ることはないと思うが、この3つのサービスとどのようにつながっているかを紹介しよう。"
  },
  {
    "start": 7193976,
    "end": 7202698,
    "text": "まず、リクエスト・ハンドラ・サービスを作りましょう。これは簡単で、複雑なロジックはあまり必要ありません。"
  },
  {
    "start": 7202864,
    "end": 7204614,
    "text": "よし、第3節に移ろう。"
  },
  {
    "start": 7204662,
    "end": 7206774,
    "text": "次にリクエストハンドラを構築する必要がある。"
  },
  {
    "start": 7206822,
    "end": 7212414,
    "text": "このモジュールは、これまで作ってきたモジュールの中で最もシンプルなものだろう。"
  },
  {
    "start": 7212532,
    "end": 7213422,
    "text": "キックオフだ。"
  },
  {
    "start": 7213476,
    "end": 7215310,
    "text": "空のノードJSプロジェクトを初期化します。"
  },
  {
    "start": 7215380,
    "end": 7217466,
    "text": "タイプスクリプトのコンフィギュレーションを追加する。"
  },
  {
    "start": 7217498,
    "end": 7221490,
    "text": "今までに2回やっているので、3回目はストレートであってほしい。"
  },
  {
    "start": 7227590,
    "end": 7239218,
    "text": "さて、node JSプロジェクトを初期化し、typescriptを追加し、rooterとOutriderの設定を変更し、ソース・フォルダーにシンプルなインデックスTFファイルを用意した。"
  },
  {
    "start": 7239314,
    "end": 7243494,
    "text": "次に、ポート3001で動作するExprsサーバーを初期化する。"
  },
  {
    "start": 7243532,
    "end": 7245634,
    "text": "その一歩手前がNPMである。"
  },
  {
    "start": 7245682,
    "end": 7255386,
    "text": "exprsをインストールし、exprsの型を追加した後、基本的なexpressアプリケーションをブートストラップするためのすべてのコードを記述する。"
  },
  {
    "start": 7255488,
    "end": 7259578,
    "text": "おそらく、私たちも必要だろう。"
  },
  {
    "start": 7259744,
    "end": 7261680,
    "text": "コードは必要ないから、問題ない。"
  },
  {
    "start": 7265970,
    "end": 7272126,
    "text": "すべてのリクエストを処理するグローバルルートキャッチスターを追加する。"
  },
  {
    "start": 7272238,
    "end": 7276738,
    "text": "このサービスは何をするものなのか？"
  },
  {
    "start": 7276824,
    "end": 7289074,
    "text": "X versaille.com Index CsSやY versaill.com a jsのようなリクエストを受け取ることになっている。"
  },
  {
    "start": 7289202,
    "end": 7294162,
    "text": "これらのリクエストをすべて処理するグローバルルートハンドラが必要です。"
  },
  {
    "start": 7294226,
    "end": 7297354,
    "text": "アプリが欲しい。"
  },
  {
    "start": 7297472,
    "end": 7304890,
    "text": "つまり、どんなリクエストが来ても、このコールバックをヒットさせるということだ。"
  },
  {
    "start": 7306350,
    "end": 7308090,
    "text": "それがこのポイントの意味するところだ。"
  },
  {
    "start": 7308850,
    "end": 7312462,
    "text": "リクエスト元のサブドメインを抽出する。"
  },
  {
    "start": 7312596,
    "end": 7329300,
    "text": "最終的に、10人の異なるユーザーがアプリケーションをデプロイすると、各ユーザーは自分のプロジェクトを識別するためのユニークなIDを持つことになり、おそらくあなたが彼らに与えるURLは、id versailles.com、またはあなたのウェブサイトが何であれ、100 x devs.comとします。"
  },
  {
    "start": 7329830,
    "end": 7333966,
    "text": "リクエストからこのIDを取り出す必要がある。"
  },
  {
    "start": 7334158,
    "end": 7339010,
    "text": "リクエストを送信しているのが誰であれ、URLを通して送信しているのだ。"
  },
  {
    "start": 7339090,
    "end": 7341702,
    "text": "ここで第一引数を抜かなければならない。"
  },
  {
    "start": 7341836,
    "end": 7342998,
    "text": "これならうまくいくと思う。"
  },
  {
    "start": 7343084,
    "end": 7343862,
    "text": "間違っているかもしれない。"
  },
  {
    "start": 7343916,
    "end": 7348570,
    "text": "ログインして確認します"
  },
  {
    "start": 7350190,
    "end": 7350698,
    "text": "そうだね。"
  },
  {
    "start": 7350784,
    "end": 7358540,
    "text": "先に進む前に、このコードが期待通りに動くことを確認しよう。非常に基本的なexprsアプリケーションだ。"
  },
  {
    "start": 7358930,
    "end": 7368314,
    "text": "このホストが完全なURLを取得できるようにする必要がある。"
  },
  {
    "start": 7368362,
    "end": 7372894,
    "text": "もしリクエストがid, versaille.comから来ているなら、それがhostに格納される。"
  },
  {
    "start": 7373022,
    "end": 7375762,
    "text": "もしそうなら、このコードは正しいと思う。"
  },
  {
    "start": 7375816,
    "end": 7384840,
    "text": "idだけを取り出すには、hostのsplit dotで以下のような配列に変換する。"
  },
  {
    "start": 7386490,
    "end": 7390600,
    "text": "ということは、0番目の値はidということになる。"
  },
  {
    "start": 7391210,
    "end": 7392760,
    "text": "よし、行ってみよう。"
  },
  {
    "start": 7394570,
    "end": 7395974,
    "text": "次はどうする？"
  },
  {
    "start": 7396172,
    "end": 7397738,
    "text": "これが機能するようにする必要がある。"
  },
  {
    "start": 7397824,
    "end": 7401290,
    "text": "これをローカルでテストする方法をお見せしよう。"
  },
  {
    "start": 7401950,
    "end": 7402934,
    "text": "洞察力に富んだヒントだ。"
  },
  {
    "start": 7402982,
    "end": 7416894,
    "text": "一般的に、1、2、3 versaille.comのようなサブドメインをlocalhostを指すようにするか、1つを指すようにすると、システムを欺くことができる。"
  },
  {
    "start": 7416932,
    "end": 7420982,
    "text": "Kehambai one, two, three versaille.comはあなた自身のサーバーを指しています。"
  },
  {
    "start": 7421146,
    "end": 7424542,
    "text": "もしこのようなことをしたいのであれば、ターミナルを開くことだ。"
  },
  {
    "start": 7424686,
    "end": 7426382,
    "text": "これはLinuxベースのマシンで動作する。"
  },
  {
    "start": 7426526,
    "end": 7436214,
    "text": "etc hostsを開き、ここにエントリーを追加する。"
  },
  {
    "start": 7436412,
    "end": 7446386,
    "text": "Kehabai 1、2、3 versaille.comは1、7、1、つまりこの特定のマシンを指している。"
  },
  {
    "start": 7446498,
    "end": 7453850,
    "text": "1、2、3とversaille.com 3001にアクセスすると、先ほど作成したバックエンドサーバーにヒットする。"
  },
  {
    "start": 7453920,
    "end": 7455674,
    "text": "バックエンドサーバーは3001で稼動している。"
  },
  {
    "start": 7455712,
    "end": 7467498,
    "text": "これを実行してこのエンドポイントを叩くと、SSLプロトコル・エラーと表示される。"
  },
  {
    "start": 7467674,
    "end": 7472750,
    "text": "このリクエストを送信しても、SSLエラーと表示される。"
  },
  {
    "start": 7478540,
    "end": 7479368,
    "text": "そうだ。"
  },
  {
    "start": 7479454,
    "end": 7486740,
    "text": "証明書がキャッシュされたので、シークレット・ウィンドウでこれを開くと、コントロールがここに到達し、何がログに記録されるかがわかるだろう。"
  },
  {
    "start": 7486820,
    "end": 7490200,
    "text": "1、2、3 versaille.com IDは何として記録されますか？"
  },
  {
    "start": 7490270,
    "end": 7491084,
    "text": "1、2、3"
  },
  {
    "start": 7491202,
    "end": 7492188,
    "text": "これが我々に必要なことなのか？"
  },
  {
    "start": 7492274,
    "end": 7497144,
    "text": "はい、そのウェブサイトのIDを抽出したかったのですが、正しくできました。"
  },
  {
    "start": 7497192,
    "end": 7498172,
    "text": "今、テストしたところだ。"
  },
  {
    "start": 7498226,
    "end": 7498780,
    "text": "どうやって？"
  },
  {
    "start": 7498930,
    "end": 7502540,
    "text": "1、2、3とversaille.comが自分のマシンを指していることを確認する。"
  },
  {
    "start": 7502620,
    "end": 7503920,
    "text": "どうすればいいんだ？"
  },
  {
    "start": 7504070,
    "end": 7512048,
    "text": "ターミナルを開いてhostsファイルを編集すると、ご覧のようにlocalhostがここに存在する。"
  },
  {
    "start": 7512134,
    "end": 7514156,
    "text": "LocalhostはあなたのローカルIPを指す。"
  },
  {
    "start": 7514188,
    "end": 7516484,
    "text": "同様に、ここにもいくつかのエントリーがある。"
  },
  {
    "start": 7516522,
    "end": 7519764,
    "text": "Localhostは1から7、1から3のversal.comを指す。"
  },
  {
    "start": 7519802,
    "end": 7530664,
    "text": "12701を指しているので、私のマシンのone, two, three versal.comへのリクエストはすべてこのIPを指すことになる。"
  },
  {
    "start": 7530782,
    "end": 7531992,
    "text": "クールだ。"
  },
  {
    "start": 7532046,
    "end": 7532868,
    "text": "さあ、始めよう。"
  },
  {
    "start": 7532964,
    "end": 7539400,
    "text": "次のセクションは、S3から内容を取得する。"
  },
  {
    "start": 7539470,
    "end": 7547084,
    "text": "サブドメインがidを表し、それをユーザーに転送すると仮定して、正しいコンテンツタイプヘッダーを追加し、最終的なファイルが正しいことを確認する。"
  },
  {
    "start": 7547122,
    "end": 7548204,
    "text": "基本的にいろいろなことをする。"
  },
  {
    "start": 7548242,
    "end": 7553292,
    "text": "ここでまず、ユーザーが抽出しようとしているものを取得する必要がある。"
  },
  {
    "start": 7553356,
    "end": 7557564,
    "text": "ユーザーは、HTMLをインデックス化するリクエストを私たちに送っている。"
  },
  {
    "start": 7557692,
    "end": 7561164,
    "text": "まず、彼らがアクセスしようとしているこのファイルを抽出する必要がある。"
  },
  {
    "start": 7561222,
    "end": 7564900,
    "text": "そう、それはおそらくリクエスト・オブジェクトのどこかにあるはずだ。"
  },
  {
    "start": 7564970,
    "end": 7571270,
    "text": "さて、ファイルパスがrecドットに等しい場合、それは何になるのだろう？"
  },
  {
    "start": 7571880,
    "end": 7595300,
    "text": "これはコンソールのログファイルのパスではないでしょうか？"
  },
  {
    "start": 7602150,
    "end": 7606154,
    "text": "レクパスは、ユーザーが私たちに送るものです。"
  },
  {
    "start": 7606272,
    "end": 7611450,
    "text": "特定のデプロイメントからHTMLをインデックスさせたい、あるいはjsやCSSをインデックスさせたい。"
  },
  {
    "start": 7611870,
    "end": 7619270,
    "text": "このファイルパスとIDがあれば、あとはこのファイルをS3から取得してユーザーに転送するだけだ。"
  },
  {
    "start": 7619350,
    "end": 7621770,
    "text": "次にそのコードを書いてみよう。"
  },
  {
    "start": 7621920,
    "end": 7629118,
    "text": "このidとファイルパスが与えられたら、どうやってs threeのバケツからそのファイルを取り出し、その内容をユーザーに転送すればいいのでしょうか？"
  },
  {
    "start": 7629254,
    "end": 7696530,
    "text": "それはそれだ。"
  },
  {
    "start": 7700020,
    "end": 7701440,
    "text": "それはとても簡単なことだった。"
  },
  {
    "start": 7701860,
    "end": 7703504,
    "text": "私がしてきたことをシェアしよう。"
  },
  {
    "start": 7703702,
    "end": 7708096,
    "text": "私はs threeプロジェクトを初期化した。"
  },
  {
    "start": 7708198,
    "end": 7716276,
    "text": "グローバル・キャッチでidを取得します。このユーザーがアクセスしようとしているプロジェクトidは何ですか？"
  },
  {
    "start": 7716378,
    "end": 7719844,
    "text": "次に、このユーザーがアクセスしようとしているファイルは何ですか？"
  },
  {
    "start": 7719962,
    "end": 7723320,
    "text": "この2つがあれば、S3から内容がわかる。"
  },
  {
    "start": 7723390,
    "end": 7749738,
    "text": "S3つのgetobjectは、このキーの特定のオブジェクトを取得します distidファイルパス これは、私がcloudflareインデックスに行くと、HTML distidアセット、何でもjsファイル cssファイル。"
  },
  {
    "start": 7749834,
    "end": 7752830,
    "text": "そこに最終的な内容を保存した。"
  },
  {
    "start": 7752900,
    "end": 7754222,
    "text": "そこから来ているんだ"
  },
  {
    "start": 7754276,
    "end": 7762606,
    "text": "ディスクIDをファイルパスにして、最後にconst typeを \"OK \"と等しくする。"
  },
  {
    "start": 7762708,
    "end": 7766818,
    "text": "この2行は無視しても構わない。"
  },
  {
    "start": 7766984,
    "end": 7767922,
    "text": "これで十分だ。"
  },
  {
    "start": 7767976,
    "end": 7775238,
    "text": "基本的には、内容を取得してexpressのレスポンス・オブジェクトに転送すれば十分だ。"
  },
  {
    "start": 7775324,
    "end": 7777142,
    "text": "このことは、ひとつの小さな問題につながる。"
  },
  {
    "start": 7777196,
    "end": 7781750,
    "text": "このコードを実行し、ブラウザーでアクセスしようとするだけである。"
  },
  {
    "start": 7783370,
    "end": 7799206,
    "text": "このid 100 xdd.comは私のローカル・ホストを指している。だからこれを実行すると、インデックスのHTMLファイルは戻ってくるが、なぜかダウンロードされてしまい、ここには表示されない。"
  },
  {
    "start": 7799248,
    "end": 7802910,
    "text": "その理由は、基本的にcontent typeヘッダーにある。"
  },
  {
    "start": 7803330,
    "end": 7809806,
    "text": "あなたのブラウザは、レスポンスのヘッダーに基づいて、それがどのようなファイルであるかを知るようになり、私たちはそれを渡さない。"
  },
  {
    "start": 7809828,
    "end": 7813838,
    "text": "どのようなコンテンツ・タイプであっても、ここでは混乱し、ファイルをダウンロードするだけになってしまう。"
  },
  {
    "start": 7813854,
    "end": 7816174,
    "text": "HTMLファイルとしてではなく、通常のファイルとして考えてください。"
  },
  {
    "start": 7816222,
    "end": 7829926,
    "text": "そのため、ヘッダーのコンテンツ・タイプをアプリケーションJavaScript、テキストCSS、テキストHTMLのいずれかに設定する必要があります。"
  },
  {
    "start": 7829948,
    "end": 7835750,
    "text": "HTMLファイルならテキストHTML cssファイルならテキストcss、といった具合だ。"
  },
  {
    "start": 7836250,
    "end": 7838714,
    "text": "それがこの2行のコードだ。"
  },
  {
    "start": 7838832,
    "end": 7849070,
    "text": "結局、s threeにリクエストを転送し、そこからユーザーに内容を転送することができるのは、20行以下のコードで済む。"
  },
  {
    "start": 7849970,
    "end": 7854014,
    "text": "今これを実行すると、まだ動かないのがわかるだろう。"
  },
  {
    "start": 7854052,
    "end": 7855710,
    "text": "キャッシュされているからだろう。"
  },
  {
    "start": 7856530,
    "end": 7859510,
    "text": "シークレットで開いてみる。"
  },
  {
    "start": 7859690,
    "end": 7860930,
    "text": "これでいい。"
  },
  {
    "start": 7861080,
    "end": 7865502,
    "text": "反応したウェブサイトがついにインターネット上に展開された。"
  },
  {
    "start": 7865646,
    "end": 7871746,
    "text": "インターネット上に配備されているわけではなく、私のマシンの中にある。"
  },
  {
    "start": 7871768,
    "end": 7876358,
    "text": "私は100 xd.comを2つのlocalhostsに接続した。"
  },
  {
    "start": 7876524,
    "end": 7886258,
    "text": "結局のところ、現実の世界では、star 100 xd.comをリクエスト・ハンドラ・サービス（Kubernetesクラスタ）に向けることができるドメインを持つことになる。"
  },
  {
    "start": 7886274,
    "end": 7889254,
    "text": "これらのリクエストをすべて処理する単一のインスタンスとすることもできる。"
  },
  {
    "start": 7889382,
    "end": 7889914,
    "text": "クールだ。"
  },
  {
    "start": 7890032,
    "end": 7893046,
    "text": "これが2ビット目、あるいは3ビット目のリクエスト・ハンドラである。"
  },
  {
    "start": 7893158,
    "end": 7894842,
    "text": "このすべてを結びつけよう。"
  },
  {
    "start": 7894976,
    "end": 7900394,
    "text": "3つのサービスをローカルで開始し、フロントエンドのコードを見てみよう。"
  },
  {
    "start": 7900432,
    "end": 7905342,
    "text": "どのようなリクエストを送り、どのようにそれを実行することができるのか見てみよう。"
  },
  {
    "start": 7905396,
    "end": 7915534,
    "text": "ビデオの冒頭で見た、GitHubのリポジトリを入力として、それをインターネット上にデプロイし、誰でもアクセスできるようにする方法とは？"
  },
  {
    "start": 7915582,
    "end": 7916180,
    "text": "クールだ。"
  },
  {
    "start": 7917350,
    "end": 7925410,
    "text": "その前に、第1節と第2節でいくつか見逃した点があったことを覚えているかな。"
  },
  {
    "start": 7925570,
    "end": 7932550,
    "text": "私たちは基本的に、ユーザーがデプロイのステータスを確認するために引き出せるエンドポイントを作成していません。"
  },
  {
    "start": 7932890,
    "end": 7942358,
    "text": "このようなアプリケーションで何が起こるかというと、これがあなたのブラウザーで、ブラウザーから最初のサーバーにリクエストを送る場合だ。"
  },
  {
    "start": 7942454,
    "end": 7943770,
    "text": "このサーバーは何だったのですか？"
  },
  {
    "start": 7944270,
    "end": 7948106,
    "text": "3000で稼働していたアップロードサーバー。"
  },
  {
    "start": 7948208,
    "end": 7955870,
    "text": "ブラウザはここにリクエストを送り、「GitHub.com xyzをデプロイしてください。"
  },
  {
    "start": 7956690,
    "end": 7959200,
    "text": "このサービスは何をする必要があるのか？"
  },
  {
    "start": 7960450,
    "end": 7962274,
    "text": "バックエンドで起こることはたくさんあるよね？"
  },
  {
    "start": 7962312,
    "end": 7975570,
    "text": "5秒かけてs3にアップロードし、redisのキューに入れる。"
  },
  {
    "start": 7977270,
    "end": 7980610,
    "text": "2番目のプロセスでは、デプロイメントが行われる。"
  },
  {
    "start": 7981350,
    "end": 7992502,
    "text": "デプロイヤーが実際に動作し、プロジェクトをビルドし、問題なく実行できるようになるのは、ブラウザが3001で実行されている3番目のサービスを実際にヒットできるようになるときだ。"
  },
  {
    "start": 7992636,
    "end": 7996914,
    "text": "基本的に、ブラウザが気づくまでには長い時間がかかる。"
  },
  {
    "start": 7996962,
    "end": 8000246,
    "text": "これで3001にアクセスできるようになった。"
  },
  {
    "start": 8000428,
    "end": 8002654,
    "text": "ブラウザはどうやって現在のステータスを知ることができるのか？"
  },
  {
    "start": 8002722,
    "end": 8003434,
    "text": "なぜわかるのか？"
  },
  {
    "start": 8003472,
    "end": 8013630,
    "text": "ここで止まっているのか、レディスのキューに入っているのか、それとも3001番コロンでアクセスできるようになったのか、それともインターネットのどこかで利用できるようになったのか？"
  },
  {
    "start": 8014050,
    "end": 8016122,
    "text": "その方法のひとつがkbaiだ。"
  },
  {
    "start": 8016186,
    "end": 8045842,
    "text": "こいつがアップロードするたびに、こいつがステータスを送り返すたびに、こいつがidを送り返すたびに、こいつもある種のデータベースケハバイにidを入れる。"
  },
  {
    "start": 8045906,
    "end": 8057834,
    "text": "Kehabai id oneが最終的に配備され、ブラウザが公開できる特定のサービスを引っ張り続ける必要がある。"
  },
  {
    "start": 8057872,
    "end": 8059750,
    "text": "アップロードされているのか、それともデプロイされているのか？"
  },
  {
    "start": 8059830,
    "end": 8069130,
    "text": "ブラウザは、このリクエストを送信した後、サービスをプルし続ける必要があり、ブラウザは5秒ごとにこのサーバーに問い合わせる必要がある。"
  },
  {
    "start": 8069210,
    "end": 8071470,
    "text": "ケバイ......状況は？"
  },
  {
    "start": 8075320,
    "end": 8079190,
    "text": "イド・ワンの状況は？"
  },
  {
    "start": 8079500,
    "end": 8080868,
    "text": "まだ配備されているのか？"
  },
  {
    "start": 8080964,
    "end": 8081796,
    "text": "アップロードされていますか？"
  },
  {
    "start": 8081828,
    "end": 8082712,
    "text": "宙に浮いている？"
  },
  {
    "start": 8082766,
    "end": 8083256,
    "text": "教えてください。"
  },
  {
    "start": 8083278,
    "end": 8085512,
    "text": "それなら、この男は戻ってくる必要がある。"
  },
  {
    "start": 8085566,
    "end": 8092604,
    "text": "Kehamaiはデータベースをチェックし、アップロードされたままか、デプロイされたかを判断して、ユーザーに知らせることができる。"
  },
  {
    "start": 8092642,
    "end": 8095112,
    "text": "ケハ これが最終的なステータスだ。"
  },
  {
    "start": 8095176,
    "end": 8101256,
    "text": "これは、ブラウザがプルし続けることができるエンドポイントを構築するために必要な部分である。"
  },
  {
    "start": 8101368,
    "end": 8107388,
    "text": "このデータベース・ロジックでは、この男もこの男もデータベースに何かを入れることができる。"
  },
  {
    "start": 8107564,
    "end": 8108976,
    "text": "どのようなデータベースが使えるのか？"
  },
  {
    "start": 8108998,
    "end": 8110476,
    "text": "どんなデータベースを使ってもいい。"
  },
  {
    "start": 8110668,
    "end": 8114400,
    "text": "ありがたいことに、redisはデータを保存することもできる。"
  },
  {
    "start": 8114550,
    "end": 8118884,
    "text": "redisストアにデータを保存することは推奨されません。"
  },
  {
    "start": 8119002,
    "end": 8120384,
    "text": "これはキャッシュのためだけに使うべきだ。"
  },
  {
    "start": 8120432,
    "end": 8125376,
    "text": "Redisは、アプリケーションとSQLまたはNoSQLデータベースにとって最適な恒久的ストアではない。"
  },
  {
    "start": 8125568,
    "end": 8127136,
    "text": "今のところ、それは問題ではない。"
  },
  {
    "start": 8127178,
    "end": 8134968,
    "text": "ローカルで動かしているredisサーバーを再利用してデータを保存する。"
  },
  {
    "start": 8135054,
    "end": 8138228,
    "text": "ここでのステップに戻るなら、そのステップは何だったのか？"
  },
  {
    "start": 8138404,
    "end": 8146632,
    "text": "また、現在の動画 IDS ステータスをアップロード済みとして保存する。これは基本的に、この動画がアップロードされたことをデータベースに伝えることを意味する。"
  },
  {
    "start": 8146696,
    "end": 8148012,
    "text": "それが最初にやるべきことだ。"
  },
  {
    "start": 8148066,
    "end": 8150030,
    "text": "早速、そのコードを書いてみよう。"
  },
  {
    "start": 8162550,
    "end": 8165906,
    "text": "これは我々のオリジナル・プロジェクトだ。"
  },
  {
    "start": 8166008,
    "end": 8166670,
    "text": "どれですか？"
  },
  {
    "start": 8166760,
    "end": 8168070,
    "text": "最初のサービス。"
  },
  {
    "start": 8168140,
    "end": 8170630,
    "text": "3000で動いているサービス。"
  },
  {
    "start": 8170700,
    "end": 8181094,
    "text": "このサービスは、redisキューにパブリッシュするために使用されるすべての処理を終えた後、gitコードをthreeにアップロードするだけである。"
  },
  {
    "start": 8181142,
    "end": 8182602,
    "text": "ケハバイ、いいものがあるんだ。"
  },
  {
    "start": 8182656,
    "end": 8183358,
    "text": "拾ってください。"
  },
  {
    "start": 8183364,
    "end": 8184234,
    "text": "配備者。"
  },
  {
    "start": 8184362,
    "end": 8186350,
    "text": "その直後に、もうひとつ追加した。"
  },
  {
    "start": 8186500,
    "end": 8197650,
    "text": "つまり、SQLのinsert文やmongodbのdot createのようなものです。"
  },
  {
    "start": 8198630,
    "end": 8209794,
    "text": "プライマリデータベースとしてredisを使っているので、そこに値を設定する1つの方法は、パブリッシャーがキーを設定することです。"
  },
  {
    "start": 8209832,
    "end": 8210658,
    "text": "テーブルとは"
  },
  {
    "start": 8210744,
    "end": 8211966,
    "text": "これが我々のステータス表だ。"
  },
  {
    "start": 8212078,
    "end": 8217366,
    "text": "これは、この特定のレコードを特定するためのキーであり、次にアップロードされるのはそのレコードの現在の状態である。"
  },
  {
    "start": 8217388,
    "end": 8218370,
    "text": "まだ配備されていない。"
  },
  {
    "start": 8218450,
    "end": 8219426,
    "text": "アップロードされたばかりだ。"
  },
  {
    "start": 8219458,
    "end": 8220418,
    "text": "どうすればこの値を取り戻せますか？"
  },
  {
    "start": 8220444,
    "end": 8228940,
    "text": "もし、パブリッシャーhと等しいconst値が欲しかったら、ステータスのコンマIDを取得する。"
  },
  {
    "start": 8229630,
    "end": 8231674,
    "text": "これで現在の値がわかる。"
  },
  {
    "start": 8231712,
    "end": 8234122,
    "text": "待ってみないとわからないかもしれないけど、わかるよね？"
  },
  {
    "start": 8234176,
    "end": 8238286,
    "text": "これで、アップロードされた、あるいはデプロイされた、あるいはその他の現在の値がわかる。"
  },
  {
    "start": 8238308,
    "end": 8240330,
    "text": "これはデータベースのようなものだ。"
  },
  {
    "start": 8240410,
    "end": 8242974,
    "text": "一般的に使われているデータベースではないが、データを保存することができる。"
  },
  {
    "start": 8243012,
    "end": 8243998,
    "text": "データを取り出すことができる。"
  },
  {
    "start": 8244084,
    "end": 8244766,
    "text": "クールだ。"
  },
  {
    "start": 8244948,
    "end": 8250254,
    "text": "ステータス・データベースやステータス・テーブルにデータをセットすることができた。"
  },
  {
    "start": 8250382,
    "end": 8253518,
    "text": "このIDは現在アップロード中で、まだデプロイされていない。"
  },
  {
    "start": 8253614,
    "end": 8255378,
    "text": "次にやるべきことは何ですか？"
  },
  {
    "start": 8255544,
    "end": 8257218,
    "text": "他のプロジェクトに行く必要がある。"
  },
  {
    "start": 8257304,
    "end": 8262120,
    "text": "デプロイサービスに行く必要がある。"
  },
  {
    "start": 8262490,
    "end": 8267990,
    "text": "この契約者に何が必要なのか？"
  },
  {
    "start": 8268330,
    "end": 8273586,
    "text": "まず、Redisについて一つ言えることは、同じクライアントからパブリッシュとサブスクライブを行うことはできないということだ。"
  },
  {
    "start": 8273618,
    "end": 8276214,
    "text": "の場合は、別のパブリッシャーを作成する必要があります。"
  },
  {
    "start": 8276262,
    "end": 8280646,
    "text": "このサブスクライバを使用して、データを取得し、Redisにデータを置くことはできません。"
  },
  {
    "start": 8280678,
    "end": 8287466,
    "text": "そのため、まずRedisの新しいパブリッシャーかクライアントを作成する必要があります。"
  },
  {
    "start": 8287578,
    "end": 8296660,
    "text": "そして最後に、ファイルをダウンロードし、プロジェクトを構築し、プロジェクトを元に戻したら、パブリッシャーセットを行うことができます。"
  },
  {
    "start": 8297670,
    "end": 8298594,
    "text": "あれは何？"
  },
  {
    "start": 8298632,
    "end": 8303570,
    "text": "ステータスのコンマIDのコンマが配備された。"
  },
  {
    "start": 8307580,
    "end": 8309620,
    "text": "私が追加したこの1行は何ですか？"
  },
  {
    "start": 8309700,
    "end": 8312552,
    "text": "このラインだ。"
  },
  {
    "start": 8312606,
    "end": 8315416,
    "text": "デプロイヤーはRedis Kibaiにデプロイされたことを伝える。"
  },
  {
    "start": 8315448,
    "end": 8316172,
    "text": "すべて終わった。"
  },
  {
    "start": 8316226,
    "end": 8318760,
    "text": "ステータスがアップロードされ、デプロイに更新された。"
  },
  {
    "start": 8318840,
    "end": 8326768,
    "text": "そうすれば、ユーザーがこのサービスを引くときはいつでも、アップロードされたことを知ることができる。"
  },
  {
    "start": 8326854,
    "end": 8329744,
    "text": "なぜなら、ここでのステップはすべて終わっているからだ。"
  },
  {
    "start": 8329782,
    "end": 8334384,
    "text": "プロジェクトのコピーやデプロイといった非同期的な部分は、私たちのおかげで完了した。"
  },
  {
    "start": 8334422,
    "end": 8340630,
    "text": "このredisデータベースにデータを保存すると、エッジセットされるエラーがあるようだ。"
  },
  {
    "start": 8341320,
    "end": 8343012,
    "text": "よし、行ってみよう。"
  },
  {
    "start": 8343146,
    "end": 8346480,
    "text": "最後にしなければならないのは、このエンドポイントだ。"
  },
  {
    "start": 8346560,
    "end": 8351696,
    "text": "動画の現在のステータスを取得するためにフロントエンドが取得するステータスエンドポイントを公開する。"
  },
  {
    "start": 8351818,
    "end": 8355752,
    "text": "フロントエンドはポーリングを行い、「このビデオのステータスは？"
  },
  {
    "start": 8355806,
    "end": 8357096,
    "text": "このビデオの状況は？"
  },
  {
    "start": 8357198,
    "end": 8361684,
    "text": "すでに作成したエクスプレス・サーバーで、このエンドポイントを公開する必要がある。"
  },
  {
    "start": 8361732,
    "end": 8363364,
    "text": "このエクスプレス・サーバーでできますか？"
  },
  {
    "start": 8363412,
    "end": 8364272,
    "text": "おそらく場合による"
  },
  {
    "start": 8364356,
    "end": 8367372,
    "text": "新しいサービスを作成することも、既存のサービスを利用することもできます。"
  },
  {
    "start": 8367426,
    "end": 8370296,
    "text": "このエンドポイントをどこに公開したいかによる。"
  },
  {
    "start": 8370408,
    "end": 8377490,
    "text": "ここでは、最初のサービスであるアップロード・サービスでそれを公開することにする。"
  },
  {
    "start": 8388670,
    "end": 8389866,
    "text": "それでうまくいくと思う。"
  },
  {
    "start": 8389968,
    "end": 8392794,
    "text": "新しいエンドポイントのステータスを公開した。"
  },
  {
    "start": 8392842,
    "end": 8394026,
    "text": "これはエンドポイントの取得だ。"
  },
  {
    "start": 8394138,
    "end": 8396990,
    "text": "これは、ユーザーがあなたに与えるIDを期待します。"
  },
  {
    "start": 8397140,
    "end": 8399374,
    "text": "基本的にこのIDはここにある。"
  },
  {
    "start": 8399492,
    "end": 8402122,
    "text": "彼らは特定の配備状況を求めている。"
  },
  {
    "start": 8402266,
    "end": 8405350,
    "text": "そして、Redis内部の現在のステータスをチェックする。"
  },
  {
    "start": 8405450,
    "end": 8411758,
    "text": "先ほど言ったように、同じクライアントからパブリッシュとサブスクライブをすることはできないので、一番上に新しいサブスクライバーも作りました。"
  },
  {
    "start": 8411934,
    "end": 8413486,
    "text": "このプロジェクトには出版社しかなかった。"
  },
  {
    "start": 8413518,
    "end": 8419606,
    "text": "サブスクライバーを作成する必要がある。"
  },
  {
    "start": 8419628,
    "end": 8420146,
    "text": "リディスク。"
  },
  {
    "start": 8420178,
    "end": 8426134,
    "text": "Rediskから、ユーザーが望んでいる特定のIDの現在のステータスは何か？"
  },
  {
    "start": 8426252,
    "end": 8427366,
    "text": "これはタイプスクリプトのコードだ。"
  },
  {
    "start": 8427388,
    "end": 8428386,
    "text": "無視するのは自由だ。"
  },
  {
    "start": 8428498,
    "end": 8431702,
    "text": "javascriptを使用している場合は、ここにidだけを書くこともできる。"
  },
  {
    "start": 8431766,
    "end": 8437370,
    "text": "我々は非常に厳格なタイプスクリプトを持っている。"
  },
  {
    "start": 8437440,
    "end": 8437882,
    "text": "分かった。"
  },
  {
    "start": 8437936,
    "end": 8440998,
    "text": "そして最後に現在のステータスを返す。"
  },
  {
    "start": 8441174,
    "end": 8442330,
    "text": "たくさんのコードを書いた。"
  },
  {
    "start": 8442400,
    "end": 8445310,
    "text": "すべてを結びつけて、それが実際に機能するかどうかを見てみよう。"
  },
  {
    "start": 8445380,
    "end": 8453074,
    "text": "デプロイメントを送信して、このエンドポイントをポーリングし始め、実際にゆっくりと段階的に正しい値を返してくれるかどうかを見てみよう。"
  },
  {
    "start": 8453112,
    "end": 8456862,
    "text": "カーン・シュルメがアップロードされ、しばらくしてようやく配備される。"
  },
  {
    "start": 8456926,
    "end": 8458658,
    "text": "実際にそうなるかどうか、見てみよう。"
  },
  {
    "start": 8458824,
    "end": 8461570,
    "text": "最初のプロセスはローカルで始めよう。"
  },
  {
    "start": 8466570,
    "end": 8469240,
    "text": "最初のプロセスにリクエストを送ろう。"
  },
  {
    "start": 8477950,
    "end": 8479450,
    "text": "IDが戻ってきた。"
  },
  {
    "start": 8479600,
    "end": 8482780,
    "text": "このIDに投票し、どんなステータスが返ってくるか見てみよう。"
  },
  {
    "start": 8487680,
    "end": 8496160,
    "text": "recクエリidからidを取得しているため、idと等しい疑問符idをステータスとして取得するリクエストになります。"
  },
  {
    "start": 8496230,
    "end": 8497404,
    "text": "このクエリは何ですか？"
  },
  {
    "start": 8497532,
    "end": 8498972,
    "text": "これらのクエリ・パラメータのどれか？"
  },
  {
    "start": 8499036,
    "end": 8500172,
    "text": "これが問い合わせを送る方法だ。"
  },
  {
    "start": 8500236,
    "end": 8502584,
    "text": "このリクエストのためにボディを送る必要もない。"
  },
  {
    "start": 8502652,
    "end": 8507968,
    "text": "送信をクリックすると、ステータスがアップロードされたと表示される。"
  },
  {
    "start": 8508064,
    "end": 8510480,
    "text": "まだ配備されておらず、アップロードされているだけだ。"
  },
  {
    "start": 8510560,
    "end": 8510996,
    "text": "なぜですか？"
  },
  {
    "start": 8511098,
    "end": 8513236,
    "text": "なぜなら、私たちはセカンド・サービスすら実施していないからだ。"
  },
  {
    "start": 8513338,
    "end": 8517480,
    "text": "次に2つ目のサービスを開始しよう。"
  },
  {
    "start": 8527620,
    "end": 8529296,
    "text": "ここで2つ目のサービスを始めよう。"
  },
  {
    "start": 8529318,
    "end": 8531350,
    "text": "ソケットがすでに開いていると表示される。"
  },
  {
    "start": 8538520,
    "end": 8539716,
    "text": "ここにバグがあった。"
  },
  {
    "start": 8539818,
    "end": 8546180,
    "text": "パブリッシャーと同等のコネクションを作成する場合、サブスクライバーコネクションではなく、パブリッシャーコネクションを作成する必要があります。"
  },
  {
    "start": 8546250,
    "end": 8547236,
    "text": "クールでシンプルなバグだ。"
  },
  {
    "start": 8547268,
    "end": 8549304,
    "text": "vimで修正しただけで、vsコードでは開いていない。"
  },
  {
    "start": 8549342,
    "end": 8550504,
    "text": "うまくいけばいいんだけどね。"
  },
  {
    "start": 8550702,
    "end": 8554660,
    "text": "さて、改めてステータスを確認すると、まだアップロードされているだけだ。"
  },
  {
    "start": 8554740,
    "end": 8556204,
    "text": "ディプロイヤーが選んでいない。"
  },
  {
    "start": 8556242,
    "end": 8557724,
    "text": "作業員はまだ選んでいない。"
  },
  {
    "start": 8557762,
    "end": 8559496,
    "text": "まだredisのキューに残っている。"
  },
  {
    "start": 8559528,
    "end": 8560396,
    "text": "それはどこですか？"
  },
  {
    "start": 8560578,
    "end": 8562590,
    "text": "こっちだ。"
  },
  {
    "start": 8567500,
    "end": 8569530,
    "text": "ここまで何をしてきたのか？"
  },
  {
    "start": 8571020,
    "end": 8574890,
    "text": "ここまでは、私たちがやってきたことだ。"
  },
  {
    "start": 8576800,
    "end": 8583272,
    "text": "リクエストを送信し、idが返ってきたのですが、そのidを何度も引き出そうとしているのですが、アップロードされたステータスが表示されるだけなんです。"
  },
  {
    "start": 8583336,
    "end": 8583804,
    "text": "なぜですか？"
  },
  {
    "start": 8583922,
    "end": 8585916,
    "text": "まだredisのキューに残っているからだ。"
  },
  {
    "start": 8585948,
    "end": 8590816,
    "text": "現在デプロイヤーが稼動していないため、デプロイヤーに拾われていない。"
  },
  {
    "start": 8590918,
    "end": 8592316,
    "text": "デプロイメントをさせてくれ、ルーキー。"
  },
  {
    "start": 8592348,
    "end": 8592930,
    "text": "次ページ"
  },
  {
    "start": 8595720,
    "end": 8598980,
    "text": "デプロイヤーを実行すると、ご覧のように待機中だ。"
  },
  {
    "start": 8603400,
    "end": 8604768,
    "text": "ログは削除したかな？"
  },
  {
    "start": 8604864,
    "end": 8605830,
    "text": "分からないよ。"
  },
  {
    "start": 8609020,
    "end": 8609736,
    "text": "いや、していない。"
  },
  {
    "start": 8609758,
    "end": 8610456,
    "text": "そうだ。"
  },
  {
    "start": 8610558,
    "end": 8611708,
    "text": "このプロジェクトを立ち上げた。"
  },
  {
    "start": 8611794,
    "end": 8616936,
    "text": "3番でも2番でも、どこにでもアップロードしている。"
  },
  {
    "start": 8617048,
    "end": 8623144,
    "text": "Postmanに戻って、このステータスがアップロード済みからデプロイ済みになっているか確認してみよう。"
  },
  {
    "start": 8623272,
    "end": 8624604,
    "text": "確かにそうだ。"
  },
  {
    "start": 8624722,
    "end": 8625392,
    "text": "これでよし。"
  },
  {
    "start": 8625446,
    "end": 8628224,
    "text": "フロント・エンドはアプリケーションをプルし、チェックすることができる。"
  },
  {
    "start": 8628262,
    "end": 8628876,
    "text": "キハバイ。"
  },
  {
    "start": 8628908,
    "end": 8629548,
    "text": "アップロードされていますか？"
  },
  {
    "start": 8629564,
    "end": 8630284,
    "text": "アップロードされていますか？"
  },
  {
    "start": 8630332,
    "end": 8630592,
    "text": "そうだ。"
  },
  {
    "start": 8630646,
    "end": 8631676,
    "text": "配備されているか？"
  },
  {
    "start": 8631788,
    "end": 8632704,
    "text": "そうだ。"
  },
  {
    "start": 8632822,
    "end": 8636464,
    "text": "これでユーザーはこの特定のエンドポイントを叩くことができる。"
  },
  {
    "start": 8636512,
    "end": 8653384,
    "text": "ターミナルでopen etc hostsを開き、この100 xd.comを現在のIDである100 xd.comのURLに変更する。"
  },
  {
    "start": 8653502,
    "end": 8672892,
    "text": "Versailleリクエスト・ハンドラである3つ目のサービスを起動すると、この特定のデプロイのID 100 x devs.com 3001 index HTMLにアクセスできる。"
  },
  {
    "start": 8672946,
    "end": 8674968,
    "text": "よし、わかりやすかったかな。"
  },
  {
    "start": 8675064,
    "end": 8679552,
    "text": "では、これを最初に見たUIにどうつなげるかを見てみよう。"
  },
  {
    "start": 8679606,
    "end": 8681084,
    "text": "でも、かなり簡単なものであってほしい。"
  },
  {
    "start": 8681132,
    "end": 8682144,
    "text": "そこで何が起きているのか。"
  },
  {
    "start": 8682262,
    "end": 8685532,
    "text": "我々は、postmanではなく、これらのエンドポイントを叩くUIを持っているだけだ。"
  },
  {
    "start": 8685676,
    "end": 8692820,
    "text": "返ってきたレスポンスに基づいて、アプリケーションにアクセスできる最終的なURLを取得することができます。"
  },
  {
    "start": 8692890,
    "end": 8695030,
    "text": "次にフロントエンドのコードを見てみよう。"
  },
  {
    "start": 8696680,
    "end": 8698890,
    "text": "もう書いたから、開くだけだよ。"
  },
  {
    "start": 8714690,
    "end": 8718686,
    "text": "これが最終的なリアクトのアプリケーションの姿だ。"
  },
  {
    "start": 8718788,
    "end": 8724478,
    "text": "私はこのフロントエンドフォルダを持っており、そのトップレベルにはアプリTSXがあり、ランディングページをレンダリングしています。"
  },
  {
    "start": 8724564,
    "end": 8727070,
    "text": "このランディングページのコードを見てみよう。"
  },
  {
    "start": 8727220,
    "end": 8732002,
    "text": "さて、このUIプロジェクトは少し複雑で、知らなくてもいいライブラリをたくさん使っている。"
  },
  {
    "start": 8732056,
    "end": 8733998,
    "text": "チャドCを使い、追い風を使う。"
  },
  {
    "start": 8734094,
    "end": 8734946,
    "text": "コードはGitHubにある。"
  },
  {
    "start": 8734978,
    "end": 8735990,
    "text": "見てみるといい。"
  },
  {
    "start": 8736060,
    "end": 8739894,
    "text": "スタイリングを理解する必要はないし、どうしてこのようにきれいに見えるのか理解する必要もない。"
  },
  {
    "start": 8739932,
    "end": 8741480,
    "text": "どんなものかお見せしよう。"
  },
  {
    "start": 8746650,
    "end": 8748390,
    "text": "アプリケーションはこんな感じだ。"
  },
  {
    "start": 8748460,
    "end": 8751850,
    "text": "ここにURLを入れて、アップロードボタンをクリックする必要がある。"
  },
  {
    "start": 8752000,
    "end": 8753898,
    "text": "アップロードボタンをクリックするとどうなりますか？"
  },
  {
    "start": 8753984,
    "end": 8755180,
    "text": "見てみよう。"
  },
  {
    "start": 8759330,
    "end": 8763490,
    "text": "ボタンをクリックすると、バックエンドのアップロードURLにリクエストが行く。"
  },
  {
    "start": 8763830,
    "end": 8764478,
    "text": "アップロードする"
  },
  {
    "start": 8764574,
    "end": 8766660,
    "text": "これが、私たちがぶつかるべき終着点だったのだろうか？"
  },
  {
    "start": 8767030,
    "end": 8770130,
    "text": "いや、今はスラッシュ・デプロイのエンドポイントだ。"
  },
  {
    "start": 8770280,
    "end": 8776786,
    "text": "バックエンドのアップロードURLのスラッシュ・デプロイ・エンドポイントはlocalhost 3000である。"
  },
  {
    "start": 8776888,
    "end": 8777926,
    "text": "何を送るのか？"
  },
  {
    "start": 8777948,
    "end": 8779298,
    "text": "URLを送る。"
  },
  {
    "start": 8779474,
    "end": 8780614,
    "text": "何を送る必要があるのか？"
  },
  {
    "start": 8780652,
    "end": 8783938,
    "text": "レポのURLを送る必要がある。"
  },
  {
    "start": 8784114,
    "end": 8785960,
    "text": "このコードを少し変えてみよう。"
  },
  {
    "start": 8787130,
    "end": 8793900,
    "text": "idをレストデータのidに設定するにはどうすればいいのでしょうか？"
  },
  {
    "start": 8795230,
    "end": 8796380,
    "text": "私はそう思う。"
  },
  {
    "start": 8797470,
    "end": 8805114,
    "text": "このため、同じURLのステータス・エンドポイントをプルするインターバルを開始する。"
  },
  {
    "start": 8805242,
    "end": 8807760,
    "text": "クエスチョンマークidは、正しく見えるものに等しい。"
  },
  {
    "start": 8815550,
    "end": 8819902,
    "text": "それで十分だ。"
  },
  {
    "start": 8820036,
    "end": 8825486,
    "text": "そして、もしそれがデプロイされれば、デプロイ先が決まる。"
  },
  {
    "start": 8825508,
    "end": 8826080,
    "text": "本当か？"
  },
  {
    "start": 8826690,
    "end": 8827102,
    "text": "そうだね。"
  },
  {
    "start": 8827156,
    "end": 8830718,
    "text": "よし、まず走らせてみよう。"
  },
  {
    "start": 8830884,
    "end": 8834574,
    "text": "どのように見えるかお見せしてから、コードもお見せしましょう。"
  },
  {
    "start": 8834692,
    "end": 8836746,
    "text": "僕らが書いた新しいバックエンドにコードを接続した。"
  },
  {
    "start": 8836778,
    "end": 8839130,
    "text": "これは実は、私が書いた古いバックエンドに接続されていた。"
  },
  {
    "start": 8839290,
    "end": 8842066,
    "text": "今、僕らが作った新しいバックエンドに接続したところだ。"
  },
  {
    "start": 8842098,
    "end": 8846326,
    "text": "すべてのサービスをローカルで立ち上げ、フロントエンドを立ち上げて、うまくいくかどうか見てみよう。"
  },
  {
    "start": 8846348,
    "end": 8848870,
    "text": "では、ソースコードもお見せしましょう。"
  },
  {
    "start": 8848940,
    "end": 8856300,
    "text": "その1、まずは......えーと。"
  },
  {
    "start": 8857550,
    "end": 8862122,
    "text": "いや、私はこのプロジェクトを開く。"
  },
  {
    "start": 8862176,
    "end": 8869070,
    "text": "さて、itermを開いて、ここですべてのプロセスを開始しよう。"
  },
  {
    "start": 8869140,
    "end": 8870206,
    "text": "より理にかなっている。"
  },
  {
    "start": 8870388,
    "end": 8875998,
    "text": "最初のプロジェクト・ノード（ポート3000で稼動しているノード）を起動する。"
  },
  {
    "start": 8876084,
    "end": 8882740,
    "text": "2つ目のデプロイ・サービスを開始し、3つ目のデプロイ・サービスを開始する。"
  },
  {
    "start": 8888080,
    "end": 8895440,
    "text": "フロントエンドはすでに動いていて、正しいURLを指している。"
  },
  {
    "start": 8895590,
    "end": 8897872,
    "text": "フロントエンドをリフレッシュさせてくれ。"
  },
  {
    "start": 8897926,
    "end": 8903584,
    "text": "基本的なreactのボイラープレート・プロジェクトのコードを入手させてください。"
  },
  {
    "start": 8903782,
    "end": 8907900,
    "text": "コンソールを開いて、すべてのリクエストを調べてみよう。"
  },
  {
    "start": 8908060,
    "end": 8909840,
    "text": "アップロードをクリックさせてください。"
  },
  {
    "start": 8910000,
    "end": 8911440,
    "text": "アップロード中と書いてある。"
  },
  {
    "start": 8911600,
    "end": 8914848,
    "text": "アップロードされると、デプロイ中と表示され、URLが表示される。"
  },
  {
    "start": 8914944,
    "end": 8917910,
    "text": "見ての通り、何度も何度もステータスをポーリングしている。"
  },
  {
    "start": 8918280,
    "end": 8919856,
    "text": "配備されたのか？"
  },
  {
    "start": 8919888,
    "end": 8920736,
    "text": "配備されたのか？"
  },
  {
    "start": 8920768,
    "end": 8921828,
    "text": "配備されたのか？"
  },
  {
    "start": 8921924,
    "end": 8926052,
    "text": "ある時点で、すべてのサービスが正常に機能していれば、デプロイされる。"
  },
  {
    "start": 8926116,
    "end": 8932140,
    "text": "そうなれば、訪問可能なURLが表示されるのだが、そうはなっていないようだ。"
  },
  {
    "start": 8932290,
    "end": 8934824,
    "text": "ターミナルに行き、正しいログが取れているか確認してみよう。"
  },
  {
    "start": 8934872,
    "end": 8937500,
    "text": "いや、どちらかのプロセスが失敗したんだ。"
  },
  {
    "start": 8938080,
    "end": 8939390,
    "text": "なんて書いてある？"
  },
  {
    "start": 8955330,
    "end": 8957700,
    "text": "もう1回やってみよう。"
  },
  {
    "start": 8958150,
    "end": 8959134,
    "text": "バグかもしれない。"
  },
  {
    "start": 8959182,
    "end": 8969990,
    "text": "デプロイサービスにバグがあるようだ。"
  },
  {
    "start": 8970730,
    "end": 8973160,
    "text": "ああ、このバグの正体がわかるかもしれない。"
  },
  {
    "start": 8973930,
    "end": 8974680,
    "text": "そうだね。"
  },
  {
    "start": 8975290,
    "end": 8982620,
    "text": "良いことは、簡単に修正できることで、バグの正体は分かっているし、物事を複雑にしたくないから修正しなかった。"
  },
  {
    "start": 8983150,
    "end": 8984890,
    "text": "基本的にはそうだ。"
  },
  {
    "start": 8984960,
    "end": 8988220,
    "text": "このコードではアップロードはできない。"
  },
  {
    "start": 8988990,
    "end": 8993914,
    "text": "何が起きているかというと、パブリッシャーのLpushは起きているが、これらのアップロードはまだ起きていない。"
  },
  {
    "start": 8993952,
    "end": 8997130,
    "text": "これらすべてのアップロードを待っているわけではない。"
  },
  {
    "start": 8997290,
    "end": 8999934,
    "text": "これは私がずっと言い続けてきたことなんだ。"
  },
  {
    "start": 8999972,
    "end": 9000506,
    "text": "キハム"
  },
  {
    "start": 9000618,
    "end": 9008674,
    "text": "ファイルをアップロードするときは、非同期関数があるときはいつでもpromise化すべきだ。"
  },
  {
    "start": 9008712,
    "end": 9013966,
    "text": "このコードが前に表示されたとしても、このコードが必ずしもこれらのすべてが実際にアップロードされたことを意味するわけではない。"
  },
  {
    "start": 9013998,
    "end": 9015038,
    "text": "我々は彼らを正しく待っていない。"
  },
  {
    "start": 9015054,
    "end": 9017274,
    "text": "ここに \"await \"と書かれていても、\"await \"されているわけではない。"
  },
  {
    "start": 9017422,
    "end": 9018342,
    "text": "いくつかできることがある。"
  },
  {
    "start": 9018396,
    "end": 9040364,
    "text": "とりあえず、このチュートリアルのために、ここで5秒間待つことにします。"
  },
  {
    "start": 9040402,
    "end": 9045896,
    "text": "それで5分5秒の息抜きができるし、その5秒の間にすべてがアップロードされると思う。"
  },
  {
    "start": 9045928,
    "end": 9048770,
    "text": "もう大丈夫だろう。"
  },
  {
    "start": 9049860,
    "end": 9052240,
    "text": "もう1回やってみよう。"
  },
  {
    "start": 9052310,
    "end": 9053410,
    "text": "すべてのサービスを開始した。"
  },
  {
    "start": 9053940,
    "end": 9057216,
    "text": "ページのアップロードをリフレッシュして、エラーが出るか確認してみよう。"
  },
  {
    "start": 9057238,
    "end": 9057424,
    "text": "今すぐだ。"
  },
  {
    "start": 9057462,
    "end": 9059910,
    "text": "そんなことはないと思うが、間違っているかもしれない。"
  },
  {
    "start": 9065180,
    "end": 9065912,
    "text": "そうだ。"
  },
  {
    "start": 9065966,
    "end": 9066904,
    "text": "うまくいったようだ。"
  },
  {
    "start": 9067022,
    "end": 9070712,
    "text": "また少し待つつもりだ。"
  },
  {
    "start": 9070766,
    "end": 9078296,
    "text": "私たちは常にバックエンドを引っ張り出してステータスをチェックし、ある時点でデプロイされれば、それを確認することができる。"
  },
  {
    "start": 9078328,
    "end": 9080248,
    "text": "ああ、配備されているようだから配備されるだろう。"
  },
  {
    "start": 9080344,
    "end": 9080892,
    "text": "そうだ。"
  },
  {
    "start": 9080946,
    "end": 9083208,
    "text": "ウェブサイトが正常にデプロイされたと表示されます。"
  },
  {
    "start": 9083304,
    "end": 9089710,
    "text": "TLDは何であれ、dev 100 x devs.comである。"
  },
  {
    "start": 9090080,
    "end": 9098252,
    "text": "これは、star 100 x devs.comを特定のipアドレスにデプロイした場合にのみ機能する。"
  },
  {
    "start": 9098316,
    "end": 9107056,
    "text": "インターネットにデプロイするときは、ベータKubernetesサーバーやセルが使っているサーバー、あるいは独立したサーバーで、3つのプロセスをローカルで動かしているだけだ。"
  },
  {
    "start": 9107088,
    "end": 9110804,
    "text": "いずれにせよ、これでうまくいく。"
  },
  {
    "start": 9110922,
    "end": 9127232,
    "text": "今はローカルで動かしているので、まず共有したhostsファイルのエントリーを変更しなければならない。"
  },
  {
    "start": 9127286,
    "end": 9131750,
    "text": "今これを見たら、うまくいくはずだと思う。"
  },
  {
    "start": 9133080,
    "end": 9134260,
    "text": "これはクールかどうか？"
  },
  {
    "start": 9134330,
    "end": 9135300,
    "text": "とてもクールだと思う。"
  },
  {
    "start": 9135370,
    "end": 9138884,
    "text": "これが本当に効くのか、それとも単なる流行なのか、見てみよう。"
  },
  {
    "start": 9138932,
    "end": 9142184,
    "text": "このレポジトリをここで変更するだけだ。"
  },
  {
    "start": 9142382,
    "end": 9153672,
    "text": "カウントの名前を変えて、ここに矢印をつけ、コミットして、もう一回全体の流れを確認します。"
  },
  {
    "start": 9153806,
    "end": 9157608,
    "text": "私はこのリポジトリを変更し、このリポジトリのコードも変更した。"
  },
  {
    "start": 9157704,
    "end": 9161372,
    "text": "確認したいのは、最終的なデプロイメントも変わるのか、ということだ。"
  },
  {
    "start": 9161426,
    "end": 9167224,
    "text": "最終的なデプロイメントには、このリポジトリが持っている私の新しい変更があるのかないのか？"
  },
  {
    "start": 9167362,
    "end": 9168544,
    "text": "そうする必要があるよね？"
  },
  {
    "start": 9168662,
    "end": 9169424,
    "text": "おわかりいただけただろうか。"
  },
  {
    "start": 9169462,
    "end": 9173664,
    "text": "私はただ、ここでおかしなことはしていないし、実際にうまくいっていることをお見せしたいだけです。"
  },
  {
    "start": 9173702,
    "end": 9206634,
    "text": "唯一の手作業は、hostsファイルを開き、ここにエントリーを追加することだ。"
  },
  {
    "start": 9206752,
    "end": 9212874,
    "text": "ここではカウントがアロー・ゼロと表示されている。"
  },
  {
    "start": 9212912,
    "end": 9214490,
    "text": "期待通りだ。"
  },
  {
    "start": 9214830,
    "end": 9216826,
    "text": "これはヴェルサイユが行っていることのごく一部である。"
  },
  {
    "start": 9216848,
    "end": 9222974,
    "text": "Verselは実際にあなたのGitHubリポジトリをリストし、コメントがなされるたびにあなたの変更をデプロイする。"
  },
  {
    "start": 9223092,
    "end": 9225902,
    "text": "まだやってはいないが、わかってもらえると思う。"
  },
  {
    "start": 9225956,
    "end": 9226318,
    "text": "クールだ。"
  },
  {
    "start": 9226404,
    "end": 9228560,
    "text": "フロント・エンドのコードを簡単に説明しよう。"
  },
  {
    "start": 9229090,
    "end": 9234094,
    "text": "私たちは基本的に、現在のリポジトリURLを表すいくつかの状態変数を一番上に持っています。"
  },
  {
    "start": 9234142,
    "end": 9251522,
    "text": "基本的に、ここに何を入れても、アップロードされたかどうか、アップロードされた場合は、アップロードID変数で、このボタンにデプロイされたアップロードIDを表示できる。 アップロード変数で、アップロード中かどうかがわかり、デプロイ変数で、デプロイされたかどうかがわかる。"
  },
  {
    "start": 9251666,
    "end": 9257386,
    "text": "もし展開されていれば、2枚目のカードがレンダリングされる。"
  },
  {
    "start": 9257488,
    "end": 9265318,
    "text": "まだデプロイされていない場合は、最初のカードだけがレンダリングされ、このレポのURLに値を入力できる入力ボックスが表示されます。"
  },
  {
    "start": 9265494,
    "end": 9277434,
    "text": "そして最後にボタンをクリックし、アップロード・サービス（最初のサービス）にバックエンドのリクエストを送り、エンドポイントのポーリングを開始するインターバルを開始する。"
  },
  {
    "start": 9277482,
    "end": 9279674,
    "text": "ケハ、状況は変わった？"
  },
  {
    "start": 9279722,
    "end": 9280782,
    "text": "ステータスは変わったのか？"
  },
  {
    "start": 9280846,
    "end": 9286642,
    "text": "ステータスがデプロイされた状態になったら、プロジェクトがデプロイされたことがわかるので、デプロイをtrueに設定する。"
  },
  {
    "start": 9286696,
    "end": 9294374,
    "text": "次のカードのレンダリングは、Kehabaiを表示しています。アップロードのウェブサイトを訪問することができますdev 100 xdes.com。"
  },
  {
    "start": 9294572,
    "end": 9296578,
    "text": "さて、このURLは動的である。"
  },
  {
    "start": 9296594,
    "end": 9299206,
    "text": "このURLが変更されるのは、それをインターネット上に展開したときだ。"
  },
  {
    "start": 9299308,
    "end": 9308774,
    "text": "もし本当に興味があるなら、domains 100 xav.comに行き、ワイルドカードのエントリーを追加してください。"
  },
  {
    "start": 9308822,
    "end": 9309766,
    "text": "ワイルドカード出場とは？"
  },
  {
    "start": 9309798,
    "end": 9314074,
    "text": "基本的に、スタードメイン.comは何かを指すようにする。"
  },
  {
    "start": 9314272,
    "end": 9316074,
    "text": "例えば、私はkdevs.comを10個持っている。"
  },
  {
    "start": 9316112,
    "end": 9322110,
    "text": "ここに行けば、ワイルドカードのエントリーを追加するのが簡単すぎるかどうかはわからないが、たぶんそうだろう。"
  },
  {
    "start": 9322180,
    "end": 9323358,
    "text": "簡単なことだ。"
  },
  {
    "start": 9323444,
    "end": 9325182,
    "text": "おそらく、私が考えているような簡単なことではないと思う。"
  },
  {
    "start": 9325236,
    "end": 9326080,
    "text": "見てみよう。"
  },
  {
    "start": 9327650,
    "end": 9333954,
    "text": "いや、それなら簡単だよ。"
  },
  {
    "start": 9333992,
    "end": 9334530,
    "text": "オーケー。"
  },
  {
    "start": 9334680,
    "end": 9338898,
    "text": "それがうまくいくかどうか見てみよう。"
  },
  {
    "start": 9339064,
    "end": 9340500,
    "text": "それでいいのかもしれない。"
  },
  {
    "start": 9341590,
    "end": 9347446,
    "text": "では、星の点は1 2 7の点o、点o 1を指している。"
  },
  {
    "start": 9347628,
    "end": 9351080,
    "text": "ということは、私がすべきことはこれだけかもしれない。"
  },
  {
    "start": 9353870,
    "end": 9355740,
    "text": "間違っているかもしれないが、いずれ分かるだろう。"
  },
  {
    "start": 9359070,
    "end": 9360266,
    "text": "そうではないんだ。"
  },
  {
    "start": 9360448,
    "end": 9364134,
    "text": "つまり、これが伝播するのに時間がかかるかもしれないんだ。"
  },
  {
    "start": 9364182,
    "end": 9367066,
    "text": "それはケハではないかもしれない。"
  },
  {
    "start": 9367098,
    "end": 9369710,
    "text": "ただ、それが伝播するのに時間がかかるだけかもしれない。"
  },
  {
    "start": 9370930,
    "end": 9377338,
    "text": "今は不明なホストと表示されているが、ある時点でこのどちらかが伝播するか、伝播する必要さえなくなる。"
  },
  {
    "start": 9377354,
    "end": 9384194,
    "text": "これをインターネット上に配置すれば、文字通り、自分のサーバーのIPアドレスを指すだけで、これが機能する。"
  },
  {
    "start": 9384232,
    "end": 9386340,
    "text": "文字通り、何も変える必要がないんだ。"
  },
  {
    "start": 9387670,
    "end": 9391266,
    "text": "具体的なものを作るのに、どれくらい時間がかかるんだろう？"
  },
  {
    "start": 9391288,
    "end": 9392306,
    "text": "今すぐ配備できますか？"
  },
  {
    "start": 9392328,
    "end": 9395240,
    "text": "答えは10分もかからないだろう。"
  },
  {
    "start": 9396170,
    "end": 9398902,
    "text": "午前10時28分である。"
  },
  {
    "start": 9398956,
    "end": 9399746,
    "text": "寝る時間だ。"
  },
  {
    "start": 9399778,
    "end": 9400742,
    "text": "5時に寝るべきだった。"
  },
  {
    "start": 9400796,
    "end": 9403558,
    "text": "やりたいかどうかはわからないけど、やるのはとても簡単だよ。"
  },
  {
    "start": 9403564,
    "end": 9412954,
    "text": "EC 2サーバーを用意し、そのEC 2サーバー上でこれら3つのサービスを実行し、インターネット上に公開して、このエンドポイントをここに指定するだけでいい。"
  },
  {
    "start": 9413072,
    "end": 9422222,
    "text": "私のコードベースでは、dev 100 x dev.comをten k devs.comに変更するだけだ。"
  },
  {
    "start": 9422356,
    "end": 9424430,
    "text": "それで済むはずだが、私はそうはしない。"
  },
  {
    "start": 9424580,
    "end": 9426910,
    "text": "これが洞察に満ちたビデオであったことを願っている。"
  },
  {
    "start": 9426980,
    "end": 9429470,
    "text": "これで全部だと思う。"
  },
  {
    "start": 9429620,
    "end": 9431022,
    "text": "ビデオが気に入ったかどうか教えてくれ。"
  },
  {
    "start": 9431076,
    "end": 9432142,
    "text": "理解できたかどうか教えてくれ。"
  },
  {
    "start": 9432196,
    "end": 9439526,
    "text": "基本的に私が知りたいのは、これが速かったのか、遅かったのか、そしてこれがまともなペースだったのか、そうでなかったのか、ということだ。"
  },
  {
    "start": 9439548,
    "end": 9442040,
    "text": "ペースが適切だったかどうか、コメントで教えてほしい。"
  },
  {
    "start": 9442570,
    "end": 9445160,
    "text": "このビデオはこれで全部だ。"
  },
  {
    "start": 9446010,
    "end": 9449734,
    "text": "他にも私に作ってほしい野心的なプロジェクトがあれば教えてください。"
  },
  {
    "start": 9449852,
    "end": 9450694,
    "text": "喜んでやるよ。"
  },
  {
    "start": 9450732,
    "end": 9451174,
    "text": "それでいい。"
  },
  {
    "start": 9451212,
    "end": 9451846,
    "text": "終わりにしよう。"
  },
  {
    "start": 9451868,
    "end": 9453062,
    "text": "また次の試合で会おう。"
  },
  {
    "start": 9453116,
    "end": 9453346,
    "text": "さようなら。"
  }
]