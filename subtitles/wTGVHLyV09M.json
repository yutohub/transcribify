[
  {
    "start": 160,
    "end": 29842,
    "text": "このチュートリアルでは、SEO検索エンジン最適化について知る必要があるすべてのことを学びます。次のJSでは、各ページに静的および動的メタデータを設定し、サイトマップとrobots TxTファイルを作成し、各ページのキャッシュを適切に設定することによって、Googleの検索クローラのためにウェブサイトを適切に準備する方法を学びます。"
  },
  {
    "start": 29966,
    "end": 42762,
    "text": "また、SEOに関するその他のちょっとしたヒントや戦略についても学び、最後にはあなたのウェブサイトをグーグル・サーチコンソールやゼル・アナリティクスに接続し、フォローする方法をご紹介します。"
  },
  {
    "start": 42826,
    "end": 46882,
    "text": "ネクストJSとアプリ・ルーターの基本はすでに知っているはずだ。"
  },
  {
    "start": 46946,
    "end": 49466,
    "text": "YouTubeにチュートリアルがある。"
  },
  {
    "start": 49538,
    "end": 52218,
    "text": "右上にリンクを貼っておく。"
  },
  {
    "start": 52314,
    "end": 57286,
    "text": "次のJSが初めての人は、まずこのチュートリアルを見て、それからここに戻ってくればいい。"
  },
  {
    "start": 57378,
    "end": 67422,
    "text": "さて、このチュートリアルで取り上げることのいくつかは、この初心者向けチュートリアルですでに取り上げているが、SEOにとって重要なことなので、ここでも取り上げる必要がある。"
  },
  {
    "start": 67486,
    "end": 71518,
    "text": "このチュートリアルと同時に、ちょっとしたスタイリング・プロジェクトも準備した。"
  },
  {
    "start": 71654,
    "end": 75590,
    "text": "いくつかの異なるポストがあるだけの、とてもシンプルなブロックだ。"
  },
  {
    "start": 75670,
    "end": 78670,
    "text": "これらの行は、それぞれ記事のタイトルである。"
  },
  {
    "start": 78790,
    "end": 81414,
    "text": "クリックすると、その投稿のページが表示される。"
  },
  {
    "start": 81542,
    "end": 86230,
    "text": "ここでは、ロードに1秒かかるように、人工的なロード時間を設定した。"
  },
  {
    "start": 86310,
    "end": 95892,
    "text": "なぜなら、後でページを事前にレンダリングしてキャッシュする方法を学ぶので、本番ではこの読み込み時間を完全に省略することができるからだ。"
  },
  {
    "start": 95996,
    "end": 99620,
    "text": "このブロックのデータはdummyjson.comから来ている。"
  },
  {
    "start": 99700,
    "end": 108132,
    "text": "これはダミーのデータを含むレストAPIで、ここにフェッチ・リクエストをして、ウェブサイトに表示できる投稿を得ることができる。"
  },
  {
    "start": 108276,
    "end": 110868,
    "text": "スタイリング・コードはGitHubからダウンロードできる。"
  },
  {
    "start": 110964,
    "end": 114444,
    "text": "動画の説明文にリポジトリへのリンクを貼っておく。"
  },
  {
    "start": 114532,
    "end": 134022,
    "text": "このリポジトリをクローンし、対コードで開き、コマンドラインでNPm installを実行してパッケージをインストールし、いつものようにNpm run devを実行してこのプロジェクトを開発モードで起動すれば、私と同じブロックが表示されるはずだ。"
  },
  {
    "start": 134166,
    "end": 137710,
    "text": "繰り返しますが、リポジトリへのリンクはビデオの説明にあります。"
  },
  {
    "start": 137790,
    "end": 142374,
    "text": "まだチャンネル登録されていない方は、次回のJ'sコンテンツにもご登録ください。"
  },
  {
    "start": 142462,
    "end": 145482,
    "text": "このビデオが気に入ったら、「いいね！」もお願いします。"
  },
  {
    "start": 145566,
    "end": 148562,
    "text": "では、このチュートリアルを楽しんでください。"
  },
  {
    "start": 148746,
    "end": 149202,
    "text": "いいかい？"
  },
  {
    "start": 149226,
    "end": 155802,
    "text": "これから、スタートしたプロジェクトを段階的に改善し、検索エンジンにより最適化されるようにしていきます。"
  },
  {
    "start": 155906,
    "end": 163610,
    "text": "最初のステップは、すべてのページにメタデータを設定することだ。"
  },
  {
    "start": 163730,
    "end": 168730,
    "text": "ページタイトル、ページ説明文、Fufアイコンなど。"
  },
  {
    "start": 168810,
    "end": 172786,
    "text": "次のJSプロジェクトを新規作成するときのFuFアイコンから始めよう。"
  },
  {
    "start": 172898,
    "end": 177440,
    "text": "ベルゼルのロゴを使ったファフィコンのICOファイルはすでにある。"
  },
  {
    "start": 177530,
    "end": 182908,
    "text": "これはブラウザのタブに表示されるだけでなく、例えばグーグルの検索結果にも表示される。"
  },
  {
    "start": 183044,
    "end": 189172,
    "text": "このアイコンは通常、あなたのウェブサイトを象徴するロゴやアイコンのようなものにしたい。"
  },
  {
    "start": 189316,
    "end": 194132,
    "text": "これらのFafアイコンファイルを作成するためのさまざまなフリージェネレーターがオンライン上にあります。"
  },
  {
    "start": 194236,
    "end": 195980,
    "text": "いつも使っているのはこちら。"
  },
  {
    "start": 196060,
    "end": 199636,
    "text": "私は彼らとは何の関係もないが、これはうまくいっている。"
  },
  {
    "start": 199748,
    "end": 223174,
    "text": "realfathangengenerator.net、またはgoogleにfufikin generatorと入力して、この生成ボタンをクリックしてください。"
  },
  {
    "start": 223302,
    "end": 225566,
    "text": "これは普通のpngファイルだ。"
  },
  {
    "start": 225678,
    "end": 228914,
    "text": "これを選択して、fufアイコンを作ることができる。"
  },
  {
    "start": 229062,
    "end": 231122,
    "text": "私たちは、これがどのように見えるかをプレビューすることができる。"
  },
  {
    "start": 231226,
    "end": 236786,
    "text": "背景色を設定するなどの追加設定も可能だが、その必要はない。"
  },
  {
    "start": 236938,
    "end": 241010,
    "text": "ずっと下まで行って、お気に入りのアイコンをクリックしたいんだ。"
  },
  {
    "start": 241090,
    "end": 245426,
    "text": "そして、これが終わるまで待ち、それからこのようなことはほとんど無視すればいい。"
  },
  {
    "start": 245498,
    "end": 248714,
    "text": "Fufikanのパッケージをダウンロードしたいだけなんだ。"
  },
  {
    "start": 248882,
    "end": 257528,
    "text": "保存したフォルダを開くと、ZIPファイルにはたくさんのファイルがあるが、私たちが気にしているのはファフ・アイコンだけだ。"
  },
  {
    "start": 257664,
    "end": 267936,
    "text": "例えば、ウェブサイトをアプリにして、アプリストアやグーグルプレイストアに出したい場合、これらのストアにもロゴのバリエーションがあります。"
  },
  {
    "start": 268008,
    "end": 272488,
    "text": "必要なのはこのアイコンファイルだけだ。"
  },
  {
    "start": 272584,
    "end": 282690,
    "text": "このファイルをコピーして、srz appのプロジェクト・フォルダーに戻ると、そこにはすでに古いfuffアイコンがある。"
  },
  {
    "start": 282770,
    "end": 286522,
    "text": "これを削除し、新しいものをここに貼り付ける。"
  },
  {
    "start": 286666,
    "end": 291186,
    "text": "今はまだ古いアイコンが表示されているが、これは単なるキャッシュの問題だと思う。"
  },
  {
    "start": 291338,
    "end": 293150,
    "text": "このファイルを開いてみよう。"
  },
  {
    "start": 294370,
    "end": 298778,
    "text": "ああ、そして見ての通り、それは実際に正しい新ファブのアイコンだ。"
  },
  {
    "start": 298874,
    "end": 303906,
    "text": "ウィンドウズがこれらの画像プレビューをキャッシュしていて、間違ったものを選んでしまったのだろう。"
  },
  {
    "start": 304018,
    "end": 307946,
    "text": "Fafアイコンは、アプリフォルダ内に直接配置する必要があります。"
  },
  {
    "start": 308018,
    "end": 316902,
    "text": "次のJSではこのように動作します。生のHTMLで行うように、ウェブサイトのheadに独自のmetaタグを設定する必要はありません。"
  },
  {
    "start": 316966,
    "end": 324270,
    "text": "しかし、これはFafのアイコンを直接アプリのフォルダに入れた場合のみ有効です。"
  },
  {
    "start": 324350,
    "end": 338682,
    "text": "これは次のJSがこのファイルを期待する場所であり、また、fuficon icoという正確な名前を持つ必要があります。ファビコンジェネレーターを閉じて、ページを更新すると、左上隅に新しいファビアイコンが表示されるはずです。"
  },
  {
    "start": 338806,
    "end": 340738,
    "text": "すぐにうまくいかないこともある。"
  },
  {
    "start": 340834,
    "end": 353450,
    "text": "Ctrl f fiveを押してキャッシュを破棄し、ページを再読み込みしてみることもできるが、ここにある正しいファフ・アイコンがプロジェクトに表示されている限り、これは正しく設定され、本番でも機能する。"
  },
  {
    "start": 353610,
    "end": 356618,
    "text": "次にオープングラフの画像を設定したい。"
  },
  {
    "start": 356754,
    "end": 363554,
    "text": "ソーシャルメディア、例えばツイッターやフェイスブックにあなたのウェブサイトへのリンクを貼り付けたときに表示される画像です。"
  },
  {
    "start": 363682,
    "end": 368004,
    "text": "そして、リンクと一緒に表示されるプレビュー画像を追加することができます。"
  },
  {
    "start": 368122,
    "end": 382096,
    "text": "この画像は幅1200ピクセル、高さ630ピクセルが推奨されていますが、これは通常のPNGファイルであり、どの画像編集ツールでもこのファイルを作成することができます。"
  },
  {
    "start": 382208,
    "end": 383968,
    "text": "そのためにジムを使うのが好きなんだ。"
  },
  {
    "start": 384064,
    "end": 387336,
    "text": "フォトショップに代わる完全無料のツールだ。"
  },
  {
    "start": 387408,
    "end": 391720,
    "text": "これは本当に強力だが、例えばマイクロソフトのペイントを使うこともできる。"
  },
  {
    "start": 391800,
    "end": 397200,
    "text": "もし望むなら、このOG画像へのリンクをビデオの説明文にも載せよう。"
  },
  {
    "start": 397280,
    "end": 399246,
    "text": "ここからダウンロードできる。"
  },
  {
    "start": 399368,
    "end": 410186,
    "text": "次のjsがそれを検出するためには、ファイルがopen graph imageという名前でなければならない。"
  },
  {
    "start": 410258,
    "end": 413790,
    "text": "ここでも、これを直接appフォルダに入れたい。"
  },
  {
    "start": 414930,
    "end": 423790,
    "text": "このオープングラフの画像をここに貼り付けます。"
  },
  {
    "start": 425820,
    "end": 429132,
    "text": "そうすれば、ボンネットの中で再び機能するようになる。"
  },
  {
    "start": 429196,
    "end": 432284,
    "text": "次に、ページのheadにタグを設定する。"
  },
  {
    "start": 432332,
    "end": 437804,
    "text": "これについては後ほど見ていくが、これはすべて、このプロセスをよりシンプルにするための抽象化された方法である。"
  },
  {
    "start": 437892,
    "end": 442332,
    "text": "このオープングラフイメージは、ウェブサイト全体の全ページに使用されます。"
  },
  {
    "start": 442476,
    "end": 450666,
    "text": "後ほど、特定のページに特定のOG画像を設定する方法や、これらのOG画像を動的に変更する方法についても学びます。"
  },
  {
    "start": 450788,
    "end": 457630,
    "text": "例えば、ブログ記事のサムネイルをこのページのOG画像として使用する。"
  },
  {
    "start": 457750,
    "end": 461930,
    "text": "次に、ルート・レイアウトのTSXファイルに入る。"
  },
  {
    "start": 462310,
    "end": 464966,
    "text": "次のJの初心者向けチュートリアルで学んだ通りだ。"
  },
  {
    "start": 465038,
    "end": 472390,
    "text": "このルート・レイアウトはアプリケーション全体を包み込み、ウェブサイトのベース・メタデータを設定するのに最適な場所です。"
  },
  {
    "start": 472510,
    "end": 478986,
    "text": "これは、他のページでより具体的なメタデータを設定しない場合に使用されるメタデータである。"
  },
  {
    "start": 479118,
    "end": 490674,
    "text": "メタデータと呼ばれるconstをこのスペルでエクスポートし、次のインポートでタイプをメタデータに設定する。"
  },
  {
    "start": 490802,
    "end": 495122,
    "text": "繰り返しになるが、これはnext jsがフードの下で提供する抽象化である。"
  },
  {
    "start": 495186,
    "end": 499130,
    "text": "これにより、ウェブサイトのheadタグ内に特定のタグが生成される。"
  },
  {
    "start": 499210,
    "end": 501154,
    "text": "これについてはまた後ほど。"
  },
  {
    "start": 501242,
    "end": 508306,
    "text": "これらのさまざまなタグにはオプションが用意されているが、そのすべてが必要なわけではない。"
  },
  {
    "start": 508458,
    "end": 515394,
    "text": "重要なのはもちろんウェブサイトのタイトルで、これはグーグルに表示されるほか、ブラウザのタブにも表示されるからだ。"
  },
  {
    "start": 515522,
    "end": 518546,
    "text": "これはデフォルトで次のアプリを作成するように設定されている。"
  },
  {
    "start": 518658,
    "end": 527510,
    "text": "ここで文字列を変更することもできるが、実は中かっこでオブジェクトを渡すこともでき、そうすればもっと細かい制御が可能になる。"
  },
  {
    "start": 527810,
    "end": 531666,
    "text": "例えば、デフォルトを文字列に設定することができる。"
  },
  {
    "start": 531778,
    "end": 537672,
    "text": "このサイトのタイトルなので、私のすごいブログを書こうと思う。"
  },
  {
    "start": 537856,
    "end": 543576,
    "text": "このデフォルトは、他のページでより具体的なタイトルを設定しなかった場合に使用される。"
  },
  {
    "start": 543688,
    "end": 550904,
    "text": "これは、この文字列を直接タイトルに渡すのと同じ効果を持つが、このオブジェクトを使用する。"
  },
  {
    "start": 550992,
    "end": 562896,
    "text": "これはとてもクールな機能で、デフォルトの文字列をより具体的なページタイトルで補間することができるからだ。"
  },
  {
    "start": 562968,
    "end": 575024,
    "text": "例えば、ルートURLには私の素晴らしいブロックを表示させたいのですが、ブログ記事を開くと、ブログ記事のタイトルとダッシュ、そしてその後ろに私の素晴らしいブロックを表示させたいのです。"
  },
  {
    "start": 575112,
    "end": 580872,
    "text": "ページごとにこのパターンを繰り返す代わりに、このようなテンプレート文字列を使うことができる。"
  },
  {
    "start": 581016,
    "end": 582664,
    "text": "ドル記号はsと書く。"
  },
  {
    "start": 582752,
    "end": 585952,
    "text": "ここには子ページのタイトルが入ります。"
  },
  {
    "start": 586056,
    "end": 587760,
    "text": "では、ここでダッシュと書きます。"
  },
  {
    "start": 587920,
    "end": 592432,
    "text": "また私の素晴らしいブログでも何でも好きなように書いてください。"
  },
  {
    "start": 592496,
    "end": 595256,
    "text": "この部分は完全にあなた次第だ。"
  },
  {
    "start": 595368,
    "end": 600264,
    "text": "そうすると、後でこの部分が子ページのタイトルに置き換えられる。"
  },
  {
    "start": 600352,
    "end": 602088,
    "text": "これはすぐにわかるだろう。"
  },
  {
    "start": 602224,
    "end": 605016,
    "text": "ウェブサイトの説明文も変えてみよう。"
  },
  {
    "start": 605128,
    "end": 612152,
    "text": "こちらはブラウザには表示されませんが、ソーシャルメディアにウェブサイトへのリンクを掲載する際などに表示されます。"
  },
  {
    "start": 612256,
    "end": 614384,
    "text": "これは本当に重要な作品だ。"
  },
  {
    "start": 614512,
    "end": 620656,
    "text": "私の素晴らしい記事を読みに来てください。"
  },
  {
    "start": 620808,
    "end": 622340,
    "text": "好きなように書いてください。"
  },
  {
    "start": 622800,
    "end": 627440,
    "text": "他の多くのメタタグは、これらのタグから自動的に推測される。"
  },
  {
    "start": 627480,
    "end": 627800,
    "text": "ここだよ。"
  },
  {
    "start": 627880,
    "end": 633912,
    "text": "例えば、Twitterのdescriptionタグがあり、Twitterのためだけに特定の説明を設定することができる。"
  },
  {
    "start": 633976,
    "end": 639824,
    "text": "もし定義しなければ、ページのデフォルトの説明がツイッターに使われる。"
  },
  {
    "start": 639912,
    "end": 647028,
    "text": "例えば、ツイッターやフェイスブック、リンクトインなどで自動的に使用されるオープングラフ画像も同様だ。"
  },
  {
    "start": 647124,
    "end": 655108,
    "text": "より具体的なメタデータを設定したい場合は、オートコンプリートを使えば、この中のどこかに探しているものがあるはずだ。"
  },
  {
    "start": 655284,
    "end": 660172,
    "text": "例えば、オブジェクトを期待するツイッターのオプションがある。"
  },
  {
    "start": 660316,
    "end": 665332,
    "text": "ここですでに説明したように、より具体的な説明を設定することもできるが、これは必要ない。"
  },
  {
    "start": 665476,
    "end": 676244,
    "text": "私が通常ここで設定する値のひとつはcartで、私はこれをsummary large imageに設定する。"
  },
  {
    "start": 676332,
    "end": 679828,
    "text": "小さな画像でも大きな画像でも表示できるからだ。"
  },
  {
    "start": 679924,
    "end": 682964,
    "text": "私たちは、よりよく見える大きな画像を見せたいのです。"
  },
  {
    "start": 683092,
    "end": 690916,
    "text": "プロジェクトをデプロイすることなく、ウェブサイトのソーシャルメディアプレビューがどのように見えるかを確認する方法をすぐにお見せします。"
  },
  {
    "start": 691028,
    "end": 695640,
    "text": "その前に、他のページのメタデータも設定したい。"
  },
  {
    "start": 696220,
    "end": 700970,
    "text": "次に、aboutフォルダ内のTSXファイルを開いてみよう。"
  },
  {
    "start": 701100,
    "end": 705646,
    "text": "これはアバウト・ページで、フッターにこのページへのリンクがある。"
  },
  {
    "start": 705798,
    "end": 710878,
    "text": "説明したように、これはレイアウトTSXで設定したデフォルトのタイトルを使用します。"
  },
  {
    "start": 710974,
    "end": 713198,
    "text": "これが基本的なフォールバックだ。"
  },
  {
    "start": 713374,
    "end": 716694,
    "text": "このページには、より具体的なタイトルを設定することができます。"
  },
  {
    "start": 716822,
    "end": 722734,
    "text": "そのために、コンポーネントの上に行き、再びconstメタデータをエクスポートする。"
  },
  {
    "start": 722822,
    "end": 726294,
    "text": "同じケーシングでスペルが正しいことを確認する。"
  },
  {
    "start": 726342,
    "end": 727210,
    "text": "それは重要なことだ。"
  },
  {
    "start": 727720,
    "end": 731140,
    "text": "次からは、タイプをメタデータに設定する。"
  },
  {
    "start": 732840,
    "end": 735640,
    "text": "ここで同じ値を設定することができる。"
  },
  {
    "start": 735680,
    "end": 739900,
    "text": "例えば、ページのタイトルは \"about \"にしたい。"
  },
  {
    "start": 740560,
    "end": 747512,
    "text": "ご覧のように、このタイトルはテンプレート文字列に入れられ、次のようになります。"
  },
  {
    "start": 747616,
    "end": 749584,
    "text": "私の素晴らしいブロックについて。"
  },
  {
    "start": 749672,
    "end": 754760,
    "text": "こうすれば、すべてのページで私の素晴らしいブログを繰り返す必要はない。"
  },
  {
    "start": 754880,
    "end": 756520,
    "text": "その方が便利だからだ。"
  },
  {
    "start": 756680,
    "end": 763488,
    "text": "ページによっては、このダッシュ・マイ・スゴー・ブロックを使わず、タイトルを完全に上書きすることもできる。"
  },
  {
    "start": 763584,
    "end": 769528,
    "text": "ここでもオブジェクトを渡し、代わりにabsoluteを使うことで同様にできる。"
  },
  {
    "start": 769704,
    "end": 773544,
    "text": "これをaboutに設定すると、残りのテンプレートは消えてしまう。"
  },
  {
    "start": 773592,
    "end": 777336,
    "text": "ルート・レイアウトに残すことができるので、とても便利だ。"
  },
  {
    "start": 777448,
    "end": 779200,
    "text": "ここでこんなことはしたくない。"
  },
  {
    "start": 779280,
    "end": 780558,
    "text": "テンプレートが欲しい。"
  },
  {
    "start": 780664,
    "end": 789170,
    "text": "では、これをプライバシーページにもコピーしましょう。"
  },
  {
    "start": 789330,
    "end": 799270,
    "text": "再びコンポーネントの外で、これをプライバシー・ポリシーに変更し、メタデータ・タイプをインポートしなければならない。"
  },
  {
    "start": 799570,
    "end": 805274,
    "text": "これは、すでに説明したように、私が用意したこのプライバシーポリシーのページです。"
  },
  {
    "start": 805362,
    "end": 814816,
    "text": "次に、JSは自動的にウェブサイトのヘッドに特定のメタタグを作成する。"
  },
  {
    "start": 814848,
    "end": 816432,
    "text": "これをf12で行う。"
  },
  {
    "start": 816576,
    "end": 819060,
    "text": "次にエレメンツ・タブに入る。"
  },
  {
    "start": 820040,
    "end": 826740,
    "text": "ここでheadを展開し、このページに生成されたすべてのメタタグを見つけることができる。"
  },
  {
    "start": 827320,
    "end": 833184,
    "text": "例えば、これはコードで設定した説明文を含むdescriptionタグです。"
  },
  {
    "start": 833352,
    "end": 838440,
    "text": "ツイッターカード設定ツイッタータイトルは自動生成されます。"
  },
  {
    "start": 838600,
    "end": 840140,
    "text": "全てはここにある。"
  },
  {
    "start": 840600,
    "end": 843832,
    "text": "この中のどこかにオープングラフの画像もある。"
  },
  {
    "start": 843896,
    "end": 848104,
    "text": "それがこれであり、これがオープングラフの画像ファイルを指している。"
  },
  {
    "start": 848272,
    "end": 855592,
    "text": "socialsharepreview.comのように、ソーシャルメディアのプレビューをチェックできるサイトもある。"
  },
  {
    "start": 855696,
    "end": 859864,
    "text": "問題は、私たちのウェブサイトがlocalhost上で動いていることです。"
  },
  {
    "start": 859992,
    "end": 863448,
    "text": "実際にインターネット上にあるわけではないので、そこにリンクを貼り付けることはできない。"
  },
  {
    "start": 863544,
    "end": 877634,
    "text": "これをチェックするためには、プロジェクトをデプロイするか、SRe usのような、テスト目的で一時的にローカルホストのウェブサイトをインターネット上で実行する方法を使うしかない。"
  },
  {
    "start": 877722,
    "end": 883786,
    "text": "同じようなことができるツールは他にもあるが、私がこのツールを気に入っているのは、何も登録する必要がないことだ。"
  },
  {
    "start": 883858,
    "end": 885530,
    "text": "何もインストールする必要はない。"
  },
  {
    "start": 885650,
    "end": 892190,
    "text": "このコマンドをコピーしてコマンドラインで実行するだけだ。"
  },
  {
    "start": 893730,
    "end": 900842,
    "text": "これを動作させるためには、まずSShをセットアップする必要があるかもしれないが、これがうまくいかない場合でも、問題はない。"
  },
  {
    "start": 900986,
    "end": 902954,
    "text": "この手順を踏む必要はない。"
  },
  {
    "start": 903042,
    "end": 907882,
    "text": "私たちのウェブサイトのプレビューをお見せしたいだけですが、このステップは飛ばしても構いません。"
  },
  {
    "start": 907946,
    "end": 910362,
    "text": "これが私の仮URLです。"
  },
  {
    "start": 910466,
    "end": 921778,
    "text": "これをコピーしてインターネットで開くと、そこには私の素晴らしいブログがあり、実際にHTTPs接続でインターネット上で動いている。"
  },
  {
    "start": 921874,
    "end": 922802,
    "text": "クールだろ？"
  },
  {
    "start": 922906,
    "end": 930870,
    "text": "何もインストールする必要はなく、このURLをソーシャル・シェアのプレビュー・チェッカーに入れることができる。"
  },
  {
    "start": 931380,
    "end": 936804,
    "text": "現在、このツールはOGイメージを読み込まない何らかの理由でハングアップすることがある。"
  },
  {
    "start": 936972,
    "end": 941380,
    "text": "また、Opencraft xYzという似たようなツールもある。"
  },
  {
    "start": 941540,
    "end": 949820,
    "text": "ここに同じURLを貼り付けると、ページのタイトル、下の説明文、og画像がプレビューされる。"
  },
  {
    "start": 949940,
    "end": 961356,
    "text": "これはルートレイアウトでリセットされるフォールバックデータなので、同じOG画像と説明を表示するプライバシーを試してみましょう。"
  },
  {
    "start": 961428,
    "end": 964088,
    "text": "ページ固有のタイトルが表示されます。"
  },
  {
    "start": 964184,
    "end": 964792,
    "text": "いいね。"
  },
  {
    "start": 964936,
    "end": 971176,
    "text": "後で、このメタデータをページ自体のデータからより動的に設定する方法を学ぶ。"
  },
  {
    "start": 971288,
    "end": 979064,
    "text": "例えば、ブログ記事のタイトルをページタイトルにしたり、ブログ記事のサムネイルをOG画像にしたりする。"
  },
  {
    "start": 979112,
    "end": 980344,
    "text": "これもできる。"
  },
  {
    "start": 980432,
    "end": 982216,
    "text": "それについてはまた後で。"
  },
  {
    "start": 982408,
    "end": 987328,
    "text": "とりあえず、この話は終わりにして、他のことを少し話したいと思う。"
  },
  {
    "start": 987464,
    "end": 1009900,
    "text": "ルート・レイアウトでは、新しいnext JSプロジェクトは自動的にこのGoogleフォントを使用するnext slash font Googleからインポートされたこのフォントは、他の多くのウェブサイトがGoogleサーバーから直接Googleフォントを読み込むのに対し、私たち自身のウェブサイト上で、私たち自身のサーバー上でローカルにホストされているため、SEOのために実際にかなり便利です。"
  },
  {
    "start": 1009980,
    "end": 1033374,
    "text": "というのも、Googleからフォントを読み込むと、あなたのウェブサイトの訪問者のIPアドレスがGoogleのサーバーに送信され、IPアドレスは個人情報とみなされるため、ユーザーの許可なしにこれを勝手に送信することは違法だからです。"
  },
  {
    "start": 1033462,
    "end": 1045390,
    "text": "しかし、ローカルフォントを使用することで、この問題を回避することができます。なぜなら、これらのフォントは独自のサーバーに保存され、読み込みも速く、Googleとの接続が不要なため、SEO対策にも最適だからです。"
  },
  {
    "start": 1045470,
    "end": 1047483,
    "text": "だからこそ、あなたは彼らを好むべきなのだ。"
  },
  {
    "start": 1047581,
    "end": 1054991,
    "text": "次のJSアプリのどこかで画像を使うときは、できれば次の画像を使うべきだ。"
  },
  {
    "start": 1055135,
    "end": 1060623,
    "text": "これはこの大文字のIの画像で、次のスラッシュ画像からのインポートだ。"
  },
  {
    "start": 1060751,
    "end": 1069199,
    "text": "これらの次の画像の最大の利点は、next JSが自動的に画面上で実際に表示されるサイズにリサイズしてくれることだ。"
  },
  {
    "start": 1069279,
    "end": 1080588,
    "text": "2000ピクセルの大きさの画像ファイルを100ピクセルの幅と高さで表示する場合でも、次のJSは自動的にこの画像ファイルのサイズを変更してくれます。"
  },
  {
    "start": 1080644,
    "end": 1087356,
    "text": "この画像コンポーネントを使用する場合、読み込み速度は非常に重要であり、これもまたSEOにとって重要である。"
  },
  {
    "start": 1087468,
    "end": 1095604,
    "text": "今回の練習プロジェクトには画像はありませんが、私の他のJSプロジェクト・チュートリアルでは様々な画像を使用しています。"
  },
  {
    "start": 1095692,
    "end": 1097740,
    "text": "私のチャンネルで見ることができる。"
  },
  {
    "start": 1097820,
    "end": 1101052,
    "text": "この画像は必要ないので削除します。"
  },
  {
    "start": 1101156,
    "end": 1104588,
    "text": "続いて、ダイナミック・メタデータについて説明しよう。"
  },
  {
    "start": 1104764,
    "end": 1113856,
    "text": "この静的なメタデータは、文字列や画像をハードコードするだけで、動的に変更することができないため、十分でないことがよくある。"
  },
  {
    "start": 1113968,
    "end": 1118704,
    "text": "例えば、すべてのブログ記事にまったく同じタイトルを表示したくない。"
  },
  {
    "start": 1118792,
    "end": 1123192,
    "text": "その代わりに、ブログ記事のタイトルをページタイトルに表示したい。"
  },
  {
    "start": 1123296,
    "end": 1125488,
    "text": "ブログ記事のページを開いてみよう。"
  },
  {
    "start": 1125544,
    "end": 1133540,
    "text": "このフォルダ内のアイデアページtsxの下にあります。"
  },
  {
    "start": 1134800,
    "end": 1147962,
    "text": "ここでもコンポーネントの上に行くが、constメタデータをエクスポートする代わりに、generate metadataという非同期関数をエクスポートする。"
  },
  {
    "start": 1148146,
    "end": 1154786,
    "text": "大文字の「m」と他の文字を小文字にして、スペルが正しいことを再度確認する。"
  },
  {
    "start": 1154978,
    "end": 1163040,
    "text": "この関数もメタデータを返すが、非同期関数なので、戻り値の型をプロミスにラップしなければならない。"
  },
  {
    "start": 1163210,
    "end": 1166480,
    "text": "これはメタデータ型のプロミスを返す。"
  },
  {
    "start": 1167900,
    "end": 1174844,
    "text": "ここでも、関数の型を明示的に指定することで、リターン・ブロックの自動補完が得られる。"
  },
  {
    "start": 1175012,
    "end": 1181660,
    "text": "例えば、古き良きタイトルとディスクリプションをページコンポーネント自体に記述する。"
  },
  {
    "start": 1181740,
    "end": 1187220,
    "text": "ここでは、APIからブログ記事を取得し、レイアウトに表示する。"
  },
  {
    "start": 1187340,
    "end": 1192540,
    "text": "メタデータを生成するには、同じデータ、同じブログ記事が必要だ。"
  },
  {
    "start": 1192660,
    "end": 1196444,
    "text": "この2つの関数間でデータを共有することはできない。"
  },
  {
    "start": 1196572,
    "end": 1203580,
    "text": "その代わり、次のJsアプリのルーターでは、同じデータをフェッチしてメタデータを生成し直さなければならない。"
  },
  {
    "start": 1203700,
    "end": 1208628,
    "text": "この場合、コンポーネントで受け取るのと同じURLパラメータが得られる。"
  },
  {
    "start": 1208724,
    "end": 1211044,
    "text": "このURLパラメータがポストのアイデアだ。"
  },
  {
    "start": 1211132,
    "end": 1213916,
    "text": "これについては、次回のj's初心者チュートリアルで説明した。"
  },
  {
    "start": 1214028,
    "end": 1218908,
    "text": "異なるブログ記事間で異なるのは、URLに表示されるこのパスだ。"
  },
  {
    "start": 1219004,
    "end": 1222378,
    "text": "これを4つに変更すると、別のブログ記事が開きます。"
  },
  {
    "start": 1222514,
    "end": 1224034,
    "text": "それがこの記事のアイデアだ。"
  },
  {
    "start": 1224122,
    "end": 1227874,
    "text": "このアイデアを使って、APIからブログ記事を取得する。"
  },
  {
    "start": 1228042,
    "end": 1235522,
    "text": "メタデータ生成関数は、ページ・コンポーネント自身と同じ引数を受け取ることができます。"
  },
  {
    "start": 1235666,
    "end": 1239906,
    "text": "この部分をコピーして、ここに貼り付けます。"
  },
  {
    "start": 1240058,
    "end": 1248578,
    "text": "これで、メタデータの生成で同じ投稿IDを持つ同じブログ投稿をフェッチできるようになり、ページがレンダリングされる前にこれが実行される。"
  },
  {
    "start": 1248674,
    "end": 1251250,
    "text": "であれば、同じデータをフェッチしたい。"
  },
  {
    "start": 1251330,
    "end": 1257110,
    "text": "この2行をreturn文の上にコピーし、メタデータを生成する。"
  },
  {
    "start": 1257970,
    "end": 1262750,
    "text": "ここで投稿の構成を変えたくないので、投稿に変更します。"
  },
  {
    "start": 1263170,
    "end": 1267474,
    "text": "であれば、単純にポスト・データを使ってメタデータを生成することができる。"
  },
  {
    "start": 1267602,
    "end": 1272470,
    "text": "例えば、ページタイトルを投稿タイトルに設定することができる。"
  },
  {
    "start": 1273290,
    "end": 1278712,
    "text": "例えば、投稿本文に説明を設定したり、要約を設定したりすることができる。"
  },
  {
    "start": 1278816,
    "end": 1281144,
    "text": "ここに何を入れるかはあなた次第だ。"
  },
  {
    "start": 1281232,
    "end": 1284344,
    "text": "私たちのブログ記事には画像がありません。"
  },
  {
    "start": 1284432,
    "end": 1290780,
    "text": "もしそうであれば、各ブログ記事のOG画像（オープングラフ画像）を動的に設定することもできる。"
  },
  {
    "start": 1291200,
    "end": 1296580,
    "text": "これは、オブジェクトを受け取るこのオープングラフの値を追加することで実現できる。"
  },
  {
    "start": 1297000,
    "end": 1301820,
    "text": "ここでは、配列を受け取る画像を角括弧で囲んでいる。"
  },
  {
    "start": 1302550,
    "end": 1307890,
    "text": "ここに、URLを期待するオブジェクトを置くことができる。"
  },
  {
    "start": 1308390,
    "end": 1313142,
    "text": "これは例えば投稿画像のURLを指す。"
  },
  {
    "start": 1313326,
    "end": 1317518,
    "text": "さて、繰り返しになるが、私たちのブログ記事には画像URLがないので、これは機能しない。"
  },
  {
    "start": 1317614,
    "end": 1321014,
    "text": "ブログ記事のサムネイルがあったとしよう。"
  },
  {
    "start": 1321102,
    "end": 1329130,
    "text": "そして、この画像がこのページのOG画像として使われ、オープングラフ画像のpngファイルを上書きする。"
  },
  {
    "start": 1329730,
    "end": 1335434,
    "text": "我々はこの値を持っていないので、コメントアウトし、備忘録としてここに残しておく。"
  },
  {
    "start": 1335602,
    "end": 1345186,
    "text": "これを保存すると、タブにブログ記事のタイトルが表示されます。"
  },
  {
    "start": 1345298,
    "end": 1345990,
    "text": "クールだ。"
  },
  {
    "start": 1347090,
    "end": 1349490,
    "text": "いくつかはっきりさせておきたいことがある。"
  },
  {
    "start": 1349610,
    "end": 1359176,
    "text": "まず最初に、ページ・コンポーネントとメタデータ生成関数で同じデータを2回取得するのは無駄ではないか、と思うかもしれない。"
  },
  {
    "start": 1359288,
    "end": 1365392,
    "text": "特に、このページをキャッシュせずに、ユーザーがページを開くたびに動的にレンダリングするとしたら？"
  },
  {
    "start": 1365456,
    "end": 1369824,
    "text": "そうすると、1つのページをレンダリングするために、同じエンドポイントに2つのリクエストをすることになる。"
  },
  {
    "start": 1369952,
    "end": 1375464,
    "text": "しかし、実際にはnext jsは自動的にフェッチリクエストを重複排除する。"
  },
  {
    "start": 1375552,
    "end": 1386716,
    "text": "同じURLにフェッチ・リクエストをした場合、このリクエストを何カ所で実行しても、ページがレンダリングされるときに1回しか実行されない。"
  },
  {
    "start": 1386808,
    "end": 1397444,
    "text": "これら2つのフェッチ・リクエストは同じURLを持っているので、実行されるフェッチ・リクエストは1つになり、データは自動的にこれら2つの関数の間で共有されます。"
  },
  {
    "start": 1397572,
    "end": 1401828,
    "text": "次に、jsは自動的にこれを行うが、これはfetchを使った場合のみである。"
  },
  {
    "start": 1401924,
    "end": 1410804,
    "text": "例えばPrismaのようなormを使ったり、fetchの代わりにaxiosを使ったりすると、この自動重複排除は行われない。"
  },
  {
    "start": 1410892,
    "end": 1412468,
    "text": "それなら自分でやるしかない。"
  },
  {
    "start": 1412604,
    "end": 1414388,
    "text": "これは次のように機能する。"
  },
  {
    "start": 1414484,
    "end": 1416044,
    "text": "別の関数を作るのだ。"
  },
  {
    "start": 1416092,
    "end": 1420320,
    "text": "必要な場所に応じて、ここに入れてもいいし、別のファイルにしてもいい。"
  },
  {
    "start": 1420900,
    "end": 1424708,
    "text": "この関数を、例えばget postという変数に格納する。"
  },
  {
    "start": 1424764,
    "end": 1429124,
    "text": "名前はあなた次第で、それからcacheという関数を呼び出さなければならない。"
  },
  {
    "start": 1429172,
    "end": 1434080,
    "text": "今はオートコンプリートが使えないので、手動でインポートしています。"
  },
  {
    "start": 1434980,
    "end": 1438120,
    "text": "これはreactからのインポートだ。"
  },
  {
    "start": 1438710,
    "end": 1441430,
    "text": "このキャッシュ機能はreact自身に属する。"
  },
  {
    "start": 1441510,
    "end": 1445910,
    "text": "これはnext jsやライブラリーの一部ではなく、コアリアクトの一部だ。"
  },
  {
    "start": 1446030,
    "end": 1449222,
    "text": "このキャッシュ機能は、今説明したのと同じことをする。"
  },
  {
    "start": 1449326,
    "end": 1455014,
    "text": "これらのリクエストはレンダーサイクル内で一度だけ実行されるように重複排除される。"
  },
  {
    "start": 1455142,
    "end": 1459182,
    "text": "このキャッシュ関数には、キャッシュしたい関数を渡す必要がある。"
  },
  {
    "start": 1459286,
    "end": 1466090,
    "text": "例えば、ここに非同期関数を置くことができる。"
  },
  {
    "start": 1466530,
    "end": 1468470,
    "text": "これをエラー関数とする。"
  },
  {
    "start": 1469330,
    "end": 1473066,
    "text": "ここで、prismaから投稿を取得するとします。"
  },
  {
    "start": 1473178,
    "end": 1478114,
    "text": "このプロジェクトではプリズマを使っていないので、このコードをコメントアウトしておこう。"
  },
  {
    "start": 1478162,
    "end": 1480690,
    "text": "私はただ、これがどのように機能するかをお見せしたいだけです。"
  },
  {
    "start": 1480850,
    "end": 1488310,
    "text": "例えば、prisma dot post dotは、私たちが投稿のアイデアを渡すユニークなものを見つける。"
  },
  {
    "start": 1488970,
    "end": 1501254,
    "text": "そして、この関数からポストを返し、ポストをフェッチするときに、ここでawait get postを呼び出し、コンポーネント内でもawait get postを呼び出す。"
  },
  {
    "start": 1501382,
    "end": 1506606,
    "text": "このように、リクエストを重複排除し、一度しか実行されないようにする。"
  },
  {
    "start": 1506718,
    "end": 1511302,
    "text": "ネイティブのフェッチ関数を使う場合は、この必要はない。"
  },
  {
    "start": 1511486,
    "end": 1513390,
    "text": "もう一度コメントする。"
  },
  {
    "start": 1513470,
    "end": 1515310,
    "text": "備忘録としてここに残しておく。"
  },
  {
    "start": 1515430,
    "end": 1521746,
    "text": "プリズマを使ったチュートリアルがたくさんあるので、そこで正確なやり方を見てほしい。"
  },
  {
    "start": 1521918,
    "end": 1524790,
    "text": "ここに説明のコメントを残しておこう。"
  },
  {
    "start": 1525610,
    "end": 1536842,
    "text": "fetchを使わない場合は、手動でリクエストの重複排除を行い、後でコードを見て、これが何のためだったか思い出せるようにする。"
  },
  {
    "start": 1537026,
    "end": 1545786,
    "text": "また、このメタデータ生成機能と静的メタデータは、サーバー・コンポーネントからしかエクスポートできないことにも注意が必要です。"
  },
  {
    "start": 1545858,
    "end": 1548432,
    "text": "クライアント・コンポーネントからこれをエクスポートすることはできない。"
  },
  {
    "start": 1548546,
    "end": 1560604,
    "text": "もしこのページにインタラクティブ性が必要なら、もしここにオンクリック・リスナーのようなJavaScriptの機能が必要なら、このコンポーネントをクライアント・コンポーネントにすることはできない。"
  },
  {
    "start": 1560732,
    "end": 1564804,
    "text": "その代わりに、ページの内容をクライアント・コンポーネントに抽出しなければならない。"
  },
  {
    "start": 1564892,
    "end": 1572220,
    "text": "例えば、このページ全体をクライアント・コンポーネントにしたいとしよう。"
  },
  {
    "start": 1572380,
    "end": 1592600,
    "text": "そして、この部分を切り取って、例えばblog post pageという新しいファイルを作成し、クライアント・コンポーネントにして、先ほど切り取ったコードを貼り付け、このblog post pageコンポーネント、クライアント・コンポーネントをサーバー・コンポーネントにレンダリングする。"
  },
  {
    "start": 1592720,
    "end": 1598620,
    "text": "こうすることで、クライアント・コンポーネントの機能を使いながら、メタデータをエクスポートすることができる。"
  },
  {
    "start": 1599360,
    "end": 1618562,
    "text": "しかし、クライアント・コンポーネントの機能は必要ないので、このメタデータの返り値に特定のOG画像を設定する代わりに、このフォルダに別のオープン・グラフ画像のpngファイルを置くこともできる。"
  },
  {
    "start": 1618706,
    "end": 1624858,
    "text": "通常、投稿データに応じてダイナミックなOG画像を設定したい。"
  },
  {
    "start": 1624954,
    "end": 1627962,
    "text": "しかし、もうひとつクールな選択肢がある。"
  },
  {
    "start": 1628146,
    "end": 1632286,
    "text": "TSXファイルからOGイメージを生成することもできる。"
  },
  {
    "start": 1632378,
    "end": 1634886,
    "text": "コンポーネントはこのように見える。"
  },
  {
    "start": 1634918,
    "end": 1637406,
    "text": "説明書はドキュメントをご覧ください。"
  },
  {
    "start": 1637518,
    "end": 1643438,
    "text": "ここにdivとスタイリングを入れれば、OG画像を動的に生成できる。"
  },
  {
    "start": 1643574,
    "end": 1646934,
    "text": "また、ブログ記事のようにここでデータを取得することもできる。"
  },
  {
    "start": 1647062,
    "end": 1653350,
    "text": "このチュートリアルの範囲を超えているが、私の個人的なブログからその例を紹介しよう。"
  },
  {
    "start": 1653430,
    "end": 1657230,
    "text": "そこで私は、これらのオープングラフ画像のTSXファイルを使用している。"
  },
  {
    "start": 1657390,
    "end": 1662780,
    "text": "例えば、ここにこのブログの記事があって、これは特集画像ですよね？"
  },
  {
    "start": 1662910,
    "end": 1668420,
    "text": "記事のタイトルは、開発者として手放せない5つのAIツールだ。"
  },
  {
    "start": 1668960,
    "end": 1682608,
    "text": "このURLをコピーしてソーシャルsharepreview.comに貼り付けると、このように表示される。つまり、ページタイトルがOG画像の上に置かれ、テキストが読みやすくなるように背景が暗くなっている。"
  },
  {
    "start": 1682704,
    "end": 1693068,
    "text": "Xや旧Twitterでは、プレビューにページタイトルが表示されず、画像とURLのみが表示されるため、これは特に便利だ。"
  },
  {
    "start": 1693164,
    "end": 1697692,
    "text": "そこで、タイトルレイアウトを画像の上に再び表示させるのは本当に便利だ。"
  },
  {
    "start": 1697756,
    "end": 1701396,
    "text": "具体的なやり方は、次のJSドキュメントで説明する。"
  },
  {
    "start": 1701508,
    "end": 1705444,
    "text": "詳しいチュートリアルが必要なら、下のコメント欄で教えてほしい。"
  },
  {
    "start": 1705572,
    "end": 1708420,
    "text": "さて、これはすべてメタデータについてだ。"
  },
  {
    "start": 1708580,
    "end": 1717830,
    "text": "次に、ページのキャッシュを適切に行い、読み込み時間を短縮する。"
  },
  {
    "start": 1717980,
    "end": 1723722,
    "text": "さて、ページがどのようにキャッシュされているかを調べる最も簡単な方法は、プロジェクトをビルドすることだ。"
  },
  {
    "start": 1723906,
    "end": 1732554,
    "text": "そのために開発サーバーの実行を停止し、Run devの代わりにNPM run buildと入力する。"
  },
  {
    "start": 1732682,
    "end": 1733650,
    "text": "我々はこれを実行する。"
  },
  {
    "start": 1733690,
    "end": 1740314,
    "text": "プロジェクトのサイズやポテトマシンの種類にもよるが、数秒で終わる。"
  },
  {
    "start": 1740402,
    "end": 1748196,
    "text": "それが終わると、このような出力が得られ、さまざまなページのリストと、その左側にある小さなアイコンが表示される。"
  },
  {
    "start": 1748298,
    "end": 1753328,
    "text": "この下にあるように、これらのアイコンは、各ページがどのようにレンダリングされ、キャッシュされているかを示している。"
  },
  {
    "start": 1753424,
    "end": 1760072,
    "text": "現在、next JSは可能な限り自動的にページをキャッシュし、プロジェクトのコンパイル時にレンダリングされるようになっている。"
  },
  {
    "start": 1760216,
    "end": 1768552,
    "text": "訪問者がこのページを開くたびに、出来上がったHTMLが送信され、もう何もロードされるのを待つ必要はない。"
  },
  {
    "start": 1768656,
    "end": 1771112,
    "text": "この効果はフロントページで見ることができる。"
  },
  {
    "start": 1771216,
    "end": 1779760,
    "text": "まずNPMを実行し、ビルドしたばかりのプロジェクトを実行するためにstartを実行し、それからページを更新しなければならない。"
  },
  {
    "start": 1779920,
    "end": 1785056,
    "text": "フロントページでも1秒の遅れがある。"
  },
  {
    "start": 1785168,
    "end": 1789560,
    "text": "プロジェクトをビルドすると、次のJ'sはこのページ全体をレンダリングする。"
  },
  {
    "start": 1789640,
    "end": 1800602,
    "text": "データを取得し、HTMLを生成し、このページを開くたびにHTMLが送信されるだけで、遅延も含めてこのパーティーを再び実行することはない。"
  },
  {
    "start": 1800736,
    "end": 1806086,
    "text": "これはコンパイル時にのみ実行され、そのためローディング時間がなくなっている。"
  },
  {
    "start": 1806158,
    "end": 1808774,
    "text": "私は何度でもページを更新できる。"
  },
  {
    "start": 1808822,
    "end": 1814174,
    "text": "もう1秒の遅れはないし、10秒だったらこの遅れもない。"
  },
  {
    "start": 1814262,
    "end": 1816094,
    "text": "このページは即座に読み込まれる。"
  },
  {
    "start": 1816182,
    "end": 1818998,
    "text": "これは次期Jsの大きな強みのひとつだ。"
  },
  {
    "start": 1819094,
    "end": 1823142,
    "text": "これらのページをキャッシュし、可能な限り速く開くことができる。"
  },
  {
    "start": 1823286,
    "end": 1829050,
    "text": "一つのブログ記事を開くと、ローディング時間は1秒のままだ。"
  },
  {
    "start": 1829410,
    "end": 1830082,
    "text": "なぜですか？"
  },
  {
    "start": 1830226,
    "end": 1840898,
    "text": "動的なURLパラメーターがあるので、現時点ではポスト4にいるが、異なるデータを持つポスト20に行くこともできる。"
  },
  {
    "start": 1841034,
    "end": 1846962,
    "text": "問題は、次のJSが、ここにどんな異なる値を入れられるかを事前に知らないことだ。"
  },
  {
    "start": 1847026,
    "end": 1853162,
    "text": "そのため、このページのデータは、実際にページを開いたときに取得しなければならない。"
  },
  {
    "start": 1853346,
    "end": 1864492,
    "text": "このコードはコンパイル時に実行されるのではなく、誰かがページにアクセスしたときに実行される。"
  },
  {
    "start": 1864596,
    "end": 1873468,
    "text": "コンソールをもう一度見てみると、ラムダのアイコンがある。"
  },
  {
    "start": 1873564,
    "end": 1877404,
    "text": "ダイナミックレンダリングは避けたいが、常に避けられるわけではない。"
  },
  {
    "start": 1877492,
    "end": 1886454,
    "text": "ページを開いたときに動的なデータが必要になることもあるが、静的にキャッシュされたページの方が読み込みが速いので、SEO対策にもなる。"
  },
  {
    "start": 1886582,
    "end": 1897166,
    "text": "繰り返しになるが、next jsはこのURLにどのような異なる投稿IDを入れられるかを事前に知ることができないため、コンパイル時にこれらのページをレンダリングできないという問題がある。"
  },
  {
    "start": 1897278,
    "end": 1906092,
    "text": "しかし、next jsに投稿アイデアにどんな値を入れられるかを伝えれば、ブログ記事でも静的キャッシュが機能するようになる。"
  },
  {
    "start": 1906206,
    "end": 1908816,
    "text": "そのためには、別の機能を実装しなければならない。"
  },
  {
    "start": 1908888,
    "end": 1915140,
    "text": "次回のj'sビギナー・チュートリアルですでにカバーしたが、完成度を高めるためにここでもカバーしたい。"
  },
  {
    "start": 1915640,
    "end": 1927056,
    "text": "コンポーネント外の同じファイルのどこかに、generated static paramsという別の非同期関数をエクスポートする。"
  },
  {
    "start": 1927128,
    "end": 1937822,
    "text": "繰り返しになるが、スペルが正しいことが重要で、この関数からは、あらかじめレンダリングしたいすべての異なる投稿IDを含む配列を返したい。"
  },
  {
    "start": 1937966,
    "end": 1940158,
    "text": "この投稿IDはどうやって入手するのですか？"
  },
  {
    "start": 1940294,
    "end": 1945582,
    "text": "フロントページと同じように、すべての記事をフェッチする必要があるよね？"
  },
  {
    "start": 1945766,
    "end": 1953010,
    "text": "この部分と2行目をコピーして貼り付け、静的パラメーターを生成する。"
  },
  {
    "start": 1953350,
    "end": 1956606,
    "text": "このタイプもmodelsフォルダからここにインポートする。"
  },
  {
    "start": 1956758,
    "end": 1961654,
    "text": "このフェッチ・リクエストは、このリクエストと自動的に重複排除される。"
  },
  {
    "start": 1961742,
    "end": 1968390,
    "text": "なぜなら、これはコンパイル時に一度だけ実行されるからだ。"
  },
  {
    "start": 1968470,
    "end": 1972078,
    "text": "もう一つリクエストを実行するのは大したことではない。"
  },
  {
    "start": 1972254,
    "end": 1978150,
    "text": "これで各投稿ができたので、これを投稿アイデアの配列にしたい。"
  },
  {
    "start": 1978270,
    "end": 1986606,
    "text": "ポスト・ドットマップの括弧、別の括弧のペア、そして中括弧のペアを返す。"
  },
  {
    "start": 1986678,
    "end": 1991854,
    "text": "なぜなら、こうすることで、このポスト・オブジェクトをこのマップカーで再構築することができるからだ。"
  },
  {
    "start": 1991982,
    "end": 1994806,
    "text": "ここに各記事のアイデアがある。"
  },
  {
    "start": 1994998,
    "end": 2000542,
    "text": "そして、この2つの括弧の間に右矢印を書き、ideaと書く。"
  },
  {
    "start": 2000686,
    "end": 2006966,
    "text": "このようにして、投稿のidをidの配列にマッピングし、この関数から返す。"
  },
  {
    "start": 2006998,
    "end": 2015524,
    "text": "この配列は、1つ目はポスト1、2つ目はポストツアー、といった具合になる。"
  },
  {
    "start": 2015692,
    "end": 2019920,
    "text": "これは文字通り、この関数から返される配列である。"
  },
  {
    "start": 2021820,
    "end": 2029036,
    "text": "これはnext jsに、これらの異なる投稿IDをすべてプリレンダリングして、URLの中に入れたいことを伝えます。"
  },
  {
    "start": 2029148,
    "end": 2035588,
    "text": "ページのデータはフェッチされ、HTMLはキャッシュされる。"
  },
  {
    "start": 2035764,
    "end": 2039600,
    "text": "これを保存して、もう一度プロジェクトを立ち上げよう。"
  },
  {
    "start": 2040630,
    "end": 2046502,
    "text": "もう一度npm buildを実行すると、ご覧のようにラムダのアイコンはもうありません。"
  },
  {
    "start": 2046566,
    "end": 2052662,
    "text": "この円は、このページが事前にレンダリングされ、静的にキャッシュされていることを意味する。"
  },
  {
    "start": 2052726,
    "end": 2057406,
    "text": "ここで静的パラメータを生成することで、静的プロップを取得することができます。"
  },
  {
    "start": 2057438,
    "end": 2063254,
    "text": "これは古いpagesディレクトリにあったものだが、アプリ・ルーターでは代わりにgenerate static paramsを使っている。"
  },
  {
    "start": 2063342,
    "end": 2076060,
    "text": "重要なのは、この円が表示され、アプリを再び起動すると、フロントページのようにブログ記事が即座にロードされることだ。"
  },
  {
    "start": 2076360,
    "end": 2089112,
    "text": "というのも、すべてのデータはコンパイル時に取得され、その後は静的なHTMLが提供されるだけだからだ。"
  },
  {
    "start": 2089216,
    "end": 2096192,
    "text": "通常、コンパイル時にこのデータをフェッチすれば十分だからだ。"
  },
  {
    "start": 2096336,
    "end": 2101912,
    "text": "ページの読み込み速度は重要なランキング要素であるため、SEO対策には本当に最適です。"
  },
  {
    "start": 2101976,
    "end": 2107220,
    "text": "next JSを使えば、ページを瞬時に開くことができる。"
  },
  {
    "start": 2107600,
    "end": 2110936,
    "text": "その別の例として、私のブログをもう一度見てみよう。"
  },
  {
    "start": 2111048,
    "end": 2113160,
    "text": "ここでもまったく同じことをしている。"
  },
  {
    "start": 2113320,
    "end": 2115488,
    "text": "ドカンと、即座にページが開く。"
  },
  {
    "start": 2115584,
    "end": 2120860,
    "text": "画像のロードにはまだ時間がかかるが、どのみち遅延ロードされるのだから構わない。"
  },
  {
    "start": 2121440,
    "end": 2126184,
    "text": "ブログ記事そのものは、すべてのテキストが即座にそこにある。"
  },
  {
    "start": 2126312,
    "end": 2130952,
    "text": "ローディング時間はほぼゼロ。"
  },
  {
    "start": 2131136,
    "end": 2133504,
    "text": "ここでもうひとつ言っておきたいことがある。"
  },
  {
    "start": 2133632,
    "end": 2154452,
    "text": "例えば、eコマースのウェブサイトでは、数千種類の商品があり、それらを静的にキャッシュしたいかもしれないが、コンパイル時にすべてをレンダリングすることはできない。"
  },
  {
    "start": 2154556,
    "end": 2167260,
    "text": "静的パラメータを生成する機能を実装し、この関数から返されなかったidでブログ記事を開くと、ユーザーが初めて開いたときにページがレンダリングされます。"
  },
  {
    "start": 2167300,
    "end": 2178384,
    "text": "このページが最初に開かれたときは、まだ1秒の遅延があるが、次のjsは、その後にこのページを訪れたユーザーのために、このページをキャッシュする。"
  },
  {
    "start": 2178492,
    "end": 2182872,
    "text": "これは、最初に静的パラメータを生成するように実装した場合にのみ発生する。"
  },
  {
    "start": 2182936,
    "end": 2186352,
    "text": "もしこれを追加しなければ、常にロード時間が発生することになる。"
  },
  {
    "start": 2186456,
    "end": 2193664,
    "text": "このフォールバック動作を得るには、この関数を実装し、ここで何かを返す必要がある。"
  },
  {
    "start": 2193752,
    "end": 2197820,
    "text": "プリレンダリングは5ページだけにしよう。"
  },
  {
    "start": 2198240,
    "end": 2208470,
    "text": "sliceを呼び出して、基本的に最初の5つの投稿IDだけをこの配列に入れるんだ。"
  },
  {
    "start": 2209010,
    "end": 2215218,
    "text": "ローディング時間もちょっとだけ長くしてみよう。"
  },
  {
    "start": 2215274,
    "end": 2216794,
    "text": "これはプレゼンテーションのためだ。"
  },
  {
    "start": 2216882,
    "end": 2219066,
    "text": "6秒に設定する。"
  },
  {
    "start": 2219218,
    "end": 2226350,
    "text": "その後、NPM run buildを再度実行し、続いてNPm run startを実行する。"
  },
  {
    "start": 2227010,
    "end": 2236412,
    "text": "これでページを更新すると、最初の5ページだけが事前にレンダリングされ、キャッシュされているので、すぐに開くことができる。"
  },
  {
    "start": 2236476,
    "end": 2237520,
    "text": "彼らはそうする。"
  },
  {
    "start": 2237900,
    "end": 2261720,
    "text": "プリレンダリングされていない投稿をURLから直接開きたい場合、例えば最後の投稿であるはずの投稿30を開くと、このページが開くまでに約6秒のロード時間がかかります。"
  },
  {
    "start": 2261820,
    "end": 2269480,
    "text": "説明したように、この関数を実装した時点で、このページは初めてレンダリングされた後もキャッシュされることになる。"
  },
  {
    "start": 2269520,
    "end": 2274480,
    "text": "ページを更新すると、実際に即座に開く。"
  },
  {
    "start": 2274600,
    "end": 2277608,
    "text": "もう6秒のロード時間はない。"
  },
  {
    "start": 2277704,
    "end": 2280700,
    "text": "別の129番を試してみよう。"
  },
  {
    "start": 2281080,
    "end": 2289950,
    "text": "ここでも、次のJSがデータをフェッチし、ページをレンダリングし、それをキャッシュするまでのローディング時間が非常に長い。"
  },
  {
    "start": 2290080,
    "end": 2296034,
    "text": "今、3階級に戻ると即座に開き、29階級も同じだ。"
  },
  {
    "start": 2296202,
    "end": 2304962,
    "text": "データを取得するまで待つ必要があるのは1人のユーザーだけで、その後のすべてのユーザーは、この非常に高速なインスタント・ページの読み込み速度を得ることができる。"
  },
  {
    "start": 2305066,
    "end": 2310442,
    "text": "こうすることで、すべてのページを事前にレンダリングする必要がなくなる。"
  },
  {
    "start": 2310506,
    "end": 2321232,
    "text": "何千というような膨大な数があるのなら、最も重要なものだけ、あるいは最初の100個だけ、あるいは何でもいいからレンダリングして、他のものにはこのフォールバック戦略を使えばいい。"
  },
  {
    "start": 2321376,
    "end": 2329260,
    "text": "よし、でもこの遅延をリセットして、全ページをレンダリングするスライスを削除しよう。"
  },
  {
    "start": 2330000,
    "end": 2335416,
    "text": "また、最新の変更点を見ることができるように、開発モードで再開するつもりだ。"
  },
  {
    "start": 2335528,
    "end": 2337912,
    "text": "NPm rundev もうひとつ。"
  },
  {
    "start": 2338016,
    "end": 2348196,
    "text": "現時点で存在しないidを持つページを開くと、空のページが表示される。"
  },
  {
    "start": 2348308,
    "end": 2355332,
    "text": "これを変更するには、コンポーネント関数に降りて、フェッチ・リクエストを作る。"
  },
  {
    "start": 2355396,
    "end": 2357680,
    "text": "このリクエストの結果を確認することができる。"
  },
  {
    "start": 2358660,
    "end": 2370080,
    "text": "レスポンスのステータスが404に等しいかどうかをチェックすることができる。これは、この投稿が見つからなかった場合にダミーのJSON APIが返すものだからだ。"
  },
  {
    "start": 2370990,
    "end": 2377718,
    "text": "例えばPrismaのようなものを使えば、戻ってきた配列が空かどうかをチェックすることもできる。"
  },
  {
    "start": 2377814,
    "end": 2381454,
    "text": "私たちはただ、ここでデータを受け取っていないことを知りたいだけなのだ。"
  },
  {
    "start": 2381582,
    "end": 2387170,
    "text": "次に、next navigationからのインポートであるnotfoundを呼び出す。"
  },
  {
    "start": 2388150,
    "end": 2394254,
    "text": "これは、私がすでに開始コードに含めたnot foundページにリダイレクトされるようにするものである。"
  },
  {
    "start": 2394342,
    "end": 2397214,
    "text": "繰り返しになるが、これについては次のJS初心者向けチュートリアルで取り上げた。"
  },
  {
    "start": 2397302,
    "end": 2405190,
    "text": "このファイルはnot minus found TSXと呼ばれなければならず、このnot found関数が私たちをリダイレクトする場所である。"
  },
  {
    "start": 2405350,
    "end": 2414798,
    "text": "このページのデータが見つからず、ルートがないURLを挿入すると、同じように見つからないページにリダイレクトされる。"
  },
  {
    "start": 2414934,
    "end": 2430950,
    "text": "なぜなら、もし空のページを表示したら、検索エンジンのクローラーにとってかなり悪いシグナルとなるからだ。"
  },
  {
    "start": 2431110,
    "end": 2435158,
    "text": "その代わり、私たちは常に検索エンジンのクローラーに正しいシグナルを与えたい。"
  },
  {
    "start": 2435334,
    "end": 2438190,
    "text": "もしデータが見つからなかったら、それを伝えなければならない。"
  },
  {
    "start": 2438270,
    "end": 2445902,
    "text": "このnot foundページは、検索エンジンのクローラーに正しい情報を与えるために、適切なヘッダーとステータスコードも持っている。"
  },
  {
    "start": 2445966,
    "end": 2453582,
    "text": "クローラーは次に何が出てくるか正確に知っている。 サーバー・コンポーネントとクライアント・コンポーネントについて少し話したい。"
  },
  {
    "start": 2453686,
    "end": 2460532,
    "text": "サーバーとクライアントのコンポーネントとは何かについては、次回のJ'sビギナー・チュートリアルで説明するが、これらはSEOにも関係している。"
  },
  {
    "start": 2460646,
    "end": 2464992,
    "text": "一般的に、サーバー・コンポーネントの内部で可能な限り多くのデータを取得したい。"
  },
  {
    "start": 2465056,
    "end": 2466488,
    "text": "これが私たちがここでやっていることだ。"
  },
  {
    "start": 2466584,
    "end": 2468944,
    "text": "トップでクライアントのディレクティブを使う必要はない。"
  },
  {
    "start": 2469032,
    "end": 2470480,
    "text": "これはサーバーコンポーネントである。"
  },
  {
    "start": 2470520,
    "end": 2476248,
    "text": "そのため、コンポーネント内部で直接データを取得し、ここでレンダリングすることができる。"
  },
  {
    "start": 2476384,
    "end": 2490802,
    "text": "というのも、こうすることで、ページをレンダリングするために必要なすべてのJavaScriptやパッケージがクライアントに送られることがなくなるからだ。"
  },
  {
    "start": 2490906,
    "end": 2496210,
    "text": "この例では、ページのレンダリングにパッケージを使用していない。"
  },
  {
    "start": 2496290,
    "end": 2501322,
    "text": "例えば、マークダウンのフォーマッタをサードパーティーのパッケージとしてここに入れることができる。"
  },
  {
    "start": 2501426,
    "end": 2508346,
    "text": "このマークダウン・レンダラーをサーバー・コンポーネントで使用することで、このパッケージのJavaScriptをクライアントに送信する必要がなくなる。"
  },
  {
    "start": 2508418,
    "end": 2511466,
    "text": "私たちは、完成したHTML、完成したマークダウンのみを送ります。"
  },
  {
    "start": 2511578,
    "end": 2515410,
    "text": "サーバーコンポーネントはJavaScriptの機能をサポートしていません。"
  },
  {
    "start": 2515450,
    "end": 2519738,
    "text": "このページではインタラクティブなことはできない。"
  },
  {
    "start": 2519824,
    "end": 2525830,
    "text": "JavaScriptを必要とするもの、例えばボタンのクリックリスナーはzerbaコンポーネントでは動作しません。"
  },
  {
    "start": 2525950,
    "end": 2532542,
    "text": "そのためにはクライアント・コンポーネントが必要だが、クライアント・コンポーネントをできるだけ小さくするのがコツだ。"
  },
  {
    "start": 2532686,
    "end": 2544214,
    "text": "例えば、medium.comのように、この投稿をクリックして拍手できるボタンをこのページに設置したいとしましょう。"
  },
  {
    "start": 2544342,
    "end": 2556436,
    "text": "このページ全体をクライアント・コンポーネントにラップする代わりに、ボタンをクライアント・コンポーネントにラップし、それをサーバー・コンポーネントに置くことができる。"
  },
  {
    "start": 2556628,
    "end": 2564340,
    "text": "そのために、ボタンとJavaScriptのロジックとステートを含むスタイリングコードで、この拍手ボタンを用意した。"
  },
  {
    "start": 2564460,
    "end": 2567724,
    "text": "繰り返すが、ステートはクライアント・コンポーネントにしか入れられない。"
  },
  {
    "start": 2567772,
    "end": 2583252,
    "text": "サーバーコンポーネントではなく、このボタンコンポーネントに直接useclientディレクティブを記述することで、このページ全体をクライアントコンポーネントにすることなく、サーバーコンポーネントにこのように記述することができます。"
  },
  {
    "start": 2583356,
    "end": 2594748,
    "text": "インタラクティブな部分がクライアント・コンポーネントであれば十分だし、このほうがずっといい。なぜなら、ここにあるものはすべて完全にサーバー・サイドでレンダリングされるからだ。"
  },
  {
    "start": 2594924,
    "end": 2603480,
    "text": "この部分はサーバー上でレンダリングされ、下の拍手ボタンはクライアント上でレンダリングされます。"
  },
  {
    "start": 2603640,
    "end": 2606800,
    "text": "そのため、JavaScriptの機能をサポートしている。"
  },
  {
    "start": 2606960,
    "end": 2607720,
    "text": "オーケー、クールだ。"
  },
  {
    "start": 2607760,
    "end": 2615776,
    "text": "次に、ダイナミックサイトマップとロボットTxTファイルの設定方法を学びます。"
  },
  {
    "start": 2615928,
    "end": 2628860,
    "text": "サイトマップは、Googleやbingeのような他の検索エンジンにインデックスさせたいウェブサイトのさまざまなページについて、検索エンジンのクローラーに伝えることができる特別なファイルです。"
  },
  {
    "start": 2628890,
    "end": 2630888,
    "text": "これらはすべてサイトマップから読み取る。"
  },
  {
    "start": 2630984,
    "end": 2633520,
    "text": "現在、このようなサイトマップを持つことは必須ではない。"
  },
  {
    "start": 2633640,
    "end": 2638944,
    "text": "これらのクローラーは、あなたのすべてのリンクをクロールし、あなたのページを見つけることもできる。"
  },
  {
    "start": 2639032,
    "end": 2642416,
    "text": "こうすることで、クローラーが何も見逃さないようにするのだ。"
  },
  {
    "start": 2642528,
    "end": 2653488,
    "text": "このようなサイトマップがない限り、クローラーはそのページを見つけることができないからだ。"
  },
  {
    "start": 2653624,
    "end": 2663152,
    "text": "手短に言えば、次のJSでSEOを気にするなら、サイトマップを常にウェブサイトに置いておくのが良いということだ。"
  },
  {
    "start": 2663216,
    "end": 2668424,
    "text": "サイトマップTSXファイルを作成し、ここに直接サイトマップを書き込むこともできる。"
  },
  {
    "start": 2668512,
    "end": 2670936,
    "text": "これはサイトマップの構文である。"
  },
  {
    "start": 2671048,
    "end": 2674456,
    "text": "このURL Zと異なるURLタグをテストしてください。"
  },
  {
    "start": 2674488,
    "end": 2683568,
    "text": "XMLファイルですが、通常はサイトマップを動的に生成したいものです。"
  },
  {
    "start": 2683664,
    "end": 2690392,
    "text": "多くの異なるブログ記事がある場合、これらのブログ記事を取得し、異なるエントリーを自動的に生成したい。"
  },
  {
    "start": 2690496,
    "end": 2693016,
    "text": "ダイナミック・サイトマップを使えば、これを実現できる。"
  },
  {
    "start": 2693128,
    "end": 2696984,
    "text": "そのために、アプリのフォルダにサイトマップTSXファイルを作成します。"
  },
  {
    "start": 2697072,
    "end": 2697928,
    "text": "そうしよう"
  },
  {
    "start": 2697984,
    "end": 2699580,
    "text": "プロジェクトに入ろう。"
  },
  {
    "start": 2700480,
    "end": 2713584,
    "text": "appフォルダを右クリックし、ここにサイトマップtsファイルを置きます。tsxではありません。ここにはレイアウトを入れないからです。"
  },
  {
    "start": 2713712,
    "end": 2725622,
    "text": "Sitemap tsは小文字で、ここではsitemapと呼ぶデフォルトの非同期関数をエクスポートしています。"
  },
  {
    "start": 2725766,
    "end": 2731822,
    "text": "小文字の場合は非同期関数で、ブログ記事をここに取り込みたいからだ。"
  },
  {
    "start": 2731926,
    "end": 2744260,
    "text": "適切なオートコンプリートを取得するために、next dotサイトマップから来るメタデータルートの型のプロミスに戻り値の型を設定します。"
  },
  {
    "start": 2744680,
    "end": 2757144,
    "text": "これは戻り値の型であり、最終的にはすべての異なるページを配列で返したい。"
  },
  {
    "start": 2757232,
    "end": 2759264,
    "text": "これでオートコンプリートが使えるようになった。"
  },
  {
    "start": 2759392,
    "end": 2761512,
    "text": "ここでの3つの値は任意である。"
  },
  {
    "start": 2761616,
    "end": 2765180,
    "text": "ここに入れなければならないのは、ページのURLだ。"
  },
  {
    "start": 2766280,
    "end": 2769746,
    "text": "例えば、aboutページをインデックス化したいとしよう。"
  },
  {
    "start": 2769928,
    "end": 2774158,
    "text": "そして、このURLをここに入れ、完全なURLでなければならない。"
  },
  {
    "start": 2774254,
    "end": 2776918,
    "text": "スラッシュを書くだけでは不十分なのだ。"
  },
  {
    "start": 2776974,
    "end": 2778606,
    "text": "完全なURLでなければならない。"
  },
  {
    "start": 2778758,
    "end": 2781570,
    "text": "その前にベースURLが必要だ。"
  },
  {
    "start": 2781950,
    "end": 2787210,
    "text": "ベースとなるURLは、スタートコードの一部であるドットnvファイルに入れた。"
  },
  {
    "start": 2787510,
    "end": 2789390,
    "text": "次の公開ベースURL。"
  },
  {
    "start": 2789510,
    "end": 2801874,
    "text": "ここでは、最初のサイトマップエントリーとなるenv次の公開ベースURLの処理を行い、これを保存すると、すでにサイトマップを開くことができる。"
  },
  {
    "start": 2801962,
    "end": 2806750,
    "text": "アプリが開発モードで実行されていることを確認してください。"
  },
  {
    "start": 2807250,
    "end": 2812430,
    "text": "サイトマップはxmlではありません。"
  },
  {
    "start": 2813090,
    "end": 2814466,
    "text": "これだ。"
  },
  {
    "start": 2814658,
    "end": 2818506,
    "text": "これがサイトマップの最初のURLだ。"
  },
  {
    "start": 2818658,
    "end": 2824310,
    "text": "説明したように、私はブログの記事ごとにエントリーを追加したいのだが、手作業で追加したくないのだ。"
  },
  {
    "start": 2824740,
    "end": 2829520,
    "text": "その代わりに、これらのブログ記事を取得し、それをこの配列にマッピングしたい。"
  },
  {
    "start": 2830140,
    "end": 2832332,
    "text": "ここでも、すべてのブログ記事を取得したい。"
  },
  {
    "start": 2832356,
    "end": 2847480,
    "text": "フロントページからのフェッチリクエストをここにコピーし、このタイプをインポートして、これらの投稿を同じURL構造にマッピングしたい。"
  },
  {
    "start": 2848020,
    "end": 2859120,
    "text": "このような配列になるので、同じタイプのメタデータ・ルートsitemapを与えます。"
  },
  {
    "start": 2859700,
    "end": 2867960,
    "text": "こうすることで、投稿マップから作成されるエントリーの自動補完とタイプの安全性が向上する。"
  },
  {
    "start": 2868420,
    "end": 2880450,
    "text": "ここでも、2つの括弧と中括弧のペアで、括弧の前にやったようにidを再構築する。 中括弧は、ここからオブジェクトを返したいからだ。"
  },
  {
    "start": 2880750,
    "end": 2884370,
    "text": "ここで、このタイプを設定したので、オートコンプリートが使えるようになった。"
  },
  {
    "start": 2885550,
    "end": 2887890,
    "text": "ここでもURLのみが必須である。"
  },
  {
    "start": 2889350,
    "end": 2904020,
    "text": "ブログの投稿は、posts、スラッシュ、投稿IDの下にあります。"
  },
  {
    "start": 2906880,
    "end": 2913784,
    "text": "ブログ記事を最後に更新した時間がわかっていれば、最終更新日時を設定することも意味がある。"
  },
  {
    "start": 2913872,
    "end": 2918288,
    "text": "これにより、クローラーはあなたが最後にページを更新した日を知ることができ、再度クロールすることができる。"
  },
  {
    "start": 2918384,
    "end": 2928186,
    "text": "ここで間違った値を設定すると、たとえばすべてのページを最新の日付だけに設定するような場合、グーグルは実際にはこの値を完全に無視するので、正しい値でなければならない。"
  },
  {
    "start": 2928368,
    "end": 2940670,
    "text": "今、私たちのブログ記事には更新されたタイムスタンプがありませんが、仮にあったとして、通常タイムスタンプは文字列の形で保存されているので、これを日付に変えます。"
  },
  {
    "start": 2940790,
    "end": 2946118,
    "text": "例えば、post updated atとlast modified valueは日付を指定する。"
  },
  {
    "start": 2946294,
    "end": 2949330,
    "text": "これを日付オブジェクトに変換する。"
  },
  {
    "start": 2949830,
    "end": 2952270,
    "text": "ここにもこの値はない。"
  },
  {
    "start": 2952310,
    "end": 2955730,
    "text": "コメントアウトして、備忘録としてここに残しておく。"
  },
  {
    "start": 2957160,
    "end": 2962048,
    "text": "また、変更頻度を設定することもできる。"
  },
  {
    "start": 2962184,
    "end": 2964180,
    "text": "このページの変更頻度は？"
  },
  {
    "start": 2964640,
    "end": 2966256,
    "text": "ここでは何も設定しない。"
  },
  {
    "start": 2966328,
    "end": 2969460,
    "text": "繰り返しになるが、これは備忘録としてコメントとして残しておく。"
  },
  {
    "start": 2969880,
    "end": 2975536,
    "text": "優先順位を決めることもできる。"
  },
  {
    "start": 2975688,
    "end": 2979856,
    "text": "そして、このページが他のページと比べてどれだけ重要であるかを定義している。"
  },
  {
    "start": 2979888,
    "end": 2981818,
    "text": "この値はどこにも使ったことがない。"
  },
  {
    "start": 2981944,
    "end": 2986510,
    "text": "私は通常、URLと最終更新タイムスタンプを使うだけだ。"
  },
  {
    "start": 2986590,
    "end": 2989686,
    "text": "もしこれらも実装したければ、ここでできる。"
  },
  {
    "start": 2989798,
    "end": 2993446,
    "text": "そして、これらのポスト・エントリーをこの下の配列に入れたい。"
  },
  {
    "start": 2993558,
    "end": 2998530,
    "text": "このように、直接スプレッドすることができる。"
  },
  {
    "start": 2999150,
    "end": 3005854,
    "text": "生成されたサイトマップでどのように見えるかを見るために、最終更新タイムスタンプもここに入れてみましょう。"
  },
  {
    "start": 3006022,
    "end": 3014896,
    "text": "ここでは最新の日付に設定しますが、すべてのページのタイムスタンプに最新の日付を使用することもできます。"
  },
  {
    "start": 3014968,
    "end": 3021340,
    "text": "なぜなら、グーグルは賢いので、これが正しい値でないことに気づくからだ。"
  },
  {
    "start": 3022000,
    "end": 3034046,
    "text": "とはいえ、これを保存してサイトマップを更新すれば、動的に生成されたブログ記事がすべてここに表示される。"
  },
  {
    "start": 3034168,
    "end": 3038794,
    "text": "後ほど、このサイトマップをGoogleサーチコンソールにアップロードする方法を紹介する。"
  },
  {
    "start": 3038882,
    "end": 3042226,
    "text": "このチュートリアルを最後まで見てください。"
  },
  {
    "start": 3042418,
    "end": 3045442,
    "text": "次に、robots txtファイルを設定したい。"
  },
  {
    "start": 3045506,
    "end": 3052986,
    "text": "このファイルを使えば、検索エンジンのクローラーに、どのページを無視すればよいかを教えることができる。"
  },
  {
    "start": 3053058,
    "end": 3063186,
    "text": "この場合も、アプリのフォルダにrobots txtファイルを置くだけで、静的な形でハードコードすることもできるし、robots t'sを使って動的に生成することもできる。"
  },
  {
    "start": 3063298,
    "end": 3068178,
    "text": "たとえここでデータを取得しなくても、私はこの構文の方が好きだ。"
  },
  {
    "start": 3068314,
    "end": 3073150,
    "text": "appフォルダにrobots tsファイルを作成しよう。"
  },
  {
    "start": 3074130,
    "end": 3081350,
    "text": "もう一度、app robots tsを右クリックし、もう一度名前を正確にする必要があります。"
  },
  {
    "start": 3082810,
    "end": 3087636,
    "text": "ここからrobotsというデフォルトの関数をエクスポートする。"
  },
  {
    "start": 3087708,
    "end": 3095564,
    "text": "ここでも小文字のエントリーでメタデータ・ルート・ドット・ロボットを返す。"
  },
  {
    "start": 3095732,
    "end": 3103040,
    "text": "ここではデータをフェッチしたくないので、今回はプロミスにラップしない。"
  },
  {
    "start": 3103500,
    "end": 3111108,
    "text": "ここでオブジェクトを返し、ここでルール、ホスト、サイトマップを設定できる。"
  },
  {
    "start": 3111204,
    "end": 3115900,
    "text": "まずはルールから。ルールはオブジェクトの配列である。"
  },
  {
    "start": 3115940,
    "end": 3119840,
    "text": "ここでもまた、ユーザーエージェントによるオートコンプリートが発生する。"
  },
  {
    "start": 3120500,
    "end": 3123560,
    "text": "どのクローラーを対象とするかを指定する。"
  },
  {
    "start": 3124060,
    "end": 3129080,
    "text": "すべてのクローラーを対象にしたい場合は、ここに文字列の形でアスタリスクを入れる。"
  },
  {
    "start": 3129900,
    "end": 3135868,
    "text": "また、より具体的に、たとえば特定のページからグーグルのクローラーだけを除外することもできる。"
  },
  {
    "start": 3136004,
    "end": 3140462,
    "text": "ここで、特定のページをすべてのクローラーから除外したいとしよう。"
  },
  {
    "start": 3140596,
    "end": 3154830,
    "text": "ほとんどのページをインデックスさせたいので、このようにスラッシュだけですべてのページを許可することから始める。"
  },
  {
    "start": 3155170,
    "end": 3160950,
    "text": "Googleに表示されないように管理者を除外したいとしよう。"
  },
  {
    "start": 3161450,
    "end": 3163666,
    "text": "プライバシーとでも言おうか。"
  },
  {
    "start": 3163738,
    "end": 3171630,
    "text": "例えば、これらのページをウェブサイトに掲載し、ユーザーが開くことはできるが、グーグルに表示されないようにしたい。"
  },
  {
    "start": 3171770,
    "end": 3183450,
    "text": "ルールの後に、サイトマップ、サイトマップの場所を設定することもできる。"
  },
  {
    "start": 3185430,
    "end": 3187358,
    "text": "次に名前をコピーしよう。"
  },
  {
    "start": 3187414,
    "end": 3196142,
    "text": "公開ベースURLスラッシュサイトマップXMLの権利。"
  },
  {
    "start": 3196326,
    "end": 3199110,
    "text": "クローラーがサイトマップを見つける場所です。"
  },
  {
    "start": 3199270,
    "end": 3201966,
    "text": "正直なところ、何が言いたいのかよくわからない。"
  },
  {
    "start": 3201998,
    "end": 3212374,
    "text": "このrobots TXTファイルなしでサイトマップを後で送信することもできますが、私たち自身が送信しない場合、これはクローラーがサイトマップを見つけるのを助けるだけだと思います。"
  },
  {
    "start": 3212502,
    "end": 3222370,
    "text": "これを保存すれば、robots TXTの下にあるはずだ。"
  },
  {
    "start": 3222790,
    "end": 3223942,
    "text": "これだ。"
  },
  {
    "start": 3224086,
    "end": 3228390,
    "text": "一貫性を保つために、プライバシーの前にもスラッシュを入れよう。"
  },
  {
    "start": 3228470,
    "end": 3234338,
    "text": "スラッシュを付けるか付けないかは問題ではないと思うが、こうすることでより明確になる。"
  },
  {
    "start": 3234514,
    "end": 3237618,
    "text": "このようなrobots TXTファイルは必須ではありません。"
  },
  {
    "start": 3237714,
    "end": 3242514,
    "text": "検索エンジンのクローラーからページを完全にブロックしたいのであれば、それが必要だ。"
  },
  {
    "start": 3242602,
    "end": 3251514,
    "text": "すべてのクローラーは、管理者とプライバシー・ページ以外のすべてのページをクロールすることを許可されている。"
  },
  {
    "start": 3251642,
    "end": 3253866,
    "text": "ここにサイトマップがあります。"
  },
  {
    "start": 3253978,
    "end": 3262282,
    "text": "これらのエントリーを動的に生成したい場合は、この関数を非同期にして戻り値の型をプロミスにラップし、ここにデータをフェッチすることもできる。"
  },
  {
    "start": 3262386,
    "end": 3263946,
    "text": "ここでは必要ない。"
  },
  {
    "start": 3264058,
    "end": 3270590,
    "text": "さて、特定のページのメタデータにアクセスする場合、プライバシーのページにアクセスしよう。"
  },
  {
    "start": 3271490,
    "end": 3274218,
    "text": "ここにはロボットのフィールドもある。"
  },
  {
    "start": 3274354,
    "end": 3279754,
    "text": "これは非常によく似ているが、特定のページに対してより細かいコントロールができる。"
  },
  {
    "start": 3279882,
    "end": 3284702,
    "text": "現在、プライバシー・ページはクロールから完全に除外されている。"
  },
  {
    "start": 3284806,
    "end": 3293662,
    "text": "つまり、この文字列を削除しない限り、ここに何を入れても、クローラーはページにたどり着かないので、実際には意味がない。"
  },
  {
    "start": 3293766,
    "end": 3297182,
    "text": "私はまだ、ここにあるさまざまなオプションをお見せしたい。"
  },
  {
    "start": 3297246,
    "end": 3299250,
    "text": "ここでもオートコンプリートが使える。"
  },
  {
    "start": 3299710,
    "end": 3306214,
    "text": "例えば、indexをfalseに、followをtrueに設定することができる。"
  },
  {
    "start": 3306382,
    "end": 3322646,
    "text": "この文字列を削除しても、クローラーにこのページをクロールさせることはできるが、index falseを指定すると、このページをGoogleに表示させたくないことになり、follow trueを指定すると、クローラーにこのページのリンクをたどらせることになる。"
  },
  {
    "start": 3322718,
    "end": 3336070,
    "text": "プライバシー・ページにリンクがあったとしても、それはヘッダーがリンクになっているからであり、また例えばここにaboutページがあるからである。"
  },
  {
    "start": 3336230,
    "end": 3340416,
    "text": "このロボットの値で、細かいコントロールができる。"
  },
  {
    "start": 3340568,
    "end": 3347664,
    "text": "robotsメタタグでググれば、もっと詳しく知ることができる。"
  },
  {
    "start": 3347752,
    "end": 3356688,
    "text": "このページへのクロールを完全に禁止している限り、クローラーはこのポイントにさえ到達しないので、ここでのことは重要ではない。"
  },
  {
    "start": 3356824,
    "end": 3359280,
    "text": "それでも、思い出としてここに残しておきたい。"
  },
  {
    "start": 3359440,
    "end": 3367592,
    "text": "SEOを気にするのであれば、プロジェクトをGoogleサーチコンソールに接続することをお勧めする。"
  },
  {
    "start": 3367656,
    "end": 3373968,
    "text": "クリック数を確認し、ページに何か問題があればGoogleが教えてくれる。"
  },
  {
    "start": 3374024,
    "end": 3377296,
    "text": "また、人々が何を求めて検索しているかも見ることができる。"
  },
  {
    "start": 3377448,
    "end": 3389152,
    "text": "今はまだブログの記事もない新しいウェブサイトだが、人々がスマート下痢症や私の名前など、さまざまなバリエーションで検索しているのがわかる。"
  },
  {
    "start": 3389256,
    "end": 3390856,
    "text": "ここにすべてのデータがある。"
  },
  {
    "start": 3390888,
    "end": 3394136,
    "text": "かなり便利で、しかも無料で使える。"
  },
  {
    "start": 3394248,
    "end": 3402652,
    "text": "検索ドットgoogle.comサーチコンソールにアクセスするか、GoogleにGoogleサーチコンソールと入力すれば、ここにたどり着く。"
  },
  {
    "start": 3402756,
    "end": 3420160,
    "text": "新しいウェブサイトを追加するには、ここをクリックしてプロパティを追加し、ここにURLを挿入する必要があります。ただし、HTTP、WW、および取引スラッシュは使用しないでください。"
  },
  {
    "start": 3420580,
    "end": 3426164,
    "text": "そして、「続ける」をクリックし、あなたがこのウェブサイトを実際に所有していることを確認しなければならない。"
  },
  {
    "start": 3426292,
    "end": 3430144,
    "text": "この動作は、この値をここにコピーしなければならないということだ。"
  },
  {
    "start": 3430252,
    "end": 3434260,
    "text": "その後、ドメインを購入したプロバイダーに行かなければならない。"
  },
  {
    "start": 3434640,
    "end": 3437504,
    "text": "これはヴェルセルのようなものだが、スマートな日記帳だ。"
  },
  {
    "start": 3437552,
    "end": 3442500,
    "text": "例えば、私はnamecheapを使いましたが、ここでDNS設定を見つけなければなりません。"
  },
  {
    "start": 3443120,
    "end": 3448224,
    "text": "ドメイン・プロバイダのドキュメントをチェックする必要がある。"
  },
  {
    "start": 3448312,
    "end": 3457970,
    "text": "namecheapでは、高度なDNS設定を使ってこれを行い、このような異なるレコードを持つものを探します。"
  },
  {
    "start": 3458080,
    "end": 3469846,
    "text": "次に、広告を入力したホストにtxtタイプの新しいレコードを追加し、コンソールからコピーした値を貼り付けます。"
  },
  {
    "start": 3469958,
    "end": 3471526,
    "text": "そしてこのレコードを作成する。"
  },
  {
    "start": 3471678,
    "end": 3475302,
    "text": "これは実際のドメインではないので、ここではやらない。"
  },
  {
    "start": 3475406,
    "end": 3479246,
    "text": "この記録を編集した後、検証者をクリックする。"
  },
  {
    "start": 3479318,
    "end": 3481646,
    "text": "そして、そのレコードが見つかるかどうかをチェックする。"
  },
  {
    "start": 3481718,
    "end": 3487518,
    "text": "もしそうなら、GoogleはあなたがDNS設定にアクセスできるため、あなたがこのウェブサイトを実際に所有していることを知っている。"
  },
  {
    "start": 3487654,
    "end": 3494238,
    "text": "これが完了すると、あなたのウェブサイトはこのリストに表示され、データの監視を開始することができます。"
  },
  {
    "start": 3494334,
    "end": 3502410,
    "text": "データが表示されるまで通常2日ほどかかるが、その後は毎日更新され、検索パフォーマンスを見ることができる。"
  },
  {
    "start": 3502710,
    "end": 3507070,
    "text": "Googleサーチコンソールもサイトマップを送信する場所です。"
  },
  {
    "start": 3507110,
    "end": 3514922,
    "text": "サイトバーのどこかにサイトマップのメニューがあり、ここにサイトマップのURLを貼り付けます。"
  },
  {
    "start": 3515006,
    "end": 3519122,
    "text": "それはあなたのウェブサイトのURLサイトマップxmlです。"
  },
  {
    "start": 3519266,
    "end": 3524370,
    "text": "投稿すると、グーグルが自動的に随時チェックする。"
  },
  {
    "start": 3524450,
    "end": 3531946,
    "text": "どのページがすでにインデックスされているかを確認するため、Googleにページが表示され始めるまで数日かかる。"
  },
  {
    "start": 3531978,
    "end": 3536474,
    "text": "グーグル検索にこのように入力できるが、自分のURLサイトのコロンが必要だ。"
  },
  {
    "start": 3536562,
    "end": 3539270,
    "text": "この場合は、株式会社スマートダイアリーです。"
  },
  {
    "start": 3539690,
    "end": 3543050,
    "text": "こうしてスマートな日記の全ページを見つける。"
  },
  {
    "start": 3543130,
    "end": 3548062,
    "text": "この場合、フロントページとサインインページだけだ。"
  },
  {
    "start": 3548166,
    "end": 3554390,
    "text": "例えばブログを持っていて、そのブログ記事がインデックスされていれば、これらのページもここに表示されるはずだ。"
  },
  {
    "start": 3554470,
    "end": 3555790,
    "text": "実はコツがある。"
  },
  {
    "start": 3555830,
    "end": 3563798,
    "text": "あなたのページをより早くインデックスさせるには、この検査URLフィールドから手動で送信することができます。"
  },
  {
    "start": 3563894,
    "end": 3569718,
    "text": "各ページごとに手作業で行わなければならないので、大きなリストをただ渡すことはできない。"
  },
  {
    "start": 3569774,
    "end": 3570582,
    "text": "それが欠点だ。"
  },
  {
    "start": 3570646,
    "end": 3574454,
    "text": "また、1日に10ページか12ページしかできない。"
  },
  {
    "start": 3574542,
    "end": 3578650,
    "text": "私の経験では、この方がこれらのページのインデックス付けがはるかに速い。"
  },
  {
    "start": 3579870,
    "end": 3589718,
    "text": "URLを入力し、エンターキーを押すと、そのページがすでにグーグルに登録されていれば、チェックマークが表示される。"
  },
  {
    "start": 3589814,
    "end": 3596086,
    "text": "ページがまだインデックスされていない場合は、インデックス作成をリクエストするをクリックし、任意のサブURLに対してこれを行うことができます。"
  },
  {
    "start": 3596158,
    "end": 3606480,
    "text": "例えば、私がブログの記事を持っていたとしましょう、ブラブラ、私はこの入力フィールドを介してこのページをインデックスすることができ、そして通常、それは1日以内にインデックスされます。"
  },
  {
    "start": 3606560,
    "end": 3624184,
    "text": "ちょっとしたヒントとして、もしあなたが急いでいて、あなたのプロジェクトをVerzelleでホストしていて、月額20ドルのVerzel Proプランに加入しているのであれば、Google Analyticsに代わる、よりシンプルで追加しやすいVezel analyticsを無料で使うこともできます。"
  },
  {
    "start": 3624312,
    "end": 3628904,
    "text": "ご覧の通り、Google Analyticsにはないプライバシーへの配慮もなされている。"
  },
  {
    "start": 3628992,
    "end": 3636196,
    "text": "これを有効にするには、プロジェクトでアナリティクスタブを開き、プロプランの次をクリックします。"
  },
  {
    "start": 3636268,
    "end": 3646460,
    "text": "ある閾値に達するまでは含まれていて、enableをクリックすると、プロジェクトに追加しなければならないいくつかのコードに関する非常に簡単な指示が表示されます。"
  },
  {
    "start": 3646620,
    "end": 3649924,
    "text": "とても簡単なことなので、ここではこの手順を説明したくない。"
  },
  {
    "start": 3650012,
    "end": 3658074,
    "text": "以下の指示に従うだけで、誰が何時にあなたのウェブサイトを訪れたか、どのページか、などをリアルタイムで見ることができる。"
  },
  {
    "start": 3658132,
    "end": 3662490,
    "text": "あなたのウェブサイトへのトラフィックを監視したい場合は、本当に強力です。"
  },
  {
    "start": 3662790,
    "end": 3667590,
    "text": "このチュートリアルを楽しんでいただけたなら幸いである。"
  },
  {
    "start": 3667670,
    "end": 3673470,
    "text": "私は最近、この無料の反応ベストプラクティス・ミニコースをメールマガジン用に作成した。"
  },
  {
    "start": 3673590,
    "end": 3678390,
    "text": "codinginflow.comのreactbestpracticesから無料で入手できる。"
  },
  {
    "start": 3678470,
    "end": 3682102,
    "text": "また、このビデオへのリンクをこのビデオの説明文に入れるつもりだ。"
  },
  {
    "start": 3682126,
    "end": 3690738,
    "text": "私のEメール・ニュースレターに参加すると、無料Eメール・コースに参加することができます。"
  },
  {
    "start": 3690834,
    "end": 3699034,
    "text": "また、私のニュースレターに参加することもお勧めする。ニュースレターには、私が学んだ新しいことを盛り込んだコーディングのヒントを定期的に送っているからだ。"
  },
  {
    "start": 3699122,
    "end": 3703514,
    "text": "もちろん無料で、いつでも購読を解除できるので、ぜひチェックしてみてほしい。"
  },
  {
    "start": 3703602,
    "end": 3704834,
    "text": "このビデオに「いいね！」をお願いします。"
  },
  {
    "start": 3704882,
    "end": 3710242,
    "text": "まだの方は、次のjsとウェブ開発のチュートリアルのためにチャンネルを購読してください。"
  },
  {
    "start": 3710306,
    "end": 3712138,
    "text": "では、次のビデオでお会いしましょう。"
  },
  {
    "start": 3712234,
    "end": 3713042,
    "text": "ハッピーなコーディングだ。"
  },
  {
    "start": 3713106,
    "end": 3713450,
    "text": "気をつけて。"
  }
]