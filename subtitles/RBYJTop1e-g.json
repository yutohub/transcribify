[
  {
    "start": 490,
    "end": 14382,
    "text": "Remixは、フロントエンドとバックエンドのコードをシームレスにブレンドするフルスタックのリアクトアプリケーションの構築プロセスを簡素化し、大幅に簡素化するリアクト上に構築された素晴らしいフレームワークです。"
  },
  {
    "start": 14516,
    "end": 20778,
    "text": "このリミックス・エッセンシャル・クラッシュコースでは、リミックスとその中核となる機能のすべてをご紹介します。"
  },
  {
    "start": 20874,
    "end": 46106,
    "text": "Remixを使った本格的な教育について学びたい方、このクラッシュコースで作るデモプロジェクトとは別のデモプロジェクトを作りたい方、この素晴らしいフレームワークについてもっと知りたい方は、このビデオの下にある割引リンクからRemixの実践ガイドをご覧ください。"
  },
  {
    "start": 46208,
    "end": 52880,
    "text": "それでは、このコースに戻り、Remixとは何かを詳しく見ていこう。"
  },
  {
    "start": 53490,
    "end": 56298,
    "text": "リミックスとは？"
  },
  {
    "start": 56474,
    "end": 63700,
    "text": "もちろん、React JSのためのフレームワークであることは間違いない。"
  },
  {
    "start": 64230,
    "end": 67998,
    "text": "リアクトJSはすでにライブラリではないのか？"
  },
  {
    "start": 68174,
    "end": 69682,
    "text": "ええ、もちろんそうです。"
  },
  {
    "start": 69816,
    "end": 79030,
    "text": "React JSは、ユーザーインターフェイス、正確には高度にリアクティブなユーザーインターフェイスを構築するためのJavaScriptライブラリである。"
  },
  {
    "start": 79370,
    "end": 82120,
    "text": "では、なぜリミックスが必要なのか？"
  },
  {
    "start": 82490,
    "end": 98170,
    "text": "リミックスはリアクトJSの上に構築されるので、リアクトのコードを書くことに変わりはないが、リミックスにはリアクトでフルスタック・アプリケーションを構築するプロセスを簡素化する機能がたくさん追加されている。"
  },
  {
    "start": 98590,
    "end": 111322,
    "text": "というのも、リアクトだけを使用している場合、このフロントエンド・フォルダにあるような通常のリアクト・プロジェクトがあれば、ユーザー・インターフェースの表示を扱うコードがたくさんあるからだ。"
  },
  {
    "start": 111466,
    "end": 130994,
    "text": "しかし、そのアプリケーションが、例えばデータベースにデータを保存するバックエンドも必要とする場合、リアクト・アプリケーションに、バックエンドへのリクエストを別のバックエンド・サーバーに送るコードを追加しなければならない。"
  },
  {
    "start": 131122,
    "end": 151034,
    "text": "フロントエンドのreactアプリケーションでは、リクエストを送信するためのコード、リクエストが送信されている間のロード状態を管理するためのコード、例えばロードスピナーやロード中の表示を表示するためのコード、そして送り返される可能性のあるエラーを処理するためのコードがあります。"
  },
  {
    "start": 151152,
    "end": 153806,
    "text": "それがフロントエンドでやることだ。"
  },
  {
    "start": 153988,
    "end": 160800,
    "text": "前述したように、フルスタックのアプリケーションを構築したいのであれば、必要なのは別のバックエンドだ。"
  },
  {
    "start": 161570,
    "end": 179560,
    "text": "例えば、nodeとexprsjsで構築された全く別のプロジェクトだが、どんなプログラミング言語でも構築できる。"
  },
  {
    "start": 180010,
    "end": 188738,
    "text": "そのようなバックエンドを自分で構築することもできるし、Firebaseのようなサードパーティーのサービスを使うこともできる。"
  },
  {
    "start": 188834,
    "end": 206078,
    "text": "フロントエンドにreactを使用する場合、フルスタックアプリケーションを構築するのが一般的ですが、フロントエンドのアプリケーション、つまりあなたが構築しているreactアプリでは、データベースやそのようなものと直接会話していないことを理解し、心に留めておくことが本当に重要です。"
  },
  {
    "start": 206164,
    "end": 209550,
    "text": "その代わりに、別のバックエンドにリクエストを送ることになる。"
  },
  {
    "start": 210130,
    "end": 217380,
    "text": "今、リクエスト送信は、例えば、そのようなフェッチ・リクエストを送信するコードをラップするユース・エフェクトを使って行われることが多い。"
  },
  {
    "start": 217750,
    "end": 228546,
    "text": "あるいは、最新バージョンのReactルーターを使用しているのであれば、リクエストを送信するためのローダーやアクションを追加するために、reactルーターが提供する新しいAPIを使用することもできる。"
  },
  {
    "start": 228578,
    "end": 237266,
    "text": "例えば、ルートがアクティブになったとき、あなたはまだそのバックエンドを別に持っているが、あなたが書かなければならないリアクトコードはずっと簡単で無駄がない。"
  },
  {
    "start": 237378,
    "end": 244778,
    "text": "リアクト・ルーターについては、リアクトのフルコースでも扱っているし、YouTubeチャンネル用に作成した別のビデオでも扱っている。"
  },
  {
    "start": 244944,
    "end": 256654,
    "text": "もちろん、このコースを通して、リミックス・プロジェクトの作り方やリミックスが提供する機能を学ぶことができます。"
  },
  {
    "start": 256772,
    "end": 260320,
    "text": "リミックスを使うのであれば、こういったことは変わってくる。"
  },
  {
    "start": 260690,
    "end": 273918,
    "text": "リアクト・アプリケーションを構築し、リアクト・コンポーネントを持ち、リアクトのコードを書くことに変わりはないが、サーバーサイドのコードをコンポーネントを定義する同じファイルにブレンドする。"
  },
  {
    "start": 274094,
    "end": 278558,
    "text": "フロントエンドとバックエンドのコードが同じファイルに混在している場合。"
  },
  {
    "start": 278654,
    "end": 285878,
    "text": "ここでのコードは、あなたがreactルーターで見たものと似ているかもしれない。"
  },
  {
    "start": 285964,
    "end": 302330,
    "text": "したがって、もちろんフルスタックのリアクト・アプリケーションを構築するのはずっと簡単になる。"
  },
  {
    "start": 302410,
    "end": 314990,
    "text": "このフレームワークは、フロントエンドのコードだけがユーザーに提供されるようにコードを自動的に分割する。"
  },
  {
    "start": 315140,
    "end": 324546,
    "text": "一方、バックエンドのコードはサーバー上で実行され、その副作用としてウェブサイトのユーザーを過小評価してはならない。"
  },
  {
    "start": 324648,
    "end": 356634,
    "text": "検索エンジンのクローラーは、ページの最初のバージョンが読み込まれた後に実行されるクライアント側のコードによって、まだ反応によって入力されていない空のスケルトンだけを見るのではなく、そのウェブサイトを構成するすべてのデータを含む完全なウェブサイトを見るので、検索エンジン最適化にも大いに役立ちます。"
  },
  {
    "start": 356762,
    "end": 367326,
    "text": "なぜなら、リミックスはこれらのコンポーネントやページをすべてサーバー上でプリレンダリングし、完成したページをエンドユーザーに提供するからです。"
  },
  {
    "start": 367438,
    "end": 371010,
    "text": "それがリミックスであり、それを使う理由だ。"
  },
  {
    "start": 371160,
    "end": 378882,
    "text": "コードベースをマージすることで、フルスタックのリアクト・アプリケーションを構築するプロセスを簡素化し、多くの利点を与えてくれる。"
  },
  {
    "start": 379026,
    "end": 381682,
    "text": "リミックスには他にも素晴らしい機能がいくつかある。"
  },
  {
    "start": 381746,
    "end": 389670,
    "text": "正直なところ、リミックス・コードを書いたり、リミックス・アプリを作ったりするのはとても楽しい。"
  },
  {
    "start": 390490,
    "end": 395738,
    "text": "さて、前回の講義でリミックスとは何か、なぜ今リミックスを使いたいのかを学んだだろう。"
  },
  {
    "start": 395824,
    "end": 398570,
    "text": "そこで学んだことは、もしかしたらあなたにも身に覚えがあるかもしれない。"
  },
  {
    "start": 398640,
    "end": 408698,
    "text": "リアクトのフレームワークにはNext JSというものもあり、同じような問題を解決することを目的としている。"
  },
  {
    "start": 408794,
    "end": 412640,
    "text": "確かに、私は次のJSについてもフルコースを持っている。"
  },
  {
    "start": 412950,
    "end": 417406,
    "text": "Remixとnext jsにはいくつかの重要な違いがある。"
  },
  {
    "start": 417598,
    "end": 422862,
    "text": "例えば、リミックスでは常にすべてのページをサーバー上でレンダリングする。"
  },
  {
    "start": 422926,
    "end": 431170,
    "text": "ユーザーがあなたのページにつながるURLを入力するたびに、提供されるページがオンザフライでサーバー上にレンダリングされる。"
  },
  {
    "start": 431250,
    "end": 434982,
    "text": "ユーザは常に最新のデータと新しいページを得ることができる。"
  },
  {
    "start": 435116,
    "end": 441542,
    "text": "もちろん、必要であればキャッシュを設定することもできるが、一般的にはユーザーがサイトを訪れたときにレンダリングされる。"
  },
  {
    "start": 441676,
    "end": 447734,
    "text": "nextjsでは、リクエストごとにページコンポーネントを強制的にレンダリングするコードを書くことができます。"
  },
  {
    "start": 447862,
    "end": 455790,
    "text": "ほとんどの場合、ビルド時に静的にサイトが生成されるようなコードを書くからだ。"
  },
  {
    "start": 455860,
    "end": 460298,
    "text": "リミックスを使ったデプロイメントの直前では、これはサポートされていない。"
  },
  {
    "start": 460394,
    "end": 465550,
    "text": "次のJSでは、基本的に多くのページで標準またはデフォルトとなっている。"
  },
  {
    "start": 466370,
    "end": 474030,
    "text": "従って、リミックスをデプロイする場合、サーバーサイドでのコード実行をサポートするホスト、サーバーが必ず必要になる。"
  },
  {
    "start": 474190,
    "end": 482770,
    "text": "nextjsでは、必ずしもそうではありません。なぜなら、ビルド時にすべてのページをプリレンダリングすれば、静的ホストだけが必要だからです。"
  },
  {
    "start": 482850,
    "end": 492870,
    "text": "サーバー上で特定のページをその場でレンダリングするこのオプション機能を使用する場合、nextjsのサーバーサイドコード実行が可能なホストだけが必要です。"
  },
  {
    "start": 493030,
    "end": 495590,
    "text": "これらは技術的な違いにすぎない。"
  },
  {
    "start": 495670,
    "end": 515154,
    "text": "また、構文の違いもたくさんある。nextjsは本当に好きだし、本当に素晴らしいものだが、Remixにはさらに素晴らしいAPIがあり、remixアプリを作るのはnext JSアプリを作るよりもっと楽しいと思う。"
  },
  {
    "start": 515272,
    "end": 517220,
    "text": "このコースを受けてからわかることだ。"
  },
  {
    "start": 517990,
    "end": 528514,
    "text": "リミックスとは何か、なぜリミックスを使いたいのか、そしてこのコースの内容を理解したら、いよいよリミックスを始めよう。"
  },
  {
    "start": 528562,
    "end": 531106,
    "text": "それこそが、このセクションでやろうとしていることなのだ。"
  },
  {
    "start": 531138,
    "end": 541146,
    "text": "ここからは、リミックス・アプリを作るために知っておかなければならない、リミックスの中核となる基本的な機能について説明します。"
  },
  {
    "start": 541328,
    "end": 546346,
    "text": "そのためにはもちろん、まず新しいリミックス・アプリケーションを作成する。"
  },
  {
    "start": 546528,
    "end": 560286,
    "text": "そして作成されたファイルを調べ、ルーティングについて学び、リミックス・アプリで異なるルートを設定し、異なるURLパスをサポートする方法を学びます。"
  },
  {
    "start": 560468,
    "end": 581590,
    "text": "データ・ソースにデータを保存し、データ・ソースからデータを取得することは、基本的にあらゆるフルスタック・アプリケーションを定義するものだからだ。"
  },
  {
    "start": 581930,
    "end": 583846,
    "text": "私たちはそこで立ち止まるつもりはない。"
  },
  {
    "start": 583948,
    "end": 594838,
    "text": "このエッセンス・セクションでは、リミックス・アプリケーションのスタイルの作り方、見栄えの作り方、メタデータの扱い方についても学びます。"
  },
  {
    "start": 594934,
    "end": 604634,
    "text": "このセクションを読めば、リミックスアプリを作るために必要なこと、そしてその後の一般的な仕組みについて、しっかりと理解することができるでしょう。"
  },
  {
    "start": 604682,
    "end": 614590,
    "text": "この後の講座では、もちろんリミックスをさらに深く掘り下げ、これらの機能をさらに詳しく調べ、高度な機能にも踏み込んでいきます。"
  },
  {
    "start": 614670,
    "end": 617490,
    "text": "とりあえず、リミックスから始めよう。"
  },
  {
    "start": 618230,
    "end": 624882,
    "text": "さて、リミックス・アプリケーションを作り始めるには、新しいリミックス・プロジェクトを作らなければなりません。"
  },
  {
    "start": 625016,
    "end": 629714,
    "text": "そのためには、ターミナルのコマンドラインで実行するコマンドを使う。"
  },
  {
    "start": 629842,
    "end": 638120,
    "text": "どのオペレーティング・システムを使っていても、コマンドはいつも同じで、いつも同じ方法でリミックス・アプリケーションを構築することができる。"
  },
  {
    "start": 638590,
    "end": 644390,
    "text": "今から実行するこのコマンドには、node JSがインストールされている必要がある。"
  },
  {
    "start": 644550,
    "end": 652510,
    "text": "私たちが書くリミックス・コードにはnode JSの機能も含まれているからです。"
  },
  {
    "start": 653010,
    "end": 660218,
    "text": "そのため、nodejs.orgにアクセスして、最新のnode JSバージョンをダウンロードする必要がある。"
  },
  {
    "start": 660314,
    "end": 666610,
    "text": "私の場合はバージョン19だが、これを見るときに表示されている最新バージョンをダウンロードすればいい。"
  },
  {
    "start": 666680,
    "end": 668978,
    "text": "それが後のバージョンなら、まったく問題ない。"
  },
  {
    "start": 669064,
    "end": 671780,
    "text": "このコースで学ぶことはそのまま適用できる。"
  },
  {
    "start": 672390,
    "end": 680518,
    "text": "ターミナルかコマンド・プロンプトに戻ってnode JSをインストールしたら、新しいリミックス・プロジェクトを作成するコマンドを実行する準備ができました。"
  },
  {
    "start": 680684,
    "end": 695562,
    "text": "このコマンドはNPXで、node jsがRemixを作成する際に利用できるコマンドである。"
  },
  {
    "start": 695696,
    "end": 698810,
    "text": "それ以降は最新のものを加えるべきだ。"
  },
  {
    "start": 699710,
    "end": 706478,
    "text": "リミックスプロジェクトを作成したいフォルダでこのコマンドを実行していることを確認してください。"
  },
  {
    "start": 706644,
    "end": 720834,
    "text": "そのコマンドを実行する前に、コマンドプロンプトのターミナルでそのようなフォルダに移動し、Enterを押すだけで、起動するまでしばらく時間がかかり、その後いくつかの質問をされます。"
  },
  {
    "start": 721032,
    "end": 728818,
    "text": "例えば、これから作成するリミックスプロジェクトを保存するプロジェクトフォルダーの名前を定義する必要があります。"
  },
  {
    "start": 728914,
    "end": 731206,
    "text": "ここではリミックスコースと名付けよう。"
  },
  {
    "start": 731308,
    "end": 738250,
    "text": "これでRemix courseという新しいフォルダが今いる場所に作成される。"
  },
  {
    "start": 738750,
    "end": 750940,
    "text": "Enterを押した後、基本的なプロジェクトにするか、あるいはすでに多くの機能が追加された設定済みのスタックにするかを選択できる。"
  },
  {
    "start": 751310,
    "end": 756606,
    "text": "それから、このアプリをどこにデプロイするかを選ばなければならないが、これは後でいつでも変更できる。"
  },
  {
    "start": 756708,
    "end": 764450,
    "text": "この質問については、コースの後半でリミックス・アプリケーションのデプロイメントについて話すときにまた触れることにしよう。"
  },
  {
    "start": 764520,
    "end": 768260,
    "text": "このコースでは、リミックス・アプリ・サーバーにこだわるべきだ。"
  },
  {
    "start": 769990,
    "end": 773790,
    "text": "その後、タイプスクリプトを使うか、JavaScriptを使うかを選ぶことができる。"
  },
  {
    "start": 773870,
    "end": 787938,
    "text": "Remixがtypescriptで素晴らしいものであっても、ここではJavaScriptにこだわります。もちろん、このコースを見ているすべての生徒がtypescriptを知っているわけではありませんし、JavaScriptを使おうがtypescriptを使おうが、書く一般的なコードはいつも同じだからです。"
  },
  {
    "start": 788034,
    "end": 792090,
    "text": "JavaScriptで欠けているのは型アノテーションだけだ。"
  },
  {
    "start": 792750,
    "end": 804682,
    "text": "ここでJavascriptを実行し、その後NPMインストールが実行されるようにyesを選択すると、このプロジェクトが作成され、必要な依存関係がすべて自動的にインストールされる。"
  },
  {
    "start": 804826,
    "end": 807280,
    "text": "では、ここで終わるのを待とう。"
  },
  {
    "start": 808690,
    "end": 815750,
    "text": "インストールが完了し、プロジェクトが作成されたら、好きなコードエディターで開くことができます。"
  },
  {
    "start": 815850,
    "end": 820786,
    "text": "私の場合はビジュアル・スタジオのコードだが、好きなコードエディターを使えばいい。"
  },
  {
    "start": 820968,
    "end": 829720,
    "text": "プロジェクトが作成されたら、今度は作成されたファイルやフォルダを詳しく見て、ここで得たものを理解しよう。"
  },
  {
    "start": 830490,
    "end": 834120,
    "text": "この新しいリミックス・プロジェクトには何がある？"
  },
  {
    "start": 834730,
    "end": 849574,
    "text": "ルートレベルにはたくさんのコンフィギュレーションファイルがあります。リミックスコンフィギュレーションファイルではリミックスの様々な設定を行うことができます。"
  },
  {
    "start": 849702,
    "end": 852122,
    "text": "今はデフォルトの設定で問題ない。"
  },
  {
    "start": 852256,
    "end": 859694,
    "text": "そして、現在このプロジェクトにインストールされているすべての依存関係のリストを含むパッケージJSONファイルを取得する。"
  },
  {
    "start": 859732,
    "end": 870034,
    "text": "見ての通り、基本的にはremixの依存関係の束であり、もちろんreactのアプリも作っている。"
  },
  {
    "start": 870152,
    "end": 889818,
    "text": "例えば、このプロジェクトを本番用にビルドしたり、本番用サーバーを起動したり、あるいはこのコースの大部分では非常に重要なことだが、この開発用スクリプトを実行することで、開発用サーバーを起動し、アプリをビルドしながらプレビューすることができる。"
  },
  {
    "start": 889984,
    "end": 899946,
    "text": "そして、JS設定ファイルとEslint設定ファイルを取得し、使用しているコードエディターとこのプロジェクトがどのようにビルドされているのかのサーバー設定を行いました。"
  },
  {
    "start": 900048,
    "end": 903022,
    "text": "デフォルトの設定で問題ない。"
  },
  {
    "start": 903156,
    "end": 906638,
    "text": "というわけで、今、私たちにとって興味深いのはこれらのフォルダなのである。"
  },
  {
    "start": 906804,
    "end": 913658,
    "text": "ノード・モジュールには、いつものようにこのプロジェクトのすべての依存関係が含まれている。"
  },
  {
    "start": 913754,
    "end": 918498,
    "text": "このフォルダを削除し、NPM installを実行することでいつでも戻すこともできる。"
  },
  {
    "start": 918584,
    "end": 925880,
    "text": "もちろん、これはパッケージJSONにリストされているすべての依存関係をインストールし、ノード・モジュールを再作成する。"
  },
  {
    "start": 926330,
    "end": 930840,
    "text": "publicフォルダとappフォルダは、我々にとって興味深いフォルダだ。"
  },
  {
    "start": 931290,
    "end": 931654,
    "text": "今すぐだ。"
  },
  {
    "start": 931692,
    "end": 936402,
    "text": "publicフォルダには、アプリケーションが必要とする可能性のある静的アセットが含まれているだけだ。"
  },
  {
    "start": 936466,
    "end": 955690,
    "text": "例えば、アプリケーションで提供したい画像は、このpublicフォルダに入れることもできるが、最も興味深いのはappフォルダだ。なぜなら、このフォルダで大半の時間を費やすことになるからだ。このフォルダでは、使用したいリアクト・コンポーネントやルートを定義するからだ。"
  },
  {
    "start": 955770,
    "end": 971502,
    "text": "ユーザーがmydomain.com nothingやmydomain.com newsなどにアクセスできるように、このフルスタックアプリケーションでサポートしたいページを、このroutesサブフォルダーで定義します。"
  },
  {
    "start": 971566,
    "end": 975330,
    "text": "それはもちろん、このセクションの後半で触れることになる。"
  },
  {
    "start": 975690,
    "end": 980722,
    "text": "さて、ここにあるファイルについてだが、ルートのJSxファイルは非常に重要なファイルである。"
  },
  {
    "start": 980866,
    "end": 987474,
    "text": "これは基本的に、どのルートでも常にレンダリングされるルート・コンポーネントだ。"
  },
  {
    "start": 987522,
    "end": 990466,
    "text": "その後、どの特定のページがロードされるか。"
  },
  {
    "start": 990578,
    "end": 1003440,
    "text": "このファイルに含まれるコンポーネントのいくつかについてはまた後で説明しますが、基本的にはこれがスケルトンで、このアプリケーションを構成するさまざまなページに定義するページ・コンテンツを包むラッパーです。"
  },
  {
    "start": 1003890,
    "end": 1008574,
    "text": "コース後半で学ぶように、ここで一般的なメタデータを設定することもできる。"
  },
  {
    "start": 1008612,
    "end": 1019986,
    "text": "このメタデータはページごとにカスタマイズすることもできるが、基本的には、アプリケーション全体、つまりフルスタック・ウェブサイト全体を構成するどのページにも使われる骨組みだ。"
  },
  {
    "start": 1020088,
    "end": 1030066,
    "text": "ここでは、サーバーに到達するリクエストごとに実行されるコードを定義する2つのエントリーファイルを用意した。"
  },
  {
    "start": 1030258,
    "end": 1035346,
    "text": "このコードを編集して、入ってくるリクエストのたびに特別なコードを実行することもできる。"
  },
  {
    "start": 1035458,
    "end": 1049702,
    "text": "クライアントJSXファイルには、基本的にクライアントで実行されるJavaScriptのコードが含まれています。"
  },
  {
    "start": 1049766,
    "end": 1059280,
    "text": "ブラウザでページがロードされた後、こことここにあるように、基本的にはここにあるデフォルトのままにしておくべきである。"
  },
  {
    "start": 1059970,
    "end": 1063118,
    "text": "これらのファイルは今、我々にとってあまり興味深いものではない。"
  },
  {
    "start": 1063204,
    "end": 1068930,
    "text": "ルートJSXについては後ほど触れるが、とりあえずこれらのルートを詳しく見てみよう。"
  },
  {
    "start": 1069510,
    "end": 1073070,
    "text": "このアプリのフォルダにルートフォルダがあるのはどういうことですか？"
  },
  {
    "start": 1073230,
    "end": 1077890,
    "text": "前述したように、我々は基本的に異なるルートを定義している。"
  },
  {
    "start": 1077970,
    "end": 1095420,
    "text": "Webアプリケーション全体の一部として、あるいはWebサイト全体の一部としてサポートしたいさまざまなページがある。"
  },
  {
    "start": 1096110,
    "end": 1101674,
    "text": "今はダミーのコンテンツが入っていて、正確なコンテンツは時間の経過とともに変わるかもしれない。"
  },
  {
    "start": 1101792,
    "end": 1115220,
    "text": "新しいリミックス・プロジェクトを作るとき、このコンテンツは違うものになるかもしれないが、それはあまり重要なことではない。"
  },
  {
    "start": 1116070,
    "end": 1121298,
    "text": "ここで注意してほしいのは、これは通常のリアクト・コンポーネントの機能だということだ。"
  },
  {
    "start": 1121464,
    "end": 1127110,
    "text": "これは、リアクト・コンポーネントの関数の定義であるJSXコードを返す関数だ。"
  },
  {
    "start": 1127180,
    "end": 1132166,
    "text": "基本的にはデフォルトとしてエクスポートされ、それが重要な部分だ。"
  },
  {
    "start": 1132268,
    "end": 1141846,
    "text": "これはroutesフォルダ内のファイルに保存され、あなたがこのroutesフォルダに入れたファイルは、リミックスによって別々のルートとして扱われます。"
  },
  {
    "start": 1142038,
    "end": 1147482,
    "text": "通常のreactアプリでそのパッケージを使用する場合は、react routerを使用します。"
  },
  {
    "start": 1147536,
    "end": 1151930,
    "text": "リミックス以外のアプリでは、ルートを定義する必要がある。"
  },
  {
    "start": 1152010,
    "end": 1162374,
    "text": "例えば、create browser routerでは、ルートを定義する代わりに、appフォルダ内のroutesフォルダにルートごとに別々のファイルを作成する。"
  },
  {
    "start": 1162522,
    "end": 1168100,
    "text": "インデックスとは、このウェブサイト全体の開始ページを定義する特別なファイル名である。"
  },
  {
    "start": 1168710,
    "end": 1179782,
    "text": "ここに2つ目のファイル、例えばdemo JSXを追加して、そこにdemo pageという別のデフォルト関数をエクスポートすることができる。"
  },
  {
    "start": 1179836,
    "end": 1187222,
    "text": "例えば、このコンポーネント・ファンクションの名前は、あるデモ・ページのどこで返すかは関係ない。"
  },
  {
    "start": 1187356,
    "end": 1191434,
    "text": "ここで、デモ・ページというテキストを含むタイトルも出力する。"
  },
  {
    "start": 1191632,
    "end": 1199980,
    "text": "そうすることで、このスタートページ以外に、このウェブサイト全体で基本的に2つ目のルート、2つ目のページを作ることになる。"
  },
  {
    "start": 1200670,
    "end": 1204606,
    "text": "さて、これを実際に見るために、もう一度ターミナルを開いてみよう。"
  },
  {
    "start": 1204708,
    "end": 1210286,
    "text": "ここではビジュアル・スタジオ・コードに統合されたものを使っているが、デフォルトのターミナルであることに変わりはない。"
  },
  {
    "start": 1210468,
    "end": 1218740,
    "text": "NPmを実行し、devを実行し、そしてこのdevスクリプトの助けを借りてこのdevサーバーを実行する。"
  },
  {
    "start": 1219830,
    "end": 1225634,
    "text": "この開発用サーバーを実行すると、ここに表示されているURLで起動する。"
  },
  {
    "start": 1225832,
    "end": 1234150,
    "text": "このURLにアクセスすると、あなたのウェブサイトが表示され、もちろんこのウェブサイトのスタートページにたどり着く。"
  },
  {
    "start": 1234300,
    "end": 1238380,
    "text": "というわけで、ここで少し拡大してみると、ハローワールドが見える。"
  },
  {
    "start": 1238910,
    "end": 1243930,
    "text": "というのも、もちろんこれがこのスタートページのルートだからだ。"
  },
  {
    "start": 1244910,
    "end": 1252320,
    "text": "しかし、このURLを編集し、デモを追加すると、このデモページにたどり着く。"
  },
  {
    "start": 1253250,
    "end": 1256320,
    "text": "ここでデモに参加したから、あそこにたどり着いたんだ。"
  },
  {
    "start": 1256690,
    "end": 1257246,
    "text": "デモ。"
  },
  {
    "start": 1257348,
    "end": 1261006,
    "text": "demoは私のドメインに追加したパスです。"
  },
  {
    "start": 1261188,
    "end": 1266850,
    "text": "このファイルにはdemo jsxという名前をつけたので、このコンポーネントはここにロードされる。"
  },
  {
    "start": 1267000,
    "end": 1278898,
    "text": "ここでabcのような他の名前を入力すると、正確には404エラーが表示される。なぜなら、routesフォルダにabcという名前のファイルが定義されていないからだ。"
  },
  {
    "start": 1279074,
    "end": 1280774,
    "text": "これらのファイル名は重要である。"
  },
  {
    "start": 1280892,
    "end": 1287880,
    "text": "これは、特定のルートがどのパスでロードされるかを定義し、開始ページを表す特別なファイル名をインデックス化する。"
  },
  {
    "start": 1288190,
    "end": 1292330,
    "text": "リミックスのルーティングは一般的にそうなっている。"
  },
  {
    "start": 1293310,
    "end": 1300346,
    "text": "ルーティングやルートの定義に関しては、リミックスにはここで見た以上のものがある。"
  },
  {
    "start": 1300448,
    "end": 1309146,
    "text": "ドメインの後に追加できるパスを表すファイルを追加するだけではなく、これは最も重要な機能のひとつだ。"
  },
  {
    "start": 1309338,
    "end": 1325042,
    "text": "手始めに、ブラウザのURLアドレスバーに手動で別のURLを入力するだけでなく、クリックできるリンクを提供することで、これらのルートを切り替えられるようにしたい。"
  },
  {
    "start": 1325176,
    "end": 1328342,
    "text": "このスタートページで始めるよ。"
  },
  {
    "start": 1328396,
    "end": 1339210,
    "text": "これはreactが提供するデフォルトのリアクト・コンポーネントで、リミックスとは何の関係もない。"
  },
  {
    "start": 1339870,
    "end": 1352378,
    "text": "そしてその下にアンカー要素を追加してリンクを追加し、キャプションとしてデモ・ページに移動することを記述し、スラッシュ・デモを指すref属性を追加する。"
  },
  {
    "start": 1352464,
    "end": 1354000,
    "text": "そうやってリンクを追加することができる。"
  },
  {
    "start": 1355730,
    "end": 1361854,
    "text": "そうすれば、もちろん保存してスタートページに戻ることができ、ここにリンクが表示される。"
  },
  {
    "start": 1362052,
    "end": 1363438,
    "text": "リンクをクリックすると"
  },
  {
    "start": 1363524,
    "end": 1364446,
    "text": "それもまた効果的だ。"
  },
  {
    "start": 1364548,
    "end": 1368914,
    "text": "このデモ・ページにアクセスするのだが、ちょっとした問題がある。"
  },
  {
    "start": 1369112,
    "end": 1375514,
    "text": "このリフレッシュアイコンを見ていれば、私がこのリンクをクリックすると、このアイコンを見ていることがわかるだろう。"
  },
  {
    "start": 1375662,
    "end": 1384870,
    "text": "これは新しいリクエストが送信され、実際に新しいファイルをダウンロードしたことを示す。"
  },
  {
    "start": 1385850,
    "end": 1395770,
    "text": "この動作は、開発者ツールを開き、ネットワークタブを開いて確認することもできる。"
  },
  {
    "start": 1395920,
    "end": 1400698,
    "text": "デモページに行くをクリックすると、たくさんのリクエストが送信されたことがわかる。"
  },
  {
    "start": 1400784,
    "end": 1407310,
    "text": "最も重要なのは、レスポンスとして受け取ったデモ・ページのHTMLファイルへのリクエストである。"
  },
  {
    "start": 1407650,
    "end": 1410110,
    "text": "さて、これにはいくつかの重要な意味がある。"
  },
  {
    "start": 1410530,
    "end": 1418098,
    "text": "このレスポンスを見てみると、確かにこのデモ・ページの内容を含むまったく新しいHTMLファイルであることがわかる。"
  },
  {
    "start": 1418264,
    "end": 1426610,
    "text": "これは、例えば検索エンジン最適化にはもってこいだ。というのも、これは本当に完成した新しいHTMLファイルをダウンロードしたことを意味するからだ。"
  },
  {
    "start": 1427510,
    "end": 1432066,
    "text": "この欠点は、新しいリクエストを送ったことだ。"
  },
  {
    "start": 1432258,
    "end": 1440134,
    "text": "クライアント側のJavaScriptだけで別のページにナビゲートできれば、すでにこのページにいる場合にも便利だ。"
  },
  {
    "start": 1440332,
    "end": 1446042,
    "text": "URLを手動で入力する場合、完成したHTMLコードをダウンロードできればいいのだが。"
  },
  {
    "start": 1446176,
    "end": 1468546,
    "text": "私たちがすでにウェブサイトにいて、別のページにいて、リンクをクリックした場合、クライアント側のJavaScriptコードを使って次のページがロードされ、必要なデータがあれば、おそらく裏で取得され、そうでなければアプリケーションを構成するJavaScriptコードをすべてダウンロードする手間が省けるので、新たなリクエストは送信されないとしたら素晴らしいことだ。"
  },
  {
    "start": 1468648,
    "end": 1504190,
    "text": "繰り返しになりますが、remixを使えば、サーバー上でその場でページをプリレンダリングしていても、もちろんクライアントサイドのJavaScriptコードは残ります。しかし、reactアプリケーションを構築する場合、もちろんクライアントサイドのJavaScriptコードも残ります。たとえば、ユーザーの入力を処理したり、ボタンのクリックに反応したり、やりたいことは何でもできます。リンクをクリックしたときに、このページから離れず、すべてを更新していることを確認するために、デフォルトのアンカー要素を使うべきではありません。"
  },
  {
    "start": 1504770,
    "end": 1513630,
    "text": "このコンポーネントはAtremix Reactからインポートされたもので、リンク・コンポーネントである。"
  },
  {
    "start": 1515170,
    "end": 1524622,
    "text": "ところで、このリンク・コンポーネントはreact routerでおなじみのコンポーネントで、remixを開発したのと同じチームが開発したパッケージだ。"
  },
  {
    "start": 1524766,
    "end": 1530390,
    "text": "ここではreact routerからではなく、remix run reactからインポートしている。"
  },
  {
    "start": 1531370,
    "end": 1553210,
    "text": "ここで、アンカー要素の代わりにこのリンクを使い、ref属性を2つのpropに置き換えてみると、すべてを保存して開始ページに戻っても、ここにリンクがあることがわかる。"
  },
  {
    "start": 1554030,
    "end": 1563040,
    "text": "開発者ツールを開くと、このリンクをクリックすると、favアイコンのリクエストが1つだけあり、他のリクエストは送信されていないことがわかります。"
  },
  {
    "start": 1563410,
    "end": 1568900,
    "text": "今、私たちはすべてを再ダウンロードするのではなく、すでにいたページにとどまる。"
  },
  {
    "start": 1569270,
    "end": 1571406,
    "text": "私たちは両方の世界のベストを得ることができる。"
  },
  {
    "start": 1571518,
    "end": 1580440,
    "text": "URLを入力したり、他のウェブサイトのリンクをクリックしたりした新規訪問者は、当ウェブサイトに到達すると、完成したHTMLファイルをダウンロードします。"
  },
  {
    "start": 1580810,
    "end": 1592220,
    "text": "すでにウェブサイトを訪れているユーザーは、そのサイトにとどまり、基本的には、最初にウェブサイトを訪れたときにこの最初のリクエストを送信した後、再び1ページのアプリケーションを取得する。"
  },
  {
    "start": 1593230,
    "end": 1596314,
    "text": "この2つのルートをここに追加した。"
  },
  {
    "start": 1596432,
    "end": 1605120,
    "text": "もちろん、それらはあまりエキサイティングなものではないので、今はもっとエキサイティングなプロジェクトに切り替えたい。"
  },
  {
    "start": 1605490,
    "end": 1608190,
    "text": "これが完成予想図だ。"
  },
  {
    "start": 1608260,
    "end": 1619954,
    "text": "メモを取ったり、メモを見たり、ノードの詳細にナビゲートしたり、最終結果には直接表示されない機能もたくさん追加する。"
  },
  {
    "start": 1620152,
    "end": 1633318,
    "text": "プロジェクトに戻るには、まずこのデモJSXファイルを削除して、ここにあるスタートページのインデックス・ファイルの内容も変更します。"
  },
  {
    "start": 1633484,
    "end": 1640218,
    "text": "そのために、新しいインデックスJSXファイルが添付されている。"
  },
  {
    "start": 1640304,
    "end": 1645242,
    "text": "indexのjSXファイルを置き換えると、このようなファイル内容になるはずです。"
  },
  {
    "start": 1645376,
    "end": 1651870,
    "text": "ご覧のように、reactでサポートされている標準的なHTML要素がいくつかある。"
  },
  {
    "start": 1652210,
    "end": 1656458,
    "text": "いくつかの要素のIDを取得したが、これは後でスタイリングする際に重要になる。"
  },
  {
    "start": 1656554,
    "end": 1666334,
    "text": "今のところ、それは何の役にも立たないし、スラッシュノートにつながるリンクが表示される。"
  },
  {
    "start": 1666462,
    "end": 1678946,
    "text": "ノートのjsxファイルはないが、新しいノードを追加したり、ノードのリストを見たりするページになるので、作っておきたい。"
  },
  {
    "start": 1679138,
    "end": 1689982,
    "text": "したがって、次のステップとして、routesフォルダにnodes jsxファイルを追加して、誰かがnodesを訪問するたびに到達する新しいルートを登録する必要があります。"
  },
  {
    "start": 1690066,
    "end": 1693702,
    "text": "この場合、localhost 3000ノード。"
  },
  {
    "start": 1693766,
    "end": 1699820,
    "text": "もちろん、localhost 3000は後であなたのウェブサイトに選んだドメインになります。"
  },
  {
    "start": 1700770,
    "end": 1703086,
    "text": "これが次に追加するファイルだ。"
  },
  {
    "start": 1703268,
    "end": 1711514,
    "text": "さて、このノートjsxファイルに、このファイルのデフォルトとして新しい関数をエクスポートしよう。"
  },
  {
    "start": 1711642,
    "end": 1714386,
    "text": "この機能にはノート・ページという名前を付けることができる。"
  },
  {
    "start": 1714568,
    "end": 1720206,
    "text": "繰り返しますが、エラーメッセージやデバッグメッセージには表示されますが、関数名はあまり重要ではありません。"
  },
  {
    "start": 1720238,
    "end": 1722340,
    "text": "うまくいかなかったら、わかるかもしれない。"
  },
  {
    "start": 1723110,
    "end": 1731254,
    "text": "さて、このノートページコンポーネント関数では、いくつかのjsxコードを返したい。"
  },
  {
    "start": 1731292,
    "end": 1761150,
    "text": "手始めに、デフォルトのmainエレメントを戻して、その中に1つのエレメントを入れ、そこに単に私のメモを書く。"
  },
  {
    "start": 1761300,
    "end": 1763694,
    "text": "かなりズームインしていることに留意してほしい。"
  },
  {
    "start": 1763732,
    "end": 1766346,
    "text": "だから、ここが僕にとってすごく大きいんだ。"
  },
  {
    "start": 1766468,
    "end": 1770130,
    "text": "その後、このリンクからノートのページに飛ぶことができた。"
  },
  {
    "start": 1770280,
    "end": 1773506,
    "text": "もちろん、今は超不細工だけど、何とかなるさ。"
  },
  {
    "start": 1773608,
    "end": 1775780,
    "text": "これは重要な第一歩だ。"
  },
  {
    "start": 1776550,
    "end": 1782322,
    "text": "しかし、これはかなり醜いので、次のステップとして、これらのページにスタイリングを追加したい。"
  },
  {
    "start": 1782466,
    "end": 1786162,
    "text": "リミックスアプリでスタイリングを追加するには？"
  },
  {
    "start": 1786306,
    "end": 1788202,
    "text": "まあ、いろいろな選択肢がある。"
  },
  {
    "start": 1788336,
    "end": 1805022,
    "text": "例えば、Tailwindのような人気のあるCSSライブラリを使うことができます。実際に、tailwindをremixで使うためのガイドが、公式のremixドキュメンテーションの記事にあり、このビデオにもリンクが貼られています。"
  },
  {
    "start": 1805156,
    "end": 1813520,
    "text": "また、様々なスタイリング・オプションについても詳しく学ぶことができるが、もちろん、これから数分間、最も重要なスタイリング・オプションについても一緒に見ていく。"
  },
  {
    "start": 1814130,
    "end": 1818242,
    "text": "このコースではバニラCSSにこだわるよ。"
  },
  {
    "start": 1818296,
    "end": 1822882,
    "text": "ご心配なく、CSSコードを書く必要はありません。"
  },
  {
    "start": 1823016,
    "end": 1831122,
    "text": "リミックスとは関係のない、独立したCSSライブラリに余計な依存を持たないようにするためだ。"
  },
  {
    "start": 1831266,
    "end": 1841610,
    "text": "さて、この講義に添付されているメインCSSファイルには、このページに適用したいスタイリングが含まれている。"
  },
  {
    "start": 1841950,
    "end": 1853198,
    "text": "ルートと違ってstylesは予約名ではない。"
  },
  {
    "start": 1853364,
    "end": 1859690,
    "text": "routesフォルダはroutesという名前でなければなりません。なぜならremixはroutesフォルダの中にあるルートファイルを探すからです。"
  },
  {
    "start": 1859850,
    "end": 1867154,
    "text": "stylesフォルダはstylesという名前にする必要はない。なぜなら、そこに追加したスタイルファイルを手動で指定するからだ。"
  },
  {
    "start": 1867272,
    "end": 1875380,
    "text": "したがって、この講義に添付されているメインのCSSファイルを、このstylesフォルダに入れることができます。"
  },
  {
    "start": 1876150,
    "end": 1890060,
    "text": "メインのCSSファイルでは、CSS変数、基本的に使用する色、そしてフォント、背景色、メインとナビゲーションのスタイルなどを設定している。"
  },
  {
    "start": 1890590,
    "end": 1894278,
    "text": "このセクションでは、いくつかのスタイルを紹介する。"
  },
  {
    "start": 1894454,
    "end": 1899260,
    "text": "このファイルを追加してリロードしても、何も変わらない。"
  },
  {
    "start": 1899950,
    "end": 1905722,
    "text": "今言ったように、リミックスは自動的にそのようなスタイルフォルダを探さないからだ。"
  },
  {
    "start": 1905786,
    "end": 1907594,
    "text": "スタイルフォルダは想定していない。"
  },
  {
    "start": 1907642,
    "end": 1908990,
    "text": "この名前はあなた次第だ。"
  },
  {
    "start": 1909140,
    "end": 1914402,
    "text": "もしあなたのページに適用すべきスタイルがあれば、リミックスにそれを伝えなければなりません。"
  },
  {
    "start": 1914536,
    "end": 1920690,
    "text": "ルートファイルに特別な関数を追加することで、適用したいスタイルをremixに伝えることができます。"
  },
  {
    "start": 1921190,
    "end": 1926206,
    "text": "ここで、メインCSSには、すべてのページに影響するスタイルが含まれている。"
  },
  {
    "start": 1926318,
    "end": 1943590,
    "text": "ルートJsXは、基本的にすべてのページコンポーネントを包むメインスケルトンを定義します。"
  },
  {
    "start": 1943750,
    "end": 1953006,
    "text": "正確には、ノード・ページが返すこのマークアップのようなページ・コンポーネントは、このアウトレットの場所に注入される。"
  },
  {
    "start": 1953108,
    "end": 1962410,
    "text": "このルート・スケルトンにあるアウトレット・マーカーは、ページ・コンポーネントによって返される実際のコンテンツに置き換えられます。"
  },
  {
    "start": 1962490,
    "end": 1963940,
    "text": "そういうことだ。"
  },
  {
    "start": 1964790,
    "end": 1970446,
    "text": "これはルート・ページで、他のすべてのページ・コンポーネントを包むルート・コンポーネントだ。"
  },
  {
    "start": 1970558,
    "end": 1980706,
    "text": "したがって、このルートjsxファイルでは、特別な関数をエクスポートすることができ、特別な関数をエクスポートしなければならない。"
  },
  {
    "start": 1980898,
    "end": 1982614,
    "text": "今のは予約名だ。"
  },
  {
    "start": 1982732,
    "end": 1987154,
    "text": "Remixはエクスポートされたlinksという関数を探します。"
  },
  {
    "start": 1987282,
    "end": 1991766,
    "text": "すべてのルートファイルとルートファイルからそのような関数を探します。"
  },
  {
    "start": 1991798,
    "end": 1995046,
    "text": "ルートのjsxファイルはルートファイルとしてカウントされます。"
  },
  {
    "start": 1995158,
    "end": 1999578,
    "text": "これは、他のすべてのルートを包む、いわばルート・ルートだ。"
  },
  {
    "start": 1999744,
    "end": 2002474,
    "text": "これでリンク機能をエクスポートする必要はなくなった。"
  },
  {
    "start": 2002592,
    "end": 2005502,
    "text": "リミックスは、以前見ていただいたように、それがなくてもうまくいく。"
  },
  {
    "start": 2005636,
    "end": 2014050,
    "text": "HTML文書のheadセクションに追加すべきリンクを追加したい場合は、この関数が必要です。"
  },
  {
    "start": 2014710,
    "end": 2024370,
    "text": "というのも、このスケルトンは、実際のページ・コンテンツが注入されるマーカーを定義しているだけでなく、他のコンポーネントも定義していることにお気づきかもしれないからだ。"
  },
  {
    "start": 2024970,
    "end": 2041340,
    "text": "これらは、開発中にライブ・リロードを取得したり、ユーザーがページ間を移動したときにスクロール・バーの位置を復元したり、クライアント側でページがダウンロードされたときにクライアント側スクリプトを注入したりするためのユーティリティ・コンポーネントです。"
  },
  {
    "start": 2042110,
    "end": 2051154,
    "text": "headセクションには、リミックスがページに適用するメタデータやリンクを注入するために使用するコンポーネントもある。"
  },
  {
    "start": 2051302,
    "end": 2054830,
    "text": "リンクとは、このようなリンク要素のことだ。"
  },
  {
    "start": 2054980,
    "end": 2059978,
    "text": "これが、通常のHTML文書でスタイル・シートを指定する方法だ。"
  },
  {
    "start": 2060154,
    "end": 2064900,
    "text": "ここにリンクを追加する代わりに、リンク機能を使ってリンクを追加する。"
  },
  {
    "start": 2065510,
    "end": 2074930,
    "text": "この関数を追加すると配列が返され、その配列の中にさまざまなオブジェクトがあり、どのオブジェクトも1つのリンクを定義している。"
  },
  {
    "start": 2075000,
    "end": 2088040,
    "text": "リミックスがページをレンダリングするときに、このリンクの場所に注入されます。このリンク要素に追加するすべての属性を、このオブジェクトのプロパティとして追加します。"
  },
  {
    "start": 2088350,
    "end": 2102480,
    "text": "ここでrelプロパティを追加し、style sheetに設定します。rel属性の値をstyle sheetに設定することで、link要素にstyle sheetを追加することができます。"
  },
  {
    "start": 2103890,
    "end": 2109786,
    "text": "そして、refという別のプロパティを追加し、読み込むべきスタイル・シートを指定する。"
  },
  {
    "start": 2109978,
    "end": 2111914,
    "text": "さて、ここで特別なひねりがある。"
  },
  {
    "start": 2112042,
    "end": 2116946,
    "text": "実際には、このようにスタイル・シートをJavaScriptファイルにインポートする。"
  },
  {
    "start": 2117048,
    "end": 2121154,
    "text": "インポートしたいファイルに新しいimport文を追加する。"
  },
  {
    "start": 2121272,
    "end": 2127906,
    "text": "スタイルなど好きな名前をつけて、インポートするファイルを指定する。"
  },
  {
    "start": 2128098,
    "end": 2136630,
    "text": "ここでは、正確にはスタイルstylesを指して相対パスを作成し、メインのCSSを作成することができる。"
  },
  {
    "start": 2137690,
    "end": 2140758,
    "text": "ちなみに、ここでチルダ記号を使うこともできる。"
  },
  {
    "start": 2140844,
    "end": 2146982,
    "text": "これは特別なエイリアスで、import文の中で使うことができ、常にappフォルダを参照する。"
  },
  {
    "start": 2147046,
    "end": 2152330,
    "text": "これは、存在するフォルダであるappフォルダ内のstylesフォルダを探しています。"
  },
  {
    "start": 2153010,
    "end": 2158862,
    "text": "これでスタイルがインポートされ、このスタイルがrefの値として使われる。"
  },
  {
    "start": 2158996,
    "end": 2167410,
    "text": "これにより、ブラウザが読み込むことのできるこのスタイル・ファイルへのリンクが動的に作成され、これがリンクを登録する方法です。"
  },
  {
    "start": 2167910,
    "end": 2183170,
    "text": "これは、単純にここにリンクを追加するのと比べると、かなり面倒に見えるかもしれませんが、先に述べたように、すべてのページ・コンポーネントがリンクを登録でき、ページ固有のリンクを定義できるからです。"
  },
  {
    "start": 2183330,
    "end": 2189114,
    "text": "すべてのページに適用されるように、ルートページに1つ追加しています。"
  },
  {
    "start": 2189232,
    "end": 2193590,
    "text": "インデックスJSXやノードJSXでリンクをエクスポートすることもできます。"
  },
  {
    "start": 2193750,
    "end": 2195786,
    "text": "そうだね。"
  },
  {
    "start": 2195968,
    "end": 2202458,
    "text": "添付のhome CSSにもある別のCSSファイルをstylesフォルダに追加する。"
  },
  {
    "start": 2202634,
    "end": 2209098,
    "text": "このファイルには、インデックスJSXファイルの内容にのみ適用されるスタイルがいくつか含まれています。"
  },
  {
    "start": 2209274,
    "end": 2215230,
    "text": "IDSのコンテンツとCTAは、ホームCSSでスタイリングするためにここで見つけることができます。"
  },
  {
    "start": 2216530,
    "end": 2223940,
    "text": "さて、routesフォルダにあるこのインデックスJSxファイルに、このリンク関数をエクスポートすることもできます。"
  },
  {
    "start": 2224710,
    "end": 2244650,
    "text": "また、relというプロパティとrefというプロパティを持つオブジェクトの配列を返し、Tilde styleshome CSSからhomestylesをインポートします。"
  },
  {
    "start": 2245950,
    "end": 2249740,
    "text": "それなら、ここに登録されているのは私のホームスタイルだ。"
  },
  {
    "start": 2251150,
    "end": 2254494,
    "text": "ここで、このページにのみ適用されるリンクをいくつか定義する。"
  },
  {
    "start": 2254612,
    "end": 2261630,
    "text": "このページがロードされると、remixは自動的にリンクタグを作成し、headセクションに挿入します。"
  },
  {
    "start": 2262370,
    "end": 2273778,
    "text": "ページ固有のリンクを定義することで、ユーザーが不必要にCSSファイルをダウンロードしないようにすることができます。"
  },
  {
    "start": 2273864,
    "end": 2278838,
    "text": "ユーザーがノートページにいる場合、開始ページのスタイルは必要ありません。"
  },
  {
    "start": 2279004,
    "end": 2286520,
    "text": "そのため、例えばページごとにスタイルファイルをダウンロードするためのリンクを定義することができます。"
  },
  {
    "start": 2286890,
    "end": 2291926,
    "text": "さて、このような調整を経て、すでにここで違う表情を手に入れたことがおわかりいただけただろう。"
  },
  {
    "start": 2292108,
    "end": 2295482,
    "text": "もちろん、それを微調整することもできる。"
  },
  {
    "start": 2295536,
    "end": 2298394,
    "text": "試してみるをクリックすると、新しい外観になった。"
  },
  {
    "start": 2298432,
    "end": 2309002,
    "text": "この背景は、メインCSSで定義されており、ルートでエクスポートしているため、すべてのページで読み込まれる。"
  },
  {
    "start": 2309146,
    "end": 2311518,
    "text": "ここではページ固有のルックはない。"
  },
  {
    "start": 2311604,
    "end": 2314880,
    "text": "それはスタートページに限った話だ。"
  },
  {
    "start": 2315250,
    "end": 2318530,
    "text": "これが一般的なページのスタイルだ。"
  },
  {
    "start": 2318870,
    "end": 2327094,
    "text": "さて、スタイリングに関して言えば、最後にもうひとつ、お見せしたい、そしてお話ししたいことがある。"
  },
  {
    "start": 2327132,
    "end": 2331560,
    "text": "このノート・ページでは、最終的にもっと意味のあるコンテンツを追加したい。"
  },
  {
    "start": 2332090,
    "end": 2342902,
    "text": "リアクト・コンポーネントは、ルートやページとしてではなく、他のコンポーネントの一部として使用する通常のコンポーネントです。"
  },
  {
    "start": 2343046,
    "end": 2348090,
    "text": "正確には、このノート・ページ・コンポーネントでは、添付のコンポーネントを使用する。"
  },
  {
    "start": 2348910,
    "end": 2355630,
    "text": "その添付ファイルには、新しいノードJSXファイルと新しいノードCSSファイルがある。"
  },
  {
    "start": 2356130,
    "end": 2359722,
    "text": "ここで、アプリのフォルダーにcomponentsという新しいフォルダーを追加する。"
  },
  {
    "start": 2359786,
    "end": 2365370,
    "text": "この名前もあなた次第だが、コンポーネントである必要はない。"
  },
  {
    "start": 2365450,
    "end": 2375380,
    "text": "Remixがそれを探すことはないだろうが、ページ以外のコンポーネント、ページ以外のリアクト・コンポーネントをすべてそこに保存するので、componentsという名前は理にかなっている。"
  },
  {
    "start": 2375750,
    "end": 2380374,
    "text": "添付のnewnode JsxファイルとCSSファイルがそこに入ります。"
  },
  {
    "start": 2380572,
    "end": 2385014,
    "text": "さて、この新しいノード・コンポーネント・ファイルを見てみよう。"
  },
  {
    "start": 2385132,
    "end": 2388530,
    "text": "このフォームは後で新しいノードを追加するときに重要になる。"
  },
  {
    "start": 2388690,
    "end": 2392742,
    "text": "今のところ、内容は無視していいし、見ての通り、あまりエキサイティングなものでもない。"
  },
  {
    "start": 2392806,
    "end": 2398970,
    "text": "このフォームにはいくつかの入力があり、このフォームと入力にはいくつかのスタイルがあります。"
  },
  {
    "start": 2399390,
    "end": 2408058,
    "text": "この新しいノード・コンポーネントをnodes jsxファイルで使いたい。"
  },
  {
    "start": 2408234,
    "end": 2415166,
    "text": "そのためにはまず、新しく追加したコンポーネントをこのnodes jsxファイルにインポートしなければならない。"
  },
  {
    "start": 2415278,
    "end": 2425854,
    "text": "をインポートし、チルダ記号を使ってappフォルダに素早くアクセスし、コンポーネントnewnodeにアクセスする。"
  },
  {
    "start": 2425902,
    "end": 2434502,
    "text": "ファイル拡張子を省略すれば、他のリアクト・アプリと同じようにnewノードをコンポーネントとして使うことができる。"
  },
  {
    "start": 2434556,
    "end": 2437622,
    "text": "このコードにはリミックス特有のものはない。"
  },
  {
    "start": 2437676,
    "end": 2442410,
    "text": "インポートされた別のリアクトコンポーネントを使用する標準的なリアクトコンポーネントです。"
  },
  {
    "start": 2443550,
    "end": 2450540,
    "text": "保存してみると、フォームが表示されていることに気づくだろう。"
  },
  {
    "start": 2451310,
    "end": 2456618,
    "text": "このスタイルを適用するには、リンクを使ってスタイル・ファイルを公開する必要がある。"
  },
  {
    "start": 2456714,
    "end": 2459040,
    "text": "そのためには、いくつかの選択肢がある。"
  },
  {
    "start": 2459650,
    "end": 2476126,
    "text": "例えば、node jsxファイルからこのルートファイルに移動して、新しいnode jsxファイルから新しいnodeコンポーネントをインポートするだけでなく、コンポーネントnewnode CSSから新しいnodeスタイルをインポートすることができます。"
  },
  {
    "start": 2476238,
    "end": 2478194,
    "text": "ここではファイルの拡張子が必要です。"
  },
  {
    "start": 2478242,
    "end": 2480482,
    "text": "CSSファイルには必要です。"
  },
  {
    "start": 2480546,
    "end": 2484070,
    "text": "省略できるのはJavaScriptとjsxファイルだけです。"
  },
  {
    "start": 2485530,
    "end": 2497260,
    "text": "これでインポートされたリンク関数は、先ほどと同じようにエクスポートして配列を返し、スタイルシートをこのように利用できるようにすることができる。"
  },
  {
    "start": 2497950,
    "end": 2499580,
    "text": "以前もそうだった。"
  },
  {
    "start": 2500430,
    "end": 2503770,
    "text": "そうすれば、スタイリングが適用された。"
  },
  {
    "start": 2503850,
    "end": 2507120,
    "text": "そして、それはまったく問題ないやり方だ。"
  },
  {
    "start": 2508210,
    "end": 2516770,
    "text": "ルート・コンポーネント・ファイルに余計なcssインポートを追加しなくても済むようにするためです。"
  },
  {
    "start": 2517190,
    "end": 2524274,
    "text": "新しいnode jsxファイルに行き、ここからスタイル・ファイルをインポートすることができる。"
  },
  {
    "start": 2524392,
    "end": 2534630,
    "text": "もちろん、最終的に新しいnode cssファイルをインポートすることに変わりはないが、このcssファイルの隣にあるnewnode jsxファイルでインポートする方が理にかなっているかもしれない。"
  },
  {
    "start": 2535130,
    "end": 2541942,
    "text": "ここでインポートしたスタイルを、この新しいnode jsxファイルからエクスポートすることができる。"
  },
  {
    "start": 2542006,
    "end": 2546700,
    "text": "正確には、ここにもリンク機能をエクスポートすることができる。"
  },
  {
    "start": 2547070,
    "end": 2551082,
    "text": "その関数は、私のルートファイルと同じ形をしている。"
  },
  {
    "start": 2551226,
    "end": 2557230,
    "text": "relスタイルシートを追加し、次にrefスタイルを追加する。"
  },
  {
    "start": 2558370,
    "end": 2561582,
    "text": "スタイルズとは、私がここで選んだ輸入名である。"
  },
  {
    "start": 2561716,
    "end": 2564610,
    "text": "このコンポーネントにリンク機能を追加した。"
  },
  {
    "start": 2565270,
    "end": 2574894,
    "text": "今問題になっているのは、remixはルートファイルでないファイルにあるリンク関数や他のルートコンポーネント固有の関数を探さないということです。"
  },
  {
    "start": 2575022,
    "end": 2581240,
    "text": "このファイルはルートフォルダにない通常のコンポーネントファイルなので、remixはこのリンク関数を無視します。"
  },
  {
    "start": 2581690,
    "end": 2583830,
    "text": "もちろん使える。"
  },
  {
    "start": 2583980,
    "end": 2586130,
    "text": "このnodes jsxファイルでは。"
  },
  {
    "start": 2586210,
    "end": 2591190,
    "text": "新しいnode jsxファイルから、新しいnodeコンポーネント関数以上のものを追加することができます。"
  },
  {
    "start": 2591270,
    "end": 2598730,
    "text": "また、エクスポートしたこのリンク関数をインポートして、新しいノードリンクのようなエイリアスを与えることもできる。"
  },
  {
    "start": 2600110,
    "end": 2611280,
    "text": "ここで、ノードページに返すリンクに、使用しているすべてのコンポーネントのリンクをマージすることができる。"
  },
  {
    "start": 2611730,
    "end": 2627006,
    "text": "この関数はnew nodeからインポートしたもので、この関数は配列を返します。それからスプレッド演算子を使って、このルート・コンポーネント・ファイルのlinks関数が返す配列に配列の項目をマージします。"
  },
  {
    "start": 2627118,
    "end": 2637334,
    "text": "これはサーフ・フェイシング・リンクと呼ばれるパターンで、実はリミックスの公式ドキュメントでも言及され、説明されているパターンだ。"
  },
  {
    "start": 2637452,
    "end": 2643740,
    "text": "少し余分な作業ですが、スタイル・ファイルを利用可能にするための一貫したAPIを使用できるようになります。"
  },
  {
    "start": 2644430,
    "end": 2653950,
    "text": "しかし、本当に重要なことですが、この新しいノードCSSファイルで定義されたスタイルは、このコンポーネントにはスコープされません。"
  },
  {
    "start": 2654290,
    "end": 2656586,
    "text": "それらは今でも世界的なスタイルだ。"
  },
  {
    "start": 2656778,
    "end": 2670350,
    "text": "もしあなたがフォームアクションのようなクラスをここで定義していて、そのクラスを同じページに含まれる他のコンポーネントでも使っている場合、それらのスタイルが適用され、他のスタイルと衝突する可能性があります。"
  },
  {
    "start": 2670510,
    "end": 2672834,
    "text": "ここではCSSモジュールを使っていない。"
  },
  {
    "start": 2672872,
    "end": 2680418,
    "text": "スコープされたスタイルがないので、コンポーネント固有のスタイルがありますが、技術的にはまだグローバルです。"
  },
  {
    "start": 2680514,
    "end": 2691160,
    "text": "このコンポーネントとそのスタイルをできるだけ簡単に維持できるように、JSXファイルの近くに置いておくこともできるだろう。"
  },
  {
    "start": 2691610,
    "end": 2694854,
    "text": "最終的に、どのアプローチを好むかはもちろんあなた次第だ。"
  },
  {
    "start": 2694982,
    "end": 2711886,
    "text": "このようにスタイルを表面化したい場合、すべてを1つのグローバルスタイルファイルにまとめ、stylesフォルダに保存し、ルートJSXにインポートしたい場合、またはスタイルファイルをルートページのコンポーネントにインポートし、このリンク機能を使用したい場合、それはあなた次第です。"
  },
  {
    "start": 2711988,
    "end": 2719650,
    "text": "ここではこのサーフェシング・アプローチにこだわるが、個人的に好きなものを選べるように、これらの異なるアプローチを紹介したかった。"
  },
  {
    "start": 2720070,
    "end": 2734338,
    "text": "さて、スタイリングはここまでにして、リミックスの機能をさらに深く掘り下げる前に、特にデータフェッチとミューテーションを掘り下げますが、このページにもうひとつ新しいコンポーネントを追加したいと思います。"
  },
  {
    "start": 2734514,
    "end": 2747606,
    "text": "メインナビゲーションのJSXファイルは、このcomponentsフォルダに保存する必要があります。なぜなら、これもまたスタンドアロンのルートコンポーネントではなく、他のコンポーネントの代わりに使用するコンポーネントだからです。"
  },
  {
    "start": 2747718,
    "end": 2753274,
    "text": "さて、このコンポーネントのコードを見てみると、見たことのない新しいコンポーネントがひとつあることに気づくだろう。"
  },
  {
    "start": 2753392,
    "end": 2757470,
    "text": "remix run reactからインポートしたナビリンクコンポーネントです。"
  },
  {
    "start": 2757970,
    "end": 2763954,
    "text": "私は基本的に、あなたが以前見たり使ったりした普通のリンク・コンポーネントと同じように使っている。"
  },
  {
    "start": 2764152,
    "end": 2766690,
    "text": "ナビリンクには特別な機能がある。"
  },
  {
    "start": 2767030,
    "end": 2776190,
    "text": "現在アクティブなリンクはアクティブCSSクラスを受け取り、そのクラスはそのリンクに特別なスタイルを与えるために使うことができます。"
  },
  {
    "start": 2776350,
    "end": 2788040,
    "text": "先ほど追加したメインCSSには、メイン・ナビゲーション・スタイルと、この特別なアクティブ・クラスを持つメイン・ナビゲーションのアンカー・タグ用の特別なスタイルがあります。"
  },
  {
    "start": 2788570,
    "end": 2795740,
    "text": "これにより、ユーザーはメインナビゲーションのどのリンクが現在アクティブなページにつながっているかを簡単に確認することができる。"
  },
  {
    "start": 2796990,
    "end": 2805440,
    "text": "あとは、このメイン・ナビゲーション・コンポーネントを使うだけだ。もちろん、ウェブサイトの全ページに表示されるようにしたい。"
  },
  {
    "start": 2806210,
    "end": 2831190,
    "text": "しかし、大きなアプリケーションでは、何十、あるいは何百ものページがあり、これらすべてのページに共有コンポーネントを手作業で追加し始めたくはないでしょう。"
  },
  {
    "start": 2831690,
    "end": 2844410,
    "text": "その代わりに、ここでもルート・コンポーネントを活用することができます。前述のように、このスケルトンはすべてのページを包むので、このメイン・ナビゲーションのような共有コンポーネントには最適な場所だからです。"
  },
  {
    "start": 2844910,
    "end": 2853520,
    "text": "したがって、本文のここにヘッダーを追加し、標準的なヘッダー要素を追加し、メイン・ナビゲーションをここに追加する。"
  },
  {
    "start": 2854450,
    "end": 2877566,
    "text": "そのためには、このコンポーネントをインポートする必要があるので、このファイルの一番上にあるtildecomponentsからメイン・ナビゲーションをインポートして、ルートJSXファイルでこのコンポーネントを利用可能にするメイン・ナビゲーションを、アウトレットの上にあるボディの中でこのように使います。"
  },
  {
    "start": 2877678,
    "end": 2883382,
    "text": "ページコンポーネントのコンテンツが注入される場所の上にある。"
  },
  {
    "start": 2883436,
    "end": 2898300,
    "text": "これを保存すると、上部にナビゲーション・バーが表示され、アクティブなリンクが強調表示されているのがわかるだろう。これは、リンクの代わりにナビリンクを使っているため、この特別なアクティブCSSクラスが適用されているからだ。"
  },
  {
    "start": 2899070,
    "end": 2919442,
    "text": "メイン・ナビゲーションが追加され、ウェブサイトがようやく形になってきたので、ここで実際にノートを作成し、バックエンドで何かを行うノートを提出できるようにしましょう。"
  },
  {
    "start": 2919496,
    "end": 2926466,
    "text": "現在、このアプリケーションにはフルスタック的なものは何もありません。"
  },
  {
    "start": 2926568,
    "end": 2933080,
    "text": "リアクト・コンポーネントをいくつか用意し、クライアント側でリアクト・ルーターでもできるルーティングを行っているだけだ。"
  },
  {
    "start": 2933930,
    "end": 2938386,
    "text": "それでは、新しいノードのJSXファイルを変更しよう。"
  },
  {
    "start": 2938418,
    "end": 2942326,
    "text": "このボタンがクリックされたときに送信されるフォームがすでに用意されている。"
  },
  {
    "start": 2942518,
    "end": 2950150,
    "text": "もし過去にreactだけで作業したことがあるなら、ここでsubmitハンドラを追加することが多いだろう。"
  },
  {
    "start": 2950240,
    "end": 2964190,
    "text": "submit時に、このsubmitハンドラーのようなハンドラーを追加し、このハンドラーを指定して、ここでイベントを発生させ、通常はevent prevent defaultを呼び出す。"
  },
  {
    "start": 2965190,
    "end": 2979494,
    "text": "リアクト・ルーターのバージョン6、4、またはそれ以上を使用している場合、このようなことはしていない可能性があります。なぜなら、そのバージョンのリアクト・ルーターでは、よりエレガントな方法でフォーム送信を処理できる新しいAPIが導入されたからです。"
  },
  {
    "start": 2979612,
    "end": 2985640,
    "text": "それについては別のビデオを用意しているし、もちろん私の完全ガイド・リアクション・コースでも取り上げている。"
  },
  {
    "start": 2986570,
    "end": 2993210,
    "text": "ここではremixを使っているのでreactルーターを使うつもりはないし、このようにsubmitハンドラーを追加するつもりもない。"
  },
  {
    "start": 2993280,
    "end": 2995382,
    "text": "デフォルトを防ぐつもりはない。"
  },
  {
    "start": 2995446,
    "end": 2999690,
    "text": "その代わりにリミックスでは、デフォルトを受け入れるつもりだ。"
  },
  {
    "start": 3000030,
    "end": 3001818,
    "text": "どうすればいいのか？"
  },
  {
    "start": 3001984,
    "end": 3008270,
    "text": "さて、このフォームにはメソッドがあるので、このフォームが送信されるたびにpostリクエストを送ることにします。"
  },
  {
    "start": 3008610,
    "end": 3016020,
    "text": "HTMLのフォーム要素を扱ったことがある人なら、ここにaction属性を追加できることを知っているかもしれない。"
  },
  {
    "start": 3016550,
    "end": 3023166,
    "text": "これにより、このフォームが送信されたときに投稿リクエストを送信するパスを定義することができます。"
  },
  {
    "start": 3023278,
    "end": 3026666,
    "text": "ちなみに、このボタンがクリックされるたびにフォームが送信されます。"
  },
  {
    "start": 3026718,
    "end": 3034134,
    "text": "フォームのデフォルトのボタンはフォームを送信します。ここでは、投稿リクエストを送信するパスを定義できます。"
  },
  {
    "start": 3034252,
    "end": 3040342,
    "text": "ここでメモを使えば、このメモページに、このメモルートに送ることができる。"
  },
  {
    "start": 3040486,
    "end": 3044730,
    "text": "すぐに、フォーム送信を実際に処理するコードをここに追加する。"
  },
  {
    "start": 3045550,
    "end": 3061962,
    "text": "というのも、この新しいノードコンポーネントは、このノードルート用に定義されたページコンポーネントによってすでに使用されているからです。"
  },
  {
    "start": 3062026,
    "end": 3069950,
    "text": "をこのノートルートに追加し、フォームを送信すると、デフォルトでは現在アクティブなパスにリクエストが送信されます。"
  },
  {
    "start": 3070030,
    "end": 3078520,
    "text": "このフォームがスラッシュ・ノート・ルートでレンダリングされる場合、スラッシュ・ノードはスラッシュ・ノードになります。"
  },
  {
    "start": 3080170,
    "end": 3085746,
    "text": "したがって、このフォームはデフォルトでスラッシュ・ノードに送信されるリクエストを作成することになる。"
  },
  {
    "start": 3085858,
    "end": 3098186,
    "text": "このページに戻って、開発者ツールのネットワークタブを開き、コンテンツを入力してメモの追加をクリックすると、すぐにクラッシュする。"
  },
  {
    "start": 3098208,
    "end": 3112190,
    "text": "ネットワーク・タブで、実際にノードにリクエストを送ろうとしていることがわかるだろう。"
  },
  {
    "start": 3112930,
    "end": 3121570,
    "text": "現在、この投稿リクエストを処理するコードがないため失敗したが、正しいことをした。"
  },
  {
    "start": 3122070,
    "end": 3128146,
    "text": "したがって、このノードルートにコードを追加して、現在失敗しているリクエストを処理する必要がある。"
  },
  {
    "start": 3128258,
    "end": 3140262,
    "text": "なぜなら、このノードJsxファイルに新しい関数を追加して、それをエクスポートしなければならないからだ。"
  },
  {
    "start": 3140316,
    "end": 3142950,
    "text": "この関数はアクションと呼ばれなければならない。"
  },
  {
    "start": 3143110,
    "end": 3147590,
    "text": "これは、リミックスがリンクを探していたのと同じように、リミックスも探している名前だ。"
  },
  {
    "start": 3147750,
    "end": 3153226,
    "text": "しかし、ルートファイルにエクスポートできる特別な機能がいくつかあります。"
  },
  {
    "start": 3153338,
    "end": 3156480,
    "text": "リミックスが求めているもの、そしてアクションはそのひとつだ。"
  },
  {
    "start": 3156850,
    "end": 3163322,
    "text": "リアクト・ルーターのバージョン6、4、またはそれ以上を使用している場合は、アクション機能に気づくかもしれない。"
  },
  {
    "start": 3163476,
    "end": 3174398,
    "text": "リアクト・ルーターでは、フォーム送信時に実行されるクライアント・サイドのコードがあったからだ。"
  },
  {
    "start": 3174494,
    "end": 3176674,
    "text": "さて、バックエンドのコードを作成しよう。"
  },
  {
    "start": 3176872,
    "end": 3189270,
    "text": "したがって、このアクション関数で定義されたコードもクライアントにダウンロードされることはありません。"
  },
  {
    "start": 3189350,
    "end": 3196490,
    "text": "Remixはコードを分割し、そのコードのみをサーバー上のこのアクション関数に実行・保存します。"
  },
  {
    "start": 3197470,
    "end": 3200738,
    "text": "このアクションはいつ発動するのですか？"
  },
  {
    "start": 3200934,
    "end": 3205978,
    "text": "このルートにゲット以外のリクエストが到達するたびにトリガーされる。"
  },
  {
    "start": 3206154,
    "end": 3211754,
    "text": "getリクエストがスラッシュ・ノードに到達した場合、返されるのは単にそのコンポーネントだ。"
  },
  {
    "start": 3211802,
    "end": 3215678,
    "text": "このページコンポーネントは、例えばgetリクエストが送信される。"
  },
  {
    "start": 3215764,
    "end": 3221410,
    "text": "スラッシュ・ノートを入力してエンターキーを押すか、スラッシュ・ノードにつながるリンクをクリックすればいい。"
  },
  {
    "start": 3221910,
    "end": 3233174,
    "text": "get以外のリクエストがこのルートに到達した場合、たとえばpostリクエストのように、このフォームから送信されたものであれば、コンポーネント関数の代わりにアクション関数がトリガーされます。"
  },
  {
    "start": 3233372,
    "end": 3251702,
    "text": "このアクション関数の中で、サーバーサイドのコードを実行し、送信されたデータを抽出して、データベースやファイルなどに保存することができます。"
  },
  {
    "start": 3251846,
    "end": 3261230,
    "text": "このフォルダ名は、予約制ではなく、完全にあなたの自由ですが、この講義に添付されている私のノートjsファイルをこのデータフォルダに入れておきます。"
  },
  {
    "start": 3261650,
    "end": 3273730,
    "text": "さて、このnote jsファイルには、ファイルからデータを読み込んだり、ノードJSONファイルにデータを保存したりするためのユーティリティ関数が用意されている。"
  },
  {
    "start": 3275030,
    "end": 3279734,
    "text": "ここでデータベースとやりとりすることもできるし、たいていのアプリではそうだろう。"
  },
  {
    "start": 3279852,
    "end": 3289580,
    "text": "ここでは物事をシンプルにするために、このファイルをストレージとして使うことにする。"
  },
  {
    "start": 3290430,
    "end": 3295546,
    "text": "あとは、このプロジェクトのルート・レベルにノートJSONファイルを追加するだけだ。"
  },
  {
    "start": 3295648,
    "end": 3308670,
    "text": "をパッケージJsonファイルの横に追加すると、このノートJSONファイルは空のオブジェクトを受け取る。"
  },
  {
    "start": 3309250,
    "end": 3316130,
    "text": "さて、これがJSONファイル・フォーマットであり、JSONノートにこの初期構造を持たせる必要がある。"
  },
  {
    "start": 3317990,
    "end": 3332680,
    "text": "これで、nodes JSXが追加され、dataフォルダのnotes jsに格納されているユーティリティ・メソッドの助けを借りて、notes JSONファイルを操作できるようになりました。"
  },
  {
    "start": 3333130,
    "end": 3335458,
    "text": "さて、私たちはここで何をしたいのか？"
  },
  {
    "start": 3335634,
    "end": 3345180,
    "text": "もちろん、このフォームに入力されたデータを取得し、ここで紹介するユーティリティ・メソッドの助けを借りて、このノードのJSONファイルに新しいノードとして格納したい。"
  },
  {
    "start": 3346110,
    "end": 3350860,
    "text": "そのためにはまず、フォームから送信されたデータを抽出する必要がある。"
  },
  {
    "start": 3351390,
    "end": 3353710,
    "text": "ありがたいことに、それはとても簡単なことだ。"
  },
  {
    "start": 3353860,
    "end": 3366006,
    "text": "ここで行っているようにフォームを使用している場合、ブラウザはフォームにあるすべての入力を受け取り、送信されるpostリクエストにアタッチされるオブジェクトに入れます。"
  },
  {
    "start": 3366138,
    "end": 3368098,
    "text": "これはブラウザがやってくれる。"
  },
  {
    "start": 3368184,
    "end": 3370130,
    "text": "手動でやる必要はない。"
  },
  {
    "start": 3370710,
    "end": 3374898,
    "text": "JSON形式ではなく、他の形式になるだろうが、それはここでは問題ではない。"
  },
  {
    "start": 3374984,
    "end": 3379240,
    "text": "送信されるポストリクエストには、すべての入力データが含まれる。"
  },
  {
    "start": 3380010,
    "end": 3389770,
    "text": "これで、入力やテキスト・エリアやフォームに割り当てた名前を使って、入力データを抽出できるようになります。"
  },
  {
    "start": 3390110,
    "end": 3393446,
    "text": "の場合、入力にname属性が必要です。"
  },
  {
    "start": 3393558,
    "end": 3396330,
    "text": "であれば、これらの名前の値はもちろんあなた次第である。"
  },
  {
    "start": 3396400,
    "end": 3404606,
    "text": "ここではtitleとcontentを選んだので、クライアント側のreactコードで値を抽出する必要はない。"
  },
  {
    "start": 3404708,
    "end": 3412270,
    "text": "双方向バインディングや参照を使う必要はなく、ただフォームを送信し、入力要素にこれらの名前をつけるだけでいい。"
  },
  {
    "start": 3413010,
    "end": 3421826,
    "text": "というのも、このアクション関数を呼び出しているのはリミックスだからだ。"
  },
  {
    "start": 3421928,
    "end": 3427000,
    "text": "リミックスは、さまざまな情報を含むデータ・オブジェクトを提供してくれる。"
  },
  {
    "start": 3428170,
    "end": 3437480,
    "text": "最も重要なことは、このデータオブジェクトは、フォームから送信されたリクエストの詳細を持つリクエストオブジェクトを含むことである。"
  },
  {
    "start": 3438270,
    "end": 3444700,
    "text": "ここでは、単純にオブジェクトのデストラクチャリングを使って、このようにリクエスト・オブジェクトに直接アクセスすることにする。"
  },
  {
    "start": 3445790,
    "end": 3450730,
    "text": "さて、このリクエスト・オブジェクトはフォーム・データ・メソッドを持っている。"
  },
  {
    "start": 3451630,
    "end": 3464420,
    "text": "ここで非同期awaitを使うために、この関数の前にasyncキーワードを追加する。"
  },
  {
    "start": 3465270,
    "end": 3469140,
    "text": "そして、リクエストフォームのデータを呼び出すのを待つ。"
  },
  {
    "start": 3469990,
    "end": 3478950,
    "text": "その結果、フォーム・データ・オブジェクトが生成され、実際にフォーム入力に入力された値にアクセスできるようになる。"
  },
  {
    "start": 3480570,
    "end": 3485430,
    "text": "これが、受信リクエストから送信されたデータを抽出する方法である。"
  },
  {
    "start": 3485850,
    "end": 3498010,
    "text": "ブラウザによって構築され、バックエンドに送信される標準的なリクエストオブジェクトや、ブラウザに組み込まれている標準的なフォーム動作などです。"
  },
  {
    "start": 3498350,
    "end": 3501430,
    "text": "独自のロジックを書いて車輪の再発明をすることはない。"
  },
  {
    "start": 3501510,
    "end": 3509598,
    "text": "その代わりに、私たちはこれらの標準を採用し、バックエンドで1行のシンプルなコードを書くだけで、提出されたすべてのデータにアクセスできるようにする。"
  },
  {
    "start": 3509684,
    "end": 3513940,
    "text": "アクション関数の中にあるので、これはバックエンドにあることに留意してほしい。"
  },
  {
    "start": 3514470,
    "end": 3516066,
    "text": "これが第一歩だ。"
  },
  {
    "start": 3516168,
    "end": 3525954,
    "text": "次のステップとして、ノード・データ・オブジェクトを追加する。JavaScriptの新しいオブジェクトで、titleプロパティを追加する。"
  },
  {
    "start": 3526152,
    "end": 3532040,
    "text": "そして、このフォーム・データ・オブジェクトにアクセスすることができる。"
  },
  {
    "start": 3532490,
    "end": 3539926,
    "text": "そこで、特別なgetメソッドを呼び出して、入力要素に割り当てた名前で値を取り出すことができる。"
  },
  {
    "start": 3540118,
    "end": 3555520,
    "text": "ここでは、入力要素の名前としてtitleとcontentを使ったので、titleはタイトルの抽出に、contentは内容の抽出に使うことができ、これらの抽出された値をこのオブジェクトに格納する。"
  },
  {
    "start": 3556050,
    "end": 3558346,
    "text": "あるいは、ショートカットもある。"
  },
  {
    "start": 3558458,
    "end": 3569202,
    "text": "先頭に大文字のoが付いた組み込みのオブジェクト・オブジェクトを使い、エントリーから呼び出してフォーム・データ・オブジェクトを渡すことができる。"
  },
  {
    "start": 3569336,
    "end": 3581720,
    "text": "これは基本的にこのフォーム・データ・オブジェクトを変換するもので、送信されたデータを抽出するためのメソッドが必要となる。"
  },
  {
    "start": 3582490,
    "end": 3591500,
    "text": "このJavaScriptオブジェクトはtitleプロパティとcontentプロパティを持つ。"
  },
  {
    "start": 3592190,
    "end": 3594970,
    "text": "これが、ユーザーの入力を得る方法だ。"
  },
  {
    "start": 3595390,
    "end": 3600300,
    "text": "さて、ここでバリデーションを追加することもできるが、当面はそうしない。"
  },
  {
    "start": 3600830,
    "end": 3607626,
    "text": "その代わりに、このノード・データを新しいノードとして既存のノードに追加したい。"
  },
  {
    "start": 3607818,
    "end": 3617822,
    "text": "そのためにまず、getstored notesを呼び出して、このノートJSOnファイルにすでに保存されているかもしれない既存のノードを取得する。"
  },
  {
    "start": 3617966,
    "end": 3623860,
    "text": "これは、このデータフォルダからインポートし、そこにメモする必要がある関数である。"
  },
  {
    "start": 3624310,
    "end": 3630950,
    "text": "私は、このデータフォルダ内のノートjsファイルで定義されている2つのユーティリティ関数のうちの1つを使用している。"
  },
  {
    "start": 3631690,
    "end": 3634722,
    "text": "今、getstoredノートは実際に約束を返す。"
  },
  {
    "start": 3634786,
    "end": 3637720,
    "text": "ここで、私はこう待つことにする。"
  },
  {
    "start": 3638330,
    "end": 3644026,
    "text": "というのも、以前から保存していたかもしれないメモを紛失したくないからだ。"
  },
  {
    "start": 3644048,
    "end": 3645594,
    "text": "新しいものを追加したらね。"
  },
  {
    "start": 3645792,
    "end": 3657070,
    "text": "次に、ノード・データ・オブジェクトを取り出し、そこにまったく新しいプロパティ、idプロパティを追加する。"
  },
  {
    "start": 3657570,
    "end": 3663054,
    "text": "ここでは、単純にISO文字列に変換された現在の日付をidとして使うことにする。"
  },
  {
    "start": 3663252,
    "end": 3670260,
    "text": "理論的には、2つのノードがまったく同じ瞬間に追加される可能性があるため、一意ではないが、このデモではこれで十分だ。"
  },
  {
    "start": 3671430,
    "end": 3674890,
    "text": "これでノード・データを取得し、既存のノードを取得した。"
  },
  {
    "start": 3674990,
    "end": 3685590,
    "text": "これで、既存のノードを使用して更新されたノード・オブジェクトを作成し、それにconcatを呼び出して、このノード・データを新しいノードに連結することができる。"
  },
  {
    "start": 3686730,
    "end": 3701322,
    "text": "そして、この更新されたノード・オブジェクトをnodes JSONに格納し直す必要があります。これは、2番目のユーティリティ関数であるstore nodes関数で行うことができます。"
  },
  {
    "start": 3701466,
    "end": 3710270,
    "text": "そのため、ここではnodes jsファイルから、同じくdataフォルダからインポートしたstore nodesを呼び出している。"
  },
  {
    "start": 3711890,
    "end": 3715490,
    "text": "に、更新したノードを渡す。"
  },
  {
    "start": 3716950,
    "end": 3724606,
    "text": "さて、これもまた約束を返すもので、私はこの約束を待っている。"
  },
  {
    "start": 3724718,
    "end": 3726520,
    "text": "それは何だろう？"
  },
  {
    "start": 3726890,
    "end": 3732630,
    "text": "さて、これですべてうまくいったとして、以後はユーザーをリダイレクトすることにしよう。"
  },
  {
    "start": 3733050,
    "end": 3741130,
    "text": "実は、このページではユーザーをリダイレクトする必要はない。なぜなら、将来このフォームのすぐ下にメモのリストをレンダリングするからだ。"
  },
  {
    "start": 3741280,
    "end": 3753646,
    "text": "他のページでは、メモやブログ記事など、あなたのウェブサイトに関するデータを作成するための別のページと、そのデータを一覧表示するための別のページがあるかもしれない。"
  },
  {
    "start": 3753828,
    "end": 3772014,
    "text": "従って、サーバー上で何かをした後、サーバーに送信されたポストリクエストの後に、ユーザーをリダイレクトさせたいことはよくあることである。"
  },
  {
    "start": 3772142,
    "end": 3779880,
    "text": "常にレスポンスである必要はないが、典型的なユースケースは、ユーザーを別のページにリダイレクトするレスポンスを返すことである。"
  },
  {
    "start": 3780810,
    "end": 3789370,
    "text": "remixが提供するredirect関数を呼び出すことで、リダイレクトレスポンスを作成することができます。"
  },
  {
    "start": 3789870,
    "end": 3794490,
    "text": "ここではremix run nodeからredirect関数をインポートしている。"
  },
  {
    "start": 3795950,
    "end": 3803310,
    "text": "この関数はこのように実行することができ、ユーザーをリダイレクトする新しいレスポンスオブジェクトを作成します。"
  },
  {
    "start": 3803970,
    "end": 3809360,
    "text": "ここで、ユーザーをリダイレクトさせたいパスを指定する。"
  },
  {
    "start": 3810530,
    "end": 3824002,
    "text": "これにより、ユーザーデータを抽出し、そのユーザーデータをデータベースまたはこの場合はファイルに保存し、ユーザーを別のページまたは同じページにリダイレクトするアクションを追加しました。"
  },
  {
    "start": 3824056,
    "end": 3831320,
    "text": "この場合、すべてをセーブすれば、もう必要なのはそれだけだ。"
  },
  {
    "start": 3831770,
    "end": 3844358,
    "text": "ここでもう一度開発者ツールを開いて、うまくいくかどうかを確認し、追加、テスト、テストをして、ここで少しズームアウトしてノードの追加をクリックする。"
  },
  {
    "start": 3844534,
    "end": 3853950,
    "text": "ページがここでリロードされ、リダイレクトが発生したステータスコード300のリクエストを受け取った。"
  },
  {
    "start": 3854690,
    "end": 3859120,
    "text": "それが、ここに読み込まれたこの新しいページにつながったリクエストだ。"
  },
  {
    "start": 3859570,
    "end": 3877160,
    "text": "ノードが実際にバックエンドに保存されたことは、エラーが発生しなかったことと、ノードのJSONを見て、フォームに入力した内容で追加された新しいノードであることがわかります。"
  },
  {
    "start": 3878090,
    "end": 3886120,
    "text": "今、私たちはブラウザ側ではなくバックエンドで実行されるサーバーサイドのコードを含むフルスタック・アプリを手に入れた。"
  },
  {
    "start": 3886810,
    "end": 3894540,
    "text": "ここ数分で、新しいノードフォームの送信を処理するバックエンドのコードを書き始めました。"
  },
  {
    "start": 3895230,
    "end": 3900890,
    "text": "ここで、ユーザー入力のバリデーションを追加することができる。"
  },
  {
    "start": 3900960,
    "end": 3914114,
    "text": "というのも、データを送信するのはいいことだが、もちろんアプリケーションではそれを見ることはできないからだ。"
  },
  {
    "start": 3914312,
    "end": 3918420,
    "text": "最終的には、ユーザーが使えるアプリケーションを作りたい。"
  },
  {
    "start": 3919270,
    "end": 3944250,
    "text": "次のゴールは、ゴールのリストを出力することで、そのために新しいコンポーネント、nodelist Jsxファイルとnodelist CSSファイルがあります。"
  },
  {
    "start": 3945230,
    "end": 3959306,
    "text": "このnewnotelist jsxファイルのnew notelistコンポーネントを見ると、nodesプロップの取得を期待していることがわかる。"
  },
  {
    "start": 3959418,
    "end": 3967138,
    "text": "例えば、ここで書いたロジックによって、すべてのノードのidにエンコードされている日付を出力する。"
  },
  {
    "start": 3967224,
    "end": 3974050,
    "text": "このアクションでは、日付をidとして追加し、タイトルと内容も出力している。"
  },
  {
    "start": 3974200,
    "end": 3975446,
    "text": "それが私がここでやっていることだ。"
  },
  {
    "start": 3975548,
    "end": 3985320,
    "text": "また、このnodelist jsxファイルにnodelist CsSからいくつかのスタイルをインポートし、links関数をエクスポートすることでそれらのリンクを表面化している。"
  },
  {
    "start": 3986650,
    "end": 3996860,
    "text": "そこで、nodes jsxに戻って、このnodelistコンポーネントをインポートし、表面化したリンクもインポートすることができる。"
  },
  {
    "start": 3997230,
    "end": 4010430,
    "text": "チルダコンポーネントのノードリストからノードリストをインポートし、同じファイルからリンクもインポートして、ノードリストリンクというエイリアスをつけています。"
  },
  {
    "start": 4011410,
    "end": 4025890,
    "text": "というのも、これらのコンポーネント・ファイルからエクスポートされる関数は常にリンクと呼ばれるため、エイリアスを割り当てないと名前の衝突が起きてしまうからだ。"
  },
  {
    "start": 4026790,
    "end": 4033330,
    "text": "あとは、このコンポーネントファイルによってエクスポートされたリンクを、このルートによって利用可能になったリンクに追加するだけだ。"
  },
  {
    "start": 4033410,
    "end": 4042380,
    "text": "そのため、このルートのリンク関数では、ノードリストのリンクをこの配列に分散させているだけだ。"
  },
  {
    "start": 4042990,
    "end": 4051550,
    "text": "このルートがロードされると、このルートコンポーネントで使用するすべてのコンポーネントに必要なすべてのCSSファイルがロードされます。"
  },
  {
    "start": 4053490,
    "end": 4057354,
    "text": "そういえば、このノード・リスト・コンポーネントももちろん使いたい。"
  },
  {
    "start": 4057482,
    "end": 4064500,
    "text": "ここで私が考えているのは、このように新しいノードの下にノード・リストを出力することだ。"
  },
  {
    "start": 4065830,
    "end": 4071134,
    "text": "しかし、このノード・リスト・コンポーネントにはもちろん、前述のようにnodes propが必要だ。"
  },
  {
    "start": 4071182,
    "end": 4077480,
    "text": "出力されるべきいくつかのノードを取得する必要があり、それが今データをフェッチする必要がある部分だ。"
  },
  {
    "start": 4077850,
    "end": 4081954,
    "text": "このノードJSONファイルからデータをフェッチする必要がある。"
  },
  {
    "start": 4082002,
    "end": 4091894,
    "text": "なぜなら、データベースやこのファイルのようなデータ・ソースにアクセスするのはバックエンドのタスクだからだ。"
  },
  {
    "start": 4092022,
    "end": 4094554,
    "text": "このファイルもバックエンドに保存される。"
  },
  {
    "start": 4094592,
    "end": 4099850,
    "text": "ちなみに、これはユーザーにダウンロードされるのではなく、我々のサーバーのバックエンドにある。"
  },
  {
    "start": 4100990,
    "end": 4105342,
    "text": "そのため、ノートルートでは、さらにバックエンドのコードを追加しなければならない。"
  },
  {
    "start": 4105396,
    "end": 4132998,
    "text": "このコンポーネントがロードされるたびに、getリクエストがこのルートに到達するたびに、データをロードしたいからです。これは、loader関数をエクスポートすることで実現できます。"
  },
  {
    "start": 4133084,
    "end": 4137362,
    "text": "したがって、リミックスがこのファイルを見つけられるようにエクスポートする必要がある。"
  },
  {
    "start": 4137506,
    "end": 4150118,
    "text": "ローダーはremixによってトリガーされ、getリクエストがこのルートに到達するたびにremixによって呼び出されます。"
  },
  {
    "start": 4150294,
    "end": 4153834,
    "text": "コンポーネントはサーバー上でプリレンダリングされることに留意してください。"
  },
  {
    "start": 4153962,
    "end": 4168718,
    "text": "サーバー上でレンダリングされ、完成したHTMLコードがJavascriptのコードとともにクライアントに送信される。"
  },
  {
    "start": 4168894,
    "end": 4173426,
    "text": "そのため、このローダーでは、さらにバックエンドのコードを書くことになる。"
  },
  {
    "start": 4173528,
    "end": 4182600,
    "text": "なぜなら、アクション内のコードと同じように、ローダー内のコードもバックエンドのみで実行され、フロントエンドやクライアントサイドに届くことはないからだ。"
  },
  {
    "start": 4183370,
    "end": 4189378,
    "text": "ここでは、データ・ノードからインポートした別の関数であるgetstored notesを呼び出したい。"
  },
  {
    "start": 4189474,
    "end": 4194714,
    "text": "実際、我々はすでにそれをインポートしている。"
  },
  {
    "start": 4194912,
    "end": 4198534,
    "text": "ここでもう一度使って、保存されたメモを返すのが約束だ。"
  },
  {
    "start": 4198582,
    "end": 4205290,
    "text": "ローダーもアクションと同じように非同期関数にする。"
  },
  {
    "start": 4205450,
    "end": 4213950,
    "text": "awaitキーワードを使って、ノートJSONファイルに保存されているノートを取得したいからだ。"
  },
  {
    "start": 4214930,
    "end": 4216942,
    "text": "それなら、ここではそれがすべてだ。"
  },
  {
    "start": 4216996,
    "end": 4225150,
    "text": "他には何もする必要はない。ただメモを取り出したいだけで、それをこのコンポーネントに渡す必要がある。"
  },
  {
    "start": 4225240,
    "end": 4226680,
    "text": "これはどういう仕組みなのか？"
  },
  {
    "start": 4227450,
    "end": 4235880,
    "text": "つまり、リミックスがこれらの異なる端や構成要素、ビルディング・ブロックを一緒に機能させるのだ。"
  },
  {
    "start": 4236410,
    "end": 4242166,
    "text": "ローダーでは、コンポーネントが利用できるようにするデータを返すだけでよい。"
  },
  {
    "start": 4242278,
    "end": 4244700,
    "text": "をこのコンポーネントに追加した。"
  },
  {
    "start": 4245070,
    "end": 4251358,
    "text": "技術的には、このローダーで返されたデータはフロントエンドに送られる。"
  },
  {
    "start": 4251444,
    "end": 4263290,
    "text": "正確には、このコンポーネント、このノートページコンポーネントは、指定された訪問者がこのページに最初にリクエストした場合、サーバーサイドでレンダリングすることができる。"
  },
  {
    "start": 4263370,
    "end": 4269906,
    "text": "例えば、その後、訪問者は1ページのアプリケーションを取得し、その中でナビゲートする。"
  },
  {
    "start": 4270008,
    "end": 4279640,
    "text": "最初のリクエストでは、これはサーバー側でレンダリングされ、したがってこのコンポーネント関数も、実際にはサーバー側で実行されるかもしれない。"
  },
  {
    "start": 4280250,
    "end": 4290842,
    "text": "もしユーザーがすでに私たちのウェブサイトにいて、そこでナビゲートしているのなら、リミックスが彼らのために作成したこのシングルページのアプリケーション環境にいることになる。"
  },
  {
    "start": 4290976,
    "end": 4307210,
    "text": "そしてバックエンドのローダーを呼び出す。お父さんコードは常にバックエンドで動いているから、バックエンドのローダーにリクエストを送る。"
  },
  {
    "start": 4307370,
    "end": 4308814,
    "text": "今、私はこのことを強調している。"
  },
  {
    "start": 4308852,
    "end": 4318130,
    "text": "私がこのことを強調しているのは、ローダーが返したデータをバックエンドからフロントエンドに送る必要がある場合があることを意味しているからだ。"
  },
  {
    "start": 4318280,
    "end": 4322962,
    "text": "バックエンドからフロントエンドにレスポンスが送られなければならない。"
  },
  {
    "start": 4323016,
    "end": 4326082,
    "text": "それがリミックスなのだ。"
  },
  {
    "start": 4326146,
    "end": 4329270,
    "text": "このデータをレスポンスにまとめる。"
  },
  {
    "start": 4329850,
    "end": 4331922,
    "text": "今なら自分たちでもできる。"
  },
  {
    "start": 4332066,
    "end": 4342006,
    "text": "node jsに組み込まれている標準レスポンス・クラスである標準レスポンス・コンストラクタ関数を使用して、新しいレスポンスを返すことができます。"
  },
  {
    "start": 4342118,
    "end": 4344330,
    "text": "これはリミックス特集ではない。"
  },
  {
    "start": 4344750,
    "end": 4347350,
    "text": "このレスポンスにデータを渡すことができる。"
  },
  {
    "start": 4347430,
    "end": 4356030,
    "text": "ノードのようなデータをJSON文字列化することは可能だが、そのデータはJSON形式に変換する必要があるからだ。"
  },
  {
    "start": 4356690,
    "end": 4371566,
    "text": "そうすれば、このレスポンスコンストラクタ関数に2つ目の値、つまり2つ目の引数を追加して、追加のヘッダを追加することができる。"
  },
  {
    "start": 4371758,
    "end": 4374850,
    "text": "このようにデータを送り返すという方法もある。"
  },
  {
    "start": 4374920,
    "end": 4377802,
    "text": "それが結局、リミックスがボンネットの中でやっていることなんだ。"
  },
  {
    "start": 4377886,
    "end": 4382790,
    "text": "もちろん、ノートを返すだけのこの方法の方がはるかに短時間で済むが。"
  },
  {
    "start": 4383130,
    "end": 4386742,
    "text": "いまお見せしたものよりも短い代替案もある。"
  },
  {
    "start": 4386796,
    "end": 4397798,
    "text": "手動でレスポンスを返したい場合、remixはJSON関数を提供しており、remix run nodeからインポートする必要があります。"
  },
  {
    "start": 4397974,
    "end": 4409246,
    "text": "このJSON関数は、実際に生データを受け取り、それを裏でJSONレスポンスに変換し、例えば、content typeヘッダーも裏で設定する。"
  },
  {
    "start": 4409428,
    "end": 4412718,
    "text": "これも生データの代わりにレスポンスを返す。"
  },
  {
    "start": 4412804,
    "end": 4416222,
    "text": "これは、そのようなJSONレスポンスを返すより簡単な方法である。"
  },
  {
    "start": 4416366,
    "end": 4421860,
    "text": "このように生データを返すだけで、リミックスは舞台裏でそのようなことをしてくれるのだ。"
  },
  {
    "start": 4422470,
    "end": 4427186,
    "text": "ここでは、生データを返すことにこだわり、このJSON関数は使わないことにする。"
  },
  {
    "start": 4427288,
    "end": 4437478,
    "text": "リミックスが舞台裏で何をしているのか、生データを返す代わりに何ができるのかを理解することが重要だからだ。"
  },
  {
    "start": 4437644,
    "end": 4440330,
    "text": "ここでは単にメモを返すだけだ。"
  },
  {
    "start": 4440990,
    "end": 4442714,
    "text": "メモをここに返す。"
  },
  {
    "start": 4442832,
    "end": 4454590,
    "text": "このコンポーネントでは、remixが提供する特別なフック、use loader data hookを使うことで、ローダーから返されたデータにアクセスすることができます。"
  },
  {
    "start": 4455730,
    "end": 4464370,
    "text": "このフックはremix run reactからインポートされたもので、このフックは単にローダーから返されたデータにアクセスできるようにするものだ。"
  },
  {
    "start": 4465030,
    "end": 4468542,
    "text": "ここで非常に重要なのは、ここで返されるデータはシリアライズされているということだ。"
  },
  {
    "start": 4468606,
    "end": 4471886,
    "text": "一時的にJSON文字列に変換される。"
  },
  {
    "start": 4471998,
    "end": 4475170,
    "text": "この場合、リッチ・オブジェクトを返すことはできない。"
  },
  {
    "start": 4475240,
    "end": 4478818,
    "text": "できるけど、どんなメソッドも何もかも失われてしまう。"
  },
  {
    "start": 4478914,
    "end": 4484230,
    "text": "プレーンなデータを得るだけで、それがこのユース・ローダーのデータだ。"
  },
  {
    "start": 4484300,
    "end": 4494410,
    "text": "この場合、音符は単なる文字列の束であり、完全にシリアライズ可能なので、何も失われることはない。"
  },
  {
    "start": 4495310,
    "end": 4501680,
    "text": "とすると、ここでのノートは次のようにノード・リスト・コンポーネントのノート・プロパティに渡すことができる。"
  },
  {
    "start": 4503090,
    "end": 4507630,
    "text": "これだけで、このコンポーネントのデータをロードすることができる。"
  },
  {
    "start": 4507970,
    "end": 4513280,
    "text": "このローダーは、前述のように、ユーザーがこのページにアクセスするたびに実行される。"
  },
  {
    "start": 4514050,
    "end": 4526258,
    "text": "もし私たちがすでに別のページを訪れていて、このページにリダイレクトされるようにリンクをクリックすると、remixは舞台裏でサーバー上のローダーを実行し、フロントエンドでデータを利用できるようにする。"
  },
  {
    "start": 4526344,
    "end": 4534614,
    "text": "私たちはそれに関して何も心配する必要はないし、バックエンドに独自のリクエストを送ったり、代わりにこんなことをする必要もない。"
  },
  {
    "start": 4534732,
    "end": 4536946,
    "text": "それがリミックスの利点のひとつだ。"
  },
  {
    "start": 4537058,
    "end": 4541100,
    "text": "フロントエンドとバックエンドがシームレスに融合している。"
  },
  {
    "start": 4542110,
    "end": 4552906,
    "text": "これを保存して戻ると、この入力の下に最初のノードが見えるはずだ。"
  },
  {
    "start": 4553088,
    "end": 4554354,
    "text": "これがそのノードだ。"
  },
  {
    "start": 4554422,
    "end": 4555674,
    "text": "クリックできない。"
  },
  {
    "start": 4555722,
    "end": 4559280,
    "text": "このアニメーションはここにあるだけですが、これは前に追加したメモです。"
  },
  {
    "start": 4560530,
    "end": 4570542,
    "text": "面白いのは、新しいノートを追加して、2つ目のノート・リミックスは最高だ、と投稿すると、それが自動的にここに表示されることだ。"
  },
  {
    "start": 4570606,
    "end": 4578514,
    "text": "remixは、このページを再訪したときに自動的にローディングするように配慮している。"
  },
  {
    "start": 4578642,
    "end": 4587240,
    "text": "ローダーは、このページが常に最新のデータを表示するよう、基本的に実行が必要なときに実行される。"
  },
  {
    "start": 4587610,
    "end": 4593802,
    "text": "ローダーを追加したので、フォームの送信を処理するだけでなく、データの読み込みもできるようになった。"
  },
  {
    "start": 4593936,
    "end": 4600214,
    "text": "データをロードしている間、どうやってフロントエンドにロードスピナーを表示するのだろう？"
  },
  {
    "start": 4600342,
    "end": 4602786,
    "text": "重要な答えは \"しない \"ということだ。"
  },
  {
    "start": 4602918,
    "end": 4607754,
    "text": "その代わり、リミックスはデータが読み込まれた時点で、完成したページだけを提供する。"
  },
  {
    "start": 4607882,
    "end": 4613994,
    "text": "例えば、私がスタートページにいて、ノートをクリックすると、即座にこのように表示される。"
  },
  {
    "start": 4614042,
    "end": 4619380,
    "text": "ビハインドシーン・リミックスは、このページをロードする前にデータがロードされるようにした。"
  },
  {
    "start": 4620150,
    "end": 4624382,
    "text": "開発者ツールを開き、ネットワークタブを開くと、このことがわかります。"
  },
  {
    "start": 4624446,
    "end": 4628254,
    "text": "私のノートをクリックすると、舞台裏を見ることができる。"
  },
  {
    "start": 4628382,
    "end": 4631650,
    "text": "これは、ノートデータがフェッチされたリクエストである。"
  },
  {
    "start": 4631810,
    "end": 4644300,
    "text": "このリクエストは、remix behind the scenesがコントロールするURLに送られるgetリクエストです。"
  },
  {
    "start": 4644910,
    "end": 4648826,
    "text": "リミックスは、すべてのデータが必要なときにロードされるように配慮している。"
  },
  {
    "start": 4648928,
    "end": 4651600,
    "text": "その心配はない。"
  },
  {
    "start": 4652530,
    "end": 4667954,
    "text": "この時点で、データを送信し、データをロードし、それぞれのバックエンド・コードを実行することができる。したがって、あなたが構築しているほとんどすべてのフルスタック・アプリで、最も重要な2つのバックエンド・タスクを実行することができる。"
  },
  {
    "start": 4668152,
    "end": 4680520,
    "text": "もう一度このアクションに戻り、フォーム送信、追加、ユーザーバリデーション、そして理解し知っておくことが重要な関連するいくつかの側面について詳しく見ていきたいと思います。"
  },
  {
    "start": 4681130,
    "end": 4685922,
    "text": "そのために、ここに戻って3番目のノードを追加しよう。"
  },
  {
    "start": 4686066,
    "end": 4689798,
    "text": "これもリミックスに関するメモだ。"
  },
  {
    "start": 4689974,
    "end": 4693580,
    "text": "もう一度、このリフレッシュアイコンを見てほしい。"
  },
  {
    "start": 4694110,
    "end": 4698150,
    "text": "ノードの追加をクリックすると、ノードは十字に変わる。"
  },
  {
    "start": 4698230,
    "end": 4705834,
    "text": "何が起こったかというと、新しいHTTPリクエストが送信され、リミックスから新しいページが返されたのだ。"
  },
  {
    "start": 4705882,
    "end": 4711882,
    "text": "アクションの最後にリダイレクトしているのだから。"
  },
  {
    "start": 4711946,
    "end": 4721874,
    "text": "リダイレクト先のページは以前と同じページですが、リダイレクトレスポンスを返送しているため、厳密にはブラウザから送信された新しいリクエストです。"
  },
  {
    "start": 4722072,
    "end": 4724014,
    "text": "すべてが意図したとおりに動いている。"
  },
  {
    "start": 4724062,
    "end": 4729798,
    "text": "もちろん、ここでシングル・ページ・アプリケーションの世界にとどまるのも理にかなっている。"
  },
  {
    "start": 4729964,
    "end": 4743898,
    "text": "このページで新しいノードを追加し、そのノードをサブミットする場合、新しいページをフェッチする新しいリクエストを送信しないのは理にかなっている。"
  },
  {
    "start": 4743984,
    "end": 4758400,
    "text": "確かにキャッシュされるかもしれないが、それでもJavaScriptコードのダウンロード要求が新たに発生し、クライアント・サイドで使用されているJavaScriptコードをすべて再度実行することになる。"
  },
  {
    "start": 4760290,
    "end": 4777590,
    "text": "これを実現するには、フォームに戻り、このデフォルトのフォーム要素を、大文字のfで始まり、remix run reactからインポートする必要がある別のフォーム要素に置き換えればよい。"
  },
  {
    "start": 4779450,
    "end": 4782550,
    "text": "もちろん、閉じタグも置き換えなければならない。"
  },
  {
    "start": 4783690,
    "end": 4795850,
    "text": "このフォームでも以前と同じようにフォームをレンダリングし、通常のフォーム要素に追加できる属性を追加できますが、動作は少し異なります。"
  },
  {
    "start": 4796510,
    "end": 4813114,
    "text": "ここですべてを保存し、4番目のノード、つまり別のノードを追加して、このリフレッシュ・アイコンをもう一度見てみると、スピンしていないのにデータが送信され、ローダーがトリガーされたことがわかる。"
  },
  {
    "start": 4813162,
    "end": 4816180,
    "text": "技術的にはこのページをリロードしていないにもかかわらず。"
  },
  {
    "start": 4816870,
    "end": 4822402,
    "text": "また、入力がクリアされていないので、ページがリロードされていないこともわかる。"
  },
  {
    "start": 4822456,
    "end": 4830230,
    "text": "それでもローダーが起動したのは、前にも書いたように、リミックスが自動的に期待通りのことをやってくれるからだ。"
  },
  {
    "start": 4830380,
    "end": 4848022,
    "text": "デフォルトのフォームの代わりにこの特別なフォームコンポーネントを使うことで、シングルページアプリケーションの世界に留まり、リミックスはページのリロードを防ぎます。"
  },
  {
    "start": 4848086,
    "end": 4855118,
    "text": "と言うと、このコードはすべて実行され、ノートページにリダイレクトしたいことにまだ気づいている。"
  },
  {
    "start": 4855204,
    "end": 4873940,
    "text": "アクションをトリガーしてデータが変更されたかもしれないことを理解し、更新されたデータをフェッチする必要があるからだ。"
  },
  {
    "start": 4874470,
    "end": 4902810,
    "text": "いつものように、ネットワーク・タブに行き、ここに5番目のノードを追加すると、いくつかのリクエストがあることがわかる。"
  },
  {
    "start": 4902890,
    "end": 4905200,
    "text": "これは更新されたデータを提供してくれた。"
  },
  {
    "start": 4906450,
    "end": 4908382,
    "text": "それがリミックスなんだ。"
  },
  {
    "start": 4908436,
    "end": 4913886,
    "text": "ここでも、バックエンドのコードをバックエンドに残しながら、バックエンドとフロントエンドを融合させている。"
  },
  {
    "start": 4914078,
    "end": 4924706,
    "text": "そのため、通常、デフォルトのフォーム要素の代わりにリミックスが提供するフォームコンポーネントを使い、シングルページの世界に留まるようにします。"
  },
  {
    "start": 4924888,
    "end": 4930402,
    "text": "デフォルトのフォームを使うのも悪くないが、それだと余計なリクエストを避けることができる。"
  },
  {
    "start": 4930546,
    "end": 4937830,
    "text": "しかし、このフォーム・コンポーネントは、リミックスによって提供される追加機能を使うことで真価を発揮する。"
  },
  {
    "start": 4938590,
    "end": 4944860,
    "text": "さて、シングルページのアプリケーション体験に戻る以外に、このフォーム・コンポーネントをどのように活用できるだろうか？"
  },
  {
    "start": 4945630,
    "end": 4950550,
    "text": "例えば、データが送信される間、このボタンを無効にすることもできる。"
  },
  {
    "start": 4950710,
    "end": 4953146,
    "text": "それは、フォームに書いておいた方がいいかもしれない。"
  },
  {
    "start": 4953178,
    "end": 4963630,
    "text": "remixが提供するこのフォームコンポーネントを使う場合、別のフックを使うことで簡単にそれを行うことができます。"
  },
  {
    "start": 4963970,
    "end": 4966530,
    "text": "それがナビゲーションフックだ。"
  },
  {
    "start": 4966870,
    "end": 4978760,
    "text": "実は、これを記録している時点ではuse transitionという名前になっているが、use transitionはreact自体も提供するフックになったので、将来のバージョンではuse navigationに改名される予定だ。"
  },
  {
    "start": 4979530,
    "end": 4992410,
    "text": "そのため、ここでは別名を付けます。インポートできる使用ナビゲーションフックがあるかどうか、簡単にチェックしてください。"
  },
  {
    "start": 4992750,
    "end": 5003440,
    "text": "use遷移のオートコンプリートが表示されたら、use navigationと名前を変えて、将来このフックが持つことになる新しい名前に慣れておくことをお勧めする。"
  },
  {
    "start": 5004450,
    "end": 5017182,
    "text": "このフックを呼び出すと、ナビゲーション・オブジェクトが得られる。このナビゲーション・オブジェクトには、舞台裏で進行中のリクエストに関する有用なデータが含まれている。"
  },
  {
    "start": 5017246,
    "end": 5018260,
    "text": "と言う。"
  },
  {
    "start": 5018710,
    "end": 5028040,
    "text": "例えば、stateプロパティにアクセスして、現在データを送信中なのか、データをロード中なのか、何もしていないのかを調べることができる。"
  },
  {
    "start": 5028650,
    "end": 5042970,
    "text": "また、submission プロパティにアクセスして、リクエストが送信されたパスやメソッド、送信されたデータの種類など、トリガされた最新のフォーム送信に関する詳細情報を取得することもできます。"
  },
  {
    "start": 5043550,
    "end": 5076110,
    "text": "また、remixが裏で実行した最後のナビゲーションが、呼ばれたアクションのためにリダイレクトされたかどうかを調べるために、ここの型を使うことができます。"
  },
  {
    "start": 5076190,
    "end": 5078920,
    "text": "投稿する場合は、このボタンを無効にしたい。"
  },
  {
    "start": 5080170,
    "end": 5097260,
    "text": "また、このボタンのラベルを変更し、投稿中かどうかをチェックすることもできる。その場合はadding dot dot dotと言い、そうでない場合はadd nodeと言うことで、現在の投稿状況を考慮に入れることができる。"
  },
  {
    "start": 5097710,
    "end": 5114034,
    "text": "しかし、もしここに新しいノードを追加し、バックエンドが少し遅くなった場合、一時的にこのボタンが無効になり、ラベルがここで再び変わるのがわかるだろう。"
  },
  {
    "start": 5114072,
    "end": 5117490,
    "text": "すべてが同じマシン上で起こっているので、あまりに速い。"
  },
  {
    "start": 5117830,
    "end": 5143020,
    "text": "タイムアウトを設定する呼び出しを単純にラップし、タイムアウトが終了したらresolveを呼び出してタイムアウトを2秒に設定する。"
  },
  {
    "start": 5144270,
    "end": 5158320,
    "text": "この行を追加して、ここに2秒間のポーズを追加するだけです。そうして別のノートを追加すると、この行が無効になり、それが完了するまで追加を表示することがわかります。"
  },
  {
    "start": 5159810,
    "end": 5164590,
    "text": "もちろん、これ以上このポーズを取りたくないので、コメントアウトする。"
  },
  {
    "start": 5164670,
    "end": 5174610,
    "text": "このように、このフォームコンポーネントを活用して、追加情報を取得し、現在の送信ステータスに基づいたユーザーインターフェイスを強化することもできます。"
  },
  {
    "start": 5175270,
    "end": 5183894,
    "text": "ナビゲーション・オークとこのフォーム・コンポーネントは、併用する必要はないが、併用すればユーザー・インターフェースを向上させることができる。"
  },
  {
    "start": 5183932,
    "end": 5194490,
    "text": "通常のフォームでナビゲーションを使用することはできません。なぜなら、そこでは新しいリクエストが送信され、単一ページアプリケーションの世界にとどまるのではなく、単にページがリロードされるだけだからです。"
  },
  {
    "start": 5194560,
    "end": 5198060,
    "text": "それができるのは、この大文字のfを使ったフォームだけだ。"
  },
  {
    "start": 5199230,
    "end": 5203710,
    "text": "しかし、このアクションとフォームデータの代わりにできることはそれだけではない。"
  },
  {
    "start": 5203780,
    "end": 5210910,
    "text": "超複雑なバリデーションではないが、少なくとも何らかのバリデーションは必要だ。"
  },
  {
    "start": 5211970,
    "end": 5234918,
    "text": "この場合、送信されたフォームデータから取得したノードデータで、タイトルがあるかどうか、先頭と末尾の空白を削除するためにトリミングされているかどうか、タイトルの長さが少なくとも5文字以上あるかどうかをチェックできます。"
  },
  {
    "start": 5235004,
    "end": 5237110,
    "text": "ここではシンプルにしたい。"
  },
  {
    "start": 5237180,
    "end": 5240810,
    "text": "この最小限の長さでタイトルを検証してみる。"
  },
  {
    "start": 5242190,
    "end": 5244090,
    "text": "もしこれが満たされなかったら...。"
  },
  {
    "start": 5244240,
    "end": 5246970,
    "text": "実際に5より小さいかどうかをチェックしたいんだ。"
  },
  {
    "start": 5247040,
    "end": 5258830,
    "text": "もし5文字より短かったら、無効なタイトルだったら、5文字より短かったら、ユーザーにエラーメッセージを表示したいかもしれない。"
  },
  {
    "start": 5259410,
    "end": 5264670,
    "text": "ここで、ブラウザが提供するデフォルトのアラート機能を呼び出すことを考えることができる。"
  },
  {
    "start": 5265170,
    "end": 5272174,
    "text": "しかし、このコードはブラウザではなく、サーバーのバックエンドで実行されることに留意してほしい。"
  },
  {
    "start": 5272222,
    "end": 5277320,
    "text": "ここではブラウザのAPIは使えないし、ブラウザだけの機能も使えない。"
  },
  {
    "start": 5278010,
    "end": 5283382,
    "text": "その代わりにできること、すべきことは、ここで値を返すことだ。"
  },
  {
    "start": 5283516,
    "end": 5289480,
    "text": "アクションの最後にリダイレクトを返すのだが、別の値を返したい。"
  },
  {
    "start": 5289950,
    "end": 5293450,
    "text": "私がここで返す価値とは何だろう？"
  },
  {
    "start": 5293600,
    "end": 5294986,
    "text": "まあ、それはあなた次第だ。"
  },
  {
    "start": 5295088,
    "end": 5311920,
    "text": "例えば、無効なタイトルは少なくとも5文字以上でなければならない、というようなメッセージを返すこともできる。"
  },
  {
    "start": 5314070,
    "end": 5321518,
    "text": "ローダーのようなアクションは、リダイレクトレスポンスだけでなく、データを返すこともできる。"
  },
  {
    "start": 5321694,
    "end": 5325422,
    "text": "それが、成功したアクションの最後にする典型的なことだ。"
  },
  {
    "start": 5325486,
    "end": 5327800,
    "text": "データを返すこともできる。"
  },
  {
    "start": 5328330,
    "end": 5331046,
    "text": "そのデータはどうやって入手するのですか？"
  },
  {
    "start": 5331148,
    "end": 5333960,
    "text": "そのデータへのアクセス方法は？"
  },
  {
    "start": 5335130,
    "end": 5340810,
    "text": "そのために、もうひとつ使えるフックがある。"
  },
  {
    "start": 5341870,
    "end": 5348170,
    "text": "このフックはuse loader dataのように、この場合はアクションから返されたデータにアクセスできる。"
  },
  {
    "start": 5348510,
    "end": 5352570,
    "text": "use action data を使うと、アクションが返すデータにアクセスできます。"
  },
  {
    "start": 5352650,
    "end": 5356590,
    "text": "ローダーデータを使用すると、ローダーから返されるデータにアクセスできます。"
  },
  {
    "start": 5357250,
    "end": 5361790,
    "text": "使用アクションのデータもリミックス・ラン・リアクトからインポートする必要がある。"
  },
  {
    "start": 5363250,
    "end": 5365410,
    "text": "さて、このデータはまた何でもありだ。"
  },
  {
    "start": 5365480,
    "end": 5373300,
    "text": "私たちの場合、これはmessageプロパティを持つオブジェクトであり、エラー・メッセージを出力するためにそれを使うことができる。"
  },
  {
    "start": 5373670,
    "end": 5386614,
    "text": "例えば、このエラーをpropとしてnewノードに渡して、newノード・コンポーネントの中でこのエラーを出力することができます。"
  },
  {
    "start": 5386812,
    "end": 5392220,
    "text": "ここにエラーメッセージを出力する段落を追加することができる。"
  },
  {
    "start": 5393310,
    "end": 5400378,
    "text": "前述したように、このデータをプロップ経由で新しいノードに渡すこともできるが、その必要はない。"
  },
  {
    "start": 5400544,
    "end": 5404670,
    "text": "その代わりに、このノード・ページからアクション・データ・フックを削除することができます。"
  },
  {
    "start": 5404740,
    "end": 5414402,
    "text": "このルート・コンポーネントからこのインポートを削除し、代わりにこの新しいノード・コンポーネント自体でこのインポートを呼び出す。"
  },
  {
    "start": 5414536,
    "end": 5429960,
    "text": "アクションデータの使用とローダーデータの使用は、これらのルートコンポーネントだけでなく、どのコンポーネントでも呼び出すことができ、呼び出された最も近いローダーやアクションのアクションデータやローダーデータを取得します。"
  },
  {
    "start": 5430330,
    "end": 5443020,
    "text": "新しいノードコンポーネントでローダーデータまたはアクションデータを使用し、このコンポーネントがこのページによってレンダリングされた場合、私はそのページのローダーまたはアクションによって返されたデータにアクセスできます。"
  },
  {
    "start": 5444190,
    "end": 5460910,
    "text": "したがって、新しいノードのJSXファイルでは、use action dataにアクセスしてデータを取得し、もちろんremix run reactからフックをインポートして、そのデータを活用してエラーを出力することができる。"
  },
  {
    "start": 5461570,
    "end": 5465326,
    "text": "そのためにこの段落を条件付きで出力する。"
  },
  {
    "start": 5465518,
    "end": 5472740,
    "text": "まず、データが存在するかどうか、存在する場合はメッセージがあるかどうかをチェックする。"
  },
  {
    "start": 5474070,
    "end": 5479800,
    "text": "その場合は、ここにデータメッセージを出力する。"
  },
  {
    "start": 5480330,
    "end": 5483080,
    "text": "そうでなければ、何も出力しない。"
  },
  {
    "start": 5483690,
    "end": 5487320,
    "text": "これはすべてデフォルトのJavaScript JSXコードです。"
  },
  {
    "start": 5488670,
    "end": 5506080,
    "text": "それを保存して、ここに戻って、短すぎるテストとどうでもいいことを入力して、ノードの追加をクリックすると、アクション・データを使用しているため、予想通りのエラー・メッセージが表示されます。"
  },
  {
    "start": 5507010,
    "end": 5522580,
    "text": "代わりに十分な長さのtestノードを追加すると、正しく追加され、メッセージが消えます。これは、アクションが再度呼び出されて成功し、エラーデータの代わりにリダイレクトを返したためです。"
  },
  {
    "start": 5523510,
    "end": 5536310,
    "text": "アクションはデータも返すことができ、そのデータはuseアクションデータで取得できること、useアクションデータはuseローダーデータと同様、どのコンポーネントでも呼び出せることを理解することが重要です。"
  },
  {
    "start": 5536650,
    "end": 5537750,
    "text": "この時点ではね。"
  },
  {
    "start": 5537820,
    "end": 5543450,
    "text": "すでに順調に進んでおり、このエッセンス・セクションはほぼ終了した。"
  },
  {
    "start": 5543950,
    "end": 5553022,
    "text": "しかし、まだいくつかの重要な機能が欠けており、そのひとつがエラー処理である。"
  },
  {
    "start": 5553076,
    "end": 5563230,
    "text": "例えば、私たちのアクションでは、データを保存しているファイルやデータベースが一時的に利用できなくなったり、容量オーバーになったりする可能性がある。"
  },
  {
    "start": 5563380,
    "end": 5565278,
    "text": "データの保存に失敗する可能性がある。"
  },
  {
    "start": 5565374,
    "end": 5568050,
    "text": "もちろん、データの読み取りも失敗する可能性がある。"
  },
  {
    "start": 5568870,
    "end": 5576994,
    "text": "これをシミュレートするために、このファイルを削除することもできるが、ここでは削除せずに名前を変えて、もう見つからないようにする。"
  },
  {
    "start": 5577122,
    "end": 5586150,
    "text": "拡張子の末尾のnを削除したので、このファイル、つまり探しているノードJSONファイルはもう存在しません。"
  },
  {
    "start": 5587130,
    "end": 5600890,
    "text": "したがって、これを保存してリロードすると、サーバーがクラッシュしたか、少なくともエラーが発生したために、この醜いエラー・ページが表示される。"
  },
  {
    "start": 5601310,
    "end": 5605022,
    "text": "通常、デフォルトのエラーページは使いたくないものだ。"
  },
  {
    "start": 5605076,
    "end": 5610110,
    "text": "その代わりに、あなた自身のエラーページを表示したいのでしょう。"
  },
  {
    "start": 5610530,
    "end": 5620498,
    "text": "例えば、このルート・コンポーネントに行き、そこで別の新しい関数をエクスポートすることができる。"
  },
  {
    "start": 5620584,
    "end": 5623490,
    "text": "実は、ここでエクスポートしているのはコンポーネントなのだ。"
  },
  {
    "start": 5623560,
    "end": 5626180,
    "text": "したがって、大文字のeで始まる。"
  },
  {
    "start": 5627110,
    "end": 5634470,
    "text": "これは特別な機能、特別なコンポーネントであり、リンクやアクションなどと同じように、このような名前をつけなければならない。"
  },
  {
    "start": 5634540,
    "end": 5636262,
    "text": "リミックスはこれを探すだろう。"
  },
  {
    "start": 5636396,
    "end": 5641834,
    "text": "これは、アプリケーションのどこかでエラーが発生した場合にリミックスが表示するコンポーネントです。"
  },
  {
    "start": 5641952,
    "end": 5650042,
    "text": "ここではルート・コンポーネントで行っているので、すぐに他のページにも追加する方法をお見せします。"
  },
  {
    "start": 5650096,
    "end": 5652350,
    "text": "ここでは、ルート・コンポーネントでそれを行う。"
  },
  {
    "start": 5653170,
    "end": 5662030,
    "text": "そこでHTMLの雛形を返したい。"
  },
  {
    "start": 5662100,
    "end": 5665042,
    "text": "例えば、ここにタイトルを追加する。"
  },
  {
    "start": 5665096,
    "end": 5669214,
    "text": "このスケルトンに、デフォルトのHTML要素を追加することができる。"
  },
  {
    "start": 5669342,
    "end": 5674770,
    "text": "ここで、headにタイトルを追加し、エラーが発生したということにする。"
  },
  {
    "start": 5675930,
    "end": 5679670,
    "text": "それなら、ここでメインナビゲーションを出力すればいい。"
  },
  {
    "start": 5679740,
    "end": 5694460,
    "text": "アウトレットの代わりにメイン・セクションを出力し、そこにエラー発生のテキストを含むh要素を1つ、その下にエラー・メッセージを出力する。"
  },
  {
    "start": 5695310,
    "end": 5702880,
    "text": "さて、この特別なコンポーネントは常にエラー・プロップを取得する。このエラー・プロップは、次のようにオブジェクトのデストラクチャリングで取得できる。"
  },
  {
    "start": 5703250,
    "end": 5713230,
    "text": "なぜなら、エラーが発生したときにリミックスがこのコンポーネントを作成するからです。"
  },
  {
    "start": 5713830,
    "end": 5716834,
    "text": "これはデフォルトのJavaScriptエラーオブジェクトです。"
  },
  {
    "start": 5716952,
    "end": 5728440,
    "text": "このエラープロパティの値は、デフォルトのJavaScriptエラーオブジェクトコンストラクタに基づくオブジェクトです。"
  },
  {
    "start": 5729530,
    "end": 5739530,
    "text": "さらに、安全性に戻るようなテキストを追加することもできるし、安全性はリンク・コンポーネントによってラップされるべきかもしれない。"
  },
  {
    "start": 5739950,
    "end": 5756014,
    "text": "このデフォルトのリミックス・リンク・コンポーネントは、リミックス・ラン・リアクトからインポートする必要がある。"
  },
  {
    "start": 5756052,
    "end": 5760158,
    "text": "これを保存してリロードすると、エラー・ページが表示される。"
  },
  {
    "start": 5760244,
    "end": 5772530,
    "text": "おわかりのように、スタイリングが少し崩れているが、これはmainに特別なクラスを追加することで修正できる。"
  },
  {
    "start": 5773270,
    "end": 5781720,
    "text": "もちろん安全な場所に戻ることはできるが、ノートに戻るとまたクラッシュしてしまう。"
  },
  {
    "start": 5782170,
    "end": 5788890,
    "text": "このエラー・バウンダリーを使えば、独自のエラー・ページやエラー・コンポーネントを追加することができる。"
  },
  {
    "start": 5789310,
    "end": 5793590,
    "text": "しかし、これをルート・コンポーネントに追加するだけに限定されるわけではない。"
  },
  {
    "start": 5793750,
    "end": 5799850,
    "text": "その代わりに、この特別なエラー境界コンポーネントを任意のルートファイルに追加することができます。"
  },
  {
    "start": 5800190,
    "end": 5805674,
    "text": "ルート・コンポーネントにしかない場合、これは単にどこで発生したエラーもすべて処理する。"
  },
  {
    "start": 5805802,
    "end": 5810240,
    "text": "いわばエラーキャッチの最終手段だ。"
  },
  {
    "start": 5810690,
    "end": 5818546,
    "text": "もし、このノートルートでうまくいかない可能性があることが分かっているなら、ここに別のエラー境界を追加することは理にかなっているかもしれない。"
  },
  {
    "start": 5818648,
    "end": 5823666,
    "text": "であれば、この特定のページに合わせたコンテンツを返すことができる。"
  },
  {
    "start": 5823848,
    "end": 5839558,
    "text": "ルートルートでないルートにエラー境界がある場合、失敗したルートのコンテンツだけがエラー境界によって置き換えられるということです。"
  },
  {
    "start": 5839734,
    "end": 5843210,
    "text": "このページのコンテンツだけが置き換えられる。"
  },
  {
    "start": 5843550,
    "end": 5856030,
    "text": "ノードJSXにエラー境界がある場合、このエラー境界コンポーネントが返すコンテンツが、アウトレットの代わりにデフォルトのスケルトンに注入されます。"
  },
  {
    "start": 5856850,
    "end": 5869890,
    "text": "したがって、この部分をコピーして、ルート・エラー・アウトレットのこの部分だけをここに追加し、このエラー境界の一部として返すことができる。"
  },
  {
    "start": 5870870,
    "end": 5876870,
    "text": "あとは、自動的に取得されるこのエラー・プロップを再び使うようにするだけだ。"
  },
  {
    "start": 5878170,
    "end": 5888746,
    "text": "このリンクもリミックスからインポートしなければならない。"
  },
  {
    "start": 5888848,
    "end": 5901738,
    "text": "というのも、このエラー・バウンダリーを実際に使っているからだ。"
  },
  {
    "start": 5901834,
    "end": 5912160,
    "text": "例えば、\"error occurred \"を \"notes occurred \"に置き換えてください。"
  },
  {
    "start": 5912690,
    "end": 5918740,
    "text": "このメッセージが表示されるのは、このエラー境界が使用されているからだ。"
  },
  {
    "start": 5919910,
    "end": 5924318,
    "text": "それが、エラーへの対処の仕方であり、エラーへの対処のしやすさなのだ。"
  },
  {
    "start": 5924414,
    "end": 5931286,
    "text": "コンポーネント内でエラー状態を管理したり、エラーがあるかどうかをチェックしたりする必要はない。"
  },
  {
    "start": 5931388,
    "end": 5944540,
    "text": "このフォールバックコンポーネントを定義するだけで、このルートでエラーが発生するたびに、あるいはルートコンポーネントの場合はアプリケーションのルートルートのどこかでエラーが発生するたびに、自動的にレンダリングされます。"
  },
  {
    "start": 5945470,
    "end": 5954458,
    "text": "エラーバウンダリーは非常に重要で、エラーをうまく処理するのに役立つが、実際には通常のエラーにしか対処できない。"
  },
  {
    "start": 5954554,
    "end": 5960400,
    "text": "フルスタックのアプリケーションの場合に発生する可能性のある別の種類のエラーがある。"
  },
  {
    "start": 5960930,
    "end": 5965810,
    "text": "バックエンドからエラー・レスポンスが生成されている可能性があります。"
  },
  {
    "start": 5966310,
    "end": 5972562,
    "text": "その違いが何であるかを示すために、実際にエラー・レスポンスを生成してみよう。"
  },
  {
    "start": 5972616,
    "end": 5980358,
    "text": "このnodes Jsxに戻ると、まだノードが見つからない場合、何らかのエラー・レスポンスを生成したいと言える。"
  },
  {
    "start": 5980524,
    "end": 5988102,
    "text": "もしかしたらノードがないかもしれないし、ノードの長さが0に等しい、つまりまだノードがないのかもしれない。"
  },
  {
    "start": 5988236,
    "end": 5998314,
    "text": "その場合、この空の配列を返すのではなく、メモが見つからなかったので、エラー・レスポンス（たぶん404レスポンス）を生成したい。"
  },
  {
    "start": 5998512,
    "end": 6002462,
    "text": "リミックスでこのようなエラー・レスポンスを生成するのはとても簡単だ。"
  },
  {
    "start": 6002596,
    "end": 6028470,
    "text": "returnではなくthrowキーワードを使い、ランダムなデータを投げるのではなく、node jsとブラウザでサポートされている組み込みのレスポンスオブジェクトをインスタンス化するか、ショートカットを使ってremix run nodeのredirect関数のようにインポートされたJSON関数を使うことでレスポンスを作成します。"
  },
  {
    "start": 6029130,
    "end": 6035080,
    "text": "このJSON関数は、JSONデータを含むレスポンス・オブジェクトを生成するだけである。"
  },
  {
    "start": 6036010,
    "end": 6041398,
    "text": "さて、このJSON関数の最初の引数は、レスポンスに含まれるべきデータである。"
  },
  {
    "start": 6041494,
    "end": 6046134,
    "text": "というメッセージを持つオブジェクトである可能性がある。"
  },
  {
    "start": 6046182,
    "end": 6054698,
    "text": "例えば、このJSON関数に渡す2番目の引数で、このレスポンスをより詳細に設定することができる。"
  },
  {
    "start": 6054864,
    "end": 6064420,
    "text": "例えば、ステータスコードを追加することができ、ここでは404に設定することで、どの種類のレスポンスなのか、どの種類のエラーなのかを明確にすることができる。"
  },
  {
    "start": 6065590,
    "end": 6071860,
    "text": "ステータスのテキストを追加することもできる。"
  },
  {
    "start": 6072790,
    "end": 6080950,
    "text": "これで、レスポンスを投げるたびに、remixはこれを認識し、エラー境界とは別のコンポーネントをレンダリングします。"
  },
  {
    "start": 6081290,
    "end": 6091066,
    "text": "テキストや通常のオブジェクトなど、レスポンス以外のものを投げる場合は、エラー境界が返されるたびに使用される。"
  },
  {
    "start": 6091248,
    "end": 6115390,
    "text": "デフォルトのページコンポーネントが使用され、このJSONヘルパー関数で生成されたレスポンスのようなレスポンスを投げるたびに、別のコンポーネントがレンダリングされます。このコンポーネントは、所属するルートにエクスポートする必要があります。"
  },
  {
    "start": 6116150,
    "end": 6123780,
    "text": "エラー境界と同じように、ルートごとに追加することも、ルートレベルで追加することも、両方行うこともできる。"
  },
  {
    "start": 6124150,
    "end": 6141018,
    "text": "ルートレベルのcatchバウンダリは、アプリケーションの他のどこかで生成された、処理されないすべてのエラーレスポンスをキャッチし、ルート固有のcatchバウンダリは、こことここのルートに関連するすべてのエラーレスポンスを処理します。"
  },
  {
    "start": 6141104,
    "end": 6154030,
    "text": "そしてメイン・ブロックに戻り、このエラー・レスポンスに添付されているメッセージを出力したくなるかもしれないパラグラフを出力するだけだ。"
  },
  {
    "start": 6155090,
    "end": 6167380,
    "text": "そのデータを取得するには、remixが提供するもう一つの特別なフック、use catchフックを使うことができる。"
  },
  {
    "start": 6168710,
    "end": 6176126,
    "text": "さて、この使用キャッチフックは、正確にはコットレスポンスというオブジェクトを与えてくれる。"
  },
  {
    "start": 6176238,
    "end": 6190970,
    "text": "生成されたエラー・レスポンス、正確にはエラー・レスポンスに基づいたオブジェクト、そしてそのオブジェクトで、ステータス・コード、ステータス・テキスト、レスポンスの一部であるデータを得ることができる。"
  },
  {
    "start": 6191310,
    "end": 6203950,
    "text": "基本的に、このJSON関数に渡したものは、コンテンツ、ステータス、ステータステキストです。"
  },
  {
    "start": 6205250,
    "end": 6210560,
    "text": "ここでデータにアクセスし、メッセージ・プロパティを取得することができる。"
  },
  {
    "start": 6211330,
    "end": 6228806,
    "text": "もしデータが存在し、メッセージ・プロパティまたはデータが未定義であれば、単純にdata not foundのような一般的なフォールバック・メッセージを使用し、それをメッセージ定数に格納し、戻り値に出力することができます。"
  },
  {
    "start": 6228908,
    "end": 6239130,
    "text": "このコンポーネントは、このルートに関連するアクションやローダーによってエラーレスポンスが投げられるたびに、remixによってレンダリングされるようになります。"
  },
  {
    "start": 6241310,
    "end": 6255120,
    "text": "これを保存し、ノードのJsonファイル名をもう一度修正し、このファイルからすべてのノードを削除してノードがない状態にしてから、もう一度すべてを保存する。"
  },
  {
    "start": 6256690,
    "end": 6267460,
    "text": "リロードしてみると、could not find any notesというエラーメッセージが表示される。"
  },
  {
    "start": 6269350,
    "end": 6269714,
    "text": "今すぐだ。"
  },
  {
    "start": 6269752,
    "end": 6280550,
    "text": "スタイリングは良くないが、この段落に特別なクラス、info messageクラスを追加することで簡単に修正できる。"
  },
  {
    "start": 6281210,
    "end": 6283400,
    "text": "これでかなり良くなった。"
  },
  {
    "start": 6284010,
    "end": 6306622,
    "text": "もちろん、ここでノードを追加できないという問題が発生します。フォームがなくなってしまったからです。したがって、このコンポーネント、このキャッチ・バウンダリー・コンポーネントでは、新しいノードを追加できるように、新しいノード・フォームを出力することもできます。"
  },
  {
    "start": 6306676,
    "end": 6310654,
    "text": "さて、このエラー・レスポンスもここで処理された。"
  },
  {
    "start": 6310852,
    "end": 6321074,
    "text": "このエラーレスポンスハンドリングは、ルートルートで再度使用することで、他では処理されないすべてのエラーレスポンスに対して、汎用的なスケルトンを返すこともできます。"
  },
  {
    "start": 6321192,
    "end": 6336790,
    "text": "最も重要なことは、ユーザーが無効なURLを入力した場合、例えばlocalhost 3000にアクセスしようとすると、ABCリミックスは自動的にエラーレスポンスを生成することです。"
  },
  {
    "start": 6337210,
    "end": 6340582,
    "text": "しかし、その場合、エラー・レスポンスも処理しなければならない。"
  },
  {
    "start": 6340726,
    "end": 6346438,
    "text": "そのために、ルートjsxファイルのこのcatch境界でcatchを使うこともできる。"
  },
  {
    "start": 6346614,
    "end": 6379000,
    "text": "もちろん、remix run reactからcatchを使ってインポートし、catchされたレスポンスを取得し、catchされたレスポンスのステータス・テキストをこことここにタイトルとして使い、カード・レスポンスのデータ・メッセージがあるかどうかをチェックする。"
  },
  {
    "start": 6381610,
    "end": 6384022,
    "text": "それはここで出力できるものだ。"
  },
  {
    "start": 6384156,
    "end": 6387954,
    "text": "また、ルートJSxファイルには、このようなキャッチボールがある。"
  },
  {
    "start": 6388002,
    "end": 6396410,
    "text": "今、サポートされていないページにアクセスしようとすると、先ほど追加したキャッチバウンダリーのせいで、このページが表示される。"
  },
  {
    "start": 6396830,
    "end": 6402714,
    "text": "これでメモを追加し、エラーを処理することができるようになり、このアプリケーション全体が形になってきた。"
  },
  {
    "start": 6402762,
    "end": 6406670,
    "text": "リミックスについても、すでにかなり学んでいる。"
  },
  {
    "start": 6407570,
    "end": 6414446,
    "text": "ひとつだけ重要な機能が欠けている。それは間違いなく、この必需品のセクションでも取り上げなければならないものだ。"
  },
  {
    "start": 6414548,
    "end": 6416686,
    "text": "それはダイナミック・ルートだ。"
  },
  {
    "start": 6416798,
    "end": 6419300,
    "text": "さて、ダイナミック・ルートとは何だろう？"
  },
  {
    "start": 6420070,
    "end": 6422222,
    "text": "現時点では2つのルートがある。"
  },
  {
    "start": 6422366,
    "end": 6429326,
    "text": "では、これらのノードをクリックできるようにして、ノードの詳細をフルスクリーンモードで表示したいとしよう。"
  },
  {
    "start": 6429358,
    "end": 6430886,
    "text": "もしクリックしたら"
  },
  {
    "start": 6431068,
    "end": 6435154,
    "text": "となると、これらのノードの詳細を表示する新しいルートが必要になる。"
  },
  {
    "start": 6435282,
    "end": 6442246,
    "text": "もちろん、同じルートで1つ、同じコンポーネントで1つ、すべてのノードで同じページで1つになる。"
  },
  {
    "start": 6442278,
    "end": 6450380,
    "text": "複数のノードがある場合、リミックスは2つ目のノードとして本当に素晴らしい。"
  },
  {
    "start": 6450750,
    "end": 6456638,
    "text": "そしてもちろん、このノードをクリックしたら、フルスクリーンページでこのノードの詳細を見たい。"
  },
  {
    "start": 6456724,
    "end": 6459546,
    "text": "最初のノードをクリックすると、その詳細が表示される。"
  },
  {
    "start": 6459658,
    "end": 6462158,
    "text": "ルートは1つだが、内容は異なる。"
  },
  {
    "start": 6462324,
    "end": 6465280,
    "text": "それこそがダイナミック・ルートなのだ。"
  },
  {
    "start": 6466050,
    "end": 6484038,
    "text": "このようなダイナミック・ルートを追加するには、routesフォルダに新しいファイルを追加し、特別なファイル名、ドル記号で始まるファイル名を付けます。"
  },
  {
    "start": 6484124,
    "end": 6487894,
    "text": "idやnoteなど、好きなものだけでもいい。"
  },
  {
    "start": 6488012,
    "end": 6490098,
    "text": "ここではノードIDを使うことにする。"
  },
  {
    "start": 6490284,
    "end": 6496838,
    "text": "ノードIDの前のドル記号は、これがダイナミックルートであることをリミックスに知らせる。"
  },
  {
    "start": 6496934,
    "end": 6510110,
    "text": "ダイナミックルートとは、単にパスの実際の値がドル記号のノードIDではなく、後にURLでエンコードされる実際の値のプレースホルダとしてのみ機能することを意味します。"
  },
  {
    "start": 6510610,
    "end": 6519730,
    "text": "リアクト・ルーターやExprsjs、あるいは他の多くのルーティング・ライブラリーから、このダイナミック・ルートの概念をすでに知っている人も多いだろう。"
  },
  {
    "start": 6519880,
    "end": 6528778,
    "text": "このドル記号のノードIDのJSxファイルでは、デフォルトの関数をエクスポートする必要がある。"
  },
  {
    "start": 6528814,
    "end": 6531720,
    "text": "ページ名はもちろん、ご存知のようにあなた次第だ。"
  },
  {
    "start": 6532090,
    "end": 6534994,
    "text": "そこでマークアップを返したい。"
  },
  {
    "start": 6535122,
    "end": 6553322,
    "text": "私はノードの詳細のidを持つメイン要素を返したいのですが、その要素にはヘッダーが含まれていて、その中にナビ要素があり、remix run reactからインポートしたリンクがノードを指しています。"
  },
  {
    "start": 6553386,
    "end": 6562750,
    "text": "このリンクに「すべてのノードに戻る」というラベルを付けることができる。"
  },
  {
    "start": 6563410,
    "end": 6571118,
    "text": "そして、このnav要素の下に、ノードのタイトルを出力したいh要素を1つ持っている。"
  },
  {
    "start": 6571214,
    "end": 6573166,
    "text": "これは実際にダイナミックであるべきだ。"
  },
  {
    "start": 6573198,
    "end": 6574820,
    "text": "すぐに交換されるだろう。"
  },
  {
    "start": 6575590,
    "end": 6585960,
    "text": "ヘッダーの下には、ノードの詳細コンテンツのidを持つ段落を置きたい。"
  },
  {
    "start": 6586490,
    "end": 6596970,
    "text": "というのも、node detail cssファイルも添付されているので、stylesフォルダに移動する必要があるからだ。"
  },
  {
    "start": 6598190,
    "end": 6627890,
    "text": "そして、node id Jsxファイル（ドル記号のnode id jsxファイル）で、例えばこのようにcssファイルをインポートして、先ほど学んだ特別なリンク機能をエクスポートして、インポートしたスタイルを単純に読み込むスタイルシートリンクを1つ用意し、ページ固有のスタイルを読み込むようにします。"
  },
  {
    "start": 6629270,
    "end": 6633190,
    "text": "これは私のノードの詳細ページだが、もちろんデータは欠落している。"
  },
  {
    "start": 6634090,
    "end": 6646618,
    "text": "さて、足りないデータを追加する前に、このページに到達できることを確認しよう。このページは登録されたルートなので、すでに到達できる。"
  },
  {
    "start": 6646784,
    "end": 6649420,
    "text": "ノードではなく、ノード1だ。"
  },
  {
    "start": 6650270,
    "end": 6657838,
    "text": "404エラーの代わりに、ノードの詳細ページが表示される。"
  },
  {
    "start": 6658004,
    "end": 6666130,
    "text": "この値ノード1はremixによってこのノードIDプレースホルダーの値として解釈される。"
  },
  {
    "start": 6666710,
    "end": 6671090,
    "text": "このドルマークは、リミックスに「これはプレースホルダーだ」と告げるものだ。"
  },
  {
    "start": 6671910,
    "end": 6678440,
    "text": "AbCを含め、ここに入力したものはすべて、このノードIDの値として扱われる。"
  },
  {
    "start": 6678810,
    "end": 6681090,
    "text": "まだノードに入ることはできる。"
  },
  {
    "start": 6681170,
    "end": 6692154,
    "text": "Remixは賢いので、パス・ノードには専用のルートがあるが、それ以外のものは基本的にこのノードIDの値として扱われることを理解している。"
  },
  {
    "start": 6692352,
    "end": 6695530,
    "text": "そうすれば、このようなダイナミックなルートを登録することができる。"
  },
  {
    "start": 6696190,
    "end": 6724352,
    "text": "動的に移動するには、ノードリストJSX要素に移動し、remix run reactからインポートしたlinkコンポーネントでこの記事をラップし、閉じタグをここに移動し、このリンクの2つのpropを、この詳細ページをロードしたいノードIDにポイントする。"
  },
  {
    "start": 6724406,
    "end": 6733220,
    "text": "つまり、これを動的な値に設定し、ノードIdをそのまま値として使うことにする。"
  },
  {
    "start": 6733290,
    "end": 6745136,
    "text": "つまり、ここにノード1のようなものを入力すると、現在アクティブなパスの後にこれが自動的に追加される。"
  },
  {
    "start": 6745328,
    "end": 6750920,
    "text": "先頭にスラッシュをつけると、代わりに絶対パスになる。"
  },
  {
    "start": 6750990,
    "end": 6762248,
    "text": "新しいフラグメントをここに追加するだけで、リンクとリミックスが自動的に現在アクティブなパスに追加してくれるので、長いパスを簡単に構築するのに便利だ。"
  },
  {
    "start": 6762424,
    "end": 6779900,
    "text": "つまり、これを保存し、これをクリックすると、スラッシュ・ノートに移動しようとし、そしてこのIDが追加される。"
  },
  {
    "start": 6779980,
    "end": 6784310,
    "text": "ここではスラッシュ・ノートを使っているので、この後にidが追加される。"
  },
  {
    "start": 6785000,
    "end": 6788070,
    "text": "これではノードにたどり着けないので、2つの選択肢がある。"
  },
  {
    "start": 6788440,
    "end": 6803820,
    "text": "このファイルの名前を変更して、スラッシュ・ノードで始まるようにするか、リンクを変更して絶対パスに変換する。"
  },
  {
    "start": 6804880,
    "end": 6808348,
    "text": "しかし、ここではむしろこのルート名を変更する。"
  },
  {
    "start": 6808514,
    "end": 6824640,
    "text": "このドル記号のノードID部分の前にノード・ドットを追加することで、このダイナミック・セグメントの前に先頭の音符を追加することができます。これは少し奇妙に見えるかもしれませんが、remix jsを使用する際には有効なコードです。"
  },
  {
    "start": 6825140,
    "end": 6835220,
    "text": "これは単に、パスがnodesumdynamicsegmentの場合、ここのディスクルートをロードするようにremixに指示します。"
  },
  {
    "start": 6837320,
    "end": 6846708,
    "text": "このファイル名をこのように変更すると、ノードのスラッシュnodesdidに対してノード詳細ページがロードされることがわかる。"
  },
  {
    "start": 6846804,
    "end": 6854170,
    "text": "一方、3000ノードのlocalhostにアクセスしようとすると、基本的に404ページが表示される。"
  },
  {
    "start": 6855280,
    "end": 6861820,
    "text": "これがノードの詳細ページをロードする方法であり、リミックスでダイナミックルートが機能する一般的な方法です。"
  },
  {
    "start": 6862240,
    "end": 6883190,
    "text": "ノードの詳細ページのデータをロードするには、前に見た別の関数、loader関数を呼び出します。"
  },
  {
    "start": 6884200,
    "end": 6888484,
    "text": "繰り返しますが、リミックスはこのページをロードしようとすると、自動的にこの処理を実行します。"
  },
  {
    "start": 6888602,
    "end": 6896184,
    "text": "ここで、ノートJSONファイルにアクセスし、このウェブサイトの適切なノートを取得したい。"
  },
  {
    "start": 6896222,
    "end": 6905224,
    "text": "このページでは、データ・ノードからインポートしたgetstored notesヘルパー関数を使用しています。"
  },
  {
    "start": 6905272,
    "end": 6912632,
    "text": "dataフォルダーにあるこのノートjsファイルから、前に学んだように、これはプロミスを返す。"
  },
  {
    "start": 6912696,
    "end": 6917672,
    "text": "ここでasync awaitを使い、ノートを手に入れる。"
  },
  {
    "start": 6917736,
    "end": 6919920,
    "text": "ここではもちろん、すべてのノードを獲得する。"
  },
  {
    "start": 6920420,
    "end": 6927564,
    "text": "もしこれが本物のデータベースなら、おそらくデータベースから単一のエントリーをフェッチする専用の関数があるだろう。"
  },
  {
    "start": 6927692,
    "end": 6931040,
    "text": "ここでは、代わりにそのファイルからすべてのエントリーをフェッチしている。"
  },
  {
    "start": 6931120,
    "end": 6935696,
    "text": "ノードに移動して、選択したノードを見つけたい。"
  },
  {
    "start": 6935808,
    "end": 6949544,
    "text": "配列に存在するデフォルトのJavascriptメソッドであるfindメソッドを使って、idがURLの一部であるidと等しいノードを見つけることができる。"
  },
  {
    "start": 6949742,
    "end": 6953240,
    "text": "そのローダーのIDをどうやって入手するのか？"
  },
  {
    "start": 6954240,
    "end": 6965828,
    "text": "アクション関数と同じように、このローダー関数もリミックスから渡されたデータオブジェクトを自動的に受け取る。"
  },
  {
    "start": 6965944,
    "end": 6971360,
    "text": "このオブジェクトは、取得リクエストの詳細を持つリクエストプロパティも持っています。"
  },
  {
    "start": 6971940,
    "end": 6979548,
    "text": "ここでさらに重要なのは、ダイナミックルートのパラメータに関する情報を持つparamsプロパティも持っていることだ。"
  },
  {
    "start": 6979644,
    "end": 6983908,
    "text": "このIDのようなダイナミック・パス・セグメントだ。"
  },
  {
    "start": 6984074,
    "end": 6999000,
    "text": "基本的に、ルートファイル名にドル記号がある場合、ドル記号の後の部分はParamsオブジェクトの一部で、このプレースホルダはURLのこのプレースホルダに格納されている実際の値にアクセスするために使用できます。"
  },
  {
    "start": 6999420,
    "end": 7004696,
    "text": "ちなみに、このparamsオブジェクトはアクションでも使用可能である。"
  },
  {
    "start": 7004798,
    "end": 7005604,
    "text": "ここではそうではない。"
  },
  {
    "start": 7005652,
    "end": 7015150,
    "text": "もし、動的なパスセグメントを持つページに対してもアクションを実行するのであれば、ここでもアクションのparamsオブジェクトにアクセスできる。"
  },
  {
    "start": 7016240,
    "end": 7018188,
    "text": "ここではローダーに必要だ。"
  },
  {
    "start": 7018284,
    "end": 7022130,
    "text": "私はこのparamsオブジェクトを取得するためにオブジェクトのデストラクチャリングを使っている。"
  },
  {
    "start": 7022740,
    "end": 7034870,
    "text": "というのは、ドル記号の後にノードIDを選んだからだ。"
  },
  {
    "start": 7037000,
    "end": 7040676,
    "text": "ドル記号の後に別の識別子を選んだ場合。"
  },
  {
    "start": 7040778,
    "end": 7043770,
    "text": "ここでも別の識別子を使わなければならない。"
  },
  {
    "start": 7044780,
    "end": 7046488,
    "text": "僕にとってはノードIDだけどね。"
  },
  {
    "start": 7046574,
    "end": 7056220,
    "text": "したがって、このチェックでは、URLの一部であるノードIDと等しいIDを持つノードがあるかどうかをチェックする。"
  },
  {
    "start": 7056960,
    "end": 7060700,
    "text": "そして、そのノードを返し、この定数に格納しようとする。"
  },
  {
    "start": 7061280,
    "end": 7065100,
    "text": "従って、この選択されたノードをローダーに返すことができる。"
  },
  {
    "start": 7066000,
    "end": 7074800,
    "text": "ノードの詳細ページでは、remix run reactからインポートされたuse loaderデータを使って、再びそのデータにアクセスできる。"
  },
  {
    "start": 7076180,
    "end": 7092010,
    "text": "このようにノード・タイトルにアクセスしてノードのタイトルを出力し、ノード・コンテンツにアクセスしてコンテンツを追加することができる。"
  },
  {
    "start": 7094460,
    "end": 7098984,
    "text": "リロードすれば、具体的なデータが得られる。"
  },
  {
    "start": 7099102,
    "end": 7102520,
    "text": "リミックスで2番目のノードをクリックすると、すごいことになる。"
  },
  {
    "start": 7102670,
    "end": 7104796,
    "text": "ここでもそうだ。"
  },
  {
    "start": 7104978,
    "end": 7111180,
    "text": "これが、URLに動的な値を持つ動的ルートの動的データをフェッチする方法です。"
  },
  {
    "start": 7112000,
    "end": 7124000,
    "text": "さて、このダイナミック・ルートにデータをロードしているとき、ユーザーが存在しないノードIDでこのページにアクセスしようとするシナリオももちろんあり得る。"
  },
  {
    "start": 7124420,
    "end": 7129600,
    "text": "この場合、デフォルトのエラー・ハンドラが有効になる。"
  },
  {
    "start": 7130100,
    "end": 7135184,
    "text": "これはよくあるシナリオなので、ここは自分たちで対処したほうがいいかもしれない。"
  },
  {
    "start": 7135232,
    "end": 7138230,
    "text": "私たちがこの問題を抱えていることは容易に想像できる。"
  },
  {
    "start": 7139080,
    "end": 7150730,
    "text": "したがって、このダイナミックルートのローダーでは、選択されたノードが定義されていないかどうかをチェックすることができます。"
  },
  {
    "start": 7151340,
    "end": 7162140,
    "text": "その場合、remix run nodeからインポートしたユーティリティ・ヘルパーjson関数の助けを借りて、エラー・レスポンスを投げることができる。"
  },
  {
    "start": 7163760,
    "end": 7180790,
    "text": "そこで、Idのノードが見つからなかったというメッセージを持つオブジェクトを追加して、ユーザーがアクセスしようとしたノードIDを繰り返し、ステータスコード404を与えることができる。"
  },
  {
    "start": 7183080,
    "end": 7185696,
    "text": "今またエラー・レスポンスを投げている。"
  },
  {
    "start": 7185728,
    "end": 7189296,
    "text": "以前学んだように、これがキャッチボール・バウンダリーのトリガーとなる。"
  },
  {
    "start": 7189408,
    "end": 7196520,
    "text": "このルートに追加するキャッチバウンダリーのどちらかだが、もしこれをしなければ、ルートのキャッチバウンダリーとなる。"
  },
  {
    "start": 7197260,
    "end": 7201652,
    "text": "ここでは、専用のキャッチバウンダリーは設けない。"
  },
  {
    "start": 7201796,
    "end": 7213816,
    "text": "その代わりに、ルート・コンポーネントからデフォルトのエラー・ハンドラ、デフォルトのキャッチ・バウンダリーが、これらの重要なコア機能の後に出てくるのだ。"
  },
  {
    "start": 7213928,
    "end": 7226796,
    "text": "最後に、このセクションの締めくくりとして、メタデータと、ページにメタデータを追加する方法について知っておく必要があります。"
  },
  {
    "start": 7226908,
    "end": 7230488,
    "text": "はっきりさせておきたいのだが、メタデータとは具体的に何を指すのだろうか？"
  },
  {
    "start": 7230604,
    "end": 7238576,
    "text": "例えば、タブバーに表示されるタイトルや、グーグルの検索結果にも表示されるタイトルのことだ。"
  },
  {
    "start": 7238768,
    "end": 7245800,
    "text": "また、ここに表示される説明文や、ページに追加したい他のメタデータの束も意味する。"
  },
  {
    "start": 7246460,
    "end": 7251850,
    "text": "リミックスを使ったページにこのようなメタデータを追加するのは、これまた非常に簡単で単純だ。"
  },
  {
    "start": 7252300,
    "end": 7258748,
    "text": "例えば、JsXノートでは、新しい関数をエクスポートするだけです。"
  },
  {
    "start": 7258914,
    "end": 7265710,
    "text": "ちなみに、このファイルのどこに関数をエクスポートするかは問題ではない。"
  },
  {
    "start": 7266080,
    "end": 7271440,
    "text": "リンク関数の後に、メタと呼ばれる別の関数をエクスポートしようかな。"
  },
  {
    "start": 7271780,
    "end": 7275996,
    "text": "この関数は、ルートjsxファイルで見たことがあるかもしれない。"
  },
  {
    "start": 7276028,
    "end": 7278950,
    "text": "実際、そのようなメタ機能もすでにある。"
  },
  {
    "start": 7280120,
    "end": 7288688,
    "text": "metaはJavaScriptオブジェクトを返す関数で、このオブジェクトにさまざまなメタデータ・フィールドを設定することができる。"
  },
  {
    "start": 7288864,
    "end": 7294772,
    "text": "ここで、利用可能なフィールドとメタがどのように機能するかについて、公式ドキュメントでもう少し詳しく説明する。"
  },
  {
    "start": 7294916,
    "end": 7306110,
    "text": "例えば、titleフィールドを追加して、ページのタイトルを設定することができます。このタイトルは、検索結果やタブバーのタイトルとして表示されます。"
  },
  {
    "start": 7306800,
    "end": 7309208,
    "text": "ここでは、たとえばすべての音符を指す。"
  },
  {
    "start": 7309304,
    "end": 7318444,
    "text": "このメモのページでは、ここに説明を追加することもでき、簡単にメモを管理することができる。"
  },
  {
    "start": 7318492,
    "end": 7319730,
    "text": "こんな感じだ。"
  },
  {
    "start": 7320500,
    "end": 7328556,
    "text": "これで、ページに設定したメタデータは、あなたが定義した上位のページメタデータと統合されます。"
  },
  {
    "start": 7328748,
    "end": 7342520,
    "text": "例えば、ルートページにはメタ機能があり、ここで定義されたデータは、ルートページによってラップされているため、他のページで定義されたメタデータとマージされる。"
  },
  {
    "start": 7342590,
    "end": 7354760,
    "text": "以前学んだように、このタイトルのように、ノードJSXのメタデータとルートJSXのメタデータの両方で定義されているものが衝突した場合、下位のページが勝つ。"
  },
  {
    "start": 7354840,
    "end": 7358024,
    "text": "より具体的なメタデータ定義の方が勝つ。"
  },
  {
    "start": 7358152,
    "end": 7367212,
    "text": "このページのメタデータ定義は、一般的なルート・メタデータよりも優れており、メタデータを追加することができる。"
  },
  {
    "start": 7367356,
    "end": 7376720,
    "text": "これをもう一度保存すると、この全ノート・ページのタイトルが「全ノート」となっていることに気づくだろう。"
  },
  {
    "start": 7377140,
    "end": 7385716,
    "text": "他のページに書いてあるような新しいリミックス・アプリの代わりに、この機能をコピーしてメタデータを追加することもできる。"
  },
  {
    "start": 7385818,
    "end": 7395128,
    "text": "このダイナミック・ルートをシンプルに保つために、もちろんダイナミック・データにアクセスすることもある。"
  },
  {
    "start": 7395294,
    "end": 7400360,
    "text": "例えば、ここでのタイトルは、おそらく表示されるノードのタイトルであるべきだ。"
  },
  {
    "start": 7400780,
    "end": 7408744,
    "text": "他の多くの関数と同様に、メタ関数はリミックスから提供されたデータオブジェクトを自動的に受け取るので、これも非常に簡単だ。"
  },
  {
    "start": 7408872,
    "end": 7411950,
    "text": "例えば、そのオブジェクトはデータ・プロパティを持っている。"
  },
  {
    "start": 7412560,
    "end": 7418844,
    "text": "さて、これはデータオブジェクト全体ではなく、リミックスが提供するオブジェクトのプロパティである。"
  },
  {
    "start": 7418972,
    "end": 7420370,
    "text": "それがデータというものだ。"
  },
  {
    "start": 7420740,
    "end": 7433030,
    "text": "このデータ・プロパティは、ローダーから返されるデータを保持します。この場合、私たちが選択したノードが、この関数のこのデータ・プロパティに格納されます。"
  },
  {
    "start": 7433960,
    "end": 7444970,
    "text": "というのも、このコンポーネント、このルートでは、dataは単にノードであることがわかっているからです。"
  },
  {
    "start": 7445900,
    "end": 7450632,
    "text": "例えば、paramsそのものにアクセスする必要がある場合は、ここでparamsにアクセスすることもできる。"
  },
  {
    "start": 7450766,
    "end": 7459128,
    "text": "ここでは、最終的なデータに興味があるだけで、特定のノードのタイトルをページ・タイトルとして設定している。"
  },
  {
    "start": 7459304,
    "end": 7467308,
    "text": "したがって、これらのノードのひとつにアクセスすると、このページタイトルが適切に調整されていることがわかる。"
  },
  {
    "start": 7467404,
    "end": 7469216,
    "text": "ここではそのリミックスが素晴らしい。"
  },
  {
    "start": 7469398,
    "end": 7472320,
    "text": "もう一方のノードは新しいノードである。"
  },
  {
    "start": 7474420,
    "end": 7477760,
    "text": "これが、ページにメタデータを追加する方法だ。"
  },
  {
    "start": 7478200,
    "end": 7489204,
    "text": "これで、Remixを構成する重要な機能、そしてRemixを素晴らしいものにしている核となるコンセプトはすべてご理解いただけたと思います。"
  },
  {
    "start": 7489402,
    "end": 7498600,
    "text": "remixを使えば、フルスタックのアプリケーションやフルスタックのウェブサイトを構築したり、バックエンドとフロントエンドを融合させたりするのがいかに簡単かを実感できるだろう。"
  },
  {
    "start": 7499100,
    "end": 7504000,
    "text": "今、リミックスにはさらに多くの機能がある。"
  },
  {
    "start": 7504020,
    "end": 7509528,
    "text": "フルコースでは、ルーティングからデータ・フェッチに関連するさらに多くの機能を探求する。"
  },
  {
    "start": 7509624,
    "end": 7514760,
    "text": "リミックスではユーザー認証も簡単に実装できる。"
  },
  {
    "start": 7514840,
    "end": 7519344,
    "text": "このセクションでは、あなたが知っておかなければならない核となる概念について学んだ。"
  },
  {
    "start": 7519542,
    "end": 7527340,
    "text": "特別なroutesフォルダにあるこれらのファイルを使って、ルーティングが一般的にどのように機能するかを学び、ダイナミックルートについて学んだはずだ。"
  },
  {
    "start": 7527500,
    "end": 7536592,
    "text": "データの送信とアクションによるデータ送信の処理、アクションからレスポンスやデータを返す方法について学びました。"
  },
  {
    "start": 7536736,
    "end": 7556910,
    "text": "あなたは、ローダーによるデータ取得と、そのデータがどのようにしてコンポーネントに公開されるのか、アクション関数の場合はuse loader dataまたはuse action dataを使うこと、そして、どのコンポーネントでもuse action dataとuse loader dataを使えば、最も近いアクションデータまたはローダーデータを取得できることを学びました。"
  },
  {
    "start": 7557440,
    "end": 7565176,
    "text": "この特別なフォームコンポーネントと、現在のデータ送信ステータスに基づいてUIを更新できることを学びました。"
  },
  {
    "start": 7565368,
    "end": 7584624,
    "text": "エラー処理について学び、どのようにエラーレスポンスを投げて catch バウンダリをトリガするか、あるいは、通常のエラーを投げてエラーバウンダリをトリガするか、また、 catch やエラーバウンダリは、どのルートにも、あるいは、最後の手段としてルートルートにも追加できることを学びました。"
  },
  {
    "start": 7584672,
    "end": 7596150,
    "text": "つまり、あなたはスタイルとこの特別なリンク機能について学び、コンポーネントからそのコンポーネントが使用されるルートにスタイルを表出させる方法について学びました。"
  },
  {
    "start": 7596600,
    "end": 7604264,
    "text": "このように、リミックス・アプリケーションを作り始めるために必要なコア機能はすべて揃っています。"
  },
  {
    "start": 7604392,
    "end": 7612060,
    "text": "前述したように、本コースではさらに深く掘り下げていきますが、Remixをより深く理解するために必要な、確かな土台を手に入れたことになります。"
  }
]